<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/b221a53496.java"><expr_stmt><expr><name>From</name> <name>b221a5349610150ffbbea6d6c2493c7f32ef8834</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Noble</name> <name><name>Paul</name> <argument_list type="generic">&lt;<argument><name>noble</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">7</literal> <name>Mar</name> <literal type="number">2015</literal> <literal type="number">05</literal><operator>:</operator><literal type="number">55</literal><operator>:</operator><literal type="number">35</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">7073</literal><operator>:</operator> <name>Add</name> <name>an</name> <name>API</name> <name>to</name> <name>add</name> <name>a</name> <name>jar</name> <name>to</name> <name>a</name> <name>collection</name><literal type="char">'s
 classpath

git-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1664797 13f79535-47bb-0310-9956-ffa450edef68
--
 solr/CHANGES.txt                              |   5 +
 .../apache/solr/cloud/RecoveryStrategy.java   |   4 -
 .../org/apache/solr/core/CoreContainer.java   |   5 +-
 ...ginsRegistry.java =&gt; ImplicitPlugins.java} |   3 +-
 .../org/apache/solr/core/JarRepository.java   |  65 +-
 .../org/apache/solr/core/MemClassLoader.java  | 180 +++++
 .../org/apache/solr/core/PluginRegistry.java  | 371 +++++++++++
 .../org/apache/solr/core/RequestHandlers.java | 442 +------------
 .../java/org/apache/solr/core/SolrConfig.java |  30 +-
 .../java/org/apache/solr/core/SolrCore.java   | 617 ++++++------------
 .../solr/handler/RequestHandlerBase.java      |   8 +-
 .../solr/handler/SolrConfigHandler.java       |  21 +-
 .../solr/handler/admin/AdminHandlers.java     |  16 +-
 .../handler/component/SearchComponent.java    |  20 +
 .../org/apache/solr/search/QParserPlugin.java |  65 +-
 .../apache/solr/util/CommandOperation.java    |   4 +-
 .../org/apache/solr/OutputWriterTest.java     |  14 +-
 .../core/BlobStoreTestRequestHandler.java     |  32 +-
 .../core/BlobStoreTestRequestHandlerV2.java   |  68 --
 .../apache/solr/core/RequestHandlersTest.java |   5 +-
 .../apache/solr/core/TestDynamicLoading.java  | 218 +++++--
 .../apache/solr/handler/TestBlobHandler.java  |  15 +-
 .../component/SpellCheckComponentTest.java    |   6 +-
 .../apache/solr/search/QueryEqualityTest.java |   6 +-
 .../solr/search/TestStandardQParsers.java     |  37 +-
 25 files changed, 1139 insertions(+), 1118 deletions(-)
 rename solr/core/src/java/org/apache/solr/core/{PluginsRegistry.java =&gt; ImplicitPlugins.java} (98%)
 create mode 100644 solr/core/src/java/org/apache/solr/core/MemClassLoader.java
 create mode 100644 solr/core/src/java/org/apache/solr/core/PluginRegistry.java
 delete mode 100644 solr/core/src/test/org/apache/solr/core/BlobStoreTestRequestHandlerV2.java

diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index ed6bc9077ef..4eb1c8d1e1c 100644
-- a/solr/CHANGES.txt
++ b/solr/CHANGES.txt
@@ -84,6 +84,9 @@ Upgrading from Solr 5.0
 * The signature of SolrDispatchFilter.createCoreContainer() has changed to take
   (String,Properties) arguments
 
* Deprecated the '</literal><name>lib</name><literal type="char">' option added to create-requesthandler as part of SOLR-6801 in 5.0 release.
  Please use the add-runtimelib command

 Detailed Change List
 ----------------------
 
@@ -136,6 +139,8 @@ New Features
 * SOLR-7155: All SolrClient methods now take an optional '</literal><name>collection</name><literal type="char">' argument
   (Alan Woodward)
 
* SOLR-7073: Support adding a jar to a collections classpath (Noble Paul)

 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java b/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
index 493e35b8c62..7e6bdf668ab 100644
-- a/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
++ b/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
@@ -39,7 +39,6 @@ import org.apache.solr.common.params.UpdateParams;
 import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.CoreDescriptor;
 import org.apache.solr.core.DirectoryFactory.DirContext;
import org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.handler.ReplicationHandler;
 import org.apache.solr.request.LocalSolrQueryRequest;
@@ -146,9 +145,6 @@ public class RecoveryStrategy extends Thread implements ClosableThread {
     
     // use rep handler directly, so we can do this sync rather than async
     SolrRequestHandler handler = core.getRequestHandler(REPLICATION_HANDLER);
    if (handler instanceof LazyRequestHandlerWrapper) {
      handler = ((LazyRequestHandlerWrapper) handler).getWrappedHandler();
    }
     ReplicationHandler replicationHandler = (ReplicationHandler) handler;
     
     if (replicationHandler == null) {
diff --git a/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index 28ef085dea3..580849ae478 100644
-- a/solr/core/src/java/org/apache/solr/core/CoreContainer.java
++ b/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -41,7 +41,6 @@ import org.slf4j.LoggerFactory;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Collection;
import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -108,13 +107,13 @@ public class CoreContainer {
   public static final String COLLECTIONS_HANDLER_PATH = "/admin/collections";
   public static final String INFO_HANDLER_PATH = "/admin/info";
 
  private Map&lt;String, SolrRequestHandler&gt; containerHandlers = new HashMap&lt;&gt;();
  private PluginRegistry&lt;SolrRequestHandler&gt; containerHandlers = new PluginRegistry&lt;&gt;(SolrRequestHandler.class, null);
 
   public SolrRequestHandler getRequestHandler(String path) {
     return RequestHandlerBase.getRequestHandler(path, containerHandlers);
   }
 
  public Map&lt;String, SolrRequestHandler&gt; getRequestHandlers(){
  public PluginRegistry&lt;SolrRequestHandler&gt; getRequestHandlers() {
     return this.containerHandlers;
   }
 
diff --git a/solr/core/src/java/org/apache/solr/core/PluginsRegistry.java b/solr/core/src/java/org/apache/solr/core/ImplicitPlugins.java
similarity index 98%
rename from solr/core/src/java/org/apache/solr/core/PluginsRegistry.java
rename to solr/core/src/java/org/apache/solr/core/ImplicitPlugins.java
index 0b593bf05eb..27009923771 100644
-- a/solr/core/src/java/org/apache/solr/core/PluginsRegistry.java
++ b/solr/core/src/java/org/apache/solr/core/ImplicitPlugins.java
@@ -45,7 +45,7 @@ import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
 import static org.apache.solr.core.PluginInfo.DEFAULTS;
 import static org.apache.solr.core.PluginInfo.INVARIANTS;
 
public class PluginsRegistry {
public class ImplicitPlugins {
 
   public static List&lt;PluginInfo&gt; getHandlers(SolrCore solrCore){
     List&lt;PluginInfo&gt; implicits = new ArrayList&lt;&gt;();
@@ -88,4 +88,5 @@ public class PluginsRegistry {
     Map m = makeMap("name", name, "class", clz.getName());
     return new PluginInfo(SolrRequestHandler.TYPE, m, new NamedList&lt;&gt;(singletonMap(DEFAULTS, new NamedList(defaults))),null);
   }
  public static final String IMPLICIT = "implicit";
 }
diff --git a/solr/core/src/java/org/apache/solr/core/JarRepository.java b/solr/core/src/java/org/apache/solr/core/JarRepository.java
index 8d0ccba9a05..dee1afadd83 100644
-- a/solr/core/src/java/org/apache/solr/core/JarRepository.java
++ b/solr/core/src/java/org/apache/solr/core/JarRepository.java
@@ -24,7 +24,6 @@ import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
@@ -43,7 +42,6 @@ import org.apache.solr.common.cloud.ClusterState;
 import org.apache.solr.common.cloud.DocCollection;
 import org.apache.solr.common.cloud.Replica;
 import org.apache.solr.common.cloud.Slice;
import org.apache.solr.common.cloud.ZkCoreNodeProps;
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.handler.admin.CollectionsHandler;
 import org.apache.solr.util.SimplePostTool;
@@ -76,37 +74,16 @@ public class JarRepository {
   }
 
   /**
   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount
   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount
    *
    * @param key it is a combination of blobname and version like blobName/version
    * @return The reference of a jar
    */
  public JarContentRef getJarIncRef(String key) throws IOException {
  public JarContentRef getJarIncRef(String key) {
     JarContent jar = jars.get(key);
     if (jar == null) {
       if (this.coreContainer.isZooKeeperAware()) {
        ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();
        ClusterState cs = zkStateReader.getClusterState();
        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);
        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, ".system collection not available");
        ArrayList&lt;Slice&gt; slices = new ArrayList&lt;&gt;(coll.getActiveSlices());
        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, "No active slices for .system collection");
        Collections.shuffle(slices, RANDOM); //do load balancing

        Replica replica = null;
        for (Slice slice : slices)  {
          List&lt;Replica&gt; replicas = new ArrayList&lt;&gt;(slice.getReplicasMap().values());
          Collections.shuffle(replicas, RANDOM);
          for (Replica r : replicas) {
            if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {
              replica = r;
              break;
            }
          }
        }
        if (replica == null) {
          throw new SolrException(SERVICE_UNAVAILABLE, ".no active replica available for .system collection");
        }
        Replica replica = getSystemCollReplica();
         String url = replica.getStr(BASE_URL_PROP) + "/.system/blob/" + key + "?wt=filestream";
 
         HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();
@@ -119,6 +96,12 @@ public class JarRepository {
             throw new SolrException(SolrException.ErrorCode.NOT_FOUND, "no such blob or version available: " + key);
           }
           b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());
        } catch (Exception e) {
          if (e instanceof SolrException) {
            throw (SolrException) e;
          } else {
            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, "could not load : " + key, e);
          }
         } finally {
           httpGet.releaseConnection();
         }
@@ -138,6 +121,36 @@ public class JarRepository {
 
   }
 
  private Replica getSystemCollReplica() {
    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();
    ClusterState cs = zkStateReader.getClusterState();
    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);
    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, ".system collection not available");
    ArrayList&lt;Slice&gt; slices = new ArrayList&lt;&gt;(coll.getActiveSlices());
    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, "No active slices for .system collection");
    Collections.shuffle(slices, RANDOM); //do load balancing

    Replica replica = null;
    for (Slice slice : slices) {
      List&lt;Replica&gt; replicas = new ArrayList&lt;&gt;(slice.getReplicasMap().values());
      Collections.shuffle(replicas, RANDOM);
      for (Replica r : replicas) {
        if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {
          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){
            replica = r;
            break;
          } else {
            log.info("replica {} says it is active but not a member of live nodes", r.get(ZkStateReader.NODE_NAME_PROP));
          }
        }
      }
    }
    if (replica == null) {
      throw new SolrException(SERVICE_UNAVAILABLE, ".no active replica available for .system collection");
    }
    return replica;
  }

   /**
    * This is to decrement a ref count
    *
diff --git a/solr/core/src/java/org/apache/solr/core/MemClassLoader.java b/solr/core/src/java/org/apache/solr/core/MemClassLoader.java
new file mode 100644
index 00000000000..6c28dafeeb4
-- /dev/null
++ b/solr/core/src/java/org/apache/solr/core/MemClassLoader.java
@@ -0,0 +1,180 @@
package org.apache.solr.core;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.ByteBuffer;
import java.security.CodeSource;
import java.security.ProtectionDomain;
import java.security.cert.Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;

import org.apache.lucene.analysis.util.ResourceLoader;
import org.apache.solr.common.SolrException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class MemClassLoader extends ClassLoader implements AutoCloseable, ResourceLoader {
  static final Logger log =  LoggerFactory.getLogger(MemClassLoader.class);
  private boolean allJarsLoaded = false;
  private final SolrResourceLoader parentLoader;
  private List&lt;PluginRegistry.RuntimeLib&gt; libs = new ArrayList&lt;&gt;();
  private Map&lt;String, Class&gt; classCache = new HashMap&lt;&gt;();


  public MemClassLoader(List&lt;PluginRegistry.RuntimeLib&gt; libs, SolrResourceLoader resourceLoader) {
    this.parentLoader = resourceLoader;
    this.libs = libs;
  }


  public synchronized void loadJars() {
    if (allJarsLoaded) return;

    for (PluginRegistry.RuntimeLib lib : libs) {
      try {
        lib.loadJar();
      } catch (Exception exception) {
        if (exception instanceof SolrException) throw (SolrException) exception;
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Atleast one runtimeLib could not be loaded", exception);
      }
    }
    allJarsLoaded = true;
  }


  @Override
  protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {
    if(!allJarsLoaded ) loadJars();
    try {
      return parentLoader.findClass(name, Object.class);
    } catch (Exception e) {
      return loadFromRuntimeLibs(name);
    }
  }

  private synchronized  Class&lt;?&gt; loadFromRuntimeLibs(String name) throws ClassNotFoundException {
    Class result = classCache.get(name);
    if(result != null)
      return result;
    AtomicReference&lt;String&gt; jarName = new AtomicReference&lt;&gt;();
    ByteBuffer buf = null;
    try {
      buf = getByteBuffer(name, jarName);
    } catch (Exception e) {
      throw new ClassNotFoundException("class could not be loaded " + name, e);
    }
    if (buf == null) throw new ClassNotFoundException("Class not found :" + name);
    ProtectionDomain defaultDomain = null;
    //using the default protection domain, with no permissions
    try {
      defaultDomain = new ProtectionDomain(new CodeSource(new URL("http://localhost/.system/blob/" + jarName.get()), (Certificate[]) null),
          null);
    } catch (MalformedURLException mue) {
      throw new ClassNotFoundException("Unexpected exception ", mue);
      //should not happen
    }
    log.info("Defining_class {} from runtime jar {} ", name, jarName);

    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);
    classCache.put(name, result);
    return result;
  }

  private ByteBuffer getByteBuffer(String name, AtomicReference&lt;String&gt; jarName) throws Exception {
    if (!allJarsLoaded) {
      loadJars();

    }

    String path = name.replace('</literal><operator>.</operator><literal type="char">', '</literal><operator>/</operator><literal type="char">').concat(".class");
    ByteBuffer buf = null;
    for (PluginRegistry.RuntimeLib lib : libs) {
      try {
        buf = lib.getFileContent(path);
        if (buf != null) {
          jarName.set(lib.name);
          break;
        }
      } catch (Exception exp) {
        throw new ClassNotFoundException("Unable to load class :" + name, exp);
      }
    }

    return buf;
  }

  @Override
  public void close() throws Exception {
    for (PluginRegistry.RuntimeLib lib : libs) {
      try {
        lib.close();
      } catch (Exception e) {
      }
    }
  }

  @Override
  public InputStream openResource(String resource) throws IOException {
    AtomicReference&lt;String&gt; jarName = new AtomicReference&lt;&gt;();
    try {
      ByteBuffer buf = getByteBuffer(resource, jarName);
      if (buf == null) throw new IOException("Resource could not be found " + resource);
    } catch (Exception e) {
      throw new IOException("Resource could not be found " + resource, e);
    }
    return null;
  }

  @Override
  public &lt;T&gt; Class&lt;? extends T&gt; findClass(String cname, Class&lt;T&gt; expectedType) {
    if(!allJarsLoaded ) loadJars();
    try {
      return findClass(cname).asSubclass(expectedType);
    } catch (Exception e) {
      if (e instanceof SolrException) {
        throw (SolrException) e;
      } else {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "error loading class " + cname, e);
      }
    }

  }

  @Override
  public &lt;T&gt; T newInstance(String cname, Class&lt;T&gt; expectedType) {
    try {
      return findClass(cname, expectedType).newInstance();
    } catch (SolrException e) {
      throw e;
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "error instantiating class :" + cname, e);
    }
  }


}
diff --git a/solr/core/src/java/org/apache/solr/core/PluginRegistry.java b/solr/core/src/java/org/apache/solr/core/PluginRegistry.java
new file mode 100644
index 00000000000..2e33c18b690
-- /dev/null
++ b/solr/core/src/java/org/apache/solr/core/PluginRegistry.java
@@ -0,0 +1,371 @@
package org.apache.solr.core;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.lucene.analysis.util.ResourceLoader;
import org.apache.lucene.analysis.util.ResourceLoaderAware;
import org.apache.solr.common.SolrException;
import org.apache.solr.handler.RequestHandlerBase;
import org.apache.solr.handler.component.SearchComponent;
import org.apache.solr.request.SolrRequestHandler;
import org.apache.solr.util.plugin.NamedListInitializedPlugin;
import org.apache.solr.util.plugin.PluginInfoInitialized;
import org.apache.solr.util.plugin.SolrCoreAware;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static java.util.Collections.singletonList;

/**
 * This manages the lifecycle of a set of plugin of the same type .
 */
public class PluginRegistry&lt;T&gt; implements AutoCloseable {
  public static Logger log = LoggerFactory.getLogger(PluginRegistry.class);

  private Map&lt;String, PluginHolder&lt;T&gt;&gt; registry = new HashMap&lt;&gt;();
  private Map&lt;String, PluginHolder&lt;T&gt;&gt; immutableRegistry = Collections.unmodifiableMap(registry);
  private String def;
  private Class klass;
  private SolrCore core;
  private SolrConfig.SolrPluginInfo meta;

  public PluginRegistry(Class&lt;T&gt; klass, SolrCore core) {
    this.core = core;
    this.klass = klass;
    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());
    if (meta == null) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unknown Plugin : " + klass.getName());
    }
  }

  static void initInstance(Object inst, PluginInfo info, SolrCore core) {
    if (inst instanceof PluginInfoInitialized) {
      ((PluginInfoInitialized) inst).init(info);
    } else if (inst instanceof NamedListInitializedPlugin) {
      ((NamedListInitializedPlugin) inst).init(info.initArgs);
    } else if (inst instanceof SolrRequestHandler) {
      ((SolrRequestHandler) inst).init(info.initArgs);
    }
    if (inst instanceof SearchComponent) {
      ((SearchComponent) inst).setName(info.name);
    }
    if (inst instanceof RequestHandlerBase) {
      ((RequestHandlerBase) inst).setPluginInfo(info);
    }

  }

  PluginHolder&lt;T&gt; createPlugin(PluginInfo info, SolrCore core) {
    if ("true".equals(String.valueOf(info.attributes.get("runtimeLib")))) {
      log.info(" {} : '</literal><block>{}</block><literal type="char">'  created with runtimeLib=true ", meta.tag, info.name);
      return new LazyPluginHolder&lt;&gt;(meta, info, core, core.getMemClassLoader());
    } else if ("lazy".equals(info.attributes.get("startup")) &amp;&amp; meta.options.contains(SolrConfig.PluginOpts.LAZY)) {
      log.info("{} : '</literal><block>{}</block><literal type="char">' created with startup=lazy ", meta.tag, info.name);
      return new LazyPluginHolder&lt;T&gt;(meta, info, core, core.getResourceLoader());
    } else {
      T inst = core.createInstance(info.className, (Class&lt;T&gt;) meta.clazz, meta.tag, null, core.getResourceLoader());
      initInstance(inst, info, core);
      return new PluginHolder&lt;&gt;(info, inst);
    }
  }

  boolean alias(String src, String target) {
    PluginHolder&lt;T&gt; a = registry.get(src);
    if (a == null) return false;
    PluginHolder&lt;T&gt; b = registry.get(target);
    if (b != null) return false;
    registry.put(target, a);
    return true;
  }

  /**
   * Get a plugin by name. If the plugin is not already instantiated, it is
   * done here
   */
  public T get(String name) {
    PluginHolder&lt;T&gt; result = registry.get(name);
    return result == null ? null : result.get();
  }

  /**
   * Fetches a plugin by name , or the default
   *
   * @param name       name using which it is registered
   * @param useDefault Return the default , if a plugin by that name does not exist
   */
  public T get(String name, boolean useDefault) {
    T result = get(name);
    if (useDefault &amp;&amp; result == null) return get(def);
    return result;
  }

  public Set&lt;String&gt; keySet() {
    return immutableRegistry.keySet();
  }

  /**
   * register a plugin by a name
   */
  public T put(String name, T plugin) {
    if (plugin == null) return null;
    PluginHolder&lt;T&gt; old = put(name, new PluginHolder&lt;T&gt;(null, plugin));
    return old == null ? null : old.get();
  }


  PluginHolder&lt;T&gt; put(String name, PluginHolder&lt;T&gt; plugin) {
    PluginHolder&lt;T&gt; old = registry.put(name, plugin);
    if (plugin.pluginInfo != null &amp;&amp; plugin.pluginInfo.isDefault()) {
      setDefault(name);
    }
    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);
    return old;
  }

  void setDefault(String def) {
    if (!registry.containsKey(def)) return;
    if (this.def != null) log.warn("Multiple defaults for : " + meta.tag);
    this.def = def;
  }

  public Map&lt;String, PluginHolder&lt;T&gt;&gt; getRegistry() {
    return immutableRegistry;
  }

  public boolean contains(String name) {
    return registry.containsKey(name);
  }

  String getDefault() {
    return def;
  }

  T remove(String name) {
    PluginHolder&lt;T&gt; removed = registry.remove(name);
    return removed == null ? null : removed.get();
  }

  void init(Map&lt;String, T&gt; defaults, SolrCore solrCore) {
    init(defaults, solrCore, solrCore.getSolrConfig().getPluginInfos(klass.getName()));
  }

  /**
   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.
   *
   * @param defaults These will be registered if not explicitly specified
   */
  void init(Map&lt;String, T&gt; defaults, SolrCore solrCore, List&lt;PluginInfo&gt; infos) {
    core = solrCore;
    for (PluginInfo info : infos) {
      PluginHolder&lt;T&gt; o = createPlugin(info, solrCore);
      String name = info.name;
      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);
      PluginHolder&lt;T&gt; old = put(name, o);
      if (old != null) log.warn("Multiple entries of {} with name {}", meta.tag, name);
    }
    for (Map.Entry&lt;String, T&gt; e : defaults.entrySet()) {
      if (!contains(e.getKey())) {
        put(e.getKey(), new PluginHolder&lt;T&gt;(null, e.getValue()));
      }
    }
  }

  /**
   * To check if a plugin by a specified name is already loaded
   */
  public boolean isLoaded(String name) {
    PluginHolder&lt;T&gt; result = registry.get(name);
    if (result == null) return false;
    return result.isLoaded();
  }

  private static void registerMBean(Object inst, SolrCore core, String pluginKey) {
    if (core == null) return;
    if (inst instanceof SolrInfoMBean) {
      SolrInfoMBean mBean = (SolrInfoMBean) inst;
      String name = (inst instanceof SolrRequestHandler) ? pluginKey : mBean.getName();
      core.registerInfoBean(name, mBean);
    }
  }


  /**
   * Close this registry. This will in turn call a close on all the contained plugins
   */
  @Override
  public void close() {
    for (Map.Entry&lt;String, PluginHolder&lt;T&gt;&gt; e : registry.entrySet()) {
      try {
        e.getValue().close();
      } catch (Exception exp) {
        log.error("Error closing plugin " + e.getKey() + " of type : " + meta.tag, exp);
      }
    }
  }

  /**
   * An indirect reference to a plugin. It just wraps a plugin instance.
   * subclasses may choose to lazily load the plugin
   */
  public static class PluginHolder&lt;T&gt; implements AutoCloseable {
    protected T inst;
    protected final PluginInfo pluginInfo;

    public PluginHolder(PluginInfo info) {
      this.pluginInfo = info;
    }

    public PluginHolder(PluginInfo info, T inst) {
      this.inst = inst;
      this.pluginInfo = info;
    }

    public T get() {
      return inst;
    }

    public boolean isLoaded() {
      return inst != null;
    }

    @Override
    public void close() throws Exception {
      if (inst != null &amp;&amp; inst instanceof AutoCloseable) ((AutoCloseable) inst).close();

    }
  }

  /**
   * A class that loads plugins Lazily. When the get() method is invoked
   * the Plugin is initialized and returned.
   */
  public static class LazyPluginHolder&lt;T&gt; extends PluginHolder&lt;T&gt; {
    private final SolrConfig.SolrPluginInfo pluginMeta;
    protected SolrException solrException;
    private final SolrCore core;
    protected ResourceLoader resourceLoader;


    LazyPluginHolder(SolrConfig.SolrPluginInfo pluginMeta, PluginInfo pluginInfo, SolrCore core, ResourceLoader loader) {
      super(pluginInfo);
      this.pluginMeta = pluginMeta;
      this.core = core;
      this.resourceLoader = loader;
    }

    @Override
    public T get() {
      if (inst != null) return inst;
      if (solrException != null) throw solrException;
      createInst();
      registerMBean(inst, core, pluginInfo.name);
      return inst;
    }

    protected synchronized void createInst() {
      if (inst != null) return;
      log.info("Going to create a new {} with {} ", pluginMeta.tag, pluginInfo.toString());
      if (resourceLoader instanceof MemClassLoader) {
        MemClassLoader loader = (MemClassLoader) resourceLoader;
        loader.loadJars();
      }
      Class&lt;T&gt; clazz = (Class&lt;T&gt;) pluginMeta.clazz;
      inst = core.createInstance(pluginInfo.className, clazz, pluginMeta.tag, null, resourceLoader);
      initInstance(inst, pluginInfo, core);
      if (inst instanceof SolrCoreAware) {
        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, inst);
        ((SolrCoreAware) inst).inform(core);
      }
      if (inst instanceof ResourceLoaderAware) {
        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, inst);
        try {
          ((ResourceLoaderAware) inst).inform(core.getResourceLoader());
        } catch (IOException e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "error initializing component", e);
        }
      }
    }


  }

  /**
   * This represents a Runtime Jar. A jar requires two details , name and version
   */
  public static class RuntimeLib implements PluginInfoInitialized, AutoCloseable {
    String name;
    String version;
    private JarRepository.JarContentRef jarContent;
    private final JarRepository jarRepository;

    @Override
    public void init(PluginInfo info) {
      name = info.attributes.get("name");
      Object v = info.attributes.get("version");
      if (name == null || v == null) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "runtimeLib must have name and version");
      }
      version = String.valueOf(v);
    }

    public RuntimeLib(SolrCore core) {
      jarRepository = core.getCoreDescriptor().getCoreContainer().getJarRepository();
    }


    void loadJar() {
      if (jarContent != null) return;
      synchronized (this) {
        if (jarContent != null) return;
        jarContent = jarRepository.getJarIncRef(name + "/" + version);
      }
    }

    public ByteBuffer getFileContent(String entryName) throws IOException {
      if (jarContent == null)
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "jar not available: " + name + "/" + version);
      return jarContent.jar.getFileContent(entryName);

    }

    @Override
    public void close() throws Exception {
      if (jarContent != null) jarRepository.decrementJarRefCount(jarContent);
    }

    public static List&lt;RuntimeLib&gt; getLibObjects(SolrCore core, List&lt;PluginInfo&gt; libs) {
      List&lt;RuntimeLib&gt; l = new ArrayList&lt;&gt;(libs.size());
      for (PluginInfo lib : libs) {
        RuntimeLib rtl = new RuntimeLib(core);
        rtl.init(lib);
        l.add(rtl);
      }
      return l;
    }
  }
}
diff --git a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
index ba295bc128f..5bd12093bb1 100644
-- a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
++ b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
@@ -17,41 +17,14 @@
 
 package org.apache.solr.core;
 
import java.io.Closeable;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.ByteBuffer;
import java.security.BasicPermission;
import java.security.CodeSource;
import java.security.Permissions;
import java.security.ProtectionDomain;
import java.security.SecureClassLoader;
import java.security.cert.Certificate;
import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Collections;
import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.jar.JarFile;
 
import org.apache.solr.client.solrj.SolrRequest;
import org.apache.solr.common.SolrException;
import org.apache.solr.common.SolrException.ErrorCode;
import org.apache.solr.common.util.NamedList;
import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.common.util.StrUtils;
import org.apache.solr.handler.RequestHandlerBase;
import org.apache.solr.request.SolrQueryRequest;
import org.apache.solr.request.SolrQueryRequestBase;
 import org.apache.solr.request.SolrRequestHandler;
import org.apache.solr.response.SolrQueryResponse;
import org.apache.solr.util.plugin.PluginInfoInitialized;
import org.apache.solr.util.plugin.SolrCoreAware;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,13 +34,8 @@ public final class RequestHandlers {
   public static Logger log = LoggerFactory.getLogger(RequestHandlers.class);
 
   protected final SolrCore core;
  // Use a synchronized map - since the handlers can be changed at runtime, 
  // the map implementation should be thread safe
  private final Map&lt;String, SolrRequestHandler&gt; handlers =
      new ConcurrentHashMap&lt;&gt;() ;
  private final Map&lt;String, SolrRequestHandler&gt; immutableHandlers = Collections.unmodifiableMap(handlers) ;
 
  public static final boolean disableExternalLib = Boolean.parseBoolean(System.getProperty("disable.external.lib", "false"));
  final PluginRegistry&lt;SolrRequestHandler&gt; handlers;
 
   /**
    * Trim the trailing '</literal><operator>/</operator><literal type="char">' if it'</literal><name>s</name> <name>there</name></expr><operator>,</operator> <expr><name>and</name> <name>convert</name> <literal type="null">null</literal> <name>to</name> <name>empty</name> <name><name>string</name><operator>.</operator></name>
@@ <operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RequestHandlers</name> <block>{
   
   <expr><specifier>public</specifier> <call><name>RequestHandlers</name><argument_list>(<argument><expr><name>SolrCore</name> <name>core</name></expr></argument>)</argument_list></call> <block>{
       <expr><name><name>this</name><operator>.</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;
    <expr><name>handlers</name> <operator>=</operator>  <operator>new</operator> <call><name><name>PluginRegistry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SolrRequestHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   <comment type="block" format="javadoc">/**
@@ -98,17 +67,6 @@ public final class RequestHandlers {
     return handlers.get(normalize(handlerName));
   }
 
  /**
   * @return a Map of all registered handlers of the specified type.
   */</comment>
  <specifier>public</specifier> <operator>&lt;</operator><name>T</name> extends <name>SolrRequestHandler</name><operator>&gt;</operator> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>T</name></argument>&gt;</argument_list></name> <call><name>getAll</name><argument_list>(<argument><expr><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <name>clazz</name></expr></argument>)</argument_list></call> <block>{
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>T</name></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>handlers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isInstance</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>clazz</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></expr></expr_stmt>

   <comment type="block" format="javadoc">/**
    * Handlers must be initialized before calling this function.  As soon as this is
    * called, the handler can immediately accept requests.
@@ -118,22 +76,20 @@ public final class RequestHandlers {
    * @return the previous handler at the given path or null
    */</comment>
   <function><type><specifier>public</specifier> <name>SolrRequestHandler</name></type> <name>register</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>handlerName</name></decl></parameter>, <parameter><decl><type><name>SolrRequestHandler</name></type> <name>handler</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>norm</name> <init>= <expr><call><name>normalize</name><argument_list>( <argument><expr><name>handlerName</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>norm</name> <init>= <expr><call><name>normalize</name><argument_list>(<argument><expr><name>handlerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <return>return <expr><call><name><name>handlers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>norm</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>old</name> <init>= <expr><call><name><name>handlers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>norm</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name><name>norm</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>handler</name> <operator>instanceof</operator> <name>SolrInfoMBean</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>getInfoRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>handlerName</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>old</name></expr>;</return>
    <return>return <expr><call><name><name>handlers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>norm</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>
<comment type="line">//    return register(handlerName, new PluginRegistry.PluginHolder&lt;&gt;(null, handler));</comment>
   </block_content>}</block></function>
 

   <comment type="block" format="javadoc">/**
    * Returns an unmodifiable Map containing the registered handlers
    */</comment>
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></type> <name>getRequestHandlers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>immutableHandlers</name></expr>;</return>
  <function><type><specifier>public</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></type> <name>getRequestHandlers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>handlers</name></expr>;</return>
   </block_content>}</block></function>
 
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">66</literal> <operator>+</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RequestHandlers</name> <block>{
    <expr><operator>*</operator> <name>Handlers</name> <name>will</name> <name>be</name> <name>registered</name> <name>and</name> <name>initialized</name> <name>in</name> <name>the</name> <name>order</name> <name>they</name> <name>appear</name> <name>in</name> <name><name>solrconfig</name><operator>.</operator><name>xml</name></name>
    <operator>*</operator><operator>/</operator>
 
  <name>void</name> <call><name>initHandlersFromConfig</name><argument_list>(<argument><expr><name>SolrConfig</name> <name>config</name></expr></argument>)</argument_list></call><block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name> <name>implicits</name> <operator>=</operator> <call><name><name>PluginsRegistry</name><operator>.</operator><name>getHandlers</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>initHandlersFromConfig</name><argument_list>(<argument><expr><name>SolrConfig</name> <name>config</name></expr></argument>)</argument_list></call> <block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name> <name>implicits</name> <operator>=</operator> <call><name><name>ImplicitPlugins</name><operator>.</operator><name>getHandlers</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// use link map so we iterate in the same order</comment>
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>,<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name> <name>handlers</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>PluginInfo</name></argument>&gt;</argument_list></name> <name>infoMap</name><operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <comment type="line">//deduping implicit and explicit requesthandlers</comment>
     <for>for <control>(<init><decl><type><name>PluginInfo</name></type> <name>info</name> <range>: <expr><name>implicits</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>infoMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>,<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr>
     <for>for <control>(<init><decl><type><name>PluginInfo</name></type> <name>info</name> <range>: <expr><call><name><name>config</name><operator>.</operator><name>getPluginInfos</name></name><argument_list>(<argument><expr><call><name><name>SolrRequestHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>infoMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
     <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name> <name>infos</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>infoMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;

    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name> <name>modifiedInfos</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name>PluginInfo</name></type> <name>info</name> <range>: <expr><name>infos</name></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>requestHandler</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>startup</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>attributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"startup"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lib</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>attributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lib</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>requestHandler</name> <operator>=</operator> <operator>new</operator> <call><name>DynamicLazyRequestHandlerWrapper</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></try></block_content></block></for>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>startup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><literal type="string">"lazy"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>startup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"adding lazy requestHandler: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>requestHandler</name> <operator>=</operator> <operator>new</operator> <call><name>LazyRequestHandlerWrapper</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Unknown startup value: '"</literal> <operator>+</operator> <name>startup</name> <operator>+</operator> <literal type="string">"' for: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>requestHandler</name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>createRequestHandler</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>requestHandler</name> <operator>instanceof</operator> <name>RequestHandlerBase</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>RequestHandlerBase</name><operator>)</operator> <name>requestHandler</name><operator>)</operator><operator>.</operator><call><name>setPluginInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>requestHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>old</name> <init>= <expr><call><name>register</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>requestHandler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Multiple requestHandler registered to the same name: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">" ignoring: "</literal> <operator>+</operator> <call><name><name>old</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>info</name><operator>.</operator><name>isDefault</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>register</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>requestHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Multiple default requestHandler registered"</literal> <operator>+</operator> <literal type="string">" ignoring: "</literal> <operator>+</operator> <call><name><name>old</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"created "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name>
            <argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"RequestHandler init failure"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch>
      <expr_stmt><expr><call><name><name>modifiedInfos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>applyInitParams</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }

    <comment type="line">// we've now registered all handlers, time to init them in the same order</comment>
    for <expr_stmt><expr><operator>(</operator><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>,<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></name> <name>entry</name> <operator>:</operator> <call><name><name>handlers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
      <expr><name>PluginInfo</name> <name>info</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;
      <expr><name>SolrRequestHandler</name> <name>requestHandler</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;
      <expr><name>info</name> <operator>=</operator> <call><name>applyInitParams</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>requestHandler</name> <operator>instanceof</operator> <name>PluginInfoInitialized</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PluginInfoInitialized</name><operator>)</operator> <name>requestHandler</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else<block>{<block_content>
        <expr_stmt><expr><call><name><name>requestHandler</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>initArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>core</name></expr></argument>, <argument><expr><name>modifiedInfos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>alias</name></name><argument_list>(<argument><expr><call><name><name>handlers</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Registered paths: {}"</literal></expr></argument> , <argument><expr><call><name><name>StrUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>handlers</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>handlers</name><operator>.</operator><name>alias</name></name><argument_list>( <argument><expr><literal type="string">"/select"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>handlers</name><operator>.</operator><name>alias</name></name><argument_list>( <argument><expr><literal type="string">"standard"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"no default request handler is registered (either '/select' or 'standard')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
 
    <if_stmt><if>if<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"/select"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><comment type="line">//defacto default handler</comment>
    <if_stmt><if>if<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"standard"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><comment type="line">//old default handler name; TODO remove?</comment>
    <if_stmt><if>if<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"no default request handler is registered (either '/select' or 'standard')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   </block_content>}</block></else></if_stmt>
 
   <function><type><specifier>private</specifier> <name>PluginInfo</name></type> <name>applyInitParams</name><parameter_list>(<parameter><decl><type><name>SolrConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>PluginInfo</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">239</literal></expr><operator>,</operator><expr><literal type="number">328</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RequestHandlers</name> <block>{
     <return>return <expr><name>info</name></expr>;</return>
   }</block></expr></expr_stmt>
 

  <comment type="block" format="javadoc">/**
   * The &lt;code&gt;LazyRequestHandlerWrapper&lt;/code&gt; wraps any {@link SolrRequestHandler}.
   * Rather then instantiate and initialize the handler on startup, this wrapper waits
   * until it is actually called.  This should only be used for handlers that are
   * unlikely to be used in the normal lifecycle.
   *
   * You can enable lazy loading in solrconfig.xml using:
   *
   * &lt;pre&gt;
   *  &amp;lt;requestHandler name="..." class="..." startup="lazy"&amp;gt;
   *    ...
   *  &amp;lt;/requestHandler&amp;gt;
   * &lt;/pre&gt;
   *
   * This is a private class - if there is a real need for it to be public, it could
   * move
   *
   * @since solr 1.2
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>LazyRequestHandlerWrapper</name> <super_list><implements>implements <super><name>SolrRequestHandler</name></super>, <super><name>AutoCloseable</name></super>, <super><name>PluginInfoInitialized</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SolrCore</name></type> <name>core</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>_className</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>_handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PluginInfo</name></type> <name>_pluginInfo</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LazyRequestHandlerWrapper</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_handler</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// don't initialize</comment>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wait for the first request before initializing the wrapped handler
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handleRequest</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>handler</name> <init>= <expr><name>_handler</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>getWrappedHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>handleRequest</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>SolrRequestHandler</name></type> <name>getWrappedHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>handler</name> <init>= <expr><call><name>createRequestHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>instanceof</operator> <name>PluginInfoInitialized</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PluginInfoInitialized</name><operator>)</operator> <name>handler</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>_pluginInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>_pluginInfo</name><operator>.</operator><name>initArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>instanceof</operator> <name>PluginInfoInitialized</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PluginInfoInitialized</name><operator>)</operator> <name>handler</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>_pluginInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>_pluginInfo</name><operator>.</operator><name>initArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>


          <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>instanceof</operator> <name>SolrCoreAware</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SolrCoreAware</name><operator>)</operator> <name>handler</name><operator>)</operator><operator>.</operator><call><name>inform</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>instanceof</operator> <name>RequestHandlerBase</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>RequestHandlerBase</name><operator>)</operator> <name>handler</name><operator>)</operator><operator>.</operator><call><name>setPluginInfo</name><argument_list>(<argument><expr><name>_pluginInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>_handler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"lazy loading error"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>_handler</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>SolrRequestHandler</name></type> <name>createRequestHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>core</name><operator>.</operator><name>createRequestHandler</name></name><argument_list>(<argument><expr><name>_className</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getHandlerClass</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_className</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">//////////////////////// SolrInfoMBeans methods //////////////////////</comment>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="string">"Lazy["</literal> <operator>+</operator> <name>_className</name> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>_handler</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>_handler</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSource</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>URL</name><index>[]</index></name></type> <name>getDocs</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>_handler</name><operator>.</operator><name>getDocs</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Category</name></type> <name>getCategory</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>Category</name><operator>.</operator><name>QUERYHANDLER</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>NamedList</name></type> <name>getStatistics</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>_handler</name><operator>.</operator><name>getStatistics</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"note"</literal></expr></argument>, <argument><expr><literal type="string">"not initialized yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>lst</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>_handler</name> <operator>instanceof</operator> <name>AutoCloseable</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>_handler</name> <operator>instanceof</operator> <name>DynamicLazyRequestHandlerWrapper</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>AutoCloseable</name><operator>)</operator> <name>_handler</name><operator>)</operator><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>PluginInfo</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_pluginInfo</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_className</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>className</name></name></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>DynamicLazyRequestHandlerWrapper</name> <super_list><extends>extends <super><name>LazyRequestHandlerWrapper</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>lib</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CoreContainer</name></type> <name>coreContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SolrResourceLoader</name></type> <name>solrResourceLoader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MemClassLoader</name></type> <name>classLoader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_closed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>unrecoverable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>errMsg</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Exception</name></type> <name>exception</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>DynamicLazyRequestHandlerWrapper</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coreContainer</name></name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoreContainer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>solrResourceLoader</name></name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>PluginInfo</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lib</name></name> <operator>=</operator> <call><name><name>_pluginInfo</name><operator>.</operator><name>attributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>disableExternalLib</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <literal type="string">"ERROR external library loading is disabled"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>unrecoverable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>_handler</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>_pluginInfo</name><operator>.</operator><name>attributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <literal type="string">"ERROR 'lib' attribute must be accompanied with version also"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>unrecoverable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>_handler</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>_pluginInfo</name><operator>.</operator><name>attributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>classLoader</name> <operator>=</operator> <operator>new</operator> <call><name>MemClassLoader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handleRequest</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>unrecoverable</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>classLoader</name><operator>.</operator><name>checkJarAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SolrException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><literal type="string">"Jar could not be loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>unrecoverable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <literal type="string">"Could not load jar"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>exception</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>handleRequest</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></catch></try>

      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>handleRequest</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>SolrRequestHandler</name></type> <name>createRequestHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Class</name></type> <name>clazz</name> <init>= <expr><call><name><name>classLoader</name><operator>.</operator><name>findClass</name></name><argument_list>(<argument><expr><name>_className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>cons</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>getConstructors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>con</name> <range>: <expr><name>cons</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>con</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>types</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>SolrCore</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>SolrRequestHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>cast</name></name></name><argument_list>(<argument><expr><call><name><name>con</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>(</operator><name>SolrRequestHandler</name><operator>)</operator> <call><name><name>clazz</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>unrecoverable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"class {0} could not be loaded "</literal></expr></argument>, <argument><expr><name>_className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exception</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>

      </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>_closed</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>classLoader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>classLoader</name><operator>.</operator><name>releaseJar</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>_closed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>


  <class><specifier>public</specifier> <specifier>static</specifier> class <name>MemClassLoader</name> <super_list><extends>extends <super><name>ClassLoader</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>JarRepository</name><operator>.</operator><name>JarContentRef</name></name></type> <name>jarContent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DynamicLazyRequestHandlerWrapper</name></type> <name>handlerWrapper</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MemClassLoader</name><parameter_list>(<parameter><decl><type><name>DynamicLazyRequestHandlerWrapper</name></type> <name>handlerWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>handlerWrapper</name><operator>.</operator><name>solrResourceLoader</name><operator>.</operator><name>classLoader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handlerWrapper</name></name> <operator>=</operator> <name>handlerWrapper</name></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <function><type><name>boolean</name></type> <name>checkJarAvailable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>jarContent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

      <try>try <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
          <expr_stmt><expr><name>jarContent</name> <operator>=</operator> <call><name><name>handlerWrapper</name><operator>.</operator><name>coreContainer</name><operator>.</operator><name>getJarRepository</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getJarIncRef</name><argument_list>(<argument><expr><name><name>handlerWrapper</name><operator>.</operator><name>lib</name></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>handlerWrapper</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></synchronized>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SolrException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><name>se</name></expr>;</throw>
      </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>findClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
      <try>try <block>{<block_content>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>findClass</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>concat</name><argument_list>(<argument><expr><literal type="string">".class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buf</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>jarContent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>checkJarAvailable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name><name>jarContent</name><operator>.</operator><name>jar</name><operator>.</operator><name>getFileContent</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>ClassNotFoundException</name><argument_list>(<argument><expr><literal type="string">"class not found in loaded jar"</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>ClassNotFoundException</name><argument_list>(<argument><expr><literal type="string">"class not found "</literal> <operator>+</operator> <name>name</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</throw>

        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>ProtectionDomain</name></type> <name>defaultDomain</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">//using the default protection domain, with no permissions</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name>defaultDomain</name> <operator>=</operator> <operator>new</operator> <call><name>ProtectionDomain</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CodeSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><literal type="string">"http://localhost/.system/blob/"</literal> <operator>+</operator> <name><name>handlerWrapper</name><operator>.</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>Certificate</name><index>[]</index></name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">//should not happen</comment>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name>defineClass</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>defaultDomain</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>releaseJar</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>handlerWrapper</name><operator>.</operator><name>coreContainer</name><operator>.</operator><name>getJarRepository</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>decrementJarRefCount</name><argument_list>(<argument><expr><name>jarContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

   <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>handlers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>AutoCloseable</name></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>AutoCloseable</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error closing requestHandler "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrConfig</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">736b13321ee</literal><operator>..</operator><literal type="number">408856a347d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrConfig</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkSolrResourceLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name><operator>.</operator><name>ErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkNodeProps</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>SearchComponent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>QueryResponseWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>update</name><operator>.</operator><name>processor</name><operator>.</operator><name>UpdateRequestProcessorChain</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RegexFileFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>Stat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>noggit</name><operator>.</operator><name>JSONParser</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>noggit</name><operator>.</operator><name>ObjectBuilder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
 
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>CoreAdminParams</name><operator>.</operator><name>NAME</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>LAZY</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>MULTI_OK</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>NOOP</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>REQUIRE_CLASS</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>REQUIRE_NAME</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>CLASS_NAME</name></name>;</import>
 
 
 <comment type="block" format="javadoc">/**
@@ -99,6 +102,7 @@ public class SolrConfig extends Config implements MapSerializable{
     MULTI_OK, 
     REQUIRE_NAME,
     REQUIRE_CLASS,
    LAZY,
     // EnumSet.of and/or EnumSet.copyOf(Collection) are anoying
     // because of type determination
     NOOP
@@ -296,9 +300,9 @@ public class SolrConfig extends Config implements MapSerializable{
   }
 
   public static final  List&lt;SolrPluginInfo&gt; plugins = ImmutableList.&lt;SolrPluginInfo&gt;builder()
      .add(new SolrPluginInfo(SolrRequestHandler.class, SolrRequestHandler.TYPE, REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK))
      .add(new SolrPluginInfo(SolrRequestHandler.class, SolrRequestHandler.TYPE, REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK, LAZY))
       .add(new SolrPluginInfo(QParserPlugin.class, "queryParser", REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK))
      .add(new SolrPluginInfo(QueryResponseWriter.class, "queryResponseWriter", REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK))
      .add(new SolrPluginInfo(QueryResponseWriter.class, "queryResponseWriter", REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK, LAZY))
       .add(new SolrPluginInfo(ValueSourceParser.class, "valueSourceParser", REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK))
       .add(new SolrPluginInfo(TransformerFactory.class, "transformer", REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK))
       .add(new SolrPluginInfo(SearchComponent.class, "searchComponent", REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK))
@@ -307,6 +311,7 @@ public class SolrConfig extends Config implements MapSerializable{
       // and even then -- only if there is a single SpellCheckComponent
       // because of queryConverter.setIndexAnalyzer
       .add(new SolrPluginInfo(QueryConverter.class, "queryConverter", REQUIRE_NAME, REQUIRE_CLASS))
      .add(new SolrPluginInfo(PluginRegistry.RuntimeLib.class, "runtimeLib", REQUIRE_NAME, MULTI_OK))
       // this is hackish, since it picks up all SolrEventListeners,
       // regardless of when/how/why they are used (or even if they are
       // declared outside of the appropriate context) but there's no nice
@@ -323,10 +328,11 @@ public class SolrConfig extends Config implements MapSerializable{
       .add(new SolrPluginInfo(InitParams.class, InitParams.TYPE, MULTI_OK))
       .add(new SolrPluginInfo(StatsCache.class, "statsCache", REQUIRE_CLASS))
       .build();
  private static final Map&lt;String, SolrPluginInfo&gt; clsVsInfo = new HashMap&lt;&gt;();

  public static final Map&lt;String, SolrPluginInfo&gt; classVsSolrPluginInfo;
   static {
    for (SolrPluginInfo plugin : plugins) clsVsInfo.put(plugin.clazz.getName(), plugin);
    Map&lt;String, SolrPluginInfo&gt; map = new HashMap&lt;&gt;();
    for (SolrPluginInfo plugin : plugins) map.put(plugin.clazz.getName(), plugin);
    classVsSolrPluginInfo = Collections.unmodifiableMap(map);
   }
 
   public static class SolrPluginInfo{
@@ -634,7 +640,7 @@ public class SolrConfig extends Config implements MapSerializable{
    */</comment>
   <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name></type> <name>getPluginInfos</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>pluginStore</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrPluginInfo</name></type> <name>info</name> <init>= <expr><call><name><name>clsVsInfo</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrPluginInfo</name></type> <name>info</name> <init>= <expr><call><name><name>classVsSolrPluginInfo</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>info</name><operator>.</operator><name>options</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>REQUIRE_NAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Map</name></argument>&gt;</argument_list></name></type> <name>infos</name> <init>= <expr><call><name><name>overlay</name><operator>.</operator><name>getNamedPlugins</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>infos</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">664</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">670</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfig</name> extends <name>Config</name> implements <name>MapSerializable</name><block>{
   <expr><specifier>private</specifier> <name>void</name> <call><name>initLibs</name><argument_list>()</argument_list></call> <block>{
     <expr><name>NodeList</name> <name>nodes</name> <operator>=</operator> <operator>(</operator><name>NodeList</name><operator>)</operator> <call><name>evaluate</name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr>;</block></expr>
     <if_stmt><if>if <condition>(<expr><name>nodes</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>nodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    

     <call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Adding specified lib dirs to ClassLoader"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>SolrResourceLoader</name></type> <name>loader</name> <init>= <expr><call><name>getResourceLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    

     <try>try <block>{<block_content>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        

         <decl_stmt><decl><type><name>String</name></type> <name>baseDir</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>baseDir</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">696</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">702</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfig</name> extends <name>Config</name> implements <name>MapSerializable</name><block>{
       <expr><call><name><name>loader</name><operator>.</operator><name>reloadLuceneSPI</name></name><argument_list>()</argument_list></call></expr>;
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
  

   <function><type><specifier>public</specifier> <name>int</name></type> <name>getMultipartUploadLimitKB</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>multipartUploadLimitKB</name></expr>;</return>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1ffbcc2ad31</literal><operator>..</operator><literal type="number">2ae596fd107</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>
 
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantLock</name></name>;</import>
 
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DirectoryReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexDeletionPolicy</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">86</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>IndexFetcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>ReplicationHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>RequestHandlerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>admin</name><operator>.</operator><name>ShowFileRequestHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>DebugComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>ExpandComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>FacetComponent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>HighlightComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>MoreLikeThisComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>QueryComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>RealTimeGetComponent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>SearchComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>StatsComponent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>BinaryResponseWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">146</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>SAXException</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>
  <operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>version</name><operator>=</operator><literal type="string">"1.0"</literal></expr>;  
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>version</name><operator>=</operator><literal type="string">"1.0"</literal></block></expr>;</expr_stmt>
 
   <comment type="line">// These should *only* be used for debugging or monitoring purposes</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>numOpens</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>numCloses</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>,<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>openHandles</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>synchronizedMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>IdentityHashMap</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>, <argument><name>Exception</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  

   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SolrCore</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>requestLog</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>SolrCore</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".Request"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">172</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>String</name> <name>ulogDir</name></expr>;
   <specifier>private</specifier> <name>final</name> <name>UpdateHandler</name> <name>updateHandler</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SolrCoreState</name></type> <name>solrCoreState</name></decl>;</decl_stmt>
  

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>startTime</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RequestHandlers</name></type> <name>reqHandlers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SearchComponent</name></argument>&gt;</argument_list></name></type> <name>searchComponents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>SearchComponent</name></argument>&gt;</argument_list></name></type> <name>searchComponents</name> <init>= <expr><operator>new</operator> <call><name><name>PluginRegistry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SearchComponent</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>UpdateRequestProcessorChain</name></argument>&gt;</argument_list></name></type> <name>updateProcessorChains</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrInfoMBean</name></argument>&gt;</argument_list></name></type> <name>infoRegistry</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>IndexDeletionPolicyWrapper</name></type> <name>solrDelPolicy</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>DirectoryFactory</name></type> <name>directoryFactory</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>IndexReaderFactory</name></type> <name>indexReaderFactory</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Codec</name></type> <name>codec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MemClassLoader</name></type> <name>memClassLoader</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>confListeners</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReentrantLock</name></type> <name>ruleExpiryLock</name></decl>;</decl_stmt>
  

   <function><type><specifier>public</specifier> <name>long</name></type> <name>getStartTime</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>startTime</name></expr>;</return> </block_content>}</block></function>
  

   <decl_stmt><decl><type><specifier>private</specifier> <name>RestManager</name></type> <name>restManager</name></decl>;</decl_stmt>
  

   <function><type><specifier>public</specifier> <name>RestManager</name></type> <name>getRestManager</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>restManager</name></expr>;</return>
   </block_content>}</block></function>
  

   <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>boolean_query_max_clause_count</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
   <comment type="line">// only change the BooleanQuery maxClauseCount once for ALL cores...</comment>
   <function><type><name>void</name></type> <name>booleanQueryMaxClauseCount</name><parameter_list>()</parameter_list>  <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></function>
   </block_content>}</block></for>
    

   <comment type="block" format="javadoc">/**
    * The SolrResourceLoader used to load all resources for this core.
    * @since solr 1.3
@@ -238,7 +231,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
   public SolrConfig getSolrConfig() {
     return solrConfig;
   }
  

   /**
    * Gets the schema resource name used by this core instance.
    * @since solr 1.3
@@ -248,15 +241,15 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
   }
 
   /** @return the latest snapshot of the schema used by this core instance. */</comment>
  <function><type><specifier>public</specifier> <name>IndexSchema</name></type> <name>getLatestSchema</name><parameter_list>()</parameter_list> <block>{<block_content> 
  <function><type><specifier>public</specifier> <name>IndexSchema</name></type> <name>getLatestSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>schema</name></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/** Sets the latest schema snapshot to be used by this core instance. */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setLatestSchema</name><parameter_list>(<parameter><decl><type><name>IndexSchema</name></type> <name>replacementSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name>schema</name> <operator>=</operator> <name>replacementSchema</name></expr>;</expr_stmt>
   </block_content>}</block></function>
  

   <function><type><specifier>public</specifier> <name>String</name></type> <name>getDataDir</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>dataDir</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">300</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <expr><name>final</name> <name>InputStream</name> <name>is</name> <operator>=</operator> <operator>new</operator> <call><name>PropertiesInputStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
         <try>try <block>{<block_content>
           <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          

           <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><name>result</name> <operator>=</operator> <name>dataDir</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
          

         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Unable to load "</literal> <operator>+</operator> <name><name>IndexFetcher</name><operator>.</operator><name>INDEX_PROPERTIES</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></catch> <finally>finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">324</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   }</block>
   <specifier>private</specifier> <name>String</name> <name>lastNewIndexDir</name></expr>;</expr_stmt> <comment type="line">// for debugging purposes only... access not synchronized, but that's ok</comment>
 
  

   <function><type><specifier>public</specifier> <name>DirectoryFactory</name></type> <name>getDirectoryFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>directoryFactory</name></expr>;</return>
   </block_content>}</block></function>
  

   <function><type><specifier>public</specifier> <name>IndexReaderFactory</name></type> <name>getIndexReaderFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>indexReaderFactory</name></expr>;</return>
   </block_content>}</block></function>
  

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>name</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">372</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">365</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
      <expr><name>PluginInfo</name> <name>info</name> <operator>=</operator> <call><name><name>solrConfig</name><operator>.</operator><name>getPluginInfo</name></name><argument_list>(<argument><expr><call><name><name>IndexDeletionPolicy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <name>IndexDeletionPolicy</name> <name>delPolicy</name> <operator>=</operator> <literal type="null">null</literal></block></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
       <expr_stmt><expr><name>delPolicy</name> <operator>=</operator> <call><name>createInstance</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>,<argument><expr><name><name>IndexDeletionPolicy</name><operator>.</operator><name>class</name></name></expr></argument>,<argument><expr><literal type="string">"Deletion Policy for SOLR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>delPolicy</name> <operator>=</operator> <call><name>createInstance</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name><name>IndexDeletionPolicy</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"Deletion Policy for SOLR"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getResourceLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>delPolicy</name> <operator>instanceof</operator> <name>NamedListInitializedPlugin</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>NamedListInitializedPlugin</name><operator>)</operator> <name>delPolicy</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>initArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>delPolicy</name> <operator>=</operator> <operator>new</operator> <call><name>SolrDeletionPolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>     
     </block_content>}</block></function>
      <expr_stmt><expr><name>solrDelPolicy</name> <operator>=</operator> <operator>new</operator> <call><name>IndexDeletionPolicyWrapper</name><argument_list>(<argument><expr><name>delPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">406</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">399</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
    <expr><operator>*</operator> <name>NOTE</name><operator>:</operator> <name>this</name> <name>function</name> <name>is</name> <name>not</name> <name>thread</name> <name><name>safe</name><operator>.</operator>  <name>However</name></name></expr>, <expr><name>it</name> <name>is</name> <name>safe</name> <name>to</name> <name>call</name> <name>within</name> <name>the</name>
    <operator>*</operator> <operator>&lt;</operator><name>code</name><operator>&gt;</operator><call><name>inform</name><argument_list>( <argument><expr><name>SolrCore</name> <name>core</name></expr></argument> )</argument_list></call><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator> <name>function</name></expr> <for>for &lt;code&gt;SolrCoreAware&lt;/code&gt; classes.
    * Outside &lt;code&gt;inform&lt;/code&gt;<operator>,</operator> <expr_stmt><expr><name>this</name> <name>could</name> <name>potentially</name> <throw>throw <argument_list>a <argument><expr><name>ConcurrentModificationException</name>
   <operator>*</operator> 
   <operator>*</operator>
    <operator>*</operator> @<name>see</name> <name>SolrCoreAware</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>registerFirstSearcherListener</name><argument_list>( <argument><expr><name>SolrEventListener</name> <name>listener</name></expr></argument> )</argument_list></call>
@@ <operator>-</operator><literal type="number">418</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">411</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr></argument>, <argument><expr><name>Closeable</name> <block>{
    <expr><operator>*</operator> <name>NOTE</name><operator>:</operator> <name>this</name> <name>function</name> <name>is</name> <name>not</name> <name>thread</name> <name><name>safe</name><operator>.</operator>  <name>However</name></name></expr>, <expr><name>it</name> <name>is</name> <name>safe</name> <name>to</name> <name>call</name> <name>within</name> <name>the</name>
    <operator>*</operator> <operator>&lt;</operator><name>code</name><operator>&gt;</operator><call><name>inform</name><argument_list>( <argument><expr><name>SolrCore</name> <name>core</name></expr></argument> )</argument_list></call><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator> <name>function</name></expr> <for>for &lt;code&gt;SolrCoreAware&lt;/code&gt; classes.
    * Outside &lt;code&gt;inform&lt;/code&gt;<operator>,</operator> <expr_stmt><expr><name>this</name> <name>could</name> <name>potentially</name> <throw>throw <argument_list>a <argument><expr><name>ConcurrentModificationException</name>
   <operator>*</operator> 
   <operator>*</operator>
    <operator>*</operator> @<name>see</name> <name>SolrCoreAware</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>registerNewSearcherListener</name><argument_list>( <argument><expr><name>SolrEventListener</name> <name>listener</name></expr></argument> )</argument_list></call>
@@ <operator>-</operator><literal type="number">430</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">423</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr></argument>, <argument><expr><name>Closeable</name> <block>{
    <expr><operator>*</operator> <name>NOTE</name><operator>:</operator> <name>this</name> <name>function</name> <name>is</name> <name>not</name> <name>thread</name> <name><name>safe</name><operator>.</operator>  <name>However</name></name></expr>, <expr><name>it</name> <name>is</name> <name>safe</name> <name>to</name> <name>call</name> <name>within</name> <name>the</name>
    <operator>*</operator> <operator>&lt;</operator><name>code</name><operator>&gt;</operator><call><name>inform</name><argument_list>( <argument><expr><name>SolrCore</name> <name>core</name></expr></argument> )</argument_list></call><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator> <name>function</name></expr> <for>for &lt;code&gt;SolrCoreAware&lt;/code&gt; classes.
    * Outside &lt;code&gt;inform&lt;/code&gt;<operator>,</operator> <expr_stmt><expr><name>this</name> <name>could</name> <name>potentially</name> <throw>throw <argument_list>a <argument><expr><name>ConcurrentModificationException</name>
   <operator>*</operator> 
   <operator>*</operator>
    <operator>*</operator> @<name>see</name> <name>SolrCoreAware</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>QueryResponseWriter</name> <call><name>registerResponseWriter</name><argument_list>( <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>QueryResponseWriter</name> <name>responseWriter</name></expr></argument> )</argument_list></call><block>{
@@ <expr><operator>-</operator><literal type="number">439</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">432</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr>, <expr><name>Closeable</name> <block>{
 
   <expr><specifier>public</specifier> <name>SolrCore</name> <call><name>reload</name><argument_list>(<argument><expr><name>ConfigSet</name> <name>coreConfig</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
       <argument><expr><name>ParserConfigurationException</name></expr></argument>, <argument><expr><name>SAXException</name> <block>{
    

     <expr><call><name><name>solrCoreState</name><operator>.</operator><name>increfSolrCoreState</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <name>SolrCore</name> <name>currentCore</name></block></expr>;
     <name>boolean</name> <name>indexDirChange</name> <operator>=</operator> <operator>!</operator><call><name>getNewIndexDir</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getIndexDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument></argument_list></throw></expr>;</expr_stmt></for>
@@ <operator>-</operator><literal type="number">449</literal><operator>,</operator><literal type="number">17</literal> <operator>+</operator><literal type="number">442</literal><operator>,</operator><literal type="number">17</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name><operator>,</operator> <name>Closeable</name> <block>{
     }</block></block></expr></argument></argument_list></throw></expr></expr_stmt></for> <if_stmt><else>else <block>{<block_content>
       <expr_stmt><expr><name>currentCore</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    

     <name>SolrCore</name> <name>core</name> <operator>=</operator> <operator>new</operator> <call><name>SolrCore</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDataDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coreConfig</name><operator>.</operator><name>getSolrConfig</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>coreConfig</name><operator>.</operator><name>getIndexSchema</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>coreDescriptor</name></expr></argument>, <argument><expr><name>updateHandler</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>solrDelPolicy</name></name></expr></argument>, <argument><expr><name>currentCore</name></expr></argument>)</argument_list></call></block></expr></argument></argument_list></throw></expr>;</expr_stmt></for>
     <name><name>core</name><operator>.</operator><name>solrDelPolicy</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>solrDelPolicy</name></name></block></expr>;</expr_stmt>
    

 
     <comment type="line">// we open a new indexwriter to pick up the latest config</comment>
     <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>getUpdateHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrCoreState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newIndexWriter</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

     <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>getSearcher</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

     <return>return <expr><name>core</name></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">487</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">480</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
       <expr><call><name><name>indexReaderFactory</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>initArgs</name></name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <expr_stmt><expr><name>indexReaderFactory</name> <operator>=</operator> <operator>new</operator> <call><name>StandardIndexReaderFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    </block_content>}</block></try>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexReaderFactory</name></name> <operator>=</operator> <name>indexReaderFactory</name></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
  

   <comment type="line">// protect via synchronized(SolrCore.class)</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dirs</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <function><type><name>void</name></type> <name>initIndex</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reload</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 

       <decl_stmt><decl><type><name>String</name></type> <name>indexDir</name> <init>= <expr><call><name>getNewIndexDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>boolean</name></type> <name>indexExists</name> <init>= <expr><call><name>getDirectoryFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>boolean</name></type> <name>firstTime</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">507</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">500</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
       <expr><call><name>initIndexReaderFactory</name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
 
       <if_stmt><if>if <condition>(<expr><name>indexExists</name> <operator>&amp;&amp;</operator> <name>firstTime</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reload</name></expr>)</condition> <block>{<block_content>
        

         <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name><name>directoryFactory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>, <argument><expr><name><name>DirContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>,
             <argument><expr><call><name>getSolrConfig</name><argument_list>()</argument_list></call><operator>.</operator><name><name>indexConfig</name><operator>.</operator><name>lockType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">517</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">510</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
                   <expr><name>logid</name>
                       <operator>+</operator> <literal type="string">"WARNING: Solr index directory '{}' is locked.  Unlocking..."</literal></expr>,
                   <expr><name>indexDir</name></expr>)</block></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>makeLock</name></name><argument_list>(<argument><expr><name><name>IndexWriter</name><operator>.</operator><name>WRITE_LOCK_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>              
              <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>makeLock</name></name><argument_list>(<argument><expr><name><name>IndexWriter</name><operator>.</operator><name>WRITE_LOCK_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></try> <if_stmt><else>else <block>{<block_content>
               <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>logid</name>
                   <operator>+</operator> <literal type="string">"Solr index directory '{}' is locked.  Throwing exception"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">525</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">518</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> class <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr></argument>, <argument><expr><name>Closeable</name> <block>{
               <throw>throw <argument_list>new <argument><expr><call><name>LockObtainFailedException</name><argument_list>(
                   <argument><expr><literal type="string">"Index locked for write for core "</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
             }</block></expr></argument></argument_list></call></expr></expr_stmt>
            

           </block_content>}</block></else></if_stmt>
         </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
           <expr_stmt><expr><call><name><name>directoryFactory</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">537</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">530</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>logid</name><operator>+</operator><literal type="string">"Solr index directory '"</literal> <operator>+</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"' doesn't exist."</literal>
                 <operator>+</operator> <literal type="string">" Creating new index..."</literal></expr></argument>)</argument_list></call></expr>;
 
        <name>SolrIndexWriter</name> <name>writer</name> <operator>=</operator> <call><name><name>SolrIndexWriter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"SolrCore.initIndex"</literal></expr></argument>, <argument><expr><name>indexDir</name></expr></argument>, <argument><expr><call><name>getDirectoryFactory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, 
        <argument><expr><name>SolrIndexWriter</name> <name>writer</name> <operator>=</operator> <call><name><name>SolrIndexWriter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"SolrCore.initIndex"</literal></expr></argument>, <argument><expr><name>indexDir</name></expr></argument>, <argument><expr><call><name>getDirectoryFactory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                                         <argument><expr><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>solrConfig</name><operator>.</operator><name>indexConfig</name></name></expr></argument>, <argument><expr><name>solrDelPolicy</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call>
         <call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
       </block_content>}</block></finally>
 
 
  </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Creates an instance by trying a constructor that accepts a SolrCore before
   *  trying the default (no arg) constructor.
   *@param className the instance class to create
   *@param cast the class or interface that the instance should extend or implement
   *@param msg a message helping compose the exception error if any occurs.
   *@return the desired instance
   *@throws SolrException if the object could not be instantiated
   */</comment>
  <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>createInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cast</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>,<argument><expr><name>cast</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 

   <comment type="block" format="javadoc">/**
    * Creates an instance by trying a constructor that accepts a SolrCore before
    * trying the default (no arg) constructor.
@@ -568,11 +550,11 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
    * @return the desired instance
    * @throws SolrException if the object could not be instantiated
    */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>createInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cast</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>createInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cast</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>ResourceLoader</name></type> <name>resourceLoader</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"SolrCore Object"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>resourceLoader</name><operator>.</operator><name>findClass</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">//most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.</comment>
       <comment type="line">// So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors</comment>
       <decl_stmt><decl><type><name><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>cons</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>getConstructors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">582</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">564</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
           <return>return <expr><call><name><name>cast</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>con</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
         }</block></expr></expr_stmt>
       </block_content>}</block></try>
      <return>return <expr><call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</return><comment type="line">//use the empty constructor</comment>
      <return>return <expr><call><name><name>resourceLoader</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</return><comment type="line">//use the empty constructor</comment>
     </block_content>}</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>SolrException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><name>e</name></expr>;</throw>
     </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">596</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">578</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"Error Instantiating "</literal> <operator>+</operator> <name>msg</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>className</name> <operator>+</operator> <literal type="string">" failed to instantiate "</literal> <operator>+</operator> <call><name><name>cast</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
   </block_content>}</block></catch>
  

   <function><type><specifier>private</specifier> <name>UpdateHandler</name></type> <name>createReloadedUpdateHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>UpdateHandler</name></type> <name>updateHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>UpdateHandler</name></extends></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"SolrCore Object"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">609</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">591</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
           <expr><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name> <name>types</name> <operator>=</operator> <call><name><name>con</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
           <if_stmt><if>if<condition>(<expr><name><name>types</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>SolrCore</name><operator>.</operator><name>class</name></name> <operator>&amp;&amp;</operator> <name><name>types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>UpdateHandler</name><operator>.</operator><name>class</name></name></expr>)</condition><block>{<block_content>
             <return>return <expr><call><name><name>UpdateHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>cast</name></name></name><argument_list>(<argument><expr><call><name><name>con</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>updateHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt> 
          </block_content>}</block></function>
         </block_content>}</block></function>
         <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,<argument><expr><literal type="string">"Error Instantiating "</literal><operator>+</operator><name>msg</name><operator>+</operator><literal type="string">", "</literal><operator>+</operator><name>className</name><operator>+</operator> <literal type="string">" could not find proper constructor for "</literal> <operator>+</operator> <call><name><name>UpdateHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>SolrException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">628</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">610</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
 
   <expr><specifier>public</specifier> <operator>&lt;</operator><name>T</name> extends <name>Object</name><operator>&gt;</operator> <name>T</name> <call><name>createInitInstance</name><argument_list>(<argument><expr><name>PluginInfo</name> <name>info</name></expr></argument>,<argument><expr><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <name>cast</name></expr></argument>, <argument><expr><name>String</name> <name>msg</name></expr></argument>, <argument><expr><name>String</name> <name>defClassName</name></expr></argument>)</argument_list></call><block>{
     <if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <name>T</name> <name>o</name> <operator>=</operator> <call><name>createInstance</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>info</name><operator>.</operator><name>className</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>defClassName</name></expr> </then><else>: <expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></else></ternary></expr></argument>,<argument><expr><name>cast</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></block></expr>;
    <expr><name>T</name> <name>o</name> <operator>=</operator> <call><name>createInstance</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>info</name><operator>.</operator><name>className</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>defClassName</name></expr> </then><else>: <expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></else></ternary></expr></argument> ,<argument><expr><name>cast</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getResourceLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>PluginInfoInitialized</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PluginInfoInitialized</name><operator>)</operator> <name>o</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>NamedListInitializedPlugin</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">640</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">622</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
     <return>return <expr><name>o</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>SolrEventListener</name></type> <name>createEventListener</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name><name>SolrEventListener</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"Event Listener"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>SolrRequestHandler</name></type> <name>createRequestHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name><name>SolrRequestHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"Request Handler"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>UpdateHandler</name></type> <name>createUpdateHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name><name>UpdateHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"Update Handler"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name><name>UpdateHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"Update Handler"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getResourceLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <function><type><specifier>private</specifier> <name>UpdateHandler</name></type> <name>createUpdateHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name>UpdateHandler</name></type> <name>updateHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name>createReloadedUpdateHandler</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"Update Handler"</literal></expr></argument>, <argument><expr><name>updateHandler</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>QueryResponseWriter</name></type> <name>createQueryResponseWriter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name><name>QueryResponseWriter</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"Query Response Writer"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/**
    * Creates a new core and register it in the list of cores.
    * If a core with the same name already exists, it will be stopped and replaced by this one.
@@ -697,11 +667,11 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     this.updateHandler = null;
     this.isReloaded = true;
     this.reqHandlers = null;
    this.searchComponents = null;
     this.updateProcessorChains = null;
     this.infoRegistry = null;
     this.codec = null;
     this.ruleExpiryLock = null;
    this.memClassLoader = null;
 
     solrCoreState = null;
   }
@@ -719,7 +689,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     this.setName( name );
     resourceLoader = config.getResourceLoader();
     this.solrConfig = config;
    

     if (updateHandler == null) {
       initDirectoryFactory();
     }
@@ -784,7 +754,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
       schema = IndexSchemaFactory.buildIndexSchema(IndexSchema.DEFAULT_SCHEMA_FILE, config);
     }
     this.schema = schema;
    final SimilarityFactory similarityFactory = schema.getSimilarityFactory(); 
    final SimilarityFactory similarityFactory = schema.getSimilarityFactory();
     if (similarityFactory instanceof SolrCoreAware) {
       // Similarity needs SolrCore before inform() is called on all registered SolrCoreAware listeners below
       ((SolrCoreAware)similarityFactory).inform(this);
@@ -796,21 +766,21 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     this.slowQueryThresholdMillis = config.slowQueryThresholdMillis;
 
     booleanQueryMaxClauseCount();
  

     final CountDownLatch latch = new CountDownLatch(1);
 
     try {
      

       initListeners();
      

       if (delPolicy == null) {
         initDeletionPolicy();
       } else {
         this.solrDelPolicy = delPolicy;
       }
      

       this.codec = initCodec(solrConfig, schema);
      

       if (updateHandler == null) {
         solrCoreState = new DefaultSolrCoreState(getDirectoryFactory());
       } else {
@@ -818,17 +788,15 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
         directoryFactory = solrCoreState.getDirectoryFactory();
         this.isReloaded = true;
       }
      
      memClassLoader = new MemClassLoader(PluginRegistry.RuntimeLib.getLibObjects(this, solrConfig.getPluginInfos(PluginRegistry.RuntimeLib.class.getName())), getResourceLoader());
       initIndex(prev != null);
      

       initWriters();
      initQParsers();
      initValueSourceParsers();
      initTransformerFactories();
      
      this.searchComponents = Collections
          .unmodifiableMap(loadSearchComponents());
      
      qParserPlugins.init(createInstances(QParserPlugin.standardPlugins), this);
      valueSourceParsers.init(ValueSourceParser.standardValueSourceParsers, this);
      transformerFactories.init(TransformerFactory.defaultFactories, this);
      loadSearchComponents();

       // Processors initialized before the handlers
       updateProcessorChains = loadUpdateProcessorChains();
       reqHandlers = new RequestHandlers(this);
@@ -836,9 +804,9 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
 
       // Handle things that should eventually go away
       initDeprecatedSupport();
      

       statsCache = initStatsCache();
      

       // cause the executor to stall so firstSearcher events won't fire
       // until after inform() has been called for all components.
       // searchExecutor must be single-threaded for this to work
@@ -849,7 +817,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
           return null;
         }
       });
      

       // use the (old) writer to open the first searcher
       RefCounted&lt;IndexWriter&gt; iwRef = null;
       if (prev != null) {
@@ -867,9 +835,9 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
           };
         }
       }
      

       String updateHandlerClass = solrConfig.getUpdateHandlerInfo().className;
      

       if (updateHandler == null) {
         this.updateHandler = createUpdateHandler(updateHandlerClass == null ? DirectUpdateHandler2.class
             .getName() : updateHandlerClass);
@@ -886,10 +854,10 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
         newReaderCreator = null;
         if (iwRef != null) iwRef.decref();
       }
      

       // Initialize the RestManager
       restManager = initRestManager();
            

       // Finally tell anyone who wants to know
       resourceLoader.inform(resourceLoader);
       resourceLoader.inform(this); // last call before the latch is released.
@@ -899,7 +867,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
       if (e instanceof OutOfMemoryError) {
         throw (OutOfMemoryError)e;
       }
      

       try {
        this.close();
       } catch (Throwable t) {
@@ -908,8 +876,8 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
         }
         log.error("Error while closing", t);
       }
      
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, 

      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                               e.getMessage(), e);
     } finally {
       // allow firstSearcher events to fire and make sure it is released
@@ -917,7 +885,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     }
 
     infoRegistry.put("core", this);
    

     // register any SolrInfoMBeans SolrResourceLoader initialized
     //
     // this must happen after the latch is released, because a JMX server impl may
@@ -925,7 +893,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     // and a SolrCoreAware MBean may have properties that depend on getting a Searcher
     // from the core.
     resourceLoader.inform(infoRegistry);
    

     CoreContainer cc = cd.getCoreContainer();
 
     if (cc != null &amp;&amp; cc.isZooKeeperAware()) {
@@ -951,7 +919,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     ruleExpiryLock = new ReentrantLock();
     registerConfListener();
   }
    

   private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {
     final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());
     final CodecFactory factory;
@@ -986,7 +954,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     }
     return factory.getCodec();
   }
  

   private StatsCache initStatsCache() {
     final StatsCache cache;
     PluginInfo pluginInfo = solrConfig.getPluginInfo(StatsCache.class.getName());
@@ -1016,7 +984,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     UpdateRequestProcessorChain def = initPlugins(map,UpdateRequestProcessorChain.class, UpdateRequestProcessorChain.class.getName());
     if(def == null){
       def = map.get(null);
    } 
    }
     if (def == null) {
       log.info("no updateRequestProcessorChain defined as default, creating implicit default");
       // construct the default chain
@@ -1031,14 +999,14 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     map.put("", def);
     return map;
   }
   

   public SolrCoreState getSolrCoreState() {
     return solrCoreState;
  }  
  }
 
   /**
    * @return an update processor registered to the given name.  Throw an exception if this chain is undefined
   */</comment>    
   <expr_stmt><expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>UpdateRequestProcessorChain</name> <call><name>getUpdateProcessingChain</name><argument_list>( <argument><expr><name>final</name> <name>String</name> <name>name</name></expr></argument> )</argument_list></call>
   <block>{
     <expr><name>UpdateRequestProcessorChain</name> <name>chain</name> <operator>=</operator> <call><name><name>updateProcessorChains</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;
@@ <operator>-</operator><literal type="number">1048</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">1016</literal><operator>,</operator><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name><operator>,</operator> <name>Closeable</name> <block>{
     }</block></block></expr></expr_stmt>
     <return>return <expr><name>chain</name></expr>;</return>
   </block_content>}</block></if></if_stmt>
  

   <comment type="line">// this core current usage count</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>refCount</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1056</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1024</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>open</name><argument_list>()</argument_list></call> <block>{
     <expr><call><name><name>refCount</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;
   }</block>
  

   <comment type="block" format="javadoc">/**
    * Close all resources allocated by the core if it is no longer in use...
    * &lt;ul&gt;
@@ -1065,7 +1033,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
    *   &lt;li&gt;all CloseHooks will be notified&lt;/li&gt;
    *   &lt;li&gt;All MBeans will be unregistered from MBeanServer if JMX was enabled
    *       &lt;/li&gt;
   * &lt;/ul&gt; 
   * &lt;/ul&gt;
    * &lt;p&gt;
    * The behavior of this method is determined by the result of decrementing
    * the core's reference count (A core is created with a reference count of 1)...
@@ -1079,7 +1047,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
    *       is taken.
    *   &lt;/li&gt;
    * &lt;/ul&gt;
   * @see #isClosed() 
   * @see #isClosed()
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <block>{
     <expr><name>int</name> <name>count</name> <operator>=</operator> <call><name><name>refCount</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">1097</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1065</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr>, <expr><name>Closeable</name> <block>{
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>hook</name><operator>.</operator><name>preClose</name></name><argument_list>( <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block_content></block></try>}</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
           <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>Error</name></expr>)</condition> <block>{<block_content>
              <throw>throw <expr><operator>(</operator><name>Error</name><operator>)</operator> <name>e</name></expr>;</throw>
            <expr_stmt/></block_content></block></if></if_stmt></block_content></block></catch>}</block>
@@ <operator>-</operator><literal type="number">1106</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1074</literal></expr>,<expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr>, <expr><name>Closeable</name> <block>{
     }</block></expr>
 
     <if_stmt><if>if<condition>(<expr><name>reqHandlers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>reqHandlers</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <call><name><name>responseWriters</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>searchComponents</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>qParserPlugins</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>valueSourceParsers</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>transformerFactories</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>memClassLoader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>memClassLoader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
 
 
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1118</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1098</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <throw>throw <argument_list>(<argument><expr><name>Error</name></expr></argument></argument_list></throw>) <name>e</name></block></expr>;</expr_stmt>
       </block_content>}</block></try>
     </block_content>}</block></catch>
    

     <decl_stmt><decl><type><name>boolean</name></type> <name>coreStateClosed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>solrCoreState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1134</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1114</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <throw>throw <argument_list>(<argument><expr><name>Error</name></expr></argument></argument_list></throw>) <name>e</name></block></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></try>
    

     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>ExecutorUtil</name><operator>.</operator><name>shutdownAndAwaitTermination</name></name><argument_list>(<argument><expr><name>searcherExecutor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1168</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1148</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <throw>throw <argument_list>(<argument><expr><name>Error</name></expr></argument></argument_list></throw>) <name>e</name></block></expr>;</expr_stmt>
       </block_content>}</block></catch></try>
     </block_content>}</block></function>
    

     <if_stmt><if>if <condition>(<expr><name>coreStateClosed</name></expr>)</condition> <block>{<block_content>
      

       <try>try <block>{<block_content>
         <expr_stmt><expr><call><name><name>directoryFactory</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1179</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1159</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
           <throw>throw <argument_list>(<argument><expr><name>Error</name></expr></argument></argument_list></throw>) <name>e</name></block></expr>;</expr_stmt>
         </block_content>}</block></catch></try>
       </block_content>}</block></if></if_stmt>
      

     }
 
    

     if<expr_stmt><expr><operator>(</operator> <name>closeHooks</name> <operator>!=</operator> <literal type="null">null</literal> <operator>)</operator> <block>{
        <for>for<control>( <init><decl><type><name>CloseHook</name></type> <name>hook</name> <range>: <expr><name>closeHooks</name></expr></range></decl></init> )</control> <block>{<block_content>
          <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1195</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
          }</block></expr></expr_stmt></block_content></block></try></block_content></block></for>
       }</block></expr></expr_stmt>
     }
    

     <comment type="line">// For debugging </comment>
 <comment type="line">//    numCloses.incrementAndGet();</comment>
 <comment type="line">//    openHandles.remove(this);</comment>
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">1205</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">1185</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   <expr><specifier>public</specifier> <name>int</name> <call><name>getOpenCount</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><call><name><name>refCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>
  

   <comment type="block" format="javadoc">/** Whether this core is closed. */</comment>
   <specifier>public</specifier> <name>boolean</name> <call><name>isClosed</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><call><name><name>refCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
   }</block></expr></expr_stmt>
  

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>protected</specifier> <name>void</name></type> <name>finalize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1258</literal></expr><operator>,</operator><expr><literal type="number">113</literal> <operator>+</operator><literal type="number">1238</literal></expr><operator>,</operator><expr><literal type="number">74</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   <comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
 
   <comment type="block" format="javadoc">/**
   * Get the request handler registered to a given name.  
   * 
   * Get the request handler registered to a given name.
   *
    * This function is thread safe.
    */</comment>
   <expr><specifier>public</specifier> <name>SolrRequestHandler</name> <call><name>getRequestHandler</name><argument_list>(<argument><expr><name>String</name> <name>handlerName</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name><name>RequestHandlerBase</name><operator>.</operator><name>getRequestHandler</name></name><argument_list>(<argument><expr><call><name><name>RequestHandlers</name><operator>.</operator><name>normalize</name></name><argument_list>(<argument><expr><name>handlerName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>reqHandlers</name><operator>.</operator><name>getRequestHandlers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
    <return>return <expr><call><name><name>RequestHandlerBase</name><operator>.</operator><name>getRequestHandler</name></name><argument_list>(<argument><expr><call><name><name>RequestHandlers</name><operator>.</operator><name>normalize</name></name><argument_list>(<argument><expr><name>handlerName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reqHandlers</name><operator>.</operator><name>handlers</name></name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Returns an unmodifiable Map containing the registered handlers of the specified type.
   */</comment>
  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>SolrRequestHandler</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getRequestHandlers</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>reqHandlers</name><operator>.</operator><name>getAll</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/**
    * Returns an unmodifiable Map containing the registered handlers
    */</comment>
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></type> <name>getRequestHandlers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>reqHandlers</name><operator>.</operator><name>getRequestHandlers</name></name><argument_list>()</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></type> <name>getRequestHandlers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>reqHandlers</name><operator>.</operator><name>handlers</name></name></expr>;</return>
   </block_content>}</block></function>
 
 
   <comment type="block" format="javadoc">/**
    * Registers a handler at the specified location.  If one exists there, it will be replaced.
    * To remove a handler, register &lt;code&gt;null&lt;/code&gt; at its path
   * 
   *
    * Once registered the handler can be accessed through:
    * &lt;pre&gt;
    *   http://${host}:${port}/${context}/${handlerName}
   * or:  
   * or:
    *   http://${host}:${port}/${context}/select?qt=${handlerName}
   * &lt;/pre&gt;  
   * 
   * &lt;/pre&gt;
   *
    * Handlers &lt;em&gt;must&lt;/em&gt; be initialized before getting registered.  Registered
    * handlers can immediately accept requests.
   * 
   *
    * This call is thread safe.
   *  
   *
    * @return the previous &lt;code&gt;SolrRequestHandler&lt;/code&gt; registered to this name &lt;code&gt;null&lt;/code&gt; if none.
    */</comment>
   <function><type><specifier>public</specifier> <name>SolrRequestHandler</name></type> <name>registerRequestHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>handlerName</name></decl></parameter>, <parameter><decl><type><name>SolrRequestHandler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>reqHandlers</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>handlerName</name></expr></argument>,<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * Register the default search components
    */</comment>
  <expr_stmt><expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SearchComponent</name></argument>&gt;</argument_list></name> <call><name>loadSearchComponents</name><argument_list>()</argument_list></call>
  <specifier>private</specifier> <name>void</name> <call><name>loadSearchComponents</name><argument_list>()</argument_list></call>
   <block>{
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SearchComponent</name></argument>&gt;</argument_list></name> <name>components</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>initPlugins</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>SearchComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SearchComponent</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>components</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SearchComponent</name></type> <name>c</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>instanceof</operator> <name>HighlightComponent</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>HighlightComponent</name></type> <name>hl</name> <init>= <expr><operator>(</operator><name>HighlightComponent</name><operator>)</operator> <name>c</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>HighlightComponent</name><operator>.</operator><name>COMPONENT_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>HighlightComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SearchComponent</name></argument>&gt;</argument_list></name></type> <name>instances</name> <init>= <expr><call><name>createInstances</name><argument_list>(<argument><expr><name><name>SearchComponent</name><operator>.</operator><name>standard_components</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SearchComponent</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>instances</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setName</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>searchComponents</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>instances</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>searchComponents</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>searchComponents</name><operator>.</operator><name>isLoaded</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>searchComponents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>HighlightComponent</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>HighlightComponent</name><operator>.</operator><name>COMPONENT_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>searchComponents</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>HighlightComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><call><name><name>searchComponents</name><operator>.</operator><name>getRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
         <break>break;</break>
       </block_content>}</block></function>
     </block_content>}</block></try>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>HighlightComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>HighlightComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>QueryComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>QueryComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>FacetComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>FacetComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>MoreLikeThisComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>MoreLikeThisComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>StatsComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>StatsComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>DebugComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>DebugComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>RealTimeGetComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>RealTimeGetComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addIfNotPresent</name><argument_list>(<argument><expr><name>components</name></expr></argument>,<argument><expr><name><name>ExpandComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>,<argument><expr><name><name>ExpandComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>components</name></expr>;</return>
   </block_content>}</block></function>
  <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>addIfNotPresent</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument> ,<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>registry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends  <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>registry</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>T</name></type> <name>searchComp</name> <init>= <expr><call><name><name>resourceLoader</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>searchComp</name> <operator>instanceof</operator> <name>NamedListInitializedPlugin</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>NamedListInitializedPlugin</name><operator>)</operator><name>searchComp</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>( <argument><expr><operator>new</operator> <call><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>(<expr><name>searchComp</name> <operator>instanceof</operator> <name>SearchComponent</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SearchComponent</name><operator>)</operator><name>searchComp</name><operator>)</operator><operator>.</operator><call><name>setName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>registry</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>searchComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>searchComp</name> <operator>instanceof</operator> <name>SolrInfoMBean</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name><name>infoRegistry</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SolrInfoMBean</name><operator>)</operator><name>searchComp</name><operator>)</operator><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>SolrInfoMBean</name><operator>)</operator><name>searchComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/**
    * @return a Search Component registered to a given name.  Throw an exception if the component is undefined
    */</comment>
  <function><type><specifier>public</specifier> <name>SearchComponent</name></type> <name>getSearchComponent</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter> )</parameter_list>
  <block>{<block_content>
    <decl_stmt><decl><type><name>SearchComponent</name></type> <name>component</name> <init>= <expr><call><name><name>searchComponents</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>component</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>( <argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>,
          <argument><expr><literal type="string">"Unknown Search Component: "</literal><operator>+</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>component</name></expr>;</return>
  <function><type><specifier>public</specifier> <name>SearchComponent</name></type> <name>getSearchComponent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>searchComponents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * Accessor for all the Search Components
    * @return An unmodifiable Map of Search Components
    */</comment>
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SearchComponent</name></argument>&gt;</argument_list></name></type> <name>getSearchComponents</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>SearchComponent</name></argument>&gt;</argument_list></name></type> <name>getSearchComponents</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>searchComponents</name></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1374</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1315</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * RequestHandlers need access to the updateHandler so they can all talk to the
   * same RAM indexer.  
   * same RAM indexer.
    */</comment>
   <expr><specifier>public</specifier> <name>UpdateHandler</name> <call><name>getUpdateHandler</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>updateHandler</name></expr>;</return>
@@ <operator>-</operator><literal type="number">1529</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">1470</literal><operator>,</operator><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name><operator>,</operator> <name>Closeable</name> <block>{
         <expr><name>DirectoryReader</name> <name>currentReader</name> <operator>=</operator> <call><name><name>newestSearcher</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawReader</name><argument_list>()</argument_list></call></expr>;
 
         <comment type="line">// SolrCore.verbose("start reopen from",previousSearcher,"writer=",writer);</comment>
        

         <expr><name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>IndexWriter</name></argument>&gt;</argument_list></name> <name>writer</name> <operator>=</operator> <call><name>getUpdateHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrCoreState</name><argument_list>()</argument_list></call>
             <operator>.</operator><call><name>getIndexWriter</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;
         <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1582</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1523</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
           <comment type="line">// so that we pick up any uncommitted changes and so we don't go backwards</comment>
           <comment type="line">// in time on a core reload</comment>
           <expr><name>DirectoryReader</name> <name>newReader</name> <operator>=</operator> <call><name><name>newReaderCreator</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;
          <expr><name>tmp</name> <operator>=</operator> <operator>new</operator> <call><name>SolrIndexSearcher</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>newIndexDir</name></expr></argument>, <argument><expr><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr></argument>, 
          <argument><expr><name>tmp</name> <operator>=</operator> <operator>new</operator> <call><name>SolrIndexSearcher</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>newIndexDir</name></expr></argument>, <argument><expr><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr></argument>,
               <argument><expr><operator>(</operator><ternary><condition><expr><name>realtime</name></expr> ?</condition><then> <expr><literal type="string">"realtime"</literal></expr></then><else>:<expr><literal type="string">"main"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>newReader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>!</operator><name>realtime</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>directoryFactory</name></expr></argument>)</argument_list></call></expr></argument>;
         }</argument_list></call></expr> <if_stmt><else>else  <block>{<block_content>
           <decl_stmt><decl><type><name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>IndexWriter</name></argument>&gt;</argument_list></name></type> <name>writer</name> <init>= <expr><call><name>getUpdateHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrCoreState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexWriter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1626</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1567</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
     }</block></expr></expr_stmt></block_content></block></else></if_stmt>
 
   }</block>
  

   <comment type="block" format="javadoc">/**
    * Get a {@link SolrIndexSearcher} or start the process of creating a new one.
    * &lt;p&gt;
@@ -1764,7 +1705,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
 
       // if the underlying seracher has not changed, no warming is needed
       if (newSearcher != currSearcher) {
        

         // warm the new searcher based on the current searcher.
         // should this go before the other event handlers or after?
         if (currSearcher != null) {
@@ -1783,7 +1724,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
             }
           });
         }
        

         if (currSearcher == null) {
           future = searcherExecutor.submit(new Callable() {
             @Override
@@ -1802,7 +1743,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
             }
           });
         }
        

         if (currSearcher != null) {
           future = searcherExecutor.submit(new Callable() {
             @Override
@@ -1821,7 +1762,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
             }
           });
         }
        

       }
 
 
@@ -2005,9 +1946,9 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     if (handler==null) {
       String msg = "Null Request Handler '" +
         req.getParams().get(CommonParams.QT) + "'";
      

       if (log.isWarnEnabled()) log.warn(logid + msg + ":" + req);
      

       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);
     }
 
@@ -2094,7 +2035,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     if( ep != null ) {
       EchoParamStyle echoParams = EchoParamStyle.get( ep );
       if( echoParams == null ) {
        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"Invalid value '" + ep + "' for " + CommonParams.HEADER_ECHO_PARAMS 
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Invalid value '" + ep + "' for " + CommonParams.HEADER_ECHO_PARAMS
             + " parameter, use '" + EchoParamStyle.EXPLICIT + "' or '" + EchoParamStyle.ALL + "'" );
       }
       if( echoParams == EchoParamStyle.EXPLICIT ) {
@@ -2109,10 +2050,11 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     SolrException.log(log,null,e);
   }
 
  
  
  private QueryResponseWriter defaultResponseWriter;
  private final Map&lt;String, QueryResponseWriter&gt; responseWriters = new HashMap&lt;&gt;();
  public PluginRegistry&lt;QueryResponseWriter&gt; getResponseWriters() {
    return responseWriters;
  }

  private final PluginRegistry&lt;QueryResponseWriter&gt; responseWriters = new PluginRegistry&lt;&gt;(QueryResponseWriter.class, this);
   public static final Map&lt;String ,QueryResponseWriter&gt; DEFAULT_RESPONSE_WRITERS ;
   static{
     HashMap&lt;String, QueryResponseWriter&gt; m= new HashMap&lt;&gt;();
@@ -2147,165 +2089,60 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     };
   }
 
  public MemClassLoader getMemClassLoader() {
    return memClassLoader;
  }

   public interface RawWriter {
     public void write(OutputStream os) throws IOException ;
   }
  

   /** Configure the query response writers. There will always be a default writer; additional
    * writers may also be configured. */</comment>
   <specifier>private</specifier> <name>void</name> <call><name>initWriters</name><argument_list>()</argument_list></call> <block>{
    <comment type="line">// use link map so we iterate in the same order</comment>
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>,<argument><name>QueryResponseWriter</name></argument>&gt;</argument_list></name> <name>writers</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>PluginInfo</name></type> <name>info</name> <range>: <expr><call><name><name>solrConfig</name><operator>.</operator><name>getPluginInfos</name></name><argument_list>(<argument><expr><call><name><name>QueryResponseWriter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>QueryResponseWriter</name></type> <name>writer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>startup</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>attributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"startup"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>startup</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
          <if_stmt><if>if<condition>( <expr><literal type="string">"lazy"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>startup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"adding lazy queryResponseWriter: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>LazyQueryResponseWriterWrapper</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>initArgs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></try></block_content></block></for>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>( <argument><expr><literal type="string">"Unknown startup value: '"</literal><operator>+</operator><name>startup</name><operator>+</operator><literal type="string">"' for: "</literal><operator>+</operator><name><name>info</name><operator>.</operator><name>className</name></name></expr></argument> )</argument_list></call></expr>;</throw>
          <expr_stmt/></block_content></block></else></if_stmt></block_content></block></try>}</block></block></expr>
        }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
          <expr_stmt><expr><name>writer</name> <operator>=</operator> <call><name>createQueryResponseWriter</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>writers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QueryResponseWriter</name></type> <name>old</name> <init>= <expr><call><name>registerResponseWriter</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Multiple queryResponseWriter registered to the same name: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">" ignoring: "</literal> <operator>+</operator> <call><name><name>old</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>info</name><operator>.</operator><name>isDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name>defaultResponseWriter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Multiple default queryResponseWriter registered, using: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>defaultResponseWriter</name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"created "</literal><operator>+</operator><name><name>info</name><operator>.</operator><name>name</name></name><operator>+</operator><literal type="string">": "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>SolrException</name></type> <name>e</name> <init>= <expr><operator>new</operator> <call><name>SolrException</name>
            <argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"QueryResponseWriter init failure"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
      </block_content>}</block></catch>
    </block_content>}</block></function>

    <comment type="line">// we've now registered all handlers, time to init them in the same order</comment>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>,<argument><name>QueryResponseWriter</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>writers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>PluginInfo</name></type> <name>info</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>QueryResponseWriter</name></type> <name>writer</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>responseWriters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>writer</name> <operator>instanceof</operator> <name>PluginInfoInitialized</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PluginInfoInitialized</name><operator>)</operator> <name>writer</name><operator>)</operator><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else<block>{<block_content>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>initArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>NamedList</name></type> <name>emptyList</name> <init>= <expr><operator>new</operator> <call><name>NamedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>QueryResponseWriter</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>DEFAULT_RESPONSE_WRITERS</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>responseWriters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>responseWriters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// call init so any logic in the default writers gets invoked</comment>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>emptyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name><name>responseWriters</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>DEFAULT_RESPONSE_WRITERS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// configure the default response writer; this one should never be null</comment>
    <if_stmt><if>if <condition>(<expr><name>defaultResponseWriter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>defaultResponseWriter</name> <operator>=</operator> <call><name><name>responseWriters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"standard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>responseWriters</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>responseWriters</name><operator>.</operator><name>setDefault</name></name><argument_list>(<argument><expr><literal type="string">"standard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   }
  


   <comment type="block" format="javadoc">/** Finds a writer by name, or returns the default writer if not found. */</comment>
   public <function><type><specifier>final</specifier> <name>QueryResponseWriter</name></type> <name>getQueryResponseWriter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>writerName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>writerName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QueryResponseWriter</name></type> <name>writer</name> <init>= <expr><call><name><name>responseWriters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>writerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>writer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>writer</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>defaultResponseWriter</name></expr>;</return>
    <return>return <expr><call><name><name>responseWriters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>writerName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** Returns the appropriate writer for a request. If the request specifies a writer via the
    * 'wt' parameter, attempts to find that one; otherwise return the default writer.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>final</specifier> <name>QueryResponseWriter</name></type> <name>getQueryResponseWriter</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getQueryResponseWriter</name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CommonParams</name><operator>.</operator><name>WT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> 
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></type> <name>qParserPlugins</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Configure the query parsers. */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>initQParsers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>initPlugins</name><argument_list>(<argument><expr><name>qParserPlugins</name></expr></argument>,<argument><expr><name><name>QParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// default parsers</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>qParserPlugins</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><operator>(</operator><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name><operator>)</operator><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>QParserPlugin</name></type> <name>plugin</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>qParserPlugins</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>plugin</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>infoRegistry</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <return>return <expr><call><name>getQueryResponseWriter</name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CommonParams</name><operator>.</operator><name>WT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></type> <name>qParserPlugins</name> <init>= <expr><operator>new</operator> <call><name><name>PluginRegistry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>QParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

   <function><type><specifier>public</specifier> <name>QParserPlugin</name></type> <name>getQueryPlugin</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parserName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QParserPlugin</name></type> <name>plugin</name> <init>= <expr><call><name><name>qParserPlugins</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>parserName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>plugin</name></expr>;</return></block_content></block></if></if_stmt>
    <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown query parser '"</literal><operator>+</operator><name>parserName</name><operator>+</operator><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ValueSourceParser</name></argument>&gt;</argument_list></name></type> <name>valueSourceParsers</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Configure the ValueSource (function) plugins */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>initValueSourceParsers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>initPlugins</name><argument_list>(<argument><expr><name>valueSourceParsers</name></expr></argument>,<argument><expr><name><name>ValueSourceParser</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// default value source parsers</comment>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ValueSourceParser</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>ValueSourceParser</name><operator>.</operator><name>standardValueSourceParsers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>valueSourceParsers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>ValueSourceParser</name></type> <name>valueSourceParser</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>valueSourceParsers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>valueSourceParser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>valueSourceParser</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>qParserPlugins</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>parserName</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TransformerFactory</name></argument>&gt;</argument_list></name></type> <name>transformerFactories</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Configure the TransformerFactory plugins */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>initTransformerFactories</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Load any transformer factories</comment>
    <expr_stmt><expr><call><name>initPlugins</name><argument_list>(<argument><expr><name>transformerFactories</name></expr></argument>,<argument><expr><name><name>TransformerFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// Tell each transformer what its name is</comment>
    <for>for<control>( <init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TransformerFactory</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>TransformerFactory</name><operator>.</operator><name>defaultFactories</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>ValueSourceParser</name></argument>&gt;</argument_list></name></type> <name>valueSourceParsers</name> <init>= <expr><operator>new</operator> <call><name><name>PluginRegistry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ValueSourceParser</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>TransformerFactory</name></argument>&gt;</argument_list></name></type> <name>transformerFactories</name> <init>= <expr><operator>new</operator> <call><name><name>PluginRegistry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>TransformerFactory</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>createInstances</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>valueSourceParsers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>TransformerFactory</name></type> <name>f</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>transformerFactories</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// f.init(null); default ones don't need init</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name>getResourceLoader</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>T</name><operator>)</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//should never happen</comment>
        <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"Unbale to instantiate class"</literal></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></catch></try>
     </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
   </block_content>}</block></function>
  

   <function><type><specifier>public</specifier> <name>TransformerFactory</name></type> <name>getTransformerFactory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>transformerFactories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2313</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2150</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>addTransformerFactory</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>TransformerFactory</name> <name>factory</name></expr></argument>)</argument_list></call><block>{
     <expr><call><name><name>transformerFactories</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;
   }</block>
  

 
   <comment type="block" format="javadoc">/**
    * @param registry The map to which the instance should be added to. The key is the name attribute
@@ -2321,7 +2158,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
    * @param defClassName If PluginInfo does not have a classname, use this as the classname
    * @return The default instance . The one with (default=true)
    */</comment>
  <specifier>public</specifier> <operator>&lt;</operator><name>T</name><operator>&gt;</operator> <name>T</name> <call><name>initPlugins</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument> ,<argument><name>T</name></argument>&gt;</argument_list></name> <name>registry</name></expr></argument>, <argument><expr><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <name>type</name></expr></argument>, <argument><expr><name>String</name> <name>defClassName</name></expr></argument>)</argument_list></call><block>{
  <expr><specifier>private</specifier> <operator>&lt;</operator><name>T</name><operator>&gt;</operator> <name>T</name> <call><name>initPlugins</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name> <name>registry</name></expr></argument>, <argument><expr><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <name>type</name></expr></argument>, <argument><expr><name>String</name> <name>defClassName</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><call><name>initPlugins</name><argument_list>(<argument><expr><call><name><name>solrConfig</name><operator>.</operator><name>getPluginInfos</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>defClassName</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
   }</block>
 
@@ <operator>-</operator><literal type="number">2361</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2198</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr>, <expr><name>Closeable</name> <block>{
   <expr><specifier>public</specifier> <name>ValueSourceParser</name> <call><name>getValueSourceParser</name><argument_list>(<argument><expr><name>String</name> <name>parserName</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><call><name><name>valueSourceParsers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>parserName</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
   }</block>
  

   <comment type="block" format="javadoc">/**
    * Manage anything that should be taken care of in case configs change
    */</comment>
@@ <operator>-</operator><literal type="number">2370</literal></expr>,<expr><literal type="number">19</literal> <operator>+</operator><literal type="number">2207</literal></expr>,<expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr>, <expr><name>Closeable</name> <block>{
     <comment type="line">// TODO -- this should be removed in deprecation release...</comment>
     <expr><name>String</name> <name>gettable</name> <operator>=</operator> <call><name><name>solrConfig</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"admin/gettableFiles"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument> )</argument_list></call></expr>;
     <if_stmt><if>if<condition>( <expr><name>gettable</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>( 
      <argument><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(
           <argument><expr><literal type="string">"solrconfig.xml uses deprecated &lt;admin/gettableFiles&gt;, Please "</literal><operator>+</operator>
           <literal type="string">"update your config to use the ShowFileRequestHandler."</literal></expr></argument> )</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
       <if_stmt><if>if<condition>( <expr><call><name>getRequestHandler</name><argument_list>( <argument><expr><literal type="string">"/admin/file"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
         <decl_stmt><decl><type><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>invariants</name> <init>= <expr><operator>new</operator> <call><name><name>NamedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        

         <comment type="line">// Hide everything...</comment>
         <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hide</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <for>for <control>(<init><decl><type><name>String</name></type> <name>file</name> <range>: <expr><call><name><name>solrConfig</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>listConfigDir</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
           <expr_stmt><expr><call><name><name>hide</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr>    
        
        }</block>

         <comment type="line">// except the "gettable" list</comment>
         <name>StringTokenizer</name> <name>st</name> <operator>=</operator> <operator>new</operator> <call><name>StringTokenizer</name><argument_list>( <argument><expr><name>gettable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
         <while>while<condition>( <expr><call><name><name>st</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2391</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2228</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <for>for<control>( <init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>hide</name></expr></range></decl></init> )</control> <block>{<block_content>
           <expr_stmt><expr><call><name><name>invariants</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name><name>ShowFileRequestHandler</name><operator>.</operator><name>HIDDEN</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></for>}</block>
        

         <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <name>args</name> <operator>=</operator> <operator>new</operator> <call><name><name>NamedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><literal type="string">"invariants"</literal></expr></argument>, <argument><expr><name>invariants</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>ShowFileRequestHandler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>ShowFileRequestHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2404</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">2241</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
 
     <expr><name>String</name> <name>facetSort</name> <operator>=</operator> <call><name><name>solrConfig</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"//bool[@name='facet.sort']"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;
     <if_stmt><if>if <condition>(<expr><name>facetSort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>( 
      <argument><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(
           <argument><expr><literal type="string">"solrconfig.xml uses deprecated &lt;bool name='facet.sort'&gt;. Please "</literal><operator>+</operator>
           <literal type="string">"update your config to use &lt;string name='facet.sort'&gt;."</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
  </block_content>}</block></while> 
  
  </block_content>}</block></for>

   <comment type="block" format="javadoc">/**
    * Creates and initializes a RestManager based on configuration args in solrconfig.xml.
    * RestManager provides basic storage support for managed resource data, such as to
@@ -2417,36 +2254,36 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
    */</comment>
   <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>protected</specifier> <name>RestManager</name></type> <name>initRestManager</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SolrException</name></expr></argument></throws> <block>{<block_content>
    
    <decl_stmt><decl><type><name>PluginInfo</name></type> <name>restManagerPluginInfo</name> <init>= 

    <expr><name>PluginInfo</name> <name>restManagerPluginInfo</name> <operator>=</operator>
         <call><name>getSolrConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPluginInfo</name><argument_list>(<argument><expr><call><name><name>RestManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        

     <decl_stmt><decl><type><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>initArgs</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>RestManager</name></type> <name>mgr</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>restManagerPluginInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name><name>restManagerPluginInfo</name><operator>.</operator><name>className</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>mgr</name> <operator>=</operator> <call><name><name>resourceLoader</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>restManagerPluginInfo</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name><name>RestManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      

       <if_stmt><if>if <condition>(<expr><name><name>restManagerPluginInfo</name><operator>.</operator><name>initArgs</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>initArgs</name> <operator>=</operator> <operator>(</operator><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator><name><name>restManagerPluginInfo</name><operator>.</operator><name>initArgs</name></name></expr>;</expr_stmt>        
        <expr_stmt><expr><name>initArgs</name> <operator>=</operator> <operator>(</operator><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator> <name><name>restManagerPluginInfo</name><operator>.</operator><name>initArgs</name></name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>mgr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> 

    <if_stmt><if>if <condition>(<expr><name>mgr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><name>mgr</name> <operator>=</operator> <operator>new</operator> <call><name>RestManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    

     <if_stmt><if>if <condition>(<expr><name>initArgs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><name>initArgs</name> <operator>=</operator> <operator>new</operator> <call><name><name>NamedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                

     <decl_stmt><decl><type><name>String</name></type> <name>collection</name> <init>= <expr><call><name><name>coreDescriptor</name><operator>.</operator><name>getCollectionName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StorageIO</name></type> <name>storageIO</name> <init>= 
        <expr><call><name><name>ManagedResourceStorage</name><operator>.</operator><name>newStorageIO</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name>initArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>StorageIO</name></type> <name>storageIO</name> <init>=
        <expr><call><name><name>ManagedResourceStorage</name><operator>.</operator><name>newStorageIO</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name>initArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name>initArgs</name></expr></argument>, <argument><expr><name>storageIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

     <return>return <expr><name>mgr</name></expr>;</return>
  </block_content>}</block></function>  
  
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>CoreDescriptor</name></type> <name>getCoreDescriptor</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>coreDescriptor</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2516</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">2353</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         <expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"shard"</literal></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;
       }</block></expr></expr_stmt>
     }
    

     return <expr_stmt><expr><name>lst</name></expr>;</expr_stmt>
   }
  

   public <function><type><name>Codec</name></type> <name>getCodec</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>codec</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2583</literal></expr><operator>,</operator><expr><literal type="number">50</literal> <operator>+</operator><literal type="number">2420</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
     }</block></expr></expr_stmt>
   }
 
  public <class><specifier>final</specifier> class <name>LazyQueryResponseWriterWrapper</name> <super_list><implements>implements <super><name>QueryResponseWriter</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>SolrCore</name></type> <name>_core</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>_className</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NamedList</name></type> <name>_args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>QueryResponseWriter</name></type> <name>_writer</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LazyQueryResponseWriterWrapper</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name>NamedList</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_core</name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_className</name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_args</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_writer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>QueryResponseWriter</name></type> <name>getWrappedWriter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>_writer</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>QueryResponseWriter</name></type> <name>writer</name> <init>= <expr><call><name>createQueryResponseWriter</name><argument_list>(<argument><expr><name>_className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>init</name></name><argument_list>( <argument><expr><name>_args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>_writer</name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter> )</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>( <argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"lazy loading error"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument> )</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>_writer</name></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>SolrQueryRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name>getWrappedWriter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getContentType</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name>getWrappedWriter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentType</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
 
   <comment type="block" format="javadoc">/**Register to notify for any file change in the conf directory.
    * If the file change results in a core reload , then the listener
@@ -2714,6 +2507,10 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     };
   }
 
  public void registerInfoBean(String name, SolrInfoMBean solrInfoMBean) {
    infoRegistry.put(name, solrInfoMBean);
  }

   private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {
     if(zkPath == null) return false;
     try {
diff --git a/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java b/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java
index ad76ce2011c..a1391dbc113 100644
-- a/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java
++ b/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java
@@ -22,8 +22,7 @@ import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.core.PluginInfo;
import org.apache.solr.core.RequestHandlers;
import org.apache.solr.core.RequestParams;
import org.apache.solr.core.PluginRegistry;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.core.SolrInfoMBean;
 import org.apache.solr.request.SolrQueryRequest;
@@ -215,7 +214,7 @@ public abstract class RequestHandlerBase implements SolrRequestHandler, SolrInfo
    *
    * This function is thread safe.
    */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SolrRequestHandler</name></type> <name>getRequestHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>handlerName</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></type> <name>reqHandlers</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SolrRequestHandler</name></type> <name>getRequestHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>handlerName</name></decl></parameter>, <parameter><decl><type><name><name>PluginRegistry</name><argument_list type="generic">&lt;<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></type> <name>reqHandlers</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if<condition>(<expr><name>handlerName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
     <decl_stmt><decl><type><name>SolrRequestHandler</name></type> <name>handler</name> <init>= <expr><call><name><name>reqHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>handlerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">226</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>RequestHandlerBase</name> implements <name>SolrRequestHandler</name></expr><operator>,</operator> <expr><name>SolrInfo</name>
           <name>String</name> <name>firstPart</name> <operator>=</operator> <call><name><name>handlerName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name><name>reqHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>firstPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <if_stmt><if>if<condition>(<expr><name>handler</name> <operator>instanceof</operator> <name><name>RequestHandlers</name><operator>.</operator><name>LazyRequestHandlerWrapper</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RequestHandlers</name><operator>.</operator><name>LazyRequestHandlerWrapper</name></name><operator>)</operator><name>handler</name><operator>)</operator><operator>.</operator><call><name>getWrappedHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
           <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>instanceof</operator> <name>NestedRequestHandler</name></expr>)</condition> <block>{<block_content>
             <return>return <expr><operator>(</operator><operator>(</operator><name>NestedRequestHandler</name><operator>)</operator> <name>handler</name><operator>)</operator><operator>.</operator><call><name>getSubHandler</name><argument_list>(<argument><expr><call><name><name>handlerName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
           </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>SolrConfigHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>SolrConfigHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">79f776187ac</literal><operator>..</operator><name>c51525c4029</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>SolrConfigHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>SolrConfigHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>ContentStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>StrUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>ConfigOverlay</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>PluginInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>PluginsRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>ImplicitPlugins</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>RequestParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrResourceLoader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>SearchComponent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>SolrQueryResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>transform</name><operator>.</operator><name>TransformerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QParserPlugin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>ValueSourceParser</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>CommandOperation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import static <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name><operator>.</operator><name>format</name></name>;</import>
 <import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singletonList</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>CoreAdminParams</name><operator>.</operator><name>NAME</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>ConfigOverlay</name><operator>.</operator><name>NOT_EDITABLE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>REQUIRE_CLASS</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrConfig</name><operator>.</operator><name>PluginOpts</name><operator>.</operator><name>REQUIRE_NAME</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>CLASS_NAME</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfigHandler</name> extends <name>RequestHandlerBase</name> <block>{
       <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name> <name>map</name> <operator>=</operator> <call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toMap</name><argument_list>()</argument_list></call></expr>;
       <expr><name>Map</name> <name>reqHandlers</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>SolrRequestHandler</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;
       <if_stmt><if>if <condition>(<expr><name>reqHandlers</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SolrRequestHandler</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name>reqHandlers</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name> <name>plugins</name> <operator>=</operator> <call><name><name>PluginsRegistry</name><operator>.</operator><name>getHandlers</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginInfo</name></argument>&gt;</argument_list></name></type> <name>plugins</name> <init>= <expr><call><name><name>ImplicitPlugins</name><operator>.</operator><name>getHandlers</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>PluginInfo</name></type> <name>plugin</name> <range>: <expr><name>plugins</name></expr></range></decl></init>)</control> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>SolrRequestHandler</name><operator>.</operator><name>TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>plugin</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reqHandlers</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>plugin</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">316</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">312</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfigHandler</name> extends <name>RequestHandlerBase</name> <block>{
                 <if_stmt><if>if <condition>(<expr><literal type="string">"delete"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                   <expr_stmt><expr><name>overlay</name> <operator>=</operator> <call><name>deleteNamedComponent</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>overlay</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if> <else>else <block>{<block_content>
                  <expr_stmt><expr><name>overlay</name> <operator>=</operator> <call><name>updateNamedPlugin</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>overlay</name></expr></argument>, <argument><expr><call><name><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>overlay</name> <operator>=</operator> <call><name>updateNamedPlugin</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>overlay</name></expr></argument>, <argument><expr><call><name><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></else></if_stmt>
               }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                 <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unknown operation ''{0}'' "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">359</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">355</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfigHandler</name> extends <name>RequestHandlerBase</name> <block>{
 
     <expr><specifier>private</specifier> <name>ConfigOverlay</name> <call><name>updateNamedPlugin</name><argument_list>(<argument><expr><name><name>SolrConfig</name><operator>.</operator><name>SolrPluginInfo</name></name> <name>info</name></expr></argument>, <argument><expr><name>CommandOperation</name> <name>op</name></expr></argument>, <argument><expr><name>ConfigOverlay</name> <name>overlay</name></expr></argument>, <argument><expr><name>boolean</name> <name>isCeate</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>String</name> <name>name</name> <operator>=</operator> <call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr>;
      <name>String</name> <name>clz</name> <operator>=</operator> <call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>CLASS_NAME</name></expr></argument>)</argument_list></call></block></expr>;
      <name>String</name> <name>clz</name> <operator>=</operator> <ternary><condition><expr><call><name><name>info</name><operator>.</operator><name>options</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>REQUIRE_CLASS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>CLASS_NAME</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>CLASS_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>getMap</name></name><argument_list>(<argument><expr><name><name>PluginInfo</name><operator>.</operator><name>DEFAULTS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>getMap</name></name><argument_list>(<argument><expr><name><name>PluginInfo</name><operator>.</operator><name>INVARIANTS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>getMap</name></name><argument_list>(<argument><expr><name><name>PluginInfo</name><operator>.</operator><name>APPENDS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">383</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">379</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfigHandler</name> extends <name>RequestHandlerBase</name> <block>{
     }</block>
 
     <specifier>private</specifier> <name>boolean</name> <call><name>verifyClass</name><argument_list>(<argument><expr><name>CommandOperation</name> <name>op</name></expr></argument>, <argument><expr><name>String</name> <name>clz</name></expr></argument>, <argument><expr><name>Class</name> <name>expected</name></expr></argument>)</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>clz</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>( <expr><operator>!</operator><literal type="string">"true"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><literal type="string">"runtimeLib"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <comment type="line">//this is not dynamically loaded so we can verify the class right away</comment>
         <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>SolrCore</name><operator>.</operator><name>createInstance</name></name><argument_list>(<argument><expr><name>clz</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createInitInstance</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><name><name>SolrRequestHandler</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getDataMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>clz</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">522</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">519</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConfigHandler</name> extends <name>RequestHandlerBase</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>SET</name> <operator>=</operator> <literal type="string">"set"</literal></expr>;
   <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>UPDATE</name> <operator>=</operator> <literal type="string">"update"</literal></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CREATE</name> <init>= <expr><literal type="string">"create"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cmdPrefixes</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>CREATE</name></expr></argument>, <argument><expr><name>UPDATE</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cmdPrefixes</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>CREATE</name></expr></argument>, <argument><expr><name>UPDATE</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
 </block_content>}</block></catch></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>AdminHandlers</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>AdminHandlers</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8187727bc6c</literal><operator>..</operator><name>a218e35f113</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>AdminHandlers</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>AdminHandlers</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>RequestHandlerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>SolrQueryResponse</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>the</name> <name>plugins</name> <name>registered</name> <name>by</name> <name>this</name> <name>class</name> <name>are</name> <name>iplicitly</name> <name>registered</name> <name>by</name> <name>the</name> <name>system</name>
  <operator>*</operator><operator>/</operator>
 @<name>Deprecated</name>
<specifier>public</specifier> <name>class</name> <name>AdminHandlers</name> implements <name>SolrCoreAware</name></expr><operator>,</operator> <expr><name>SolrRequestHandler</name>
<specifier>public</specifier> <name>class</name> <name>AdminHandlers</name> extends <name>RequestHandlerBase</name> implements <name>SolrCoreAware</name>
 <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AdminHandlers</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
   <name>NamedList</name> <name>initArgs</name> <operator>=</operator> <literal type="null">null</literal></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>AdminHandlers</name> implements <name>SolrCoreAware</name></expr><operator>,</operator> <expr><name>SolrRequestHandler</name>
   <specifier>public</specifier> <name>void</name> <call><name>init</name><argument_list>(<argument><expr><name>NamedList</name> <name>args</name></expr></argument>)</argument_list></call> <block>{
     <expr><name><name>this</name><operator>.</operator><name>initArgs</name></name> <operator>=</operator> <name>args</name></expr>;
   }</block></expr></expr_stmt>
  

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>inform</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> 
   <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>( <init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>core</name><operator>.</operator><name>getRequestHandlers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>getPluginInfo</name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr>;</expr_stmt>
     <if_stmt><if>if<condition>( <expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>( <argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, 
           <argument><expr><literal type="string">"The AdminHandler is not registered with the current core."</literal></expr></argument> )</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AdminHandlers</name> implements <name>SolrCoreAware</name></expr><operator>,</operator> <expr><name>SolrRequestHandler</name>
     <call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"&lt;requestHandler name=\"/admin/\" \n class=\"solr.admin.AdminHandlers\" /&gt; is deprecated . It is not required anymore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  

   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>handleRequest</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleRequestBody</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>( <argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, 
         <argument><expr><literal type="string">"The AdminHandler should never be called directly"</literal></expr></argument> )</argument_list></call></expr>;</throw>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SearchComponent</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SearchComponent</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6b35a3d6de8</literal><operator>..</operator><literal type="number">937818e8e91</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SearchComponent</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SearchComponent</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrInfoMBean</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">125</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>SearchComponent</name> implements <name>SolrInfoMBean</name></expr><operator>,</operator> <expr><name>NamedListInitial</name>
   <specifier>public</specifier> <name>NamedList</name> <call><name>getStatistics</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   }</block></expr></expr_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SearchComponent</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>standard_components</name></decl>;</decl_stmt>
  <empty_stmt>;</empty_stmt>

  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SearchComponent</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>HighlightComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>HighlightComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>QueryComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>QueryComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>FacetComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>FacetComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>MoreLikeThisComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>MoreLikeThisComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StatsComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>StatsComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DebugComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>DebugComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>RealTimeGetComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>RealTimeGetComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ExpandComponent</name><operator>.</operator><name>COMPONENT_NAME</name></name></expr></argument>, <argument><expr><name><name>ExpandComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>standard_components</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QParserPlugin</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QParserPlugin</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3534769bc01</literal><operator>..</operator><name>e8da6729c85</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QParserPlugin</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QParserPlugin</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>mlt</name><operator>.</operator><name>MLTQParserPlugin</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>plugin</name><operator>.</operator><name>NamedListInitializedPlugin</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <class><specifier>public</specifier> <specifier>abstract</specifier> class <name>QParserPlugin</name> <super_list><implements>implements <super><name>NamedListInitializedPlugin</name></super>, <super><name>SolrInfoMBean</name></super></implements></super_list> <block>{
   <comment type="block" format="javadoc">/** internal use - name of the default parser */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">39</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QParserPlugin</name> implements <name>NamedListInitializedPlugin</name></expr><operator>,</operator> <expr><name>SolrI</name>
    <operator>*</operator> <name>This</name> <name>result</name> <name>to</name> <name>NPE</name> <name>during</name> <name><name>initialization</name><operator>.</operator></name>
    * <name>For</name> <name>every</name> <name>plugin</name></expr><operator>,</operator> <expr><name>listed</name> <name>here</name></expr><operator>,</operator> <expr><name>NAME</name> <name>field</name> <name>has</name> <name>to</name> <name>be</name> <name>final</name> <name>and</name> <specifier>static</specifier><operator>.</operator>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>Object</name><index>[]</index></name> <name>standardPlugins</name> <operator>=</operator> <block>{
    <expr><name><name>LuceneQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>LuceneQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>OldLuceneQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>OldLuceneQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>FunctionQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>FunctionQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>PrefixQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>PrefixQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>BoostQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>BoostQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>DisMaxQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>DisMaxQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>FieldQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>FieldQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>RawQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>RawQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>TermQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>TermQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>TermsQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>TermsQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>NestedQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>NestedQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>FunctionRangeQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>FunctionRangeQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>SpatialFilterQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>SpatialFilterQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>SpatialBoxQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>SpatialBoxQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>JoinQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>JoinQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>SurroundQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>SurroundQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>SwitchQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>SwitchQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>MaxScoreQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>MaxScoreQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>BlockJoinParentQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>BlockJoinParentQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>BlockJoinChildQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>BlockJoinChildQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>CollapsingQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>CollapsingQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>SimpleQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>SimpleQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>ComplexPhraseQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>ComplexPhraseQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>ReRankQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>ReRankQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>ExportQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>ExportQParserPlugin</name><operator>.</operator><name>class</name></name></expr>,
    <expr><name><name>MLTQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr>, <expr><name><name>MLTQParserPlugin</name><operator>.</operator><name>class</name></name></expr>
  }</block></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>QParserPlugin</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>standardPlugins</name></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>QParserPlugin</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>LuceneQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>LuceneQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OldLuceneQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>OldLuceneQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>FunctionQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>FunctionQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>PrefixQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>PrefixQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>BoostQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>BoostQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DisMaxQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>DisMaxQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>FieldQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>FieldQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>RawQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>RawQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TermQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>TermQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TermsQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>TermsQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>NestedQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>NestedQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>FunctionRangeQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>FunctionRangeQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SpatialFilterQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>SpatialFilterQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SpatialBoxQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>SpatialBoxQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JoinQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>JoinQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SurroundQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>SurroundQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SwitchQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>SwitchQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>MaxScoreQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>MaxScoreQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>BlockJoinParentQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>BlockJoinParentQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>BlockJoinChildQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>BlockJoinChildQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CollapsingQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>CollapsingQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SimpleQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>SimpleQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ComplexPhraseQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>ComplexPhraseQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ReRankQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>ReRankQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ExportQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>ExportQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>MLTQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>MLTQParserPlugin</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>standardPlugins</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>
 
   <comment type="block" format="javadoc">/** return a {@link QParser} */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>QParser</name></type> <name>createParser</name><argument_list>(<argument><expr><name>String</name> <name>qstr</name></expr></argument>, <argument><expr><name>SolrParams</name> <name>localParams</name></expr></argument>, <argument><expr><name>SolrParams</name> <name>params</name></expr></argument>, <argument><expr><name>SolrQueryRequest</name> <name>req</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">64f914d02e8</literal><operator>..</operator><name>ae1e6305ecb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommandOperation</name> <block>{
       <expr><name>Object</name> <name>obj</name> <operator>=</operator> <call><name>getRootPrimitive</name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
       <return>return <expr><ternary><condition><expr><name>obj</name> <operator>==</operator> <name>def</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
     }</block></class>
    <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>getMapVal</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>def</name></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr>;</return>
    <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name>getMapVal</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>def</name></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getDataMap</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>OutputWriterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>OutputWriterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cd4047585ba</name><operator>..</operator><name>f58b6cafbeb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>OutputWriterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>OutputWriterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>CommonParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>PluginInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>PluginRegistry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>QueryResponseWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>SolrQueryResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>XMLResponseWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>OutputWriterTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     }</block>
 
     <specifier>public</specifier> <name>void</name> <call><name>testLazy</name><argument_list>()</argument_list></call> <block>{
      <expr><name>QueryResponseWriter</name> <name>qrw</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQueryResponseWriter</name><argument_list>(<argument><expr><literal type="string">"useless"</literal></expr></argument>)</argument_list></call></expr>;
      <call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Should be a lazy class"</literal></expr></argument>, <argument><expr><name>qrw</name> <operator>instanceof</operator> <name><name>SolrCore</name><operator>.</operator><name>LazyQueryResponseWriterWrapper</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>PluginRegistry</name><operator>.</operator><name><name>PluginHolder</name><argument_list type="generic">&lt;<argument><name>QueryResponseWriter</name></argument>&gt;</argument_list></name></name></type> <name>qrw</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResponseWriters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRegistry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"useless"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Should be a lazy class"</literal></expr></argument>, <argument><expr><name>qrw</name> <operator>instanceof</operator> <name><name>PluginRegistry</name><operator>.</operator><name>LazyPluginHolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
      <expr_stmt><expr><name>qrw</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQueryResponseWriter</name><argument_list>(<argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Should not be a lazy class"</literal></expr></argument>, <argument><expr><name>qrw</name> <operator>instanceof</operator> <name>XMLResponseWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>qrw</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResponseWriters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRegistry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Should not be a lazy class"</literal></expr></argument>, <argument><expr><call><name><name>qrw</name><operator>.</operator><name>isLoaded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Should not be a lazy class"</literal></expr></argument>, <argument><expr><call><name><name>qrw</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PluginRegistry</name><operator>.</operator><name>PluginHolder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     </block_content>}</block></function>
     
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7583dcb09dc</literal><operator>..</operator><name>e6f8f490e5f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">41</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>DumpRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>SolrQueryResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>plugin</name><operator>.</operator><name>SolrCoreAware</name></name>;</import>

<class><specifier>public</specifier> class <name>BlobStoreTestRequestHandler</name> <super_list><extends>extends <super><name>DumpRequestHandler</name></super></extends> <implements>implements <super><name>Runnable</name></super>, <super><name>SolrCoreAware</name></super></implements></super_list><block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>SolrCore</name></type> <name>core</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>version</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>watchedVal</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
<class><specifier>public</specifier> class <name>BlobStoreTestRequestHandler</name> <super_list><extends>extends <super><name>DumpRequestHandler</name></super></extends></super_list><block>{
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>handleRequestBody</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>handleRequestBody</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>,<argument><expr><name>watchedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>RequestParams</name></type> <name>p</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSolrConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRequestParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>RequestParams</name><operator>.</operator><name>VersionedParams</name></name></type> <name>v</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getParams</name></name><argument_list>(<argument><expr><literal type="string">"watched"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>v</name><operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>watchedVal</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>version</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>version</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>watchedVal</name> <operator>=</operator>  <call><name><name>v</name><operator>.</operator><name>getMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>inform</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>addConfListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

   </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandlerV2</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandlerV2</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">4eeefe99f84</literal><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BlobStoreTestRequestHandlerV2</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">68</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>


<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>SolrQueryResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>plugin</name><operator>.</operator><name>SolrCoreAware</name></name>;</import>

<class><specifier>public</specifier> class <name>BlobStoreTestRequestHandlerV2</name> <super_list><extends>extends <super><name>BlobStoreTestRequestHandler</name></super></extends> <implements>implements <super><name>Runnable</name></super>, <super><name>SolrCoreAware</name></super></implements></super_list><block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>SolrCore</name></type> <name>core</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>version</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>watchedVal</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>handleRequestBody</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>handleRequestBody</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>,<argument><expr><name>watchedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*  try {
      Class.forName("org.apache.solr.core.BlobStoreTestRequestHandler");
    } catch (ClassNotFoundException e) {
      rsp.add("e", ClassNotFoundException.class.getSimpleName());
    }*/</comment>

  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>RequestParams</name></type> <name>p</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSolrConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRequestParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>RequestParams</name><operator>.</operator><name>VersionedParams</name></name></type> <name>v</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getParams</name></name><argument_list>(<argument><expr><literal type="string">"watched"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>v</name><operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>watchedVal</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>version</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>version</name></expr>)</condition><block>{<block_content>
       <expr_stmt><expr><name>watchedVal</name> <operator>=</operator>  <call><name><name>v</name><operator>.</operator><name>getMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>inform</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>addConfListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>RequestHandlersTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>RequestHandlersTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9bd8dbc501d</literal><operator>..</operator><literal type="number">815aa6a479a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>RequestHandlersTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>RequestHandlersTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>StandardRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrRequestHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>RequestHandlersTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testLazyLoading</name><argument_list>()</argument_list></call> <block>{
     <expr><name>SolrCore</name> <name>core</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr>;
    <name>SolrRequestHandler</name> <name>handler</name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>getRequestHandler</name></name><argument_list>( <argument><expr><literal type="string">"lazy"</literal></expr></argument> )</argument_list></call></block></expr>;
    <call><name>assertFalse</name><argument_list>( <argument><expr><name>handler</name> <operator>instanceof</operator> <name>StandardRequestHandler</name></expr></argument> )</argument_list></call></block></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name><name>PluginRegistry</name><operator>.</operator><name><name>PluginHolder</name><argument_list type="generic">&lt;<argument><name>SolrRequestHandler</name></argument>&gt;</argument_list></name></name></type> <name>handler</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getRequestHandlers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRegistry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"lazy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>handler</name><operator>.</operator><name>isLoaded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"42"</literal></expr></argument>,
                  <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"Zapp Brannigan"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestDynamicLoading</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestDynamicLoading</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c3bea635fdd</name><operator>..</operator><name>b02801fdba2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestDynamicLoading</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestDynamicLoading</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>TestBlobHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RESTfulServerProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RestTestHarness</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>SimplePostTool</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipOutputStream</name></name>;</import>
 
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name><operator>.</operator><name>asList</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>TestSolrConfigHandlerCloud</name><operator>.</operator><name>compareValues</name></name>;</import>

 <class><specifier>public</specifier> class <name>TestDynamicLoading</name> <super_list><extends>extends <super><name>AbstractFullDistribZkTestBase</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>=  <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>TestDynamicLoading</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>RestTestHarness</name></argument>&gt;</argument_list></name></type> <name>restTestHarnesses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDynamicLoading</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enableRuntimeLib</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"enable.runtime.lib"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>distribTearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>distribTearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">51</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">56</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDynamicLoading</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDynamicLoading</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"enable.runtime.lib"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <call><name>setupHarnesses</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>blobName</name> <init>= <expr><literal type="string">"colltest"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><name>HttpSolrClient</name></type> <name>randomClient</name> <init>= <expr><operator>(</operator><name>HttpSolrClient</name><operator>)</operator> <call><name><name>clients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>clients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>baseURL</name> <init>= <expr><call><name><name>randomClient</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>baseURL</name> <operator>=</operator> <call><name><name>baseURL</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>baseURL</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>payload</name> <init>= <expr><literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\n"</literal> <operator>+</operator>
        <literal type="string">"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\n"</literal> <operator>+</operator>
         <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>client</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"/config?wt=json"</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/config/overlay?wt=json"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"runtimeLib"</literal></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="number">1l</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\n"</literal> <operator>+</operator>
        <literal type="string">"}"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>client</name> <operator>=</operator> <call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,<argument><expr><literal type="string">"/config?wt=json"</literal></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
         <argument><expr><literal type="null">null</literal></expr></argument>,
         <argument><expr><literal type="string">"/config/overlay?wt=json"</literal></expr></argument>,
         <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"requestHandler"</literal></expr></argument>, <argument><expr><literal type="string">"/test1"</literal></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"test"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"requestHandler"</literal></expr></argument>, <argument><expr><literal type="string">"/test1"</literal></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
        <expr><literal type="string">"org.apache.solr.core.BlobStoreTestRequestHandler"</literal></expr><operator>,</operator><expr><literal type="number">10</literal></expr></expr_stmt>)</block_content></block>;</function>
 
     <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <constructor_decl><name>assertNotNull</name><parameter_list>(<parameter><decl><type><name>map</name></type> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</constructor_decl>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">".system collection not available"</literal></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".system collection not available"</literal></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 
    <decl_stmt><decl><type><name>HttpSolrClient</name></type> <name>randomClient</name> <init>= <expr><operator>(</operator><name>HttpSolrClient</name><operator>)</operator> <call><name><name>clients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>clients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>baseURL</name> <init>= <expr><call><name><name>randomClient</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>baseURL</name> <operator>=</operator> <call><name><name>baseURL</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>baseURL</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>createSystemCollection</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HttpSolrClient</name><argument_list>(<argument><expr><name>baseURL</name></expr></argument>, <argument><expr><call><name><name>randomClient</name><operator>.</operator><name>getHttpClient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>waitForRecoveriesToFinish</name><argument_list>(<argument><expr><literal type="string">".system"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <constructor_decl><name>assertNotNull</name><parameter_list>(<parameter><decl><type><name>map</name></type> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</constructor_decl>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"no such blob or version available: test/1"</literal></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>jar</name> <init>= <expr><call><name>generateZip</name><argument_list>( <argument><expr><name><name>TestDynamicLoading</name><operator>.</operator><name>class</name></name></expr></argument>,<argument><expr><name><name>BlobStoreTestRequestHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>postAndCheck</name></name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseURL</name></expr></argument>, <argument><expr><name>jar</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name><init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name><name>BlobStoreTestRequestHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><call><name><name>ZkStateReader</name><operator>.</operator><name>toJSON</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>success</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>jar</name> <operator>=</operator> <call><name>generateZip</name><argument_list>( <argument><expr><name><name>TestDynamicLoading</name><operator>.</operator><name>class</name></name></expr></argument>,<argument><expr><name><name>BlobStoreTestRequestHandlerV2</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>postAndCheck</name></name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseURL</name></expr></argument>, <argument><expr><name>jar</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <constructor_decl><name>assertNotNull</name><parameter_list>(<parameter><decl><type><name>map</name></type> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</constructor_decl>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"full output "</literal> <operator>+</operator> <call><name><name>TestBlobHandler</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no such blob or version available: colltest/1"</literal></expr></argument> , <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="string">" {\n"</literal> <operator>+</operator>
         <literal type="string">"  'set' : {'watched': {"</literal> <operator>+</operator>
         <literal type="string">"                    'x':'X val',\n"</literal> <operator>+</operator>
@@ <operator>-</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">39</literal> <operator>+</operator><literal type="number">145</literal></expr><operator>,</operator><expr><literal type="number">111</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDynamicLoading</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
         <expr><literal type="number">10</literal></expr>)</block></expr>;</expr_stmt>
 
 


    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><literal type="string">"X val"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
         <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
         <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>jar</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

<comment type="line">//     jar = persistZip("/tmp/runtimelibs.jar", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);</comment>
<comment type="line">//    if(true) return;</comment>

    <expr_stmt><expr><name>jar</name> <operator>=</operator> <call><name>getFileContent</name><argument_list>(<argument><expr><literal type="string">"runtimecode/runtimelibs.jar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>postAndCheck</name></name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseURL</name></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><name>jar</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\n"</literal> <operator>+</operator>
        <literal type="string">"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },"</literal> <operator>+</operator>
        <literal type="string">"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },"</literal> <operator>+</operator>
        <literal type="string">"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }"</literal> <operator>+</operator>
         <literal type="string">"}"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>client</name> <operator>=</operator> <call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"/config?wt=json"</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Map</name></type> <name>result</name> <init>= <expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/config/overlay?wt=json"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"requestHandler"</literal></expr></argument>, <argument><expr><literal type="string">"/runtime"</literal></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"org.apache.solr.core.RuntimeLibReqHandler"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>compareValues</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"org.apache.solr.core.RuntimeLibResponseWriter"</literal></expr></argument>, <argument><expr><call><name>asList</name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"queryResponseWriter"</literal></expr></argument>, <argument><expr><literal type="string">"json1"</literal></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compareValues</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"org.apache.solr.core.RuntimeLibSearchComponent"</literal></expr></argument>, <argument><expr><call><name>asList</name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"searchComponent"</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/runtime?wt=json"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"org.apache.solr.core.RuntimeLibReqHandler"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compareValues</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>MemClassLoader</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>asList</name><argument_list>( <argument><expr><literal type="string">"loader"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/runtime?wt=json1"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"org.apache.solr.core.RuntimeLibResponseWriter"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compareValues</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>MemClassLoader</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>asList</name><argument_list>( <argument><expr><literal type="string">"loader"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/get?abc=xyz"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"org.apache.solr.core.RuntimeLibSearchComponent"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compareValues</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>MemClassLoader</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>asList</name><argument_list>( <argument><expr><literal type="string">"loader"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>jar</name> <operator>=</operator> <call><name>getFileContent</name><argument_list>(<argument><expr><literal type="string">"runtimecode/runtimelibs_v2.jar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestBlobHandler</name><operator>.</operator><name>postAndCheck</name></name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseURL</name></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><name>jar</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\n"</literal> <operator>+</operator>
        <literal type="string">"}"</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>client</name> <operator>=</operator> <call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,<argument><expr><literal type="string">"/config?wt=json"</literal></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"/config?wt=json"</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
         <argument><expr><literal type="null">null</literal></expr></argument>,
         <argument><expr><literal type="string">"/config/overlay?wt=json"</literal></expr></argument>,
         <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"requestHandler"</literal></expr></argument>, <argument><expr><literal type="string">"/test1"</literal></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="number">2l</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><literal type="string">"runtimeLib"</literal></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
        <expr><literal type="number">2l</literal></expr><operator>,</operator> <expr><literal type="number">10</literal></expr></expr_stmt>)</block>;</class>
 
    <expr_stmt><expr><name>success</name><operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name><name>BlobStoreTestRequestHandlerV2</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/get?abc=xyz"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"Version"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"New version of class is not loaded "</literal> <operator>+</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>ZkStateReader</name><operator>.</operator><name>toJSON</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><literal type="string">"X val"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
         <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
         <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="string">" {\n"</literal> <operator>+</operator>
        <literal type="string">"  'set' : {'watched': {"</literal> <operator>+</operator>
        <literal type="string">"                    'x':'X val',\n"</literal> <operator>+</operator>
        <literal type="string">"                    'y': 'Y val'}\n"</literal> <operator>+</operator>
        <literal type="string">"             }\n"</literal> <operator>+</operator>
        <literal type="string">"  }"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,<argument><expr><literal type="string">"/config/params?wt=json"</literal></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(
        <argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/config/params?wt=json"</literal></expr></argument>,
        <argument><expr><name>cloudClient</name></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"response"</literal></expr></argument>, <argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><literal type="string">"watched"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"X val"</literal></expr></argument>,
        <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(
        <argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>,
        <argument><expr><name>cloudClient</name></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"X val"</literal></expr></argument>,
        <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="string">" {\n"</literal> <operator>+</operator>
         <literal type="string">"  'set' : {'watched': {"</literal> <operator>+</operator>
@@ <operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">259</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDynamicLoading</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
         <expr><literal type="string">"  }"</literal></expr>;
 
     <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>runConfigCommand</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>,<argument><expr><literal type="string">"/config/params?wt=json"</literal></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>getRespMap</name></name><argument_list>(<argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><literal type="string">"X val changed"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"listener did not get triggered"</literal> <operator>+</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>ZkStateReader</name><operator>.</operator><name>toJSON</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TestSolrConfigHandler</name><operator>.</operator><name>testForResponseElement</name></name><argument_list>(
        <argument><expr><name>client</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="string">"/test1?wt=json"</literal></expr></argument>,
        <argument><expr><name>cloudClient</name></expr></argument>,
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"X val changed"</literal></expr></argument>,
        <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>getFileContent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>jar</name></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>FileInputStream</name></type> <name>fis</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><call><name>getFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>fis</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>jar</name> <operator>=</operator> <call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
    <return>return <expr><name>jar</name></expr>;</return>
  </block_content>}</block></function>
 
  <function><type><specifier>public</specifier> <specifier>static</specifier>  <name>ByteBuffer</name></type> <name>persistZip</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>Class</name><modifier>...</modifier></type> <name>classes</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>jar</name> <init>= <expr><call><name>generateZip</name><argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>=  <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>)</init><block>{<block_content>
      <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>jar</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>jar</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
    <return>return <expr><name>jar</name></expr>;</return>
   </block_content>}</block></function>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>TestBlobHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>TestBlobHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">466e51692cc</literal><operator>..</operator><literal type="number">9994b9e557d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>TestBlobHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>TestBlobHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">86</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">86</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBlobHandler</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bytarr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bytarr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
       <name><name>byte</name><index>[]</index></name> <name>bytarr2</name>  <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></block></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bytarr2</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bytarr2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><call><name>postAndCheck</name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseUrl</name></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>( <argument><expr><name>bytarr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>postAndCheck</name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseUrl</name></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>( <argument><expr><name>bytarr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>blobName</name> <init>= <expr><literal type="string">"test"</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>postAndCheck</name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseUrl</name></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytarr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>postAndCheck</name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseUrl</name></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytarr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <expr_stmt><expr><name>url</name> <operator>=</operator> <name>baseUrl</name> <operator>+</operator> <literal type="string">"/.system/blob/test/1"</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandlerConcurrent</name><operator>.</operator><name>getAsMap</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>,<argument><expr><name>cloudClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBlobHandler</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
     <expr><name><name>DirectUpdateHandler2</name><operator>.</operator><name>commitOnClose</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>postAndCheck</name><parameter_list>(<parameter><decl><type><name>CloudSolrClient</name></type> <name>cloudClient</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseUrl</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>postData</name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseUrl</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>postAndCheck</name><parameter_list>(<parameter><decl><type><name>CloudSolrClient</name></type> <name>cloudClient</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseUrl</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>blobName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>postData</name><argument_list>(<argument><expr><name>cloudClient</name></expr></argument>, <argument><expr><name>baseUrl</name></expr></argument>, <argument><expr><name>blobName</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>String</name></type> <name>url</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBlobHandler</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
     <expr><name>long</name> <name>start</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;
     <name>int</name> <name>i</name><operator>=</operator><literal type="number">0</literal></block></expr>;</expr_stmt>
     <for>for<control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">150</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content><comment type="line">//15 secs</comment>
      <expr_stmt><expr><name>url</name> <operator>=</operator> <name>baseUrl</name> <operator>+</operator> <literal type="string">"/.system/blob/test"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>url</name> <operator>=</operator> <name>baseUrl</name> <operator>+</operator> <literal type="string">"/.system/blob/"</literal> <operator>+</operator> <name>blobName</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>TestSolrConfigHandlerConcurrent</name><operator>.</operator><name>getAsMap</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>cloudClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>numFound</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>ConfigOverlay</name><operator>.</operator><name>getObjectByPath</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"response"</literal></expr></argument>, <argument><expr><literal type="string">"numFound"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><literal type="string">""</literal><operator>+</operator><name>count</name><operator>)</operator><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>numFound</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">172</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBlobHandler</name> extends <name>AbstractFullDistribZkTestBase</name> <block>{
 
   }</block>
 
  <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>postData</name><argument_list>(<argument><expr><name>CloudSolrClient</name> <name>cloudClient</name></expr></argument>, <argument><expr><name>String</name> <name>baseUrl</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>bytarr</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>postData</name><argument_list>(<argument><expr><name>CloudSolrClient</name> <name>cloudClient</name></expr></argument>, <argument><expr><name>String</name> <name>baseUrl</name></expr></argument>, <argument><expr><name>String</name> <name>blobName</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>bytarr</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>HttpPost</name> <name>httpPost</name> <operator>=</operator> <literal type="null">null</literal></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>HttpEntity</name></type> <name>entity</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>response</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><name>httpPost</name> <operator>=</operator> <operator>new</operator> <call><name>HttpPost</name><argument_list>(<argument><expr><name>baseUrl</name><operator>+</operator><literal type="string">"/.system/blob/test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>httpPost</name> <operator>=</operator> <operator>new</operator> <call><name>HttpPost</name><argument_list>(<argument><expr><name>baseUrl</name> <operator>+</operator> <literal type="string">"/.system/blob/"</literal> <operator>+</operator> <name>blobName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>httpPost</name><operator>.</operator><name>setHeader</name></name><argument_list>(<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>,<argument><expr><literal type="string">"application/octet-stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>httpPost</name><operator>.</operator><name>setEntity</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayEntity</name><argument_list>(<argument><expr><call><name><name>bytarr</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bytarr</name><operator>.</operator><name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bytarr</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>entity</name> <operator>=</operator> <call><name><name>cloudClient</name><operator>.</operator><name>getLbClient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHttpClient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>httpPost</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEntity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SpellCheckComponentTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SpellCheckComponentTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c44c1133e7d</name><operator>..</operator><literal type="number">96afee8c3d7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SpellCheckComponentTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>SpellCheckComponentTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SpellCheckComponentTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><name>request</name> <operator>=</operator> <call><name>req</name><argument_list>(<argument><expr><literal type="string">"qt"</literal></expr></argument>, <argument><expr><literal type="string">"spellCheckCompRH"</literal></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"spellcheck.q"</literal></expr></argument>, <argument><expr><literal type="string">"ttle"</literal></expr></argument>,
         <argument><expr><literal type="string">"spellcheck"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"spellcheck.dictionary"</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>,
         <argument><expr><literal type="string">"spellcheck.reload"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;
    <name>ResponseBuilder</name> <name>rb</name> <operator>=</operator> <operator>new</operator> <call><name>ResponseBuilder</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SolrQueryResponse</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSearchComponents</name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SearchComponent</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSearchComponents</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSearchComponent</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>ResponseBuilder</name></type> <name>rb</name> <init>= <expr><operator>new</operator> <call><name>ResponseBuilder</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SolrQueryResponse</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>checker</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <try>try <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryEqualityTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryEqualityTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2487f5f4858</literal><operator>..</operator><name>e87b8c7ab54</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryEqualityTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryEqualityTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryEqualityTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>afterClassParserCoverageTest</name><argument_list>()</argument_list></call> <block>{
 
     <if_stmt><if>if <condition>( <expr><operator>!</operator> <name>doAssertParserCoverage</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt></block></expr>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"qparser #"</literal><operator>+</operator><name>i</name><operator>+</operator><literal type="string">" name not a string"</literal></expr></argument>, 
                 <argument><expr><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>String</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"testParserCoverage was run w/o any other method explicitly testing qparser: "</literal> <operator>+</operator> <name>name</name></expr></argument>, <argument><expr><call><name><name>qParsersTested</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestStandardQParsers</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestStandardQParsers</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5fbef6abde1</literal><operator>..</operator><name>d65e09a3b9b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestStandardQParsers</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestStandardQParsers</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -48,15 +47,13 @@ public class TestStandardQParsers extends LuceneTestCase {
    */</comment>
   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testRegisteredName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>standardPlugins</name> <init>= <expr><call><name>getStandardQParsers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>notStatic</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>notFinal</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mismatch</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>notStatic</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>standardPlugins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>notFinal</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>standardPlugins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mismatch</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>standardPlugins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>pair</name> <range>: <expr><call><name><name>standardPlugins</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>QParserPlugin</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>pair</name> <range>: <expr><call><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>regName</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>QParserPlugin</name></extends></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <decl_stmt><decl><type><name>Field</name></type> <name>nameField</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><name>FIELD_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><call><name><name>nameField</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestStandardQParsers</name> extends <name>LuceneTestCase</name> <block>{
 
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_QTYPE is not in the standard set of registered names: "</literal> <operator>+</operator> 
                <name><name>QParserPlugin</name><operator>.</operator><name>DEFAULT_QTYPE</name></name></expr></argument>,
               <argument><expr><call><name><name>standardPlugins</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>QParserPlugin</name><operator>.</operator><name>DEFAULT_QTYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <call><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>QParserPlugin</name><operator>.</operator><name>DEFAULT_QTYPE</name></name></expr></argument>)</argument_list></call>)</block></expr>;</expr_stmt>
 
   </block_content>}</block></for>
 
  <comment type="block" format="javadoc">/**
   * Get standard query parsers registered by default.
   *
   * @see org.apache.solr.search.QParserPlugin#standardPlugins
   * @return Map of classes extending QParserPlugin keyed by the registered name
   */</comment>
  <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getStandardQParsers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>standardPluginsValue</name> <init>= <expr><name><name>QParserPlugin</name><operator>.</operator><name>standardPlugins</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>standardPlugins</name> 
      <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>standardPluginsValue</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>standardPluginsValue</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
      <type><name>String</name></type> <name>registeredName</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>standardPluginsValue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
      <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><operator>(</operator><name><name>Class</name><argument_list type="generic">&lt;<argument><name>QParserPlugin</name></argument>&gt;</argument_list></name><operator>)</operator> <name><name>standardPluginsValue</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>standardPlugins</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>registeredName</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>standardPlugins</name></expr>;</return>
  </block_content>}</block></function>

 </block_content>}</block></for>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></for></block></expr></expr_stmt></block_content></block></try></block_content></block></try></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function></block_content></block></function>

</unit>
