<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/aa22ceb97d.java"><expr_stmt><expr><name>From</name> <name>aa22ceb97db65d51b2e38d2b4c7cdefcb82c0c3d</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Erick</name> <name><name>Erickson</name> <argument_list type="generic">&lt;<argument><name>erick</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">2</literal> <name>Mar</name> <literal type="number">2013</literal> <literal type="number">01</literal><operator>:</operator><literal type="number">01</literal><operator>:</operator><literal type="number">12</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">4196</literal></expr><operator>,</operator> <expr><name>steps</name> <name>toward</name> <name>making</name> <name><name>solr</name><operator>.</operator><name>xml</name></name> <name>obsolete</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1451797 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkCLI</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">33</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkController</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">23</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>Config</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolr</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">83</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">358</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreContainer</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">1373</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreDescriptor</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">225</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrProperties</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">575</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrResourceLoader</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CoreAdminHandler</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">80</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DOMUtil</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">103</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>PropertiesUtil</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">132</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>tiny</name><operator>.</operator><name>xml</name></name>     <operator>|</operator>   <literal type="number">38</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>solrconfig</name><operator>-</operator><name><name>minimal</name><operator>.</operator><name>xml</name></name>   <operator>|</operator>   <literal type="number">76</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ChaosMonkeySafeLeaderTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkControllerTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestLazyCores</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">116</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>TestSolrDiscoveryProperties</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">389</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestHarness</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">21</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">2797</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">846</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolr</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrProperties</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>PropertiesUtil</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>tiny</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>solrconfig</name><operator>-</operator><name><name>minimal</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestSolrDiscoveryProperties</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkCLI</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkCLI</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>eb101217b2d</name><operator>..</operator><literal type="number">8e42d09ef00</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkCLI</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkCLI</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>ParseException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>PosixParser</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>OnReconnect</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>SolrZkClient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>ConfigSolr</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>ConfigSolrXmlBackCompat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrProperties</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrResourceLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>InputSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>SAXException</name></name>;</import>
 
 <comment type="block">/*
@@ -171,12 +174,26 @@ public class ZkCLI {
           }
           SolrResourceLoader loader = new SolrResourceLoader(solrHome);
           solrHome = loader.getInstanceDir();
          
          InputSource cfgis = new InputSource(new File(solrHome, SOLR_XML)
              .toURI().toASCIIString());
          Config cfg = new Config(loader, null, cfgis, null, false);
          
          if(!ZkController.checkChrootPath(zkServerAddress, true)) {

          File configFile = new File(solrHome, SOLR_XML);
          boolean isXml = true;
          if (! configFile.exists()) {
            configFile = new File(solrHome, SolrProperties.SOLR_PROPERTIES_FILE);
            isXml = false;
          }
          InputStream is = new FileInputStream(configFile);

          //ConfigSolrXmlThunk cfg = new ConfigSolrXmlThunk(null, loader, is, false, true);

          ConfigSolr cfg;
            if (isXml) {
              cfg = new ConfigSolrXmlBackCompat(loader, null, is, null, false);
            } else {
              cfg = new SolrProperties(null, is, null);
            }


            if(!ZkController.checkChrootPath(zkServerAddress, true)) {
             System.out.println("A chroot was specified in zkHost but the znode doesn't exist. ");
             System.exit(1);
           }
diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index d1fe92734c6..f910bf95e57 100644
-- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java
++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -39,8 +39,6 @@ import java.util.concurrent.TimeoutException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
import javax.xml.xpath.XPathConstants;

 import org.apache.commons.io.FileUtils;
 import org.apache.solr.client.solrj.impl.HttpSolrServer;
 import org.apache.solr.client.solrj.request.CoreAdminRequest.WaitForState;
@@ -60,14 +58,14 @@ import org.apache.solr.common.cloud.ZkNodeProps;
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.cloud.ZooKeeperException;
 import org.apache.solr.common.params.SolrParams;
import org.apache.solr.core.Config;
import org.apache.solr.core.ConfigSolr;
 import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.CoreDescriptor;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.handler.component.ShardHandler;
 import org.apache.solr.update.UpdateLog;
 import org.apache.solr.update.UpdateShardHandler;
import org.apache.solr.util.DOMUtil;
import org.apache.solr.util.PropertiesUtil;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.NoNodeException;
@@ -75,8 +73,6 @@ import org.apache.zookeeper.KeeperException.SessionExpiredException;
 import org.apache.zookeeper.data.Stat;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
 
 /**
  * Handle ZooKeeper interactions.
@@ -1409,20 +1405,19 @@ public final class ZkController {
   /**
    * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>bootstrapConf</name><argument_list>(<argument><expr><name>SolrZkClient</name> <name>zkClient</name></expr></argument>, <argument><expr><name>Config</name> <name>cfg</name></expr></argument>, <argument><expr><name>String</name> <name>solrHome</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
  <argument><expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>bootstrapConf</name><argument_list>(<argument><expr><name>SolrZkClient</name> <name>zkClient</name></expr></argument>, <argument><expr><name>ConfigSolr</name> <name>cfg</name></expr></argument>, <argument><expr><name>String</name> <name>solrHome</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
       <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
    <expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"bootstraping config into ZooKeeper using solr.xml"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeList</name></type> <name>nodes</name> <init>= <expr><operator>(</operator><name>NodeList</name><operator>)</operator><call><name><name>cfg</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/core"</literal></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>nodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>rawName</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>instanceDir</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"instanceDir"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"bootstraping config into ZooKeeper using solr.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allCoreNames</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getAllCoreNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>coreName</name> <range>: <expr><name>allCoreNames</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>rawName</name> <init>= <expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>instanceDir</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>, <argument><expr><literal type="string">"instanceDir"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>File</name></type> <name>idir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>idir</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>idir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>confName</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"collection"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>confName</name> <init>= <expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>, <argument><expr><literal type="string">"collection"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>confName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>confName</name> <operator>=</operator> <name>rawName</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>Config</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>Config</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1fbc48cac1d</literal><operator>..</operator><literal type="number">099c69d5d52</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>Config</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>Config</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>namespace</name><operator>.</operator><name>QName</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilder</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilderFactory</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>TransformerException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPath</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathConstants</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathExpressionException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathFactory</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -67,7 +65,18 @@ public class Config {
     this( loader, name, null, null );
   }
 
  
  /**
   * For the transition from using solr.xml to solr.properties, see SOLR-4196. Remove
   * for 5.0, thus it's already deprecated
   * @param loader - Solr resource loader
   * @param cfg    - SolrConfig, for backwards compatability with solr.xml layer.
   * @throws TransformerException if the XML file is mal-formed
   */</comment>
  <constructor><annotation>@<name>Deprecated</name></annotation>
  <specifier>public</specifier> <name>Config</name><parameter_list>(<parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>Config</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TransformerException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>copyDoc</name></name><argument_list>(<argument><expr><call><name><name>cfg</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

   <constructor><specifier>public</specifier> <name>Config</name><parameter_list>(<parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputSource</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParserConfigurationException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SAXException</name></expr></argument></throws> 
   <block>{<block_content>
     <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolr</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolr</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..a4c0859d157</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolr</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">83</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>ShardHandlerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ConfigSolr is a new interface  to aid us in obsoleting solr.xml and replacing it with solr.properties. The problem here
 * is that the Config class is used for _all_ the xml file, e.g. solrconfig.xml and we can't mess with _that_ as part
 * of this issue. Primarily used in CoreContainer at present.
 * &lt;p/&gt;
 * This is already deprecated, it's only intended to exist for while transitioning to properties-based replacement for
 * solr.xml
 *
 * @since solr 4.2
 */</comment>
<interface><annotation>@<name>Deprecated</name></annotation>
<specifier>public</specifier> interface <name>ConfigSolr</name> <block>{

  <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>ConfLevel</name> <block>{
    <decl><name>SOLR</name></decl>, <decl><name>SOLR_CORES</name></decl>, <decl><name>SOLR_CORES_CORE</name></decl>, <decl><name>SOLR_LOGGING</name></decl>, <decl><name>SOLR_LOGGING_WATCHER</name></decl>
  }</block></enum>

  <empty_stmt>;</empty_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><argument_list>(<argument><expr><name>ConfLevel</name> <name>level</name></expr></argument>, <argument><expr><name>String</name> <name>tag</name></expr></argument>, <argument><expr><name>int</name> <name>def</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>getBool</name><argument_list>(<argument><expr><name>ConfLevel</name> <name>level</name></expr></argument>, <argument><expr><name>String</name> <name>tag</name></expr></argument>, <argument><expr><name>boolean</name> <name>defValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>get</name><argument_list>(<argument><expr><name>ConfLevel</name> <name>level</name></expr></argument>, <argument><expr><name>String</name> <name>tag</name></expr></argument>, <argument><expr><name>String</name> <name>def</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>substituteProperties</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <name>ShardHandlerFactory</name></type> <name>initShardHandler</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>public</specifier> <name>Properties</name></type> <name>getSolrProperties</name><argument_list>(<argument><expr><name>ConfigSolr</name> <name>cfg</name></expr></argument>, <argument><expr><name>String</name> <name>context</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>IndexSchema</name></type> <name>getSchemaFromZk</name><argument_list>(<argument><expr><name>ZkController</name> <name>zkController</name></expr></argument>, <argument><expr><name>String</name> <name>zkConfigName</name></expr></argument>, <argument><expr><name>String</name> <name>schemaName</name></expr></argument>,
                                     <argument><expr><name>SolrConfig</name> <name>config</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>SolrConfig</name></type> <name>getSolrConfigFromZk</name><argument_list>(<argument><expr><name>ZkController</name> <name>zkController</name></expr></argument>, <argument><expr><name>String</name> <name>zkConfigName</name></expr></argument>, <argument><expr><name>String</name> <name>solrConfigFileName</name></expr></argument>,
                                        <argument><expr><name>SolrResourceLoader</name> <name>resourceLoader</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>initPersist</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>addPersistCore</name><argument_list>(<argument><expr><name>String</name> <name>coreName</name></expr></argument>, <argument><expr><name>Properties</name> <name>attribs</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>props</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>addPersistAllCores</name><argument_list>(<argument><expr><name>Properties</name> <name>containerProperties</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>rootSolrAttribs</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>coresAttribs</name></expr></argument>,
                                 <argument><expr><name>File</name> <name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>getCoreNameFromOrig</name><argument_list>(<argument><expr><name>String</name> <name>origCoreName</name></expr></argument>, <argument><expr><name>SolrResourceLoader</name> <name>loader</name></expr></argument>, <argument><expr><name>String</name> <name>coreName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllCoreNames</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><argument_list>(<argument><expr><name>String</name> <name>coreName</name></expr></argument>, <argument><expr><name>String</name> <name>property</name></expr></argument>, <argument><expr><name>String</name> <name>defaultVal</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>Properties</name></type> <name>readCoreProperties</name><argument_list>(<argument><expr><name>String</name> <name>coreName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readCoreAttributes</name><argument_list>(<argument><expr><name>String</name> <name>coreName</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..5a207e72e65</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">358</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>HttpShardHandlerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>ShardHandlerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>PropertiesUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>SystemIdResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NamedNodeMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>InputSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>SAXException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>Transformer</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>TransformerException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>TransformerFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMResult</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMSource</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPath</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathConstants</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathExpressionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ConfigSolrXmlBackCompat
 * &lt;p/&gt;
 * This class is entirely to localize the backwards compatibility for dealing with specific issues when transitioning
 * from solr.xml to a solr.properties-based, enumeration/discovery of defined cores. See SOLR-4196 for background.
 * &lt;p/&gt;
 * As of Solr 5.0, solr.xml will be deprecated, use SolrProperties.
 *
 * @since solr 4.2
 * @deprecated use {@link org.apache.solr.core.SolrProperties} instead
 */</comment>
<class><annotation>@<name>Deprecated</name></annotation>

<specifier>public</specifier> class <name>ConfigSolrXmlBackCompat</name> <super_list><extends>extends <super><name>Config</name></super></extends> <implements>implements <super><name>ConfigSolr</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ConfLevel</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>prefixes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>NodeList</name></type> <name>coreNodes</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <expr_stmt><expr><name>prefixes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ConfLevel</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>prefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR</name></name></expr></argument>, <argument><expr><literal type="string">"solr/@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"solr/cores/@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES_CORE</name></name></expr></argument>, <argument><expr><literal type="string">"solr/cores/core/@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING</name></name></expr></argument>, <argument><expr><literal type="string">"solr/logging/@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING_WATCHER</name></name></expr></argument>, <argument><expr><literal type="string">"solr/logging/watcher/@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>ConfigSolrXmlBackCompat</name><parameter_list>(<parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>,
                                 <parameter><decl><type><name>boolean</name></type> <name>subProps</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParserConfigurationException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SAXException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>subProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>coreNodes</name> <operator>=</operator> <operator>(</operator><name>NodeList</name><operator>)</operator> <call><name>evaluate</name><argument_list>(<argument><expr><literal type="string">"solr/cores/core"</literal></expr></argument>,
        <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></constructor>


  <constructor><specifier>public</specifier> <name>ConfigSolrXmlBackCompat</name><parameter_list>(<parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>Config</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TransformerException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>copyDoc</name><argument_list>(<argument><expr><call><name><name>cfg</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Mimics a call from CoreContainer.</comment>
    <expr_stmt><expr><name>coreNodes</name> <operator>=</operator> <operator>(</operator><name>NodeList</name><operator>)</operator> <call><name>evaluate</name><argument_list>(<argument><expr><literal type="string">"solr/cores/core"</literal></expr></argument>,
        <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Document</name></type> <name>copyDoc</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TransformerException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TransformerFactory</name></type> <name>tfactory</name> <init>= <expr><call><name><name>TransformerFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Transformer</name></type> <name>tx</name> <init>= <expr><call><name><name>tfactory</name><operator>.</operator><name>newTransformer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DOMSource</name></type> <name>source</name> <init>= <expr><operator>new</operator> <call><name>DOMSource</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DOMResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>DOMResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>Document</name><operator>)</operator> <call><name><name>result</name><operator>.</operator><name>getNode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>ConfLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getInt</name><argument_list>(<argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>getBool</name><parameter_list>(<parameter><decl><type><name>ConfLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getBool</name><argument_list>(<argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>defValue</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>ConfLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>get</name><argument_list>(<argument><expr><call><name><name>prefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>ShardHandlerFactory</name></type> <name>initShardHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PluginInfo</name></type> <name>info</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name></type> <name>shfn</name> <init>= <expr><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"solr/cores/shardHandlerFactory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>shfn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><name>shfn</name></expr></argument>, <argument><expr><literal type="string">"shardHandlerFactory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><call><name><name>HttpShardHandlerFactory</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><literal type="string">"shardHandlerFactory"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>PluginInfo</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>HttpShardHandlerFactory</name></type> <name>fac</name> <init>= <expr><operator>new</operator> <call><name>HttpShardHandlerFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>fac</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Properties</name></type> <name>getSolrProperties</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <return>return <expr><call><name>readProperties</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name>evaluate</name><argument_list>(
          <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>item</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <return>return <expr><literal type="null">null</literal></expr>;</return>

  </block_content>}</block></function>

  <function><type><name>Properties</name></type> <name>readProperties</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XPathExpressionException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>XPath</name></type> <name>xpath</name> <init>= <expr><call><name>getXPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeList</name></type> <name>props</name> <init>= <expr><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name><name>xpath</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>properties</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>props</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name></type> <name>prop</name> <init>= <expr><call><name><name>props</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>properties</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readCoreAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>attrs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>coreNodes</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>coreNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>coreNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>NamedNodeMap</name></type> <name>attributes</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>attributes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>attribute</name> <init>= <expr><call><name><name>attributes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>attribute</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_DATADIR</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attribute</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attribute</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>val</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then> <expr><name>val</name> <operator>+</operator> <literal type="char">'/'</literal></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>attribute</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <return>return <expr><name>attrs</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><name>attrs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>IndexSchema</name></type> <name>getSchemaFromZk</name><parameter_list>(<parameter><decl><type><name>ZkController</name></type> <name>zkController</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zkConfigName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>,
                                     <parameter><decl><type><name>SolrConfig</name></type> <name>config</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>configBytes</name> <init>= <expr><call><name><name>zkController</name><operator>.</operator><name>getConfigFileData</name></name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>configBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>SystemIdResolver</name><operator>.</operator><name>createSystemIdFromResourceName</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexSchema</name></type> <name>schema</name> <init>= <expr><operator>new</operator> <call><name>IndexSchema</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>schema</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SolrConfig</name></type> <name>getSolrConfigFromZk</name><parameter_list>(<parameter><decl><type><name>ZkController</name></type> <name>zkController</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zkConfigName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>solrConfigFileName</name></decl></parameter>,
                                        <parameter><decl><type><name>SolrResourceLoader</name></type> <name>resourceLoader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SolrConfig</name></type> <name>cfg</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>config</name> <init>= <expr><call><name><name>zkController</name><operator>.</operator><name>getConfigFileData</name></name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>SystemIdResolver</name><operator>.</operator><name>createSystemIdFromResourceName</name></name><argument_list>(<argument><expr><name>solrConfigFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cfg</name> <operator>=</operator> <ternary><condition><expr><name>solrConfigFileName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>SolrConfig</name><argument_list>(
          <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name><name>SolrConfig</name><operator>.</operator><name>DEFAULT_CONF_FILE</name></name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>SolrConfig</name><argument_list>(
          <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
          <argument><expr><literal type="string">"getSolrConfigFromZK failed for "</literal> <operator>+</operator> <name>zkConfigName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>solrConfigFileName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>cfg</name></expr>;</return>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrCoreXMLDef</name></name></argument>&gt;</argument_list></name></type> <name>solrCoreXMLDefs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrCoreXMLDef</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Do this when re-using a ConfigSolrXmlBackCompat.</comment>

  <comment type="line">// These two methods are part of SOLR-4196 and are awkward, should go away with 5.0</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>initPersist</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>initPersistStatic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>initPersistStatic</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>solrCoreXMLDefs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrCoreXMLDef</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>solrXMLSerializer</name> <operator>=</operator> <operator>new</operator> <call><name>SolrXMLSerializer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addPersistCore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>attribs</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>props</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>addPersistCore</name><argument_list>(<argument><expr><name>attribs</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>void</name></type> <name>addPersistCore</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>props</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>attribs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrCoreXMLDef</name></name></type> <name>solrCoreXMLDef</name> <init>= <expr><operator>new</operator> <call><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrCoreXMLDef</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>solrCoreXMLDef</name><operator>.</operator><name>coreAttribs</name></name> <operator>=</operator> <name>attribs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>solrCoreXMLDef</name><operator>.</operator><name>coreProperties</name></name> <operator>=</operator> <name>props</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>solrCoreXMLDefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>solrCoreXMLDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SolrXMLSerializer</name></type> <name>solrXMLSerializer</name> <init>= <expr><operator>new</operator> <call><name>SolrXMLSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addPersistAllCores</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>containerProperties</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootSolrAttribs</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coresAttribs</name></decl></parameter>,
                                 <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>addPersistAllCoresStatic</name><argument_list>(<argument><expr><name>containerProperties</name></expr></argument>, <argument><expr><name>rootSolrAttribs</name></expr></argument>, <argument><expr><name>coresAttribs</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// Fortunately, we don't iterate over these too often, so the waste is probably tolerable.</comment>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getCoreNameFromOrig</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>origCoreName</name></decl></parameter>, <parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <comment type="line">// look for an existing node</comment>
    <synchronized>synchronized <init>(<expr><name>coreNodes</name></expr>)</init> <block>{<block_content>
      <comment type="line">// first look for an exact match</comment>
      <decl_stmt><decl><type><name>Node</name></type> <name>coreNode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>coreNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>coreNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>origCoreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>name</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><name>coreName</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>coreNode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// see if we match with substitution</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>coreNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>coreNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>origCoreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>,
              <argument><expr><call><name><name>loader</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>name</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>coreName</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></synchronized>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllCoreNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>coreNodes</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>coreNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>coreNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>coreNodes</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>coreNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>coreNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><name>defaultVal</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Properties</name></type> <name>readCoreProperties</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>coreNodes</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>coreNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>coreNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <try>try <block>{<block_content>
            <return>return <expr><call><name>readProperties</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>XPathExpressionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
          </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>void</name></type> <name>addPersistAllCoresStatic</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>containerProperties</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootSolrAttribs</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coresAttribs</name></decl></parameter>,
                                       <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrXMLDef</name></name></type> <name>solrXMLDef</name> <init>= <expr><operator>new</operator> <call><name><name>SolrXMLSerializer</name><operator>.</operator><name>SolrXMLDef</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>coresDefs</name></name> <operator>=</operator> <name>solrCoreXMLDefs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>containerProperties</name></name> <operator>=</operator> <name>containerProperties</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>solrAttribs</name></name> <operator>=</operator> <name>rootSolrAttribs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>coresAttribs</name></name> <operator>=</operator> <name>coresAttribs</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>solrXMLSerializer</name><operator>.</operator><name>persistFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>solrXMLDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_SOLR_XML</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"&lt;solr persistent=\"false\"&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"  &lt;cores adminPath=\"/admin/cores\" defaultCoreName=\""</literal>
      <operator>+</operator> <name><name>CoreContainer</name><operator>.</operator><name>DEFAULT_DEFAULT_CORE_NAME</name></name>
      <operator>+</operator> <literal type="string">"\""</literal>
      <operator>+</operator> <literal type="string">" host=\"${host:}\" hostPort=\"${hostPort:}\" hostContext=\"${hostContext:}\" zkClientTimeout=\"${zkClientTimeout:15000}\""</literal>
      <operator>+</operator> <literal type="string">"&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"    &lt;core name=\""</literal>
      <operator>+</operator> <name><name>CoreContainer</name><operator>.</operator><name>DEFAULT_DEFAULT_CORE_NAME</name></name>
      <operator>+</operator> <literal type="string">"\" shard=\"${shard:}\" collection=\"${collection:}\" instanceDir=\"collection1\" /&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"  &lt;/cores&gt;\n"</literal> <operator>+</operator> <literal type="string">"&lt;/solr&gt;"</literal></expr></init></decl>;</decl_stmt>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreContainer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreContainer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4e73837df9c</literal><operator>..</operator><literal type="number">369df7e7ed4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreContainer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreContainer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CompletionService</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>
 
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>Transformer</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>TransformerException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>TransformerFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMResult</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>transform</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMSource</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPath</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathConstants</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathExpressionException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>CloudDescriptor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>CurrentCoreDescriptorProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>SolrZkServer</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name><operator>.</operator><name>ErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkStateReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZooKeeperException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>ExecutorUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrXMLSerializer</name><operator>.</operator><name>SolrCoreXMLDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrXMLSerializer</name><operator>.</operator><name>SolrXMLDef</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>admin</name><operator>.</operator><name>CollectionsHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>admin</name><operator>.</operator><name>CoreAdminHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>HttpShardHandlerFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>logging</name><operator>.</operator><name>LogWatcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>logging</name><operator>.</operator><name>jul</name><operator>.</operator><name>JulWatcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>update</name><operator>.</operator><name>SolrCoreState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>DefaultSolrThreadFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>SystemIdResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>PropertiesUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>impl</name><operator>.</operator><name>StaticLoggerBinder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>InputSource</name></name>;</import>
 
 
 <comment type="block" format="javadoc">/**
  *
  * @since solr 1.3
  */</comment>
<expr_stmt><expr><specifier>public</specifier> <name>class</name> <name>CoreContainer</name> 
<specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
 <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>LEADER_VOTE_WAIT</name> <operator>=</operator> <literal type="string">"180000"</literal></expr>;  <comment type="line">// 3 minutes</comment>
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>CORE_LOAD_THREADS</name> <operator>=</operator> <literal type="number">3</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">104</literal></expr>,<expr><literal type="number">34</literal> <operator>+</operator><literal type="number">92</literal></expr>,<expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>DEFAULT_ZK_CLIENT_TIMEOUT</name> <operator>=</operator> <literal type="number">15000</literal></expr>;
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>DEFAULT_DEFAULT_CORE_NAME</name> <operator>=</operator> <literal type="string">"collection1"</literal></expr>;
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>boolean</name> <name>DEFAULT_SHARE_SCHEMA</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
  
  <expr><specifier>protected</specifier> <specifier>static</specifier> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CoreContainer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
  
  <comment type="line">// solr.xml node constants</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_NAME</name> <operator>=</operator> <literal type="string">"name"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_CONFIG</name> <operator>=</operator> <literal type="string">"config"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_INSTDIR</name> <operator>=</operator> <literal type="string">"instanceDir"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_DATADIR</name> <operator>=</operator> <literal type="string">"dataDir"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_ULOGDIR</name> <operator>=</operator> <literal type="string">"ulogDir"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_SCHEMA</name> <operator>=</operator> <literal type="string">"schema"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_SHARD</name> <operator>=</operator> <literal type="string">"shard"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_COLLECTION</name> <operator>=</operator> <literal type="string">"collection"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_ROLES</name> <operator>=</operator> <literal type="string">"roles"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_NODE_NAME</name> <operator>=</operator> <literal type="string">"coreNodeName"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_PROPERTIES</name> <operator>=</operator> <literal type="string">"properties"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_LOADONSTARTUP</name> <operator>=</operator> <literal type="string">"loadOnStartup"</literal></expr>;
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CORE_TRANSIENT</name> <operator>=</operator> <literal type="string">"transient"</literal></expr>;

 
  <expr><specifier>protected</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name> <name>cores</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>; <comment type="line">// For "permanent" cores</comment>

  <expr><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name> <name>transientCores</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>; <comment type="line">// For "lazily loaded" cores</comment>
  <expr><specifier>protected</specifier> <specifier>static</specifier> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CoreContainer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
  <expr><specifier>protected</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name> <name>dynamicDescriptors</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
  <expr><specifier>protected</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>pendingDynamicCoreLoads</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>final</name> <name>CoreMaps</name> <name>coreMaps</name> <operator>=</operator> <operator>new</operator> <call><name>CoreMaps</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
 
  <expr><specifier>protected</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Exception</name></argument>&gt;</argument_list></name> <name>coreInitFailures</name> <operator>=</operator> 
  <specifier>protected</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Exception</name></argument>&gt;</argument_list></name> <name>coreInitFailures</name> <operator>=</operator>
     <call><name><name>Collections</name><operator>.</operator><name>synchronizedMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Exception</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   
   <expr><specifier>protected</specifier> <name>boolean</name> <name>persistent</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">153</literal></expr>,<expr><literal type="number">18</literal> <operator>+</operator><literal type="number">120</literal></expr>,<expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
   <specifier>protected</specifier> <name>Integer</name> <name>zkClientTimeout</name></expr>;
   <expr><specifier>protected</specifier> <name>String</name> <name>solrHome</name></expr>;
   <expr><specifier>protected</specifier> <name>String</name> <name>defaultCoreName</name> <operator>=</operator> <literal type="null">null</literal></expr>;
  <expr><specifier>private</specifier> <name>SolrXMLSerializer</name> <name>solrXMLSerializer</name> <operator>=</operator> <operator>new</operator> <call><name>SolrXMLSerializer</name><argument_list>()</argument_list></call></expr>;

   <expr><specifier>private</specifier> <name>ZkController</name> <name>zkController</name></expr>;
   <expr><specifier>private</specifier> <name>SolrZkServer</name> <name>zkServer</name></expr>;
   <expr><specifier>private</specifier> <name>ShardHandlerFactory</name> <name>shardHandlerFactory</name></expr>;
   <expr><specifier>protected</specifier> <name>LogWatcher</name> <name>logging</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   <expr><specifier>private</specifier> <name>String</name> <name>zkHost</name></expr>;
  <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>coreToOrigName</name> <operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

   <expr><specifier>private</specifier> <name>String</name> <name>leaderVoteWait</name> <operator>=</operator> <name>LEADER_VOTE_WAIT</name></expr>;
   <expr><specifier>private</specifier> <name>int</name> <name>distribUpdateConnTimeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><specifier>private</specifier> <name>int</name> <name>distribUpdateSoTimeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><specifier>protected</specifier> <name>int</name> <name>transientCacheSize</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>; <comment type="line">// Use as a flag too, if transientCacheSize set in solr.xml this will be changed</comment>
   <expr><specifier>private</specifier> <name>int</name> <name>coreLoadThreads</name></expr>;
  <expr><specifier>private</specifier> <name>CloserThread</name> <name>backgroundCloser</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   
   <expr><block>{
     <expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"New CoreContainer "</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">183</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">151</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
   <comment type="block" format="javadoc">/**
    * Initalize CoreContainer directly from the constructor
    */</comment>
  <specifier>public</specifier> <call><name>CoreContainer</name><argument_list>(<argument><expr><name>String</name> <name>dir</name></expr></argument>, <argument><expr><name>File</name> <name>configFile</name></expr></argument>)</argument_list></call>
  <block>{
  <expr><specifier>public</specifier> <call><name>CoreContainer</name><argument_list>(<argument><expr><name>String</name> <name>dir</name></expr></argument>, <argument><expr><name>File</name> <name>configFile</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>FileNotFoundException</name> <block>{
     <expr><call><name>this</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><call><name><name>this</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;
   }</block>
@@ <operator>-</operator><literal type="number">253</literal></expr>,<expr><literal type="number">12</literal> <operator>+</operator><literal type="number">220</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
           <throw>throw <argument_list>new <argument><expr><call><name>ZooKeeperException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
               <argument><expr><literal type="string">"A chroot was specified in ZkHost but the znode doesn't exist. "</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></expr>;
         }</block>
        
         <name>zkController</name> <operator>=</operator> <operator>new</operator> <call><name>ZkController</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>zookeeperHost</name></expr></argument>, <argument><expr><name>zkClientTimeout</name></expr></argument>,
             <argument><expr><name>zkClientConnectTimeout</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostPort</name></expr></argument>, <argument><expr><name>hostContext</name></expr></argument>,
             <argument><expr><name>leaderVoteWait</name></expr></argument>, <argument><expr><name>distribUpdateConnTimeout</name></expr></argument>, <argument><expr><name>distribUpdateSoTimeout</name></expr></argument>,
             <argument><expr><operator>new</operator> <class><super><name>CurrentCoreDescriptorProvider</name></super><argument_list>()</argument_list> <block>{
              

               <function><annotation>@<name>Override</name></annotation>
               <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name></type> <name>getCurrentDescriptors</name><parameter_list>()</parameter_list> <block>{<block_content>
                 <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name></type> <name>descriptors</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name><argument_list>(
<argument>@@ <expr><operator>-</operator><literal type="number">269</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">235</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>public</specifier> class <name>CoreContainer</name></expr></argument>
                 <return>return <expr><name>descriptors</name></expr>;</return></argument_list></call></expr></init></decl></decl_stmt>
               <expr_stmt/>}</block_content>
             }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr></block></expr></expr_stmt>
        
        


         <if_stmt><if>if <condition>(<expr><name>zkRun</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>zkServer</name><operator>.</operator><name>getServers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>confDir</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>boostrapConf</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
           <comment type="line">// we are part of an ensemble and we are not uploading the config - pause to give the config time</comment>
           <comment type="line">// to get up</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">321</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
 
   <comment type="line">// Helper class to initialize the CoreContainer</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>Initializer</name> <block>{
    <expr><specifier>protected</specifier> <name>String</name> <name>containerConfigFilename</name> <operator>=</operator> <literal type="null">null</literal></expr>;  <comment type="line">// normally "solr.xml"</comment>
    <specifier>protected</specifier> <name>String</name> <name>containerConfigFilename</name> <operator>=</operator> <literal type="null">null</literal></block></expr>;</expr_stmt>  <comment type="line">// normally "solr.xml" becoming solr.properties in 5.0</comment>
     <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>dataDir</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt> <comment type="line">// override datadir for single core mode</comment>
 
     <comment type="line">// core container instantiation</comment>
    <function><type><specifier>public</specifier> <name>CoreContainer</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>CoreContainer</name></type> <name>initialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
       <decl_stmt><decl><type><name>CoreContainer</name></type> <name>cores</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>solrHome</name> <init>= <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>locateSolrHome</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// ContainerConfigFilename could  could be a properties file</comment>
       <decl_stmt><decl><type><name>File</name></type> <name>fconf</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>, <argument><expr><ternary><condition><expr><name>containerConfigFilename</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"solr.xml"</literal></expr>
           </then><else>: <expr><name>containerConfigFilename</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"looking for solr.xml: "</literal> <operator>+</operator> <call><name><name>fconf</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"looking for solr config file: "</literal> <operator>+</operator> <call><name><name>fconf</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>cores</name> <operator>=</operator> <operator>new</operator> <call><name>CoreContainer</name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name><name>fconf</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isBlank</name></name><argument_list>(<argument><expr><name>containerConfigFilename</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>containerConfigFilename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".xml"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>fconf</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>, <argument><expr><name><name>SolrProperties</name><operator>.</operator><name>SOLR_PROPERTIES_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// Either we have a config file or not. If it ends in .properties, assume new-style.</comment>
       
       <if_stmt><if>if <condition>(<expr><call><name><name>fconf</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>, <argument><expr><name>fconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"no solr.xml file found - using default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"no solr.xml or solr.properties file found - using default old-style solr.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>DEF_SOLR_XML</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>solrHome</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>DEF_SOLR_XML</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
               <argument><expr><literal type="string">"CoreContainer.Initialize failed when trying to load default solr.xml file"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">352</literal></expr><operator>,</operator><expr><literal type="number">44</literal> <operator>+</operator><literal type="number">327</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></catch></try>
   </block_content>}</block></else></if_stmt>
 
  <function><type><specifier>static</specifier> <name>Properties</name></type> <name>getCoreProps</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>instanceDir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>defaults</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="string">"conf"</literal><operator>+</operator><name><name>File</name><operator>.</operator><name>separator</name></name><operator>+</operator> <literal type="string">"solrcore.properties"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>corePropsFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>corePropsFile</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>corePropsFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>p</name> <init>= <expr><name>defaults</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>corePropsFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>corePropsFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>corePropsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error loading properties "</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally<block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
      </block_content>}</block></finally></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Trivial helper method for load, note it implements LRU on transient cores</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>allocateLazyCores</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>transientCacheSize</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@transientCacheSize"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>transientCacheSize</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>transientCores</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>transientCacheSize</name></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>boolean</name></type> <name>removeEldestEntry</name><parameter_list>(<parameter><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></name></type> <name>eldest</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>transientCacheSize</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>eldest</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
 
   <comment type="line">//-------------------------------------------------------------------</comment>
   <comment type="line">// Initialization / Cleanup</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">400</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">337</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
    <operator>*</operator> @<name>param</name> <name>dir</name> <name>the</name> <name>home</name> <name>directory</name> <name>of</name> <name>all</name> <name><name>resources</name><operator>.</operator></name>
    * @<name>param</name> <name>configFile</name> <name>the</name> <name>configuration</name> <name>file</name>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <name>void</name> <call><name>load</name><argument_list>(<argument><expr><name>String</name> <name>dir</name></expr></argument>, <argument><expr><name>File</name> <name>configFile</name></expr></argument> )</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>void</name> <call><name>load</name><argument_list>(<argument><expr><name>String</name> <name>dir</name></expr></argument>, <argument><expr><name>File</name> <name>configFile</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>FileNotFoundException</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>configFile</name></name> <operator>=</operator> <name>configFile</name></expr></block></expr></argument></throws></expr>;
    <call><name><name>this</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><call><name><name>configFile</name><operator>.</operator><name>toURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toASCIIString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>configFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">".xml"</literal></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name><name>configFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function> 
 
   <comment type="block" format="javadoc">/**
    * Load a config file listing the available solr cores.
    * 
    * @param dir the home directory of all resources.
   * @param cfgis the configuration file InputStream
   * @param is the configuration file InputStream. May be a properties file or an xml file
    */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>InputSource</name></type> <name>cfgis</name></decl></parameter>)</parameter_list>  <block>{<block_content>

  <comment type="line">// Let's keep this ugly boolean out of public circulation.</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isXmlFile</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list>  <block>{<block_content>
     <decl_stmt><decl><type><name>ThreadPoolExecutor</name></type> <name>coreLoadExecutor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>dir</name></expr>)</condition> <block>{<block_content>
       <comment type="line">// don't rely on SolrResourceLoader(), determine explicitly first</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">421</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">360</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
     
     <name><name>this</name><operator>.</operator><name>loader</name></name> <operator>=</operator> <operator>new</operator> <call><name>SolrResourceLoader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>solrHome</name> <operator>=</operator> <call><name><name>loader</name><operator>.</operator><name>getInstanceDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>Config</name></type> <name>cfg</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl>;</decl_stmt>
     
     <comment type="line">// keep orig config for persist to consult</comment>
    <comment type="line">//TODO 5.0: Remove this confusing junk, the properties file is so fast to read that there's no good reason</comment>
    <comment type="line">//          to add this stuff. Furthermore, it would be good to persist comments when saving.....</comment>
     <try>try <block>{<block_content>
      <expr_stmt><expr><name>cfg</name> <operator>=</operator> <operator>new</operator> <call><name>Config</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>cfgis</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>new</operator> <call><name>Config</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>copyDoc</name><argument_list>(<argument><expr><call><name><name>cfg</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>isXmlFile</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cfg</name> <operator>=</operator> <operator>new</operator> <call><name>ConfigSolrXmlBackCompat</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>new</operator> <call><name>ConfigSolrXmlBackCompat</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><operator>(</operator><name>ConfigSolrXmlBackCompat</name><operator>)</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cfg</name> <operator>=</operator> <operator>new</operator> <call><name>SolrProperties</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>new</operator> <call><name>SolrProperties</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>, <argument><expr><operator>(</operator><name>SolrProperties</name><operator>)</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch></try>
     <comment type="line">// Since the cores var is now initialized to null, let's set it up right</comment>
     <comment type="line">// now.</comment>
     <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>substituteProperties</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>initShardHandler</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>allocateLazyCores</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <expr_stmt><expr><name>shardHandlerFactory</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>initShardHandler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>allocateLazyCores</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="line">// Initialize Logging</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>cfg</name><operator>.</operator><name>getBool</name></name><argument_list>(<argument><expr><literal type="string">"solr/logging/@enabled"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>cfg</name><operator>.</operator><name>getBool</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING</name></name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>slf4jImpl</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>fname</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/logging/watcher/@class"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>fname</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING</name></name></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <try>try <block>{<block_content>
         <expr_stmt><expr><name>slf4jImpl</name> <operator>=</operator> <call><name><name>StaticLoggerBinder</name><operator>.</operator><name>getSingleton</name></name><argument_list>()</argument_list></call>
             <operator>.</operator><call><name>getLoggerFactoryClassStr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">475</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">421</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
         
         <if_stmt><if>if <condition>(<expr><name>logging</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name>ListenerConfig</name></type> <name>v</name> <init>= <expr><operator>new</operator> <call><name>ListenerConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>v</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"solr/logging/watcher/@size"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>v</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/logging/watcher/@threshold"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>v</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING_WATCHER</name></name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>v</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING_WATCHER</name></name></expr></argument>, <argument><expr><literal type="string">"threshold"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Registering Log Listener"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>logging</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">485</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">431</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
     
    <decl_stmt><decl><type><name>String</name></type> <name>dcoreName</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@defaultCoreName"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>dcoreName</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"defaultCoreName"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>dcoreName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>dcoreName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>defaultCoreName</name> <operator>=</operator> <name>dcoreName</name></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>persistent</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getBool</name></name><argument_list>(<argument><expr><literal type="string">"solr/@persistent"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>libDir</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/@sharedLib"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zkHost</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/@zkHost"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>coreLoadThreads</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"solr/@coreLoadThreads"</literal></expr></argument>, <argument><expr><name>CORE_LOAD_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>adminPath</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@adminPath"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shareSchema</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getBool</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@shareSchema"</literal></expr></argument>, <argument><expr><name>DEFAULT_SHARE_SCHEMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zkClientTimeout</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@zkClientTimeout"</literal></expr></argument>,
        <argument><expr><name>DEFAULT_ZK_CLIENT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>persistent</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getBool</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR</name></name></expr></argument>, <argument><expr><literal type="string">"persistent"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>libDir</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR</name></name></expr></argument>, <argument><expr><literal type="string">"sharedLib"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zkHost</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR</name></name></expr></argument>, <argument><expr><literal type="string">"zkHost"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>coreLoadThreads</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR</name></name></expr></argument>, <argument><expr><literal type="string">"coreLoadThreads"</literal></expr></argument>, <argument><expr><name>CORE_LOAD_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <expr_stmt><expr><name>distribUpdateConnTimeout</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@distribUpdateConnTimeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>distribUpdateSoTimeout</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@distribUpdateSoTimeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adminPath</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"adminPath"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shareSchema</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getBool</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"shareSchema"</literal></expr></argument>, <argument><expr><name>DEFAULT_SHARE_SCHEMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zkClientTimeout</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"zkClientTimeout"</literal></expr></argument>, <argument><expr><name>DEFAULT_ZK_CLIENT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <expr_stmt><expr><name>hostPort</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@hostPort"</literal></expr></argument>, <argument><expr><name>DEFAULT_HOST_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>distribUpdateConnTimeout</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"distribUpdateConnTimeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>distribUpdateSoTimeout</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"distribUpdateSoTimeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <expr_stmt><expr><name>hostContext</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@hostContext"</literal></expr></argument>, <argument><expr><name>DEFAULT_HOST_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@host"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hostPort</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"hostPort"</literal></expr></argument>, <argument><expr><name>DEFAULT_HOST_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>hostContext</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"hostContext"</literal></expr></argument>, <argument><expr><name>DEFAULT_HOST_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <expr_stmt><expr><name>leaderVoteWait</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@leaderVoteWait"</literal></expr></argument>, <argument><expr><name>LEADER_VOTE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>leaderVoteWait</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"leaderVoteWait"</literal></expr></argument>, <argument><expr><name>LEADER_VOTE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <if_stmt><if>if <condition>(<expr><name>shareSchema</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>indexSchemaCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>IndexSchema</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>adminHandler</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@adminHandler"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>managementPath</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@managementPath"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adminHandler</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"adminHandler"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>managementPath</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"managementPath"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <expr_stmt><expr><name>zkClientTimeout</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"zkClientTimeout"</literal></expr></argument>,
         <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>zkClientTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">539</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">484</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></try>
     
     <expr_stmt><expr><name>collectionsHandler</name> <operator>=</operator> <operator>new</operator> <call><name>CollectionsHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>containerProperties</name> <operator>=</operator> <call><name>readProperties</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name><name>cfg</name><operator>.</operator><name>evaluate</name></name><argument_list>(
          <argument><expr><name>DEFAULT_HOST_CONTEXT</name></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>item</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    
    <decl_stmt><decl><type><name>NodeList</name></type> <name>nodes</name> <init>= <expr><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name><name>cfg</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/core"</literal></expr></argument>,
        <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>containerProperties</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getSolrProperties</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>DEFAULT_HOST_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="line">// setup executor to load cores in parallel</comment>
     <expr_stmt><expr><name>coreLoadExecutor</name> <operator>=</operator> <operator>new</operator> <call><name>ThreadPoolExecutor</name><argument_list>(<argument><expr><name>coreLoadThreads</name></expr></argument>, <argument><expr><name>coreLoadThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
         <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedBlockingQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">559</literal></expr></argument>,<argument><expr><literal type="number">66</literal> <operator>+</operator><literal type="number">495</literal></expr></argument>,<argument><expr><literal type="number">70</literal> @@ <specifier>public</specifier> class <name>CoreContainer</name>
       <name><name>CompletionService</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name> <name>completionService</name> <operator>=</operator> <operator>new</operator> <call><name><name>ExecutorCompletionService</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>(
           <argument><expr><name>coreLoadExecutor</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
       <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pending</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allCores</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getAllCoreNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>String</name></type> <name>oneCoreName</name> <range>: <expr><name>allCores</name></expr></range></decl></init>)</control> <block>{<block_content>

         <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>rawName</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>rawName</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

           <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>rawName</name></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
                 <argument><expr><literal type="string">"Each core in solr.xml must have a 'name'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
           </block_content>}</block></if></if_stmt>
           <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> <init>= <expr><name>rawName</name></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><specifier>final</specifier> <name>CoreDescriptor</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>CoreDescriptor</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
              <argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_INSTDIR</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></try>
           
           <comment type="line">// deal with optional settings</comment>
          <decl_stmt><decl><type><name>String</name></type> <name>opt</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_CONFIG</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>opt</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_CONFIG</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           
           <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setConfigName</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_SCHEMA</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_SCHEMA</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setSchemaName</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           
           <if_stmt><if>if <condition>(<expr><name>zkController</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_SHARD</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_SHARD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>opt</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setShardId</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_COLLECTION</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_COLLECTION</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCollectionName</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_ROLES</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_ROLES</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setRoles</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_NODE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NODE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>opt</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCoreNodeName</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
           </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPropertiesName</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_DATADIR</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_DATADIR</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setDataDir</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           
          <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setCoreProperties</name></name><argument_list>(<argument><expr><call><name>readProperties</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setCoreProperties</name></name><argument_list>(<argument><expr><call><name><name>cfg</name><operator>.</operator><name>readCoreProperties</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_LOADONSTARTUP</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_LOADONSTARTUP</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setLoadOnStartup</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><literal type="string">"true"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"on"</literal>
                 <operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_TRANSIENT</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oneCoreName</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_TRANSIENT</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setTransient</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><literal type="string">"true"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"on"</literal>
                 <operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">632</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">572</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
                 <name>SolrCore</name> <name>c</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                 <try>try <block>{<block_content>
                   <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>registerLazyCore</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></else></if_stmt>

                  <expr_stmt><expr><call><name>registerCore</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
                   <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">648</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">583</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
               </block_content>}</block></if></if_stmt>
             </block_content>}</block></catch></try><empty_stmt>;</empty_stmt>
 

             <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>completionService</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
            
           </block_content>}</block></if> <else>else <block>{<block_content>
             <comment type="line">// Store it away for later use. includes non-transient but not</comment>
             <comment type="line">// loaded at startup cores.</comment>
            <expr_stmt><expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>rawName</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>putDynamicDescriptor</name></name><argument_list>(<argument><expr><name>rawName</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></else></if_stmt>
         </block_content>}</block></for> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">664</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">597</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
       
       <while>while <condition>(<expr><name>pending</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>pending</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <try>try <block>{<block_content>

           <decl_stmt><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><call><name><name>completionService</name><operator>.</operator><name>take</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>future</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
           <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>future</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">672</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">606</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
             <name>SolrCore</name> <name>c</name> <operator>=</operator> <call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <comment type="line">// track original names</comment>
             <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>coreToOrigName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>putCoreToOrigName</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
           </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrCore</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"error loading core"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrCore</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading core"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></catch></try>
           
         </block_content>}</block></while> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">683</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">617</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
               <literal type="string">"interrupted while loading core"</literal></expr><operator>,</operator> <expr><name>e</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch>
         </block_content>}</block></catch>
       </block_content>}</block></for>

      <comment type="line">// Start the background thread</comment>
      <expr_stmt><expr><name>backgroundCloser</name> <operator>=</operator> <operator>new</operator> <call><name>CloserThread</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>coreMaps</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>backgroundCloser</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

     </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>coreLoadExecutor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>ExecutorUtil</name><operator>.</operator><name>shutdownNowAndAwaitTermination</name></name><argument_list>(<argument><expr><name>coreLoadExecutor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">690</literal></expr><operator>,</operator><expr><literal type="number">50</literal> <operator>+</operator><literal type="number">629</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></finally>
 
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>initShardHandler</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PluginInfo</name></type> <name>info</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// To make this available to TestHarness.</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>initShardHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name></type> <name>shfn</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getNode</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/shardHandlerFactory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
      <if_stmt><if>if <condition>(<expr><name>shfn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><name>shfn</name></expr></argument>, <argument><expr><literal type="string">"shardHandlerFactory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>,<argument><expr><call><name><name>HttpShardHandlerFactory</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><literal type="string">"shardHandlerFactory"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>PluginInfo</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>HttpShardHandlerFactory</name></type> <name>fac</name> <init>= <expr><operator>new</operator> <call><name>HttpShardHandlerFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>initShardHandler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Cough! Hack! But tests run this way.</comment>
      <decl_stmt><decl><type><name>HttpShardHandlerFactory</name></type> <name>fac</name> <init>= <expr><operator>new</operator> <call><name>HttpShardHandlerFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>shardHandlerFactory</name> <operator>=</operator> <name>fac</name></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>shardHandlerFactory</name> <operator>=</operator> <name>fac</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Document</name></type> <name>copyDoc</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TransformerException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TransformerFactory</name></type> <name>tfactory</name> <init>= <expr><call><name><name>TransformerFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Transformer</name></type> <name>tx</name>   <init>= <expr><call><name><name>tfactory</name><operator>.</operator><name>newTransformer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DOMSource</name></type> <name>source</name> <init>= <expr><operator>new</operator> <call><name>DOMSource</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DOMResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>DOMResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>Document</name><operator>)</operator><call><name><name>result</name><operator>.</operator><name>getNode</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>Properties</name></type> <name>readProperties</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XPathExpressionException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>XPath</name></type> <name>xpath</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getXPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeList</name></type> <name>props</name> <init>= <expr><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name><name>xpath</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>properties</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>props</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name></type> <name>prop</name> <init>= <expr><call><name><name>props</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>properties</name></expr>;</return>
  </block_content>}</block></function>
  
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isShutDown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>Config</name></type> <name>cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>ConfigSolr</name></type> <name>cfg</name></decl>;</decl_stmt>
   
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isShutDown</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>isShutDown</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">756</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">665</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
         <call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
     </block_content>}</block></function>
    
     <expr_stmt><expr><name>isShutDown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    

     <if_stmt><if>if <condition>(<expr><call><name>isZooKeeperAware</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>publishCoresAsDown</name></name><argument_list>(<argument><expr><name>zkController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>cancelCoreRecoveries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    
    <try>try <block>{<block_content>
      <synchronized>synchronized <init>(<expr><name>cores</name></expr>)</init> <block>{<block_content>
 
        <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><call><name><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"Error shutting down core"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <comment type="line">// First allow the closer thread to drain all the pending closes it can.</comment>
      <synchronized>synchronized <init>(<expr><call><name><name>coreMaps</name><operator>.</operator><name>getLocker</name></name><argument_list>()</argument_list></call></expr>)</init> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>getLocker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// wake up anyone waiting</comment>
       </block_content>}</block></synchronized>
      <synchronized>synchronized <init>(<expr><name>transientCores</name></expr>)</init> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><call><name><name>transientCores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"Error shutting down core"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
      <if_stmt><if>if <condition>(<expr><name>backgroundCloser</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Doesn't seem right, but tests get in here without initializing the core.</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>backgroundCloser</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <empty_stmt>;</empty_stmt> <comment type="line">// Don't much care if this gets interrupted</comment>
         </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>transientCores</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <comment type="line">// Now clear all the cores that are being operated upon.</comment>
      <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>clearMaps</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// It's still possible that one of the pending dynamic load operation is waiting, so wake it up if so.</comment>
      <comment type="line">// Since all the pending operations queues have been drained, there should be nothing to do.</comment>
      <synchronized>synchronized <init>(<expr><call><name><name>coreMaps</name><operator>.</operator><name>getLocker</name></name><argument_list>()</argument_list></call></expr>)</init> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>getLocker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// wake up the thread</comment>
      </block_content>}</block></synchronized>

     </block_content>}</block></for> <finally>finally <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>shardHandlerFactory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>shardHandlerFactory</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">797</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">706</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>zkServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>zkServer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></finally>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>cancelCoreRecoveries</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCoreState</name></argument>&gt;</argument_list></name></type> <name>coreStates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCoreState</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>cores</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><call><name><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreStates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getUpdateHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrCoreState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>addCoresToList</name></name><argument_list>(<argument><expr><name>coreStates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// we must cancel without holding the cores sync</comment>
     <comment type="line">// make sure we wait for any recoveries to stop</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">831</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">735</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></function>
   </block_content>}</block></synchronized>
 
  <comment type="block" format="javadoc">/**
   * Registers a SolrCore descriptor in the registry using the specified name.
   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core
   *
   * @return a previous core having the same name if it existed
   */</comment>
  <function><type><specifier>public</specifier> <name>SolrCore</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnPrevNotClosed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>registerCore</name><argument_list>(<argument><expr><name>cores</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>returnPrevNotClosed</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>registerLazyCore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnPrevNotClosed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>registerCore</name><argument_list>(<argument><expr><name>transientCores</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>returnPrevNotClosed</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>registerCore</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>whichCores</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnPrevNotClosed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>registerCore</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isTransientCore</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnPrevNotClosed</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if<condition>( <expr><name>core</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>( <argument><expr><literal type="string">"Can not register a null core."</literal></expr></argument> )</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">872</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">762</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></function>
     
     <decl_stmt><decl><type><name>SolrCore</name></type> <name>old</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>whichCores</name></expr>)</init> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isShutDown</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"This CoreContainer has been shutdown"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>whichCores</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreInitFailures</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>isShutDown</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"This CoreContainer has been shutdown"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>isTransientCore</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>coreMaps</name><operator>.</operator><name>putTransientCore</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>coreMaps</name><operator>.</operator><name>putCore</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
       <comment type="block">/*
       * set both the name of the descriptor and the name of the
       * core, since the descriptors name is used for persisting.
       */</comment>
      <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putProperty</name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <synchronized>synchronized <init>(<expr><name>coreInitFailures</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreInitFailures</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></synchronized>
 
     <if_stmt><if>if<condition>( <expr><name>old</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>old</name> <operator>==</operator> <name>core</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">940</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">837</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
    <operator>*</operator> @</expr></expr_stmt><return>return <expr><name>a</name> <name>previous</name> <name>core</name> <name>having</name> <name>the</name> <name>same</name> <name>name</name></expr></return> <if_stmt><if>if it existed and returnPrev==true
    */
   public SolrCore register<condition>(<expr><name>SolrCore</name> <name>core</name></expr><operator>,</operator> <expr><name>boolean</name> <name>returnPrev</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>register</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>returnPrev</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>registerCore</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>returnPrev</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <function><type><specifier>public</specifier> <name>SolrCore</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnPrev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>registerCore</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>returnPrev</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 

   <comment type="line">// Helper method to separate out creating a core from ZK as opposed to the "usual" way. See create()</comment>
   <function><type><specifier>private</specifier> <name>SolrCore</name></type> <name>createFromZk</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>instanceDir</name></decl></parameter>, <parameter><decl><type><name>CoreDescriptor</name></type> <name>dcore</name></decl></parameter>)</parameter_list>
   <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">960</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">862</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
         <throw>throw <argument_list>new <argument><expr><call><name>ZooKeeperException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
             <argument><expr><literal type="string">"Could not find config name for collection:"</literal> <operator>+</operator> <name>collection</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></expr>;</expr_stmt>
       </block_content>}</block></function>
      <expr_stmt><expr><name>solrLoader</name> <operator>=</operator> <operator>new</operator> <call><name>ZkSolrResourceLoader</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>libLoader</name></expr></argument>, <argument><expr><call><name>getCoreProps</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>,
          <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getPropertiesName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zkController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>solrLoader</name> <operator>=</operator> <operator>new</operator> <call><name>ZkSolrResourceLoader</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>libLoader</name></expr></argument>, <argument><expr><call><name><name>SolrProperties</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>dcore</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zkController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>getSolrConfigFromZk</name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>solrLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>getSchemaFromZk</name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>solrLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>getSchemaFromZk</name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><operator>new</operator> <call><name>SolrCore</name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>dcore</name></expr></argument>)</argument_list></call></expr>;</return>
 
     </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">984</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">885</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
     <name>SolrResourceLoader</name> <name>solrLoader</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>SolrConfig</name></type> <name>config</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>solrLoader</name> <operator>=</operator> <operator>new</operator> <call><name>SolrResourceLoader</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>libLoader</name></expr></argument>, <argument><expr><call><name>getCoreProps</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getPropertiesName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>solrLoader</name> <operator>=</operator> <operator>new</operator> <call><name>SolrResourceLoader</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>libLoader</name></expr></argument>, <argument><expr><call><name><name>SolrProperties</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>dcore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>config</name> <operator>=</operator> <operator>new</operator> <call><name>SolrConfig</name><argument_list>(<argument><expr><name>solrLoader</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to load file {}/{}"</literal></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"Could not load config for "</literal> <operator>+</operator> <call><name><name>dcore</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch></try>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1005</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">907</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
             <call><name><name>schemaFile</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block></catch>)</block_content></block><empty_stmt>;</empty_stmt></synchronized>
         <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name><name>indexSchemaCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"creating new schema object for core: "</literal> <operator>+</operator> <name><name>dcore</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"creating new schema object for core: "</literal> <operator>+</operator> <call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name>schema</name> <operator>=</operator> <operator>new</operator> <call><name>IndexSchema</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>indexSchemaCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"re-using schema object for core: "</literal> <operator>+</operator> <name><name>dcore</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"re-using schema object for core: "</literal> <operator>+</operator> <call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
       </block_content>}</block></function>
     </block_content>}</block></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1041</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">943</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
       <comment type="line">// Make the instanceDir relative to the cores instanceDir if not absolute</comment>
       <name>File</name> <name>idir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>getInstanceDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>instanceDir</name> <init>= <expr><call><name><name>idir</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating SolrCore '{}' using instanceDir: {}"</literal></expr></argument>, 
      <argument><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating SolrCore '{}' using instanceDir: {}"</literal></expr></argument>,
                <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
 
       <comment type="line">// Initialize the solr config</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1062</literal></expr><operator>,</operator><expr><literal type="number">48</literal> <operator>+</operator><literal type="number">964</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
    <operator>*</operator> @</expr></expr_stmt><return>return <expr><name>a</name> <name>Collection</name> <name>of</name> <name>registered</name> <name>SolrCores</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name> <call><name>getCores</name><argument_list>()</argument_list></call> <block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name> <name>lst</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <synchronized>synchronized <init>(<expr><name>cores</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized></block></expr></return>
    <return>return <expr><name>lst</name></expr>;</return>
    <return>return <expr><call><name><name>coreMaps</name><operator>.</operator><name>getCores</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></synchronized>
 
   <comment type="block" format="javadoc">/**
    * @return a Collection of the names that cores are mapped to
    */</comment>
   <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCoreNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>cores</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>cores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
    <synchronized>synchronized <init>(<expr><name>transientCores</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>transientCores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
    <return>return <expr><name>lst</name></expr>;</return>
    <return>return <expr><call><name><name>coreMaps</name><operator>.</operator><name>getCoreNames</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** This method is currently experimental.
    * @return a Collection of the names that a specific core is mapped to.
    */</comment>
   <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCoreNames</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>cores</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SolrCore</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>cores</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <synchronized>synchronized <init>(<expr><name>transientCores</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SolrCore</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>transientCores</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><call><name><name>coreMaps</name><operator>.</operator><name>getCoreNames</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * get a list of all the cores that are currently loaded
   * @return a list of al lthe available core names in either permanent or transient core lists.
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllCoreNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>coreMaps</name><operator>.</operator><name>getAllCoreNames</name></name><argument_list>()</argument_list></call></expr>;</return>
 
    <return>return <expr><name>lst</name></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -1144,10 +1028,7 @@ public class CoreContainer
     try {
 
       name= checkDefault(name);
      SolrCore core;
      synchronized(cores) {
        core = cores.get(name);
      }
      SolrCore core = coreMaps.getCore(name);
       if (core == null)
         throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "No such core: " + name );
 
@@ -1160,7 +1041,7 @@ public class CoreContainer
     
       SolrResourceLoader solrLoader;
       if(zkController == null) {
        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()));
        solrLoader = new SolrResourceLoader(instanceDir.getAbsolutePath(), libLoader, SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd));
       } else {
         try {
           String collection = cd.getCloudDescriptor().getCollectionName();
@@ -1172,7 +1053,8 @@ public class CoreContainer
             throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,
                                          "Could not find config name for collection:" + collection);
           }
          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader, getCoreProps(instanceDir.getAbsolutePath(), cd.getPropertiesName(),cd.getCoreProperties()), zkController);
          solrLoader = new ZkSolrResourceLoader(instanceDir.getAbsolutePath(), zkConfigName, libLoader,
              SolrProperties.getCoreProperties(instanceDir.getAbsolutePath(), cd), zkController);
         } catch (KeeperException e) {
           log.error("", e);
           throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,
@@ -1185,14 +1067,11 @@ public class CoreContainer
                                        "", e);
         }
       }
    
       SolrCore newCore = core.reload(solrLoader, core);
       // keep core to orig name link
      String origName = coreToOrigName.remove(core);
      if (origName != null) {
        coreToOrigName.put(newCore, origName);
      }
      register(name, newCore, false);
      coreMaps.removeCoreToOrigName(newCore, core);

      registerCore(false, name, newCore, false);
 
       // :TODO: Java7...
       // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html
@@ -1214,22 +1093,7 @@ public class CoreContainer
     }
     n0 = checkDefault(n0);
     n1 = checkDefault(n1);
    synchronized( cores ) {
      SolrCore c0 = cores.get(n0);
      SolrCore c1 = cores.get(n1);
      if (c0 == null)
        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "No such core: " + n0 );
      if (c1 == null)
        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "No such core: " + n1 );
      cores.put(n0, c1);
      cores.put(n1, c0);

      c0.setName(n1);
      c0.getCoreDescriptor().name = n1;
      c1.setName(n0);
      c1.getCoreDescriptor().name = n0;
    }

    coreMaps.swap(n0, n1);
 
     log.info("swapped: "+n0 + " with " + n1);
   }
@@ -1238,13 +1102,7 @@ public class CoreContainer
   public SolrCore remove( String name ) {
     name = checkDefault(name);    
 
    synchronized(cores) {
      SolrCore core = cores.remove( name );
      if (core != null) {
        coreToOrigName.remove(core);
      }
      return core;
    }
    return coreMaps.remove(name, true);
 
   }
 
@@ -1252,12 +1110,9 @@ public class CoreContainer
     SolrCore core = getCore(name);
     try {
       if (core != null) {
        register(toName, core, false);
        registerCore(false, toName, core, false);
         name = checkDefault(name);
        
        synchronized (cores) {
          cores.remove(name);
        }
        coreMaps.remove(name, false);
       }
     } finally {
       if (core != null) {
@@ -1265,84 +1120,40 @@ public class CoreContainer
       }
     }
   }
  private SolrCore getCoreFromAnyList(String name) {
    SolrCore core;
    synchronized (cores) {
      core = cores.get(name);
      if (core != null) {
        core.open();    // increment the ref count while still synchronized
        return core;
      }
    }

    if (dynamicDescriptors.size() == 0) return null; // Nobody even tried to define any transient cores, so we're done.

    // Now look for already loaded transient cores.
    synchronized (transientCores) {
      core = transientCores.get(name);
      if (core != null) {
        core.open();
        return core;
      }
    }
    return null;
  }
   /** Gets a core by name and increase its refcount.
    * @see SolrCore#close() 
    * @param name the core name
    * @return the core if found
    */</comment>
   <function><type><specifier>public</specifier> <name>SolrCore</name></type> <name>getCore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

     <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>checkDefault</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// Do this in two phases since we don't want to lock access to the cores over a load.</comment>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name>getCoreFromAnyList</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>coreMaps</name><operator>.</operator><name>getCoreFromAnyList</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>core</name></expr>;</return></block_content></block></if></if_stmt>
 
     <comment type="line">// OK, it's not presently in any list, is it in the list of dynamic cores but not loaded yet? If so, load it.</comment>
    <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>desc</name> <init>=  <expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>coreMaps</name><operator>.</operator><name>getDynamicDescriptor</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <comment type="line">//Nope, no transient core with this name</comment>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
    <comment type="line">// Keep multiple threads from loading the same core at the same time.</comment>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>isPending</name></decl>;</decl_stmt>
      <synchronized>synchronized <init>(<expr><name>pendingDynamicCoreLoads</name></expr>)</init> <block>{<block_content>
        <expr_stmt><expr><name>isPending</name> <operator>=</operator> <call><name><name>pendingDynamicCoreLoads</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>isPending</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>pendingDynamicCoreLoads</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></synchronized>
    <expr_stmt><expr><name>core</name> <operator>=</operator> <call><name><name>coreMaps</name><operator>.</operator><name>waitPendingCoreOps</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// This will put an entry in pending core ops if the core isn't loaded</comment>
 
      <while>while <condition>(<expr><name>isPending</name></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return> <comment type="line">// Seems best not to do anything at all if the thread is interrupted</comment>
        </block_content>}</block></catch></try>
    <if_stmt><if>if <condition>(<expr><name>isShutDown</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// We're quitting, so stop. This needs to be after the wait above since we may come off</comment>
                                 <comment type="line">// the wait as a consequence of shutting down.</comment>
 
        <synchronized>synchronized <init>(<expr><name>pendingDynamicCoreLoads</name></expr>)</init> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pendingDynamicCoreLoads</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// NOTE: If, for some reason, the load failed, we'll return null here and presumably the log will show</comment>
            <comment type="line">// why. We'll fail all over again next time if the problem isn't corrected.</comment>
            <return>return <expr><call><name>getCoreFromAnyList</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></synchronized>
      </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <try>try <block>{<block_content>
         <expr_stmt><expr><name>core</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// This should throw an error if it fails.</comment>
         <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>desc</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>registerLazyCore</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line">// This is a transient core</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// This is a "permanent", although deferred-load core</comment>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>registerCore</name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name>recordAndThrow</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Unable to create core"</literal> <operator>+</operator> <name>name</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        <throw>throw <expr><call><name>recordAndThrow</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Unable to create core: "</literal> <operator>+</operator> <name>name</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>releasePending</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></finally></try>
    </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>pendingDynamicCoreLoads</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
     <return>return <expr><name>core</name></expr>;</return>
   </block_content>}</block></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1417</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">1228</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
   <specifier>public</specifier> <name>File</name> <call><name>getConfigFile</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>configFile</name></expr>;</return>
   }</block></expr></expr_stmt>
  
<comment type="block" format="javadoc">/** Persists the cores config file in cores.xml. */</comment>

  <comment type="block" format="javadoc">/**
   * Determines whether the core is already loaded or not but does NOT load the core
   *
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLoaded</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>coreMaps</name><operator>.</operator><name>isLoaded</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Persists the cores config file in cores.xml. */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>persist</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>persistFile</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * Gets a solr core descriptor for a core that is not loaded. Note that if the caller calls this on a
   * loaded core, the unloaded descriptor will be returned.
   *
   * @param cname - name of the unloaded core descriptor to load. NOTE:
   * @return a coreDescriptor. May return null
   */</comment>
  <function><type><specifier>public</specifier> <name>CoreDescriptor</name></type> <name>getUnloadedCoreDescriptor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cname</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>coreMaps</name><operator>.</operator><name>getUnloadedCoreDescriptor</name></name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/** Persists the cores config file in a user provided file. */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>persistFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Persisting cores config to "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>configFile</name></expr> </then><else>: <expr><name>file</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1458</literal></expr><operator>,</operator><expr><literal type="number">122</literal> <operator>+</operator><literal type="number">1288</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
     <call><name>addCoresAttrib</name><argument_list>(<argument><expr><name>coresAttribs</name></expr></argument>, <argument><expr><literal type="string">"leaderVoteWait"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>leaderVoteWait</name></name></expr></argument>, <argument><expr><name>LEADER_VOTE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>addCoresAttrib</name><argument_list>(<argument><expr><name>coresAttribs</name></expr></argument>, <argument><expr><literal type="string">"coreLoadThreads"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>coreLoadThreads</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>CORE_LOAD_THREADS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCoreXMLDef</name></argument>&gt;</argument_list></name></type> <name>solrCoreXMLDefs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCoreXMLDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <synchronized>synchronized <init>(<expr><name>cores</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>solrCore</name> <range>: <expr><call><name><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreAttribs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>dcore</name> <init>= <expr><call><name><name>solrCore</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>coreName</name> <init>= <expr><name><name>dcore</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>coreNode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>NodeList</name></type> <name>nodes</name> <init>= <expr><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name><name>cfg</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/core"</literal></expr></argument>,
              <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          
          <decl_stmt><decl><type><name>String</name></type> <name>origCoreName</name> <init>= <expr><call><name><name>coreToOrigName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>solrCore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><name>origCoreName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>origCoreName</name> <operator>=</operator> <name>coreName</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          
          <comment type="line">// look for an existing node</comment>
          
          <comment type="line">// first look for an exact match</comment>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>origCoreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>coreNode</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>coreName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
          
          <if_stmt><if>if <condition>(<expr><name>coreNode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// see if we match with substitution</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>origCoreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                  <argument><expr><call><name><name>loader</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>coreNode</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name>coreName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>persistCores</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>containerProperties</name></expr></argument>, <argument><expr><name>rootSolrAttribs</name></expr></argument>, <argument><expr><name>coresAttribs</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>instanceDir</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getRawInstanceDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_INSTDIR</name></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// write config </comment>
        <decl_stmt><decl><type><name>String</name></type> <name>configName</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_CONFIG</name></expr></argument>, <argument><expr><name>configName</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getDefaultConfigName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// write schema</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>schema</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_SCHEMA</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getDefaultSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>dataDir</name> <init>= <expr><name><name>dcore</name><operator>.</operator><name>dataDir</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ulogDir</name> <init>= <expr><name><name>dcore</name><operator>.</operator><name>ulogDir</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_DATADIR</name></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_ULOGDIR</name></expr></argument>, <argument><expr><name>ulogDir</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_TRANSIENT</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_LOADONSTARTUP</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>isLoadOnStartup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CloudDescriptor</name></type> <name>cd</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>shard</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>roles</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cd</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>shard</name> <operator>=</operator> <call><name><name>cd</name><operator>.</operator><name>getShardId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>roles</name> <operator>=</operator> <call><name><name>cd</name><operator>.</operator><name>getRoles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_SHARD</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_ROLES</name></expr></argument>, <argument><expr><name>roles</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>collection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// only write out the collection name if it's not the default (the</comment>
        <comment type="line">// core</comment>
        <comment type="line">// name)</comment>
        <if_stmt><if>if <condition>(<expr><name>cd</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>collection</name> <operator>=</operator> <call><name><name>cd</name><operator>.</operator><name>getCollectionName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>addCoreProperty</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name>coreNode</name></expr></argument>, <argument><expr><name>CORE_COLLECTION</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name><name>dcore</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// we don't try and preserve sys prop defs in these</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>opt</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getPropertiesName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_PROPERTIES</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <decl_stmt><decl><type><name>SolrCoreXMLDef</name></type> <name>solrCoreXMLDef</name> <init>= <expr><operator>new</operator> <call><name>SolrCoreXMLDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>solrCoreXMLDef</name><operator>.</operator><name>coreAttribs</name></name> <operator>=</operator> <name>coreAttribs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>solrCoreXMLDef</name><operator>.</operator><name>coreProperties</name></name> <operator>=</operator> <call><name><name>dcore</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>solrCoreXMLDefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>solrCoreXMLDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <decl_stmt><decl><type><name>SolrXMLDef</name></type> <name>solrXMLDef</name> <init>= <expr><operator>new</operator> <call><name>SolrXMLDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>coresDefs</name></name> <operator>=</operator> <name>solrCoreXMLDefs</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>containerProperties</name></name> <operator>=</operator> <name>containerProperties</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>solrAttribs</name></name> <operator>=</operator> <name>rootSolrAttribs</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>solrXMLDef</name><operator>.</operator><name>coresAttribs</name></name> <operator>=</operator> <name>coresAttribs</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>solrXMLSerializer</name><operator>.</operator><name>persistFile</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>configFile</name></expr> </then><else>: <expr><name>file</name></expr></else></ternary></expr></argument>,
          <argument><expr><name>solrXMLDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
   </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>String</name></type> <name>intToString</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>integer</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>integer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
     <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1586</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1303</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></function>
     
     <if_stmt><if>if <condition>(<expr><name>attribValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>rawValue</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"solr/cores/@"</literal> <operator>+</operator> <name>attribName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>rawValue</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><name>attribName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>rawValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>defaultValue</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>attribValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>attribValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><name>rawValue</name></expr></argument>, <argument><expr><call><name><name>loader</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

      <if_stmt><if>if <condition>(<expr><call><name><name>attribValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><name>rawValue</name></expr></argument>, <argument><expr><call><name><name>loader</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>coresAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribName</name></expr></argument>, <argument><expr><name>rawValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><call><name><name>coresAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribName</name></expr></argument>, <argument><expr><name>attribValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1596</literal></expr><operator>,</operator><expr><literal type="number">32</literal> <operator>+</operator><literal type="number">1314</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name></expr></expr_stmt>
     </block_content>}</block></else></if_stmt>
   </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>addCoreProperty</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreAttribs</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>rawAttribValue</name> <init>= <expr><call><name><name>DOMUtil</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>rawAttribValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rawAttribValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>defaultValue</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rawAttribValue</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DOMUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><name>rawAttribValue</name></expr></argument>, <argument><expr><call><name><name>loader</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>rawAttribValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></function>


   <function><type><specifier>public</specifier> <name>String</name></type> <name>getSolrHome</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>solrHome</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1646</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">1338</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
   <specifier>private</specifier> <name>SolrConfig</name> <call><name>getSolrConfigFromZk</name><argument_list>(<argument><expr><name>String</name> <name>zkConfigName</name></expr></argument>, <argument><expr><name>String</name> <name>solrConfigFileName</name></expr></argument>,
       <argument><expr><name>SolrResourceLoader</name> <name>resourceLoader</name></expr></argument>)</argument_list></call>
   <block>{
    <expr><name>SolrConfig</name> <name>cfg</name> <operator>=</operator> <literal type="null">null</literal></expr>;</block></expr></expr_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>config</name> <init>= <expr><call><name><name>zkController</name><operator>.</operator><name>getConfigFileData</name></name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>SystemIdResolver</name><operator>.</operator><name>createSystemIdFromResourceName</name></name><argument_list>(<argument><expr><name>solrConfigFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cfg</name> <operator>=</operator> <ternary><condition><expr><name>solrConfigFileName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>SolrConfig</name><argument_list>(
          <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name><name>SolrConfig</name><operator>.</operator><name>DEFAULT_CONF_FILE</name></name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>SolrConfig</name><argument_list>(
          <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
          <argument><expr><literal type="string">"getSolrConfigFromZK failed for "</literal> <operator>+</operator> <name>zkConfigName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>solrConfigFileName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <return>return <expr><name>cfg</name></expr>;</return>
    <return>return <expr><call><name><name>cfg</name><operator>.</operator><name>getSolrConfigFromZk</name></name><argument_list>(<argument><expr><name>zkController</name></expr></argument>, <argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>, <argument><expr><name>resourceLoader</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <comment type="line">// Just to tidy up the code where it did this in-line.</comment>
   <function><type><specifier>private</specifier> <name>SolrException</name></type> <name>recordAndThrow</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <synchronized>synchronized <init>(<expr><name>coreInitFailures</name></expr>)</init> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1671</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">1349</literal></expr><operator>,</operator><expr><literal type="number">590</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreContainer</name>
     <call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></synchronized>

   <decl_stmt><decl><type><specifier>private</specifier> <name>IndexSchema</name></type> <name>getSchemaFromZk</name><argument_list>(<argument><expr><name>String</name> <name>zkConfigName</name></expr></argument>, <argument><expr><name>String</name> <name>schemaName</name></expr></argument>,
      <argument><expr><name>SolrConfig</name> <name>config</name></expr></argument>, <argument><expr><name>SolrResourceLoader</name> <name>resourceLoader</name></expr></argument>)</argument_list>
      <name>SolrConfig</name> <name>config</name></decl>)
       <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
    <expr><name><name>byte</name><index>[]</index></name> <name>configBytes</name> <operator>=</operator> <call><name><name>zkController</name><operator>.</operator><name>getConfigFileData</name></name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>;</decl_stmt>
    <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>configBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>SystemIdResolver</name><operator>.</operator><name>createSystemIdFromResourceName</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexSchema</name></type> <name>schema</name> <init>= <expr><operator>new</operator> <call><name>IndexSchema</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>schema</name></expr>;</return>
    <return>return <expr><call><name><name>cfg</name><operator>.</operator><name>getSchemaFromZk</name></name><argument_list>(<argument><expr><name>zkController</name></expr></argument>, <argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
</block_content>}</block></function>


<comment type="line">// Introducing the two new maps (transientCores and dynamicDescriptors) introduced some locking complexities. Rather</comment>
<comment type="line">// than try to keep them all straight in the code, use this class you need to access any of:</comment>
<comment type="line">// cores</comment>
<comment type="line">// transientCores</comment>
<comment type="line">// dynamicDescriptors</comment>
<comment type="line">//</comment>

<class>class <name>CoreMaps</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Object</name></type> <name>locker</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// for locking around manipulating any of the core maps.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>cores</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// For "permanent" cores</comment>

  <comment type="line">//WARNING! The _only_ place you put anything into the list of transient cores is with the putTransientCore method!</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>transientCores</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// For "lazily loaded" cores</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name></type> <name>dynamicDescriptors</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptor</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>transientCacheSize</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreToOrigName</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CoreContainer</name></type> <name>container</name></decl>;</decl_stmt>

  <comment type="line">// It's a little clumsy to have two, but closing requires a SolrCore, whereas pending loads don't have a core.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pendingDynamicLoads</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Holds cores from the time they're removed from the transient cache until after they're closed.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>pendingDynamicCloses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><name>CoreMaps</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="line">// Trivial helper method for load, note it implements LRU on transient cores. Also note, if</comment>
  <comment type="line">// there is no setting for max size, nothing is done and all cores go in the regular "cores" list</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>allocateLazyCores</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>transientCacheSize</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>ConfigSolr</name><operator>.</operator><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"transientCacheSize"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>transientCacheSize</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CoreContainer</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Allocating transient cache for {} transient cores"</literal></expr></argument>, <argument><expr><name>transientCacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>transientCores</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>transientCacheSize</name></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>boolean</name></type> <name>removeEldestEntry</name><parameter_list>(<parameter><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></name></type> <name>eldest</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>transientCacheSize</name></expr>)</condition> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
              <decl_stmt><decl><type><name>SolrCore</name></type> <name>closeMe</name> <init>= <expr><call><name><name>eldest</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pendingDynamicCloses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>closeMe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>locker</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Wakes up closer thread too</comment>
              </block_content>}</block></synchronized>
            </block_content>}</block></synchronized>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>putDynamicDescriptor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rawName</name></decl></parameter>, <parameter><decl><type><name>CoreDescriptor</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>rawName</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <comment type="line">// We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've</comment>
  <comment type="line">// already deadlocked with closing/opening cores while keeping locks here....</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>clearMaps</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreNames</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>transientNames</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>pendingClosers</name></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><name>coreNames</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>transientNames</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>transientCores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pendingClosers</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><name>pendingDynamicCloses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>coreName</name> <range>: <expr><name>coreNames</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name>addPersistOneCore</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>container</name><operator>.</operator><name>loader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>CoreContainer</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"Error shutting down core"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>coreName</name> <range>: <expr><name>transientNames</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>transientCores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>CoreContainer</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"Error shutting down core"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>transientCores</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We might have some cores that we were _thinking_ about shutting down, so take care of those too.</comment>
    <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><name>pendingClosers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>addCoresToList</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCoreState</name></argument>&gt;</argument_list></name></type> <name>coreStates</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>addCores</name></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><name>addCores</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
    <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><name>addCores</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreStates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getUpdateHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrCoreState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="line">//WARNING! This should be the _only_ place you put anything into the list of transient cores!</comment>
  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>putTransientCore</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>retCore</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CoreContainer</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Opening transient core {}"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><name>retCore</name> <operator>=</operator> <call><name><name>transientCores</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></synchronized>
    <return>return <expr><name>retCore</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>putCore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <return>return <expr><call><name><name>cores</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>getCores</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>lst</name></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCoreNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>transientCores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
    <return>return <expr><name>set</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCoreNames</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>cores</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>transientCores</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><name>lst</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets a list of all cores, loaded and unloaded (dynamic)
   *
   * @return all cores names, whether loaded or unloaded.
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllCoreNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>transientCores</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
    <return>return <expr><name>set</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>SolrCore</name></type> <name>getCore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <return>return <expr><call><name><name>cores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>n0</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>n1</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>c0</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>n0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>c1</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"No such core: "</literal> <operator>+</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"No such core: "</literal> <operator>+</operator> <name>n1</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>c0</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>c0</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putProperty</name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>c1</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>c1</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putProperty</name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>

  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>removeOrig</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>removeOrig</name> <operator>&amp;&amp;</operator> <name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreToOrigName</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>core</name></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>putCoreToOrigName</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreToOrigName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>

  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeCoreToOrigName</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>newCore</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>origName</name> <init>= <expr><call><name><name>coreToOrigName</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>origName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreToOrigName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>newCore</name></expr></argument>, <argument><expr><name>origName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>getCoreFromAnyList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content> <comment type="line">// This one's OK, the core.open is just an increment</comment>
      <expr_stmt><expr><name>core</name> <operator>=</operator> <call><name><name>cores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <comment type="line">// increment the ref count while still synchronized</comment>
        <return>return <expr><name>core</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return> <comment type="line">// Nobody even tried to define any transient cores, so we're done.</comment>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// Now look for already loaded transient cores.</comment>
      <expr_stmt><expr><name>core</name> <operator>=</operator> <call><name><name>transientCores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Just increments ref count, so it's ok that we're in a synch block</comment>
        <return>return <expr><name>core</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></synchronized>

    <return>return <expr><literal type="null">null</literal></expr>;</return>

  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>CoreDescriptor</name></type> <name>getDynamicDescriptor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <return>return <expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isLoaded</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>cores</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>transientCores</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></synchronized>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>

  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>CoreDescriptor</name></type> <name>getUnloadedCoreDescriptor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cname</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>dynamicDescriptors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><operator>new</operator> <call><name>CoreDescriptor</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>

  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>String</name></type> <name>getCoreToOrigName</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>solrCore</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <return>return <expr><call><name><name>coreToOrigName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>solrCore</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>publishCoresAsDown</name><parameter_list>(<parameter><decl><type><name>ZkController</name></type> <name>zkController</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><call><name><name>cores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>zkController</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ZkStateReader</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>CoreContainer</name><operator>.</operator><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>CoreContainer</name><operator>.</operator><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><call><name><name>transientCores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>zkController</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ZkStateReader</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>CoreContainer</name><operator>.</operator><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>CoreContainer</name><operator>.</operator><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <comment type="line">// Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows</comment>
  <comment type="line">// this path, presumably it's there for a reason.</comment>
  <comment type="line">// This is really perverse, but all we need the here is to call a couple of static methods that for back-compat</comment>
  <comment type="line">// purposes</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>persistCores</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>containerProperties</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootSolrAttribs</name></decl></parameter>,
                           <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coresAttribs</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>configFile</name></decl></parameter>, <parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the</comment>
    <comment type="line">// current cores while they are saved. Remember that especially the transient core can come and go.</comment>
    <comment type="line">//</comment>
    <comment type="line">// Maybe the right thing to do is keep all the core descriptors NOT in the SolrCore, but keep all of the</comment>
    <comment type="line">// core descriptors in SolrProperties exclusively.</comment>
    <comment type="line">// TODO: 5.0 move coreDescriptors out of SolrCore and keep them only once in SolrProperties</comment>
    <comment type="line">//</comment>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>initPersistStatic</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>persistCores</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>cores</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>persistCores</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>transientCores</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>addPersistAllCoresStatic</name></name><argument_list>(<argument><expr><name>containerProperties</name></expr></argument>, <argument><expr><name>rootSolrAttribs</name></expr></argument>, <argument><expr><name>coresAttribs</name></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>configFile</name></expr> </then><else>: <expr><name>file</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>initPersist</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>persistCores</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>cores</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>persistCores</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>transientCores</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>addPersistAllCores</name></name><argument_list>(<argument><expr><name>containerProperties</name></expr></argument>, <argument><expr><name>rootSolrAttribs</name></expr></argument>, <argument><expr><name>coresAttribs</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>configFile</name></expr> </then><else>: <expr><name>file</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>
  <comment type="line">// We get here when we're being loaded, and the presumption is that we're not in the list yet.</comment>
  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>waitPendingCoreOps</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <comment type="line">// Keep multiple threads from opening or closing a core at one time.</comment>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>ret</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>pending</name></decl>;</decl_stmt>
      <do>do <block>{<block_content> <comment type="line">// We're either loading or unloading this core,</comment>
        <expr_stmt><expr><name>pending</name> <operator>=</operator> <call><name><name>pendingDynamicLoads</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// wait for the core to be loaded</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>pending</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// Check pending closes. This is a linear search is inefficient, but maps don't work without a lot of complexity,</comment>
          <comment type="line">// we'll live with it unless it proves to be a bottleneck. In the "usual" case, this list shouldn't be</comment>
          <comment type="line">// very long. In the stress test associated with SOLR-4196, this hovered around 0-3, occasionally spiking</comment>
          <comment type="line">// very briefly to around 30.</comment>
          <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><name>pendingDynamicCloses</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>pending</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>container</name><operator>.</operator><name>isShutDown</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Just stop already.</comment>

        <if_stmt><if>if <condition>(<expr><name>pending</name></expr>)</condition> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>locker</name><operator>.</operator><name>wait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return> <comment type="line">// Seems best not to do anything at all if the thread is interrupted</comment>
          </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> while <condition>(<expr><name>pending</name></expr>)</condition>;</do>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>container</name><operator>.</operator><name>isShutDown</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getCoreFromAnyList</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we might have been _unloading_ the core, so check.</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>pendingDynamicLoads</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// the caller is going to load us. If we happen to be shutting down, we don't care.</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></synchronized>

    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// The core is loaded, remove it from the pendin gloads</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>releasePending</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pendingDynamicLoads</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>locker</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>persistCores</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SolrCore</name></argument>&gt;</argument_list></name></type> <name>whichCores</name></decl></parameter>, <parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>solrCore</name> <range>: <expr><call><name><name>whichCores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>addPersistOneCore</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>solrCore</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addIfNotNull</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreAttribs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>addPersistOneCore</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>SolrCore</name></type> <name>solrCore</name></decl></parameter>, <parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>dcore</name> <init>= <expr><call><name><name>solrCore</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>coreName</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>origCoreName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreAttribs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>persistProps</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CloudDescriptor</name></type> <name>cd</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>collection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cd</name>  <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collection</name> <operator>=</operator> <call><name><name>cd</name><operator>.</operator><name>getCollectionName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>instDir</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getRawInstanceDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_CONFIG</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getDefaultConfigName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_SCHEMA</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getDefaultSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_DATADIR</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_DATADIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_ULOGDIR</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_ULOGDIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_TRANSIENT</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_TRANSIENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_LOADONSTARTUP</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_LOADONSTARTUP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// we don't try and preserve sys prop defs in these</comment>

      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_PROPERTIES</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getPropertiesName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Add in any non-standard bits of data</comment>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>std</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Properties</name></type> <name>allProps</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>std</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>standardPropNames</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>allProps</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name><name>std</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>persistProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotBlank</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>collection</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_COLLECTION</name></name></expr></argument>, <argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>

      <expr_stmt><expr><name>origCoreName</name> <operator>=</operator> <call><name>getCoreToOrigName</name><argument_list>(<argument><expr><name>solrCore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>origCoreName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>origCoreName</name> <operator>=</operator> <name>coreName</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>tmp</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getCoreNameFromOrig</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>, <argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>coreName</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>coreAttribs</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>readCoreAttributes</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>persistProps</name> <operator>=</operator> <call><name><name>cfg</name><operator>.</operator><name>readCoreProperties</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>coreAttribs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreAttribs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_COLLECTION</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collection</name> <operator>=</operator> <call><name><name>coreAttribs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_COLLECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreAttribs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>instDir</name> <operator>=</operator> <call><name><name>coreAttribs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>, <argument><expr><call><name><name>dcore</name><operator>.</operator><name>getRawInstanceDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_COLLECTION</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotBlank</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>collection</name></expr> </then><else>: <expr><call><name><name>dcore</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="line">// Default value here is same as old code.</comment>
    <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>, <argument><expr><name>instDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Emulating the old code, just overwrite shard and roles if present in the cloud descriptor</comment>
    <if_stmt><if>if <condition>(<expr><name>cd</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_SHARD</name></name></expr></argument>, <argument><expr><call><name><name>cd</name><operator>.</operator><name>getShardId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addIfNotNull</name><argument_list>(<argument><expr><name>coreAttribs</name></expr></argument>, <argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_ROLES</name></name></expr></argument>, <argument><expr><call><name><name>cd</name><operator>.</operator><name>getRoles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_LOADONSTARTUP</name></name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>isLoadOnStartup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_TRANSIENT</name></name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now add back in any implicit properties that aren't in already. These are all "attribs" in this meaning</comment>
    <decl_stmt><decl><type><name>Properties</name></type> <name>implicit</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>initImplicitProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>implicit</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreAttribs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>coreAttribs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><call><name><name>implicit</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>addPersistCore</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>, <argument><expr><name>persistProps</name></expr></argument>, <argument><expr><name>coreAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Another awkward bit for back-compat for SOLR-4196</comment>
      <expr_stmt><expr><call><name><name>ConfigSolrXmlBackCompat</name><operator>.</operator><name>addPersistCore</name></name><argument_list>(<argument><expr><name>persistProps</name></expr></argument>, <argument><expr><name>coreAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>Object</name></type> <name>getLocker</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>locker</name></expr>;</return> </block_content>}</block></function>

  <comment type="line">// Be a little careful. We don't want to either open or close a core unless it's _not_ being opened or closed by</comment>
  <comment type="line">// another thread. So within this lock we'll walk along the list of pending closes until we find something NOT in</comment>
  <comment type="line">// the list of threads currently being opened. The "usual" case will probably return the very first one anyway..</comment>
  <function><type><specifier>protected</specifier> <name>SolrCore</name></type> <name>getCoreToClose</name><parameter_list>()</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>pendingDynamicCloses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// nothing to do.</comment>
      <comment type="line">// Yes, a linear search but this is a pretty short list in the normal case and usually we'll take the first one.</comment>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><name>pendingDynamicCloses</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name><name>pendingDynamicLoads</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// Don't try close a core if it's being opened.</comment>
          <return>return <expr><name>core</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></synchronized>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeClosedFromCloser</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>locker</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pendingDynamicCloses</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>locker</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>
}</block></class>

<class>class <name>CloserThread</name> <super_list><extends>extends <super><name>Thread</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><name>CoreContainer</name></type> <name>container</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CoreMaps</name></type> <name>coreMaps</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl>;</decl_stmt>


  <constructor><name>CloserThread</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>CoreMaps</name></type> <name>coreMaps</name></decl></parameter>, <parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coreMaps</name></name> <operator>=</operator> <name>coreMaps</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="line">// It's important that this be the _only_ thread removing things from pendingDynamicCloses!</comment>
  <comment type="line">// This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so</comment>
  <comment type="line">// there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState</comment>
  <comment type="line">// essentially create a single-threaded process anyway.</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <while>while <condition>(<expr><operator>!</operator> <call><name><name>container</name><operator>.</operator><name>isShutDown</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <synchronized>synchronized <init>(<expr><call><name><name>coreMaps</name><operator>.</operator><name>getLocker</name></name><argument_list>()</argument_list></call></expr>)</init> <block>{<block_content> <comment type="line">// need this so we can wait and be awoken.</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>getLocker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are</comment>
          <comment type="line">// any cores to close.</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></synchronized>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>removeMe</name> <init>= <expr><call><name><name>coreMaps</name><operator>.</operator><name>getCoreToClose</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
           <condition><expr><name>removeMe</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>container</name><operator>.</operator><name>isShutDown</name></name><argument_list>()</argument_list></call></expr>;</condition>
           <incr><expr><name>removeMe</name> <operator>=</operator> <call><name><name>coreMaps</name><operator>.</operator><name>getCoreToClose</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>addPersistOneCore</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>removeMe</name></expr></argument>, <argument><expr><name><name>container</name><operator>.</operator><name>loader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>removeMe</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
          <expr_stmt><expr><call><name><name>coreMaps</name><operator>.</operator><name>removeClosedFromCloser</name></name><argument_list>(<argument><expr><name>removeMe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      </block_content>}</block></for>
    </block_content>}</block></while>
   </block_content>}</block></function>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_SOLR_XML</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"&lt;solr persistent=\"false\"&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"  &lt;cores adminPath=\"/admin/cores\" defaultCoreName=\""</literal>
      <operator>+</operator> <name>DEFAULT_DEFAULT_CORE_NAME</name>
      <operator>+</operator> <literal type="string">"\""</literal>
      <operator>+</operator> <literal type="string">" host=\"${host:}\" hostPort=\"${hostPort:}\" hostContext=\"${hostContext:}\" zkClientTimeout=\"${zkClientTimeout:15000}\""</literal>
      <operator>+</operator> <literal type="string">"&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"    &lt;core name=\""</literal>
      <operator>+</operator> <name>DEFAULT_DEFAULT_CORE_NAME</name>
      <operator>+</operator> <literal type="string">"\" shard=\"${shard:}\" collection=\"${collection:}\" instanceDir=\"collection1\" /&gt;\n"</literal>
      <operator>+</operator> <literal type="string">"  &lt;/cores&gt;\n"</literal> <operator>+</operator> <literal type="string">"&lt;/solr&gt;"</literal></expr></init></decl>;</decl_stmt>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreDescriptor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreDescriptor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b5b5a6a6467</name><operator>..</operator><literal type="number">7cec3075628</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreDescriptor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>CoreDescriptor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>CloudDescriptor</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -28,29 +29,93 @@ import org.apache.solr.cloud.CloudDescriptor;
  * @since solr 1.3
  */</comment>
 <class><specifier>public</specifier> class <name>CoreDescriptor</name> <block>{
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>instanceDir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>dataDir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>ulogDir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>configName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>propertiesName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>schemaName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CoreContainer</name></type> <name>coreContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>coreProperties</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>loadOnStartup</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isTransient</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="line">// Properties file name constants</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_NAME</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_CONFIG</name> <init>= <expr><literal type="string">"config"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_INSTDIR</name> <init>= <expr><literal type="string">"instanceDir"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_DATADIR</name> <init>= <expr><literal type="string">"dataDir"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_ULOGDIR</name> <init>= <expr><literal type="string">"ulogDir"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_SCHEMA</name> <init>= <expr><literal type="string">"schema"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_SHARD</name> <init>= <expr><literal type="string">"shard"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_COLLECTION</name> <init>= <expr><literal type="string">"collection"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_ROLES</name> <init>= <expr><literal type="string">"roles"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_PROPERTIES</name> <init>= <expr><literal type="string">"properties"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_LOADONSTARTUP</name> <init>= <expr><literal type="string">"loadOnStartup"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_TRANSIENT</name> <init>= <expr><literal type="string">"transient"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORE_NODE_NAME</name> <init>= <expr><literal type="string">"coreNodeName"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>standardPropNames</name> <init>= <expr><block>{
      <expr><name>CORE_NAME</name></expr>,
      <expr><name>CORE_CONFIG</name></expr>,
      <expr><name>CORE_INSTDIR</name></expr>,
      <expr><name>CORE_DATADIR</name></expr>,
      <expr><name>CORE_ULOGDIR</name></expr>,
      <expr><name>CORE_SCHEMA</name></expr>,
      <expr><name>CORE_SHARD</name></expr>,
      <expr><name>CORE_COLLECTION</name></expr>,
      <expr><name>CORE_ROLES</name></expr>,
      <expr><name>CORE_PROPERTIES</name></expr>,
      <expr><name>CORE_LOADONSTARTUP</name></expr>,
      <expr><name>CORE_TRANSIENT</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// As part of moving away from solr.xml (see SOLR-4196), it's _much_ easier to keep these as properties than set</comment>
  <comment type="line">// them individually.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>coreProperties</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CoreContainer</name></type> <name>coreContainer</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>CloudDescriptor</name></type> <name>cloudDesc</name></decl>;</decl_stmt>
 
  <constructor><specifier>public</specifier> <name>CoreDescriptor</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>coreContainer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>instanceDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coreContainer</name></name> <operator>=</operator> <name>coreContainer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    
  <constructor><specifier>private</specifier> <name>CoreDescriptor</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>cont</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Just a place to put initialization since it's a pain to add to the descriptor in every c'tor.</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coreContainer</name></name> <operator>=</operator> <name>cont</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_LOADONSTARTUP</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_TRANSIENT</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></constructor>
  <constructor><specifier>public</specifier> <name>CoreDescriptor</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>instanceDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doInit</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>


  <constructor><specifier>public</specifier> <name>CoreDescriptor</name><parameter_list>(<parameter><decl><type><name>CoreDescriptor</name></type> <name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>descr</name><operator>.</operator><name>coreContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_INSTDIR</name></expr></argument>, <argument><expr><call><name><name>descr</name><operator>.</operator><name>getInstanceDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_CONFIG</name></expr></argument>, <argument><expr><call><name><name>descr</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_SCHEMA</name></expr></argument>, <argument><expr><call><name><name>descr</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><call><name><name>descr</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_DATADIR</name></expr></argument>, <argument><expr><call><name><name>descr</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * CoreDescriptor - create a core descriptor given default properties from a core.properties file. This will be
   * used in the "solr.xml-less (See SOLR-4196) world where there are no &amp;lt;core&amp;gt; &amp;lt;/core&amp;gt; tags at all, thus  much
   * of the initialization that used to be done when reading solr.xml needs to be done here instead, particularly
   * setting any defaults (e.g. schema.xml, directories, whatever).
   *
   * @param container - the CoreContainer that holds all the information about our cores, loaded, lazy etc.
   * @param propsIn - A properties structure "core.properties" found while walking the file tree to discover cores.
   *                  Any properties set in this param will overwrite the any defaults.
   */</comment>
  <constructor><specifier>public</specifier> <name>CoreDescriptor</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>propsIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set some default, normalize a directory or two</comment>
    <expr_stmt><expr><call><name>doInit</name><argument_list>(<argument><expr><call><name><name>propsIn</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>propsIn</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_INSTDIR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>propsIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>doInit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>instanceDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Core needs a name"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
    

    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <if_stmt><if>if<condition>(<expr><name>coreContainer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>coreContainer</name><operator>.</operator><name>getZkController</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cloudDesc</name></name> <operator>=</operator> <operator>new</operator> <call><name>CloudDescriptor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// cloud collection defaults to core name</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreDescriptor</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"Missing required \'instanceDir\'"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
     <expr_stmt><expr><name>instanceDir</name> <operator>=</operator> <call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceDir</name></name> <operator>=</operator> <name>instanceDir</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configName</name></name> <operator>=</operator> <call><name>getDefaultConfigName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schemaName</name></name> <operator>=</operator> <call><name>getDefaultSchemaName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <constructor><specifier>public</specifier> <name>CoreDescriptor</name><parameter_list>(<parameter><decl><type><name>CoreDescriptor</name></type> <name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceDir</name></name> <operator>=</operator> <name><name>descr</name><operator>.</operator><name>instanceDir</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configName</name></name> <operator>=</operator> <name><name>descr</name><operator>.</operator><name>configName</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schemaName</name></name> <operator>=</operator> <name><name>descr</name><operator>.</operator><name>schemaName</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>descr</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataDir</name></name> <operator>=</operator> <name><name>descr</name><operator>.</operator><name>dataDir</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>coreContainer</name> <operator>=</operator> <name><name>descr</name><operator>.</operator><name>coreContainer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_INSTDIR</name></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_CONFIG</name></expr></argument>, <argument><expr><call><name>getDefaultConfigName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_SCHEMA</name></expr></argument>, <argument><expr><call><name>getDefaultSchemaName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <function><type><specifier>private</specifier> <name>Properties</name></type> <name>initImplicitProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>Properties</name></type> <name>initImplicitProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>Properties</name></type> <name>implicitProperties</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>(<argument><expr><call><name><name>coreContainer</name><operator>.</operator><name>getContainerProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.core.name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.core.instanceDir"</literal></expr></argument>, <argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.core.dataDir"</literal></expr></argument>, <argument><expr><call><name>getDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.core.configName"</literal></expr></argument>, <argument><expr><name>configName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.core.schemaName"</literal></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CORE_NAME</name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CORE_INSTDIR</name></expr></argument>, <argument><expr><call><name>getInstanceDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CORE_DATADIR</name></expr></argument>, <argument><expr><call><name>getDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CORE_CONFIG</name></expr></argument>, <argument><expr><call><name>getConfigName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>implicitProperties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CORE_SCHEMA</name></expr></argument>, <argument><expr><call><name>getSchemaName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><name>implicitProperties</name></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreDescriptor</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>String</name> <call><name>getPropertiesName</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>propertiesName</name></expr>;</return></block></expr></expr_stmt>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_PROPERTIES</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setPropertiesName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>propertiesName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propertiesName</name></name> <operator>=</operator> <name>propertiesName</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_PROPERTIES</name></expr></argument>, <argument><expr><name>propertiesName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getDataDir</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>dataDir</name> <init>= <expr><name><name>this</name><operator>.</operator><name>dataDir</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name>getDefaultDataDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>dataDir</name> <init>= <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_DATADIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name>getDefaultDataDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <return>return <expr><name>dataDir</name></expr>;</return>
     </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>dataDir</name></expr></argument>)</argument_list></call></expr>;</return>
      <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getInstanceDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name>getInstanceDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>dataDir</name></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></if> <else>else  <block>{<block_content>
         <return>return <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name><name>coreContainer</name><operator>.</operator><name>getSolrHome</name></name><argument_list>()</argument_list></call> <operator>+</operator>
                <call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>dataDir</name></expr></argument>)</argument_list></call></expr>;</return>
                <expr_stmt><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name>getRawInstanceDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>dataDir</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataDir</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
     <comment type="line">// normalize zero length to null.</comment>
    <if_stmt><if>if <condition>(<expr><name>dataDir</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>dataDir</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataDir</name><operator>=</operator><literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isBlank</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_DATADIR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
   
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>usingDefaultDataDir</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>dataDir</name></name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
    <comment type="line">// DO NOT use the getDataDir method here since it'll assign something regardless.</comment>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_DATADIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**@return the core instance directory. */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getRawInstanceDir</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>instanceDir</name></name></expr>;</return>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_INSTDIR</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -143,42 +205,44 @@ public class CoreDescriptor {
    * @return the core instance directory, prepended with solr_home if not an absolute path.
    */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getInstanceDir</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>instDir</name> <init>= <expr><name><name>this</name><operator>.</operator><name>instanceDir</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>instDir</name> <init>= <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_INSTDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>instDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// No worse than before.</comment>
 
     <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>instDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(
          <argument><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>instDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><call><name><name>coreContainer</name><operator>.</operator><name>getSolrHome</name></name><argument_list>()</argument_list></call> <operator>+</operator>
         <call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>instDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>

   <comment type="block" format="javadoc">/**Sets the core configuration resource name. */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setConfigName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"name can not be null or empty"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configName</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_CONFIG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**@return the core configuration resource name. */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getConfigName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>configName</name></name></expr>;</return>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**Sets the core schema resource name. */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setSchemaName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"name can not be null or empty"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schemaName</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_SCHEMA</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**@return the core schema resource name. */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getSchemaName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>schemaName</name></name></expr>;</return>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_SCHEMA</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**@return the initial core name */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name></expr>;</return>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_NAME</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>CoreContainer</name></type> <name>getCoreContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">256</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreDescriptor</name> <block>{
   <comment type="block" format="javadoc">/**
    * Set this core's properties. Please note that some implicit values will be added to the
    * Properties instance passed into this method. This means that the Properties instance
   * set to this method will have different (less) key/value pairs than the Properties
   * sent to this method will have different (less) key/value pairs than the Properties
    * instance returned by #getCoreProperties method.
   *
   * Under any circumstance, the properties passed in will override any already present.Merge
    */</comment>
   <expr><specifier>public</specifier> <name>void</name> <call><name>setCoreProperties</name><argument_list>(<argument><expr><name>Properties</name> <name>coreProperties</name></expr></argument>)</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>coreProperties</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>Properties</name></type> <name>p</name> <init>= <expr><call><name>initImplicitProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coreProperties</name></name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>coreProperties</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>coreProperties</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>coreProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt/></block_content></block></if></if_stmt></block></expr>}</block></expr></expr_stmt>
    <comment type="line">// The caller presumably wants whatever properties passed in to override the current core props, so just add them.</comment>
    <if_stmt><if>if<condition>(<expr><name>coreProperties</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>coreProperties</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>coreProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">59</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreDescriptor</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>cloudDesc</name></name> <operator>=</operator> <name>cloudDesc</name></expr>;
   }</block></expr></expr_stmt>
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLoadOnStartup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>loadOnStartup</name></expr>;</return>
    <decl_stmt><decl><type><name>String</name></type> <name>tmp</name> <init>= <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_LOADONSTARTUP</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setLoadOnStartup</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>loadOnStartup</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadOnStartup</name></name> <operator>=</operator> <name>loadOnStartup</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_LOADONSTARTUP</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>loadOnStartup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTransient</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>isTransient</name></expr>;</return>
    <decl_stmt><decl><type><name>String</name></type> <name>tmp</name> <init>= <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_TRANSIENT</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
   </block_content>}</block></function>
 
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransient</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>aTransient</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTransient</name></name> <operator>=</operator> <name>aTransient</name></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransient</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_TRANSIENT</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getUlogDir</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>ulogDir</name></expr>;</return>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>CORE_ULOGDIR</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setUlogDir</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ulogDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ulogDir</name></name> <operator>=</operator> <name>ulogDir</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CORE_ULOGDIR</name></expr></argument>, <argument><expr><name>ulogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Reads a property defined in the core.properties file that's replacing solr.xml (if present).
   * @param prop    - value to read from the properties structure.
   * @param defVal  - return if no property found.
   * @return associated string. May be null.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>defVal</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * gReads a property defined in the core.properties file that's replacing solr.xml (if present).
   * @param prop  value to read from the properties structure.
   * @return associated string. May be null.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <comment type="block" format="javadoc">/**
   * This will eventually replace _all_ of the setters. Puts a value in the "new" (obsoleting solr.xml JIRAs) properties
   * structures.
   *
   * Will replace any currently-existing property with the key "prop".
   *
   * @param prop - property name
   * @param val  - property value
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>putProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>coreProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">98f71b14531</literal><operator>..</operator><literal type="number">4fed422e7a3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">657</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">657</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name> <block>{
     <expr><call><name><name>this</name><operator>.</operator><name>setName</name></name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;
     <name>resourceLoader</name> <operator>=</operator> <call><name><name>config</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>dataDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>cd</name><operator>.</operator><name>usingDefaultDataDir</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name><name>config</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>(<expr><name>dataDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name><name>cd</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>(<expr><call><name><name>cd</name><operator>.</operator><name>usingDefaultDataDir</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name><name>config</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>(<expr><name>dataDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name><name>cd</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
 
     <expr_stmt><expr><name>dataDir</name> <operator>=</operator> <call><name><name>SolrResourceLoader</name><operator>.</operator><name>normalizeDir</name></name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><name>logid</name><operator>+</operator><literal type="string">"Opening new SolrCore at "</literal> <operator>+</operator> <call><name><name>resourceLoader</name><operator>.</operator><name>getInstanceDir</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", dataDir="</literal><operator>+</operator><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>schema</name><operator>==</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1316</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1319</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name> <block>{
    <expr><operator>*</operator>
    <operator>*</operator> <name>This</name> <name>method</name> <name>acquires</name> <name>openSearcherLock</name> <operator>-</operator></expr> <do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>not</name> <name>call</name> <name>with</name> <name>searckLock</name> <name>held</name><operator>!</operator>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>SolrIndexSearcher</name></argument>&gt;</argument_list></name> <call><name>openNewSearcher</name><argument_list>(<argument><expr><name>boolean</name> <name>updateHandlerReopens</name></expr></argument>, <argument><expr><name>boolean</name> <name>realtime</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>SolrIndexSearcher</name></argument>&gt;</argument_list></name>  <call><name>openNewSearcher</name><argument_list>(<argument><expr><name>boolean</name> <name>updateHandlerReopens</name></expr></argument>, <argument><expr><name>boolean</name> <name>realtime</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>SolrIndexSearcher</name> <name>tmp</name></expr>;
     <name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>SolrIndexSearcher</name></argument>&gt;</argument_list></name> <name>newestSearcher</name> <operator>=</operator> <literal type="null">null</literal></block></expr>;
     <name>boolean</name> <name>nrt</name> <operator>=</operator> <name><name>solrConfig</name><operator>.</operator><name>reopenReaders</name></name> <operator>&amp;&amp;</operator> <name>updateHandlerReopens</name></block></expr>;</expr_stmt></block_content></block>
diff --git a/solr/core/src/java/org/apache/solr/core/SolrProperties.java b/solr/core/src/java/org/apache/solr/core/SolrProperties.java
new file mode 100644
index 00000000000..240fd1362ae
-- /dev/null
++ b/solr/core/src/java/org/apache/solr/core/SolrProperties.java
@@ -0<operator>,</operator>0 +1<operator>,</operator>575 @@
package org.apache.solr.core;

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.solr.cloud.ZkController;
import org.apache.solr.common.SolrException;
import org.apache.solr.common.util.NamedList;
import org.apache.solr.handler.component.HttpShardHandlerFactory;
import org.apache.solr.handler.component.ShardHandlerFactory;
import org.apache.solr.schema.IndexSchema;
import org.apache.solr.util.PropertiesUtil;
import org.apache.solr.util.SystemIdResolver;
import org.apache.zookeeper.KeeperException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.InputSource;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

<comment type="block" format="javadoc">/**
 * This is the new way of dealing with solr properties replacing solr.xml. This is simply a high-level set of
 * properties. Cores are no longer defined in the solr.xml file, they are discovered by enumerating all of the
 * directories under the base path and creating cores as necessary.
 *
 * @since Solr 4.2
 */</comment>
public class SolrProperties implements ConfigSolr <block>{<block_content>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SOLR_PROPERTIES_FILE</name> <init>= <expr><literal type="string">"solr.properties"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SOLR_XML_FILE</name> <init>= <expr><literal type="string">"solr.xml"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CORE_PROP_FILE</name> <init>= <expr><literal type="string">"core.properties"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SHARD_HANDLER_FACTORY</name> <init>= <expr><literal type="string">"shardHandlerFactory"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SHARD_HANDLER_NAME</name> <init>= <expr><name>SHARD_HANDLER_FACTORY</name> <operator>+</operator> <literal type="string">".name"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SHARD_HANDLER_CLASS</name> <init>= <expr><name>SHARD_HANDLER_FACTORY</name> <operator>+</operator> <literal type="string">".class"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SolrProperties</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>CoreContainer</name></type> <name>container</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>Properties</name></type> <name>solrProperties</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Properties</name></type> <name>origsolrprops</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>SolrResourceLoader</name></type> <name>loader</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptorPlus</name></argument>&gt;</argument_list></name></type> <name>coreDescriptorPlusMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptorPlus</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ConfLevel</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>prefixesprefixes</name></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <expr_stmt><expr><name>prefixesprefixes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ConfLevel</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>prefixesprefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_CORES</name></name></expr></argument>, <argument><expr><literal type="string">"cores."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixesprefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING</name></name></expr></argument>, <argument><expr><literal type="string">"logging."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixesprefixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ConfLevel</name><operator>.</operator><name>SOLR_LOGGING_WATCHER</name></name></expr></argument>, <argument><expr><literal type="string">"logging.watcher."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></static>


  <comment type="block" format="javadoc">/**
   * Create a SolrProperties object given just the resource loader
   *
   * @param container - the container for this Solr instance. There should be one and only one...
   * @param loader    - Solr resource loader
   * @param solrCfg   - a config file whose values will be transferred to the properties object that can be changed
   * @throws IOException - It's possible to walk a very deep tree, if that process goes awry, or if reading any
   *                     of the files found doesn't work, you'll get an IO exception
   */</comment>
  <expr_stmt><expr><call><name>SolrProperties</name><argument_list>(<argument><expr><name>CoreContainer</name> <name>container</name></expr></argument>, <argument><expr><name>SolrResourceLoader</name> <name>loader</name></expr></argument>, <argument><expr><name>SolrProperties</name> <name>solrCfg</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name><name>origsolrprops</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>solrCfg</name><operator>.</operator><name>getOriginalProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loader</name></name> <operator>=</operator> <name>loader</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name><name>solrCfg</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <comment type="block" format="javadoc">/**
   * Create a SolrProperties object from an opened input stream, useful for creating defaults
   *
   * @param container - the container for this Solr instance. There should be one and only one...
   * @param is        - Input stream for loading properties.
   * @param fileName  - the name for this properties object.
   * @throws IOException - It's possible to walk a very deep tree, if that process goes awry, or if reading any
   *                     of the files found doesn't work, you'll get an IO exception
   */</comment>
  public SolrProperties(CoreContainer container<operator>,</operator> InputStream is<operator>,</operator> String fileName</do>)</block> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name><name>origsolrprops</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//Just localize the common constructor operations</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><call><name><name>origsolrprops</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>solrProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>origsolrprops</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <synchronized>synchronized <init>(<expr><name>coreDescriptorPlusMap</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name>walkFromHere</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>getSolrHome</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <comment type="line">// Just localizes default substitution and the ability to log an error if the value isn't present.</comment>
  <function><type><specifier>private</specifier> <name>String</name></type> <name>getVal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>errIfMissing</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>solrProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>defVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotBlank</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <name>path</name> <operator>+</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>val</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>errIfMissing</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">"missing optional "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">" missing "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get a property and convert it to a boolean value. Does not log a message if the value is absent
   *
   * @param prop     - name of the property to fetch
   * @param defValue - value to return if the property is absent
   * @return property value or default if property is not present.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBool</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>def</name> <init>= <expr><ternary><condition><expr><name>defValue</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name>getVal</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><call><name><name>StringUtils</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Fetch a string value, for the given property. Does not log a message if the valued is absent.
   *
   * @param prop - the property name to fetch
   * @param def  - the default value to return if not present
   * @return - the fetched property or the default value if the property is absent
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name>getVal</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>val</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>def</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>val</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Fetch the string value of the property. May log a message and returns null if absent
   *
   * @param prop         - the name of the property to fetch
   * @param errIfMissing - if true, log a message that the property is not present
   * @return - the property value or null if absent
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getVal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>errIfMissing</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getVal</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>errIfMissing</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a property as an integer
   *
   * @param prop   - the name of the property to fetch
   * @param defVal - the value to return if the property is missing
   * @return - the fetch property as an int or the def value if absent
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name>getVal</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>defVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>ConfLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getInt</name><argument_list>(<argument><expr><call><name><name>prefixesprefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>getBool</name><parameter_list>(<parameter><decl><type><name>ConfLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getBool</name><argument_list>(<argument><expr><call><name><name>prefixesprefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>defValue</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>ConfLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>get</name><argument_list>(<argument><expr><call><name><name>prefixesprefixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * For all values in the properties structure, find if any system properties are defined and substitute them.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>substituteProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>solrProperties</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>subProp</name> <init>= <expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>solrProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>solrProperties</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>subProp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>subProp</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>solrProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>solrProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>subProp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Fetches the properties as originally read from the properties file without any system variable substitution
   *
   * @return - a copy of the original properties.
   */</comment>
  <function><type><specifier>public</specifier> <name>Properties</name></type> <name>getOriginalProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Properties</name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>origsolrprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>ShardHandlerFactory</name></type> <name>initShardHandler</name><parameter_list>(<comment type="block">/*boolean isTest*/</comment>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>PluginInfo</name></type> <name>info</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>attrs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NamedList</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>NamedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>haveHandler</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><call><name><name>solrProperties</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>solrProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>SHARD_HANDLER_FACTORY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>haveHandler</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>SHARD_HANDLER_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>SHARD_HANDLER_CLASS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>haveHandler</name></expr>)</condition> <block>{<block_content>
      <comment type="line">//  public PluginInfo(String type, Map&lt;String, String&gt; attrs ,NamedList initArgs, List&lt;PluginInfo&gt; children) {</comment>

      <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><name>SHARD_HANDLER_FACTORY</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><call><name><name>HttpShardHandlerFactory</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>new</operator> <call><name>PluginInfo</name><argument_list>(<argument><expr><literal type="string">"shardHandlerFactory"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>PluginInfo</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>HttpShardHandlerFactory</name></type> <name>fac</name> <init>= <expr><operator>new</operator> <call><name>HttpShardHandlerFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>fac</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Strictly for compatibility with i'face. TODO: remove for 5.0</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Properties</name></type> <name>getSolrProperties</name><parameter_list>(<parameter><decl><type><name>ConfigSolr</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getSolrProperties</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Return the original properties that were defined, without substitutions from solr.properties
   *
   * @return - the Properties as originally defined.
   */</comment>
  <function><type><specifier>public</specifier> <name>Properties</name></type> <name>getSolrProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>solrProperties</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * given a core and attributes, find the core.properties file from whence it came and update it with the current
   * &lt;p/&gt;
   * Note, when the cores were discovered, we stored away the path that it came from for reference later. Remember
   * that these cores aren't necessarily loaded all the time, they may be transient.
   * It's not clear what the magic is that the calling methods (see CoreContainer) are doing, but they seem to be
   * "doing the right thing" so that the attribs properties are the ones that contain the correct data. All the
   * tests pass, but it's magic at this point.
   *
   * @param coreName - the core whose attributes we are to change
   * @param attribs  - the attribs to change to, see note above.
   * @param props    - ignored, here to make the i'face work in combination with ConfigSolrXmlBackCompat
   */</comment>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addPersistCore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>attribs</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>props</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>container</name><operator>.</operator><name>getContainerProperties</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><literal type="string">"solr.persistent"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CoreDescriptorPlus</name></type> <name>plus</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>plus</name> <operator>=</operator> <call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>plus</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Expected to find core for persisting, but we did not. Core: "</literal> <operator>+</operator> <name>coreName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Properties</name></type> <name>outProps</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// I don't quite get this, but somehow the attribs passed in are the originals (plus any newly-added ones). Never</comment>
    <comment type="line">// one to look a gift horse in the mouth I'll just use that.</comment>

    <comment type="line">// Take care NOT to write out properties like ${blah blah blah}</comment>
    <expr_stmt><expr><call><name><name>outProps</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>corePropsOrig</name> <init>= <expr><call><name><name>plus</name><operator>.</operator><name>getPropsOrig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>corePropsOrig</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>corePropsOrig</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// it was originally a system property, keep it so</comment>
        <expr_stmt><expr><call><name><name>outProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// Make sure anything that used to be in the properties file still is.</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>outProps</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>outProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// Any of our standard properties that weren't in the original properties file should NOT be persisted, I think</comment>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><name><name>CoreDescriptor</name><operator>.</operator><name>standardPropNames</name></name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>corePropsOrig</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>outProps</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>outProps</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>plus</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to persist core {}, filepath {}"</literal></expr></argument>, <argument><expr><name>coreName</name></expr></argument>, <argument><expr><call><name><name>plus</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * PersistSolrProperties persists the Solr.properties file only,
   * &lt;p/&gt;
   * The old version (i.e. using solr.xml) persisted _everything_ in a single file. This version will just
   * persist the solr.properties file for an individual core.
   * The individual cores were persisted in addPersistCore calls above.
   */</comment>
  <comment type="line">// It seems like a lot of this could be done by using the Properties defaults</comment>

  <comment type="block" format="javadoc">/**
   * PersistSolrProperties persists the Solr.properties file only,
   * &lt;p/&gt;
   * The old version (i.e. using solr.xml) persisted _everything_ in a single file. This version will just
   * persist the solr.properties file for an individual core.
   * The individual cores were persisted in addPersistCore calls above.
   * &lt;p/&gt;
   * TODO: Remove all parameters for 5.0 when we obsolete ConfigSolrXmlBackCompat
   *
   * @param containerProperties - ignored, here for back compat.
   * @param rootSolrAttribs     - ignored, here for back compat.
   * @param coresAttribs        - ignored, here for back compat.
   * @param file                - ignored, here for back compat.
   */</comment>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addPersistAllCores</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>containerProperties</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootSolrAttribs</name></decl></parameter>,
                                 <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coresAttribs</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>container</name><operator>.</operator><name>getContainerProperties</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><literal type="string">"solr.persistent"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// First persist solr.properties</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>parent</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>getSolrHome</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>SOLR_PROPERTIES_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>propsOut</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>propsOut</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>getContainerProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>origsolrprops</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>toTest</name> <init>= <expr><call><name><name>origsolrprops</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>toTest</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Don't store away things that should be system properties</comment>
        <expr_stmt><expr><call><name><name>propsOut</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>toTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>propsOut</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to persist file "</literal> <operator>+</operator> <call><name><name>props</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <comment type="line">// Copied verbatim from the old code, presumably this will be tested when we eliminate solr.xml</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>IndexSchema</name></type> <name>getSchemaFromZk</name><parameter_list>(<parameter><decl><type><name>ZkController</name></type> <name>zkController</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zkConfigName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>,
                                     <parameter><decl><type><name>SolrConfig</name></type> <name>config</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>configBytes</name> <init>= <expr><call><name><name>zkController</name><operator>.</operator><name>getConfigFileData</name></name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>configBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>SystemIdResolver</name><operator>.</operator><name>createSystemIdFromResourceName</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexSchema</name></type> <name>schema</name> <init>= <expr><operator>new</operator> <call><name>IndexSchema</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>schema</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Copied verbatim from the old code, presumably this will be tested when we eliminate solr.xml</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SolrConfig</name></type> <name>getSolrConfigFromZk</name><parameter_list>(<parameter><decl><type><name>ZkController</name></type> <name>zkController</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zkConfigName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>solrConfigFileName</name></decl></parameter>,
                                        <parameter><decl><type><name>SolrResourceLoader</name></type> <name>resourceLoader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SolrConfig</name></type> <name>cfg</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>config</name> <init>= <expr><call><name><name>zkController</name><operator>.</operator><name>getConfigFileData</name></name><argument_list>(<argument><expr><name>zkConfigName</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>SystemIdResolver</name><operator>.</operator><name>createSystemIdFromResourceName</name></name><argument_list>(<argument><expr><name>solrConfigFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cfg</name> <operator>=</operator> <ternary><condition><expr><name>solrConfigFileName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>SolrConfig</name><argument_list>(
          <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name><name>SolrConfig</name><operator>.</operator><name>DEFAULT_CONF_FILE</name></name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>SolrConfig</name><argument_list>(
          <argument><expr><name>resourceLoader</name></expr></argument>, <argument><expr><name>solrConfigFileName</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
          <argument><expr><literal type="string">"getSolrConfigFromZK failed for "</literal> <operator>+</operator> <name>zkConfigName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>solrConfigFileName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>cfg</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>initPersist</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//NOOP</comment>
  </block_content>}</block></function>

  <comment type="line">// Basic recursive tree walking, looking for "core.properties" files. Once one is found, we'll stop going any</comment>
  <comment type="line">// deeper in the tree.</comment>
  <comment type="line">//</comment>
  <comment type="line">// @param file - the directory we're to either read the properties file from or recurse into.</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>walkFromHere</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>CoreContainer</name></type> <name>container</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Looking for cores in "</literal> <operator>+</operator> <call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>File</name></type> <name>childFile</name> <range>: <expr><call><name><name>file</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed</comment>
      <comment type="line">// in. In other words we're looking for core.properties in the grandchild directories of the parameter passed</comment>
      <comment type="line">// in. That allows us to gracefully top recursing deep but continue looking wide.</comment>
      <decl_stmt><decl><type><name>File</name></type> <name>propFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>childFile</name></expr></argument>, <argument><expr><name>CORE_PROP_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>propFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Stop looking after processing this file!</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Discovered properties file {}, adding to cores"</literal></expr></argument>, <argument><expr><call><name><name>propFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>propsOrig</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>propsOrig</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>propFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>propsOrig</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>propsOrig</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>, <argument><expr><call><name><name>childFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// Should default to this directory</comment>
          <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>desc</name> <init>= <expr><operator>new</operator> <call><name>CoreDescriptor</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoreDescriptorPlus</name></type> <name>plus</name> <init>= <expr><operator>new</operator> <call><name>CoreDescriptorPlus</name><argument_list>(<argument><expr><call><name><name>propFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>propsOrig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue> <comment type="line">// Go on to the sibling directory</comment>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>childFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>walkFromHere</name><argument_list>(<argument><expr><name>childFile</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>Properties</name></type> <name>getCoreProperties</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>instanceDir</name></decl></parameter>, <parameter><decl><type><name>CoreDescriptor</name></type> <name>dcore</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>file</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getPropertiesName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="string">"conf"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"solrcore.properties"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>corePropsFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>corePropsFile</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>corePropsFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>p</name> <init>= <expr><call><name><name>dcore</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>corePropsFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>corePropsFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>(<argument><expr><call><name><name>dcore</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>corePropsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error loading properties "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getCoreNameFromOrig</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>origCoreName</name></decl></parameter>, <parameter><decl><type><name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// first look for an exact match</comment>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptorPlus</name></argument>&gt;</argument_list></name></name></type> <name>ent</name> <range>: <expr><call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>

      <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoreDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>origCoreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>name</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>coreName</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoreDescriptorPlus</name></argument>&gt;</argument_list></name></name></type> <name>ent</name> <range>: <expr><call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoreDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// see if we match with substitution</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>origCoreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>loader</name><operator>.</operator><name>getCoreProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>coreName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origCoreName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>name</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>coreName</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllCoreNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>CoreDescriptorPlus</name></type> <name>plus</name> <init>= <expr><call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>plus</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>defaultVal</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>plus</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>defaultVal</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>desc</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Properties</name></type> <name>readCoreProperties</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>CoreDescriptorPlus</name></type> <name>plus</name> <init>= <expr><call><name><name>coreDescriptorPlusMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>coreName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>plus</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>Properties</name><argument_list>(<argument><expr><call><name><name>plus</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoreProperties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readCoreAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coreName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>  <comment type="line">// Should be a no-op.</comment>
  </block_content>}</block></function>
</block_content>}</block></function>

<comment type="line">// It's mightily convenient to have all of the original path names and property values when persisting cores, so</comment>
<comment type="line">// this little convenience class is just for that.</comment>
<comment type="line">// Also, let's keep track of anything we added here, especially the instance dir for persistence purposes. We don't</comment>
<comment type="line">// want, for instance, to persist instanceDir if it was not specified originally.</comment>
<comment type="line">//</comment>
<comment type="line">// I suspect that for persistence purposes, we may want to expand this idea to record, say, ${blah}</comment>
<class>class <name>CoreDescriptorPlus</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>CoreDescriptor</name></type> <name>coreDescriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filePath</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>propsOrig</name></decl>;</decl_stmt>

  <constructor><name>CoreDescriptorPlus</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><name>CoreDescriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>propsOrig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>coreDescriptor</name> <operator>=</operator> <name>descriptor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filePath</name></name> <operator>=</operator> <name>filePath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propsOrig</name></name> <operator>=</operator> <name>propsOrig</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><name>CoreDescriptor</name></type> <name>getCoreDescriptor</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>coreDescriptor</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>String</name></type> <name>getFilePath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>filePath</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>Properties</name></type> <name>getPropsOrig</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>propsOrig</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrResourceLoader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrResourceLoader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e6e348fd1de</name><operator>..</operator><literal type="number">27532bce77f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrResourceLoader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrResourceLoader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrResourceLoader</name> implements <name>ResourceLoader</name>
   <specifier>private</specifier> <name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ResourceLoaderAware</name></argument>&gt;</argument_list></name> <name>waitingForResources</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>synchronizedList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ResourceLoaderAware</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Charset</name></type> <name>UTF_8</name> <init>= <expr><call><name><name>Charset</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <comment type="line">//TODO: Solr5. Remove this completely when you obsolete putting &lt;core&gt; tags in solr.xml (See Solr-4196)</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Properties</name></type> <name>coreProperties</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>live</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrResourceLoader</name> implements <name>ResourceLoader</name>
                <name><name>this</name><operator>.</operator><name>instanceDir</name></name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></constructor>
     }</block></class> <if_stmt><else>else<block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceDir</name></name> <operator>=</operator> <call><name>normalizeDir</name><argument_list>(<argument><expr><name>instanceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"new SolrResourceLoader for directory: '{}'"</literal></expr></argument>, 
      <argument><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"new SolrResourceLoader for directory: '{}'"</literal></expr></argument>,
                <argument><expr><name><name>this</name><operator>.</operator><name>instanceDir</name></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block></else></if_stmt>
     
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CoreAdminHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CoreAdminHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6769511006c</literal><operator>..</operator><literal type="number">44628e4e298</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CoreAdminHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CoreAdminHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DirectoryReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">661</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">662</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreAdminHandler</name> extends <name>RequestHandlerBase</name> <block>{
     <try>try <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>cname</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"defaultCoreName"</literal></expr></argument>, <argument><expr><call><name><name>coreContainer</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>coreContainer</name><operator>.</operator><name>getCoreNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>coreContainer</name><operator>.</operator><name>getAllCoreNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
           <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getCoreStatus</name><argument_list>(<argument><expr><name>coreContainer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>isIndexInfoNeeded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><call><name><name>rsp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"initFailures"</literal></expr></argument>, <argument><expr><name>allFailures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">954</literal></expr><operator>,</operator><expr><literal type="number">38</literal> <operator>+</operator><literal type="number">955</literal></expr><operator>,</operator><expr><literal type="number">65</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoreAdminHandler</name> extends <name>RequestHandlerBase</name> <block>{
     
   }</block>
 
  <specifier>protected</specifier> <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <call><name>getCoreStatus</name><argument_list>(<argument><expr><name>CoreContainer</name> <name>cores</name></expr></argument>, <argument><expr><name>String</name> <name>cname</name></expr></argument>, <argument><expr><name>boolean</name> <name>isIndexInfoNeeded</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <comment type="block" format="javadoc">/**
   * Returns the core status for a particular core.
   * @param cores - the enclosing core container
   * @param cname - the core to return
   * @param isIndexInfoNeeded - add what may be expensive index information. NOT returned if the core is not loaded
   * @return - a named list of key/value pairs from the core.
   * @throws IOException - LukeRequestHandler can throw an I/O exception
   */</comment>
  <expr><specifier>protected</specifier> <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <call><name>getCoreStatus</name><argument_list>(<argument><expr><name>CoreContainer</name> <name>cores</name></expr></argument>, <argument><expr><name>String</name> <name>cname</name></expr></argument>, <argument><expr><name>boolean</name> <name>isIndexInfoNeeded</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>  <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <name>info</name> <operator>=</operator> <operator>new</operator> <call><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"isDefaultCore"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"instanceDir"</literal></expr></argument>, <argument><expr><call><name>normalizePath</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstanceDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"dataDir"</literal></expr></argument>, <argument><expr><call><name>normalizePath</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getConfigResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"schema"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getSchemaResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"startTime"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"uptime"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>core</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isIndexInfoNeeded</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>SolrIndexSearcher</name></argument>&gt;</argument_list></name></type> <name>searcher</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSearcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>indexInfo</name> <init>= <expr><call><name><name>LukeRequestHandler</name><operator>.</operator><name>getIndexInfo</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexReader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name>getIndexSize</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>indexInfo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"sizeInBytes"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>indexInfo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>readableSize</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>indexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name><name>searcher</name><operator>.</operator><name>decref</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cores</name><operator>.</operator><name>isLoaded</name></name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Lazily-loaded core, fill in what we can.</comment>
      <comment type="line">// It would be a real mistake to load the cores just to get the status</comment>
      <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>getUnloadedCoreDescriptor</name></name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"isDefaultCore"</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"instanceDir"</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>.</operator><name>getInstanceDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// None of the following are guaranteed to be present in a not-yet-loaded core.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>tmp</name> <init>= <expr><call><name><name>desc</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotBlank</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"dataDir"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>desc</name><operator>.</operator><name>getConfigName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotBlank</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>desc</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotBlank</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"schema"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"isLoaded"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>cores</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"isDefaultCore"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cores</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"instanceDir"</literal></expr></argument>, <argument><expr><call><name>normalizePath</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstanceDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"dataDir"</literal></expr></argument>, <argument><expr><call><name>normalizePath</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getDataDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getConfigResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"schema"</literal></expr></argument>, <argument><expr><call><name><name>core</name><operator>.</operator><name>getSchemaResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"startTime"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"uptime"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>core</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>isIndexInfoNeeded</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>SolrIndexSearcher</name></argument>&gt;</argument_list></name></type> <name>searcher</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSearcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
              <decl_stmt><decl><type><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>indexInfo</name> <init>= <expr><call><name><name>LukeRequestHandler</name><operator>.</operator><name>getIndexInfo</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexReader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name>getIndexSize</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>indexInfo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"sizeInBytes"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>indexInfo</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>readableSize</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>indexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
              <expr_stmt><expr><call><name><name>searcher</name><operator>.</operator><name>decref</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
           </block_content>}</block></if></if_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
          <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></finally></try>
      </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></finally>
     </block_content>}</block></else></if_stmt>
     <return>return <expr><name>info</name></expr>;</return>
   </block_content>}</block></finally></try>
  

   <function><type><specifier>private</specifier> <name>long</name></type> <name>getIndexSize</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">15cce7f1c20</literal><operator>..</operator><literal type="number">173d6fa6e23</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SchemaField</name> extends <name>FieldProperties</name> <block>{
  <comment type="block" format="javadoc">/** Create a new SchemaField with the given name and type,
    * and with the specified properties.  Properties are *not*
    * inherited from the type in this case, so users of this
   * constructor should derive the properties from type.getProperties()
   * constructor should derive the properties from type.getSolrProperties()
    *  using all the default properties from the type.
    */</comment>
   <expr><specifier>public</specifier> <call><name>SchemaField</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>FieldType</name> <name>type</name></expr></argument>, <argument><expr><name>int</name> <name>properties</name></expr></argument>, <argument><expr><name>String</name> <name>defaultValue</name></expr></argument> )</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DOMUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DOMUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e304e1b1fb6</name><operator>..</operator><literal type="number">464b2884629</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DOMUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DOMUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">289</literal></expr>,<expr><literal type="number">117</literal> <operator>+</operator><literal type="number">289</literal></expr>,<expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>DOMUtil</name> <block>{
 
       <comment type="line">// handle child by node type</comment>
       <if_stmt><if>if <condition>(<expr><call><name><name>child</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>setNodeValue</name></name><argument_list>(<argument><expr><call><name>substituteProperty</name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>setNodeValue</name></name><argument_list>(<argument><expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block></expr>}</block></expr> <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>child</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
         <comment type="line">// handle child elements with recursive call</comment>
         <decl_stmt><decl><type><name>NamedNodeMap</name></type> <name>attributes</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>attributes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
           <decl_stmt><decl><type><name>Node</name></type> <name>attribute</name> <init>= <expr><call><name><name>attributes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>attribute</name><operator>.</operator><name>setNodeValue</name></name><argument_list>(<argument><expr><call><name>substituteProperty</name><argument_list>(<argument><expr><call><name><name>attribute</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>attribute</name><operator>.</operator><name>setNodeValue</name></name><argument_list>(<argument><expr><call><name><name>PropertiesUtil</name><operator>.</operator><name>substituteProperty</name></name><argument_list>(<argument><expr><call><name><name>attribute</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt>}</block>
         <call><name>substituteProperties</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></try>
 
  <comment type="block">/*
   * This method borrowed from Ant's PropertyHelper.replaceProperties:
   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>substituteProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>coreProperties</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fragments</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyRefs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>parsePropertyString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>fragments</name></expr></argument>, <argument><expr><name>propertyRefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>fragments</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>j</name> <init>= <expr><call><name><name>propertyRefs</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>fragment</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> <init>= <expr><call><name><name>j</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>colon_index</name> <init>= <expr><call><name><name>propertyName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>colon_index</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>defaultValue</name> <operator>=</operator> <call><name><name>propertyName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>colon_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>propertyName</name> <operator>=</operator> <call><name><name>propertyName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>colon_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>coreProperties</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>( <argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"No system property or default value specified for "</literal> <operator>+</operator> <name>propertyName</name> <operator>+</operator> <literal type="string">" value:"</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block">/*
   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:
   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>parsePropertyString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fragments</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyRefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
      <comment type="line">//search for the next instance of $ from the 'prev' position</comment>
      <while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

          <comment type="line">//if there was any text before this, add it as a fragment</comment>
          <comment type="line">//TODO, this check could be modified to go if pos&gt;prev;</comment>
          <comment type="line">//seems like this current version could stick empty strings</comment>
          <comment type="line">//into the list</comment>
          <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <comment type="line">//if we are at the end of the string, we tack on a $</comment>
          <comment type="line">//then move past it</comment>
          <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>(</operator><call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
              <comment type="line">//peek ahead to see if the next char is a property or not</comment>
              <comment type="line">//not a property: insert the char as a literal</comment>
              <comment type="block">/*
              fragments.addElement(value.substring(pos + 1, pos + 2));
              prev = pos + 2;
              */</comment>
              <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
                  <comment type="line">//backwards compatibility two $ map to one mode</comment>
                  <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                  <comment type="line">//new behaviour: $X maps to $X for all values of X!='$'</comment>
                  <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>

          </block_content>}</block></if> <else>else <block>{<block_content>
              <comment type="line">//property found, extract its name or bail on a typo</comment>
              <decl_stmt><decl><type><name>int</name></type> <name>endName</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>endName</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Syntax error in property: "</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</throw>
              </block_content>}</block></if></if_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>endName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>propertyRefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>endName</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
      <comment type="line">//no more $ signs found</comment>
      <comment type="line">//if there is any tail to the string, append it</comment>
      <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&lt;</operator> <call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
 
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>PropertiesUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>PropertiesUtil</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..2cdb807c0e9</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>PropertiesUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">132</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Breaking out some utility methods into a separate class as part of SOLR-4196. These utils have nothing to do with
 * the DOM (they came from DomUtils) and it's really confusing to see them in something labeled DOM
 */</comment>
<class><specifier>public</specifier> class <name>PropertiesUtil</name> <block>{
  <comment type="block">/*
  * This method borrowed from Ant's PropertyHelper.replaceProperties:
  *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java
  */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>substituteProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>coreProperties</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fragments</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyRefs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>parsePropertyString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>fragments</name></expr></argument>, <argument><expr><name>propertyRefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>fragments</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>j</name> <init>= <expr><call><name><name>propertyRefs</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>fragment</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> <init>= <expr><call><name><name>j</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>colon_index</name> <init>= <expr><call><name><name>propertyName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>colon_index</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>defaultValue</name> <operator>=</operator> <call><name><name>propertyName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>colon_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>propertyName</name> <operator>=</operator> <call><name><name>propertyName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>colon_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>coreProperties</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name><name>coreProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"No system property or default value specified for "</literal> <operator>+</operator> <name>propertyName</name> <operator>+</operator> <literal type="string">" value:"</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block">/*
   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:
   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>parsePropertyString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fragments</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyRefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
    <comment type="line">//search for the next instance of $ from the 'prev' position</comment>
    <while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

      <comment type="line">//if there was any text before this, add it as a fragment</comment>
      <comment type="line">//TODO, this check could be modified to go if pos&gt;prev;</comment>
      <comment type="line">//seems like this current version could stick empty strings</comment>
      <comment type="line">//into the list</comment>
      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">//if we are at the end of the string, we tack on a $</comment>
      <comment type="line">//then move past it</comment>
      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>(</operator><call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//peek ahead to see if the next char is a property or not</comment>
        <comment type="line">//not a property: insert the char as a literal</comment>
              <comment type="block">/*
              fragments.addElement(value.substring(pos + 1, pos + 2));
              prev = pos + 2;
              */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">//backwards compatibility two $ map to one mode</comment>
          <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">//new behaviour: $X maps to $X for all values of X!='$'</comment>
          <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">//property found, extract its name or bail on a typo</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>endName</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>endName</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Syntax error in property: "</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>endName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>propertyRefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>endName</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <comment type="line">//no more $ signs found</comment>
    <comment type="line">//if there is any tail to the string, append it</comment>
    <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&lt;</operator> <call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fragments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>tiny</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>tiny</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..08e0aebc42f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>tiny</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">38</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><literal type="string">"1.0"</literal> <name>encoding</name><operator>=</operator><ternary><condition><expr><literal type="string">"UTF-8"</literal></expr> ?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
 <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name> <name>or</name> <name>more</name>
 <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name> <name>distributed</name> <name>with</name>
 <name>this</name> <name>work</name></expr></then></ternary></expr></then></ternary></expr></expr_stmt> <for>for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal>
 <operator>(</operator><name>the</name> <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name> <name>with</name>
 <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

     <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

 <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
 <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
 <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
 <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
 limitations under the License.
--&gt;
&lt;schema name="tiny" version="1.1"&gt;
  &lt;types&gt;
    &lt;fieldType name="string" class="solr.StrField"/&gt;
  &lt;/types&gt;
  &lt;fields&gt;
    &lt;field name="id" type="string" indexed="true" stored="true" required="true"/&gt;
    &lt;field name="text" type="text" indexed="true" stored="true"/&gt;
    &lt;dynamicField name="*_t" type="text" indexed="true" stored="true"/&gt;
    &lt;dynamicField name="*" type="string" indexed="true" stored="true"/&gt;
  &lt;/fields&gt;
  &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;

  &lt;types&gt;
    &lt;fieldtype name="text" class="solr.TextField"&gt;
      &lt;analyzer&gt;
        &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
        &lt;filter class="solr.LowerCaseFilterFactory"/&gt;
      &lt;/analyzer&gt;
    &lt;/fieldtype&gt;
  &lt;/types&gt;
&lt;/schema&gt;
diff --git a/solr/core/src/test-files/solr/collection1/conf/solrconfig-minimal.xml b/solr/core/src/test-files/solr/collection1/conf/solrconfig-minimal.xml
new file mode 100644
index 00000000000..5fb39bb6f71
-- /dev/null
++ b/solr/core/src/test-files/solr/collection1/conf/solrconfig-minimal.xml
@@ -0<operator>,</operator><expr_stmt><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">76</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><literal type="string">"1.0"</literal> <name>encoding</name><operator>=</operator><ternary><condition><expr><literal type="string">"UTF-8"</literal></expr> ?</condition><then><expr><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
  <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name> <name>or</name> <name>more</name>
  <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name> <name>distributed</name> <name>with</name>
  <name>this</name> <name>work</name></expr></then></ternary></expr></then></ternary></expr></expr_stmt></for> <for>for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal>
  <operator>(</operator><name>the</name> <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name> <name>with</name>
  <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

      <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

  <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
  <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
  <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
  <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
  limitations under the License.
  --&gt;

    &lt;!-- For testing<operator>,</operator> <decl_stmt><decl><type><name>I</name> <name>need</name> <name>to</name> <name>create</name> <name>some</name> <name>custom</name> <name>directories</name> <name>on</name> <name>the</name></type> <name>fly</name></decl>, <decl><type ref="prev"/><name>particularly</name> for <name>some</name> <name>of</name> <name>the</name> new
     <name>discovery</name>-<name>based</name> <name>core</name> <name><name>configuration</name><operator>.</operator> <name>Trying</name></name> <name>a</name> <name>minimal</name> <name>configuration</name> <name>to</name> <name>cut</name> <name>down</name> <name>the</name> <name>setup</name> <name><name>time</name><operator>.</operator>
     <name>use</name></name> <name>in</name> <name>conjunction</name> <name>with</name> <name>schema</name>-<name><name>minimal</name><operator>.</operator><name>xml</name></name> <name>perhaps</name><modifier/>? --&gt;
<argument_list type="generic">&lt;<argument><name>config</name></argument>&gt;</argument_list>
  <argument_list type="generic">&lt;<argument><name>luceneMatchVersion</name></argument>&gt;</argument_list><name><name>LUCENE_41</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>luceneMatchVersion</name></argument>&gt;</argument_list></name>

  <argument_list type="generic">&lt;<argument><name>dataDir</name></argument>&gt;</argument_list><name>$</name><block>{<block_content><label><name>solr</name></label>.<label><name>data</name></label>.<label><name>dir</name>:</label></block_content>}</block></decl></decl_stmt></for><expr_stmt><expr><operator>&lt;</operator><operator>/</operator><name>dataDir</name><operator>&gt;</operator>

  <operator>&lt;</operator><name>directoryFactory</name> <name>name</name><operator>=</operator><literal type="string">"DirectoryFactory"</literal>
                    <name>class</name><operator>=</operator><literal type="string">"${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"</literal><operator>/</operator><operator>&gt;</operator>

  <operator>&lt;</operator><name>indexConfig</name><operator>&gt;</operator>
  <operator>&lt;</operator><operator>/</operator><name>indexConfig</name><operator>&gt;</operator>

  <operator>&lt;</operator><name>jmx</name><operator>/</operator><operator>&gt;</operator>
  <operator>&lt;</operator><name>updateHandler</name> <name>class</name><operator>=</operator><literal type="string">"solr.DirectUpdateHandler2"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><operator>!</operator><operator>--</operator><name>updateLog</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>str</name> <name>name</name><operator>=</operator><literal type="string">"dir"</literal><operator>&gt;</operator><name>$</name><block>{<expr><name><name>solr</name><operator>.</operator><name>ulog</name><operator>.</operator><name>dir</name></name><operator>:</operator></expr>}</block><operator>&lt;</operator><operator>/</operator><name>str</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>updateLog</name><operator>--</operator><operator>&gt;</operator>
  <operator>&lt;</operator><operator>/</operator><name>updateHandler</name><operator>&gt;</operator>

  <operator>&lt;</operator><name>query</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>enableLazyFieldLoading</name><operator>&gt;</operator><literal type="boolean">true</literal><operator>&lt;</operator><operator>/</operator><name>enableLazyFieldLoading</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>queryResultWindowSize</name><operator>&gt;</operator><literal type="number">20</literal><operator>&lt;</operator><operator>/</operator><name>queryResultWindowSize</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>queryResultMaxDocsCached</name><operator>&gt;</operator><literal type="number">20</literal><operator>&lt;</operator><operator>/</operator><name>queryResultMaxDocsCached</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>useColdSearcher</name><operator>&gt;</operator><literal type="boolean">true</literal><operator>&lt;</operator><operator>/</operator><name>useColdSearcher</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>maxWarmingSearchers</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>maxWarmingSearchers</name><operator>&gt;</operator>

  <operator>&lt;</operator><operator>/</operator><name>query</name><operator>&gt;</operator>

  <operator>&lt;</operator><name>requestHandler</name> <name>name</name><operator>=</operator><literal type="string">"/admin/"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.admin.AdminHandlers"</literal> <operator>/</operator><operator>&gt;</operator>

  <operator>&lt;</operator><name>requestDispatcher</name> <name>handleSelect</name><operator>=</operator><literal type="string">"false"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>httpCaching</name> <name>never304</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
  <operator>&lt;</operator><operator>/</operator><name>requestDispatcher</name><operator>&gt;</operator>
  <operator>&lt;</operator><name>requestHandler</name> <name>name</name><operator>=</operator><literal type="string">"/select"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.SearchHandler"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>lst</name> <name>name</name><operator>=</operator><literal type="string">"defaults"</literal><operator>&gt;</operator>
      <operator>&lt;</operator><name>str</name> <name>name</name><operator>=</operator><literal type="string">"echoParams"</literal><operator>&gt;</operator><name><name>explicit</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>str</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>str</name> <name>name</name><operator>=</operator><literal type="string">"wt"</literal><operator>&gt;</operator><name><name>json</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>str</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>str</name> <name>name</name><operator>=</operator><literal type="string">"indent"</literal><operator>&gt;</operator><literal type="boolean">true</literal><operator>&lt;</operator><operator>/</operator><name>str</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>str</name> <name>name</name><operator>=</operator><literal type="string">"df"</literal><operator>&gt;</operator><name><name>text</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>str</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>lst</name><operator>&gt;</operator>

  <operator>&lt;</operator><operator>/</operator><name>requestHandler</name><operator>&gt;</operator>
  <operator>&lt;</operator><name>requestHandler</name> <name>name</name><operator>=</operator><literal type="string">"/update"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.UpdateRequestHandler"</literal><operator>&gt;</operator>
  <operator>&lt;</operator><operator>/</operator><name>requestHandler</name><operator>&gt;</operator>

  <operator>&lt;</operator><name>queryResponseWriter</name> <name>name</name><operator>=</operator><literal type="string">"json"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.JSONResponseWriter"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><operator>!</operator><operator>--</operator> <name>For</name> <name>the</name> <name>purposes</name> <name>of</name> <name>the</name> <name>tutorial</name></expr><operator>,</operator> <expr><name>JSON</name> <name>responses</name> <name>are</name> <name>written</name> <name>as</name>
     <name>plain</name> <name>text</name> <name>so</name> <name>that</name> <name>they</name> <name>are</name> <name>easy</name> <name>to</name> <name>read</name> <name>in</name> <operator>*</operator><name>any</name><operator>*</operator> <name><name>browser</name><operator>.</operator>
     <name>If</name></name> <name>you</name> <name>expect</name> <name>a</name> <name>MIME</name> <name>type</name> <name>of</name> <literal type="string">"application/json"</literal> <name>just</name> <name>remove</name> <name>this</name> <name><name>override</name><operator>.</operator></name>
    --<operator>&gt;</operator>
    <operator>&lt;</operator><name>str</name> <name>name</name><operator>=</operator><literal type="string">"content-type"</literal><operator>&gt;</operator><name>text</name><operator>/</operator><name>plain</name></expr>;</expr_stmt> <expr_stmt><expr><name>charset</name><operator>=</operator><name>UTF</name><operator>-</operator><literal type="number">8</literal><operator>&lt;</operator><operator>/</operator><name>str</name><operator>&gt;</operator>
  <operator>&lt;</operator><operator>/</operator><name>queryResponseWriter</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>config</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ChaosMonkeySafeLeaderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ChaosMonkeySafeLeaderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7b498e912da</literal><operator>..</operator><literal type="number">19375248414</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ChaosMonkeySafeLeaderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ChaosMonkeySafeLeaderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 
 <class><annotation>@<name>Slow</name></annotation>
<specifier>public</specifier> class <name>ChaosMonkeySafeLeaderTest</name> <super_list><extends>extends <super><name>AbstractFullDistribZkTestBase</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> class  <name>ChaosMonkeySafeLeaderTest</name> <super_list><extends>extends <super><name>AbstractFullDistribZkTestBase</name></super></extends></super_list> <block>{
   
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>RUN_LENGTH</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.tests.cloud.cm.runlength"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkControllerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkControllerTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d59d31aa61d</name><operator>..</operator><name>dc930eade56</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkControllerTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>ZkControllerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ZkControllerTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   <expr><specifier>private</specifier> <name>CoreContainer</name> <call><name>getCoreContainer</name><argument_list>()</argument_list></call> <block>{
     <expr><name>CoreContainer</name> <name>cc</name> <operator>=</operator> <operator>new</operator> <class><super><name>CoreContainer</name></super><argument_list>(<argument><expr><call><name><name>TEMP_DIR</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
       <block>{<block_content>
        <expr_stmt><expr><call><name>initShardHandler</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <constructor_decl><name>initShardHandler</name><parameter_list>()</parameter_list>;</constructor_decl>
       <expr_stmt/></block_content></block></block></class></expr>}</block></expr>
     }</block></expr>;</expr_stmt>
     
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestLazyCores</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestLazyCores</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0fb95608acf</literal><operator>..</operator><literal type="number">10a4d89c5e6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestLazyCores</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestLazyCores</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrInputDocument</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>LocalSolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>update</name><operator>.</operator><name>AddUpdateCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>update</name><operator>.</operator><name>CommitUpdateCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>update</name><operator>.</operator><name>UpdateHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RefCounted</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
 
   @<expr><name>BeforeClass</name>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>beforeClass</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig.xml"</literal></expr></argument>, <argument><expr><literal type="string">"schema.xml"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig-minimal.xml"</literal></expr></argument>, <argument><expr><literal type="string">"schema-tiny.xml"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
   }</block></class>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>_solrHomeDirectory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEMP_DIR</name></expr></argument>, <argument><expr><literal type="string">"org.apache.solr.core.TestLazyCores_testlazy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>_necessaryConfs</name> <init>= <expr><block>{<expr><literal type="string">"schema.xml"</literal></expr>, <expr><literal type="string">"solrconfig.xml"</literal></expr>, <expr><literal type="string">"stopwords.txt"</literal></expr>, <expr><literal type="string">"synonyms.txt"</literal></expr>,
      <expr><literal type="string">"protwords.txt"</literal></expr>, <expr><literal type="string">"old_synonyms.txt"</literal></expr>, <expr><literal type="string">"currency.xml"</literal></expr>, <expr><literal type="string">"open-exchange-rates.json"</literal></expr>, <expr><literal type="string">"mapping-ISOLatin1Accent.txt"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>solrHomeDirectory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEMP_DIR</name></expr></argument>, <argument><expr><literal type="string">"org.apache.solr.core.TestLazyCores_testlazy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>copyConfFiles</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>home</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>subdir</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 
     <decl_stmt><decl><type><name>File</name></type> <name>subHome</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>home</name></expr></argument>, <argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"conf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to make subdirectory "</literal></expr></argument>, <argument><expr><call><name><name>subHome</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>top</name> <init>= <expr><call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>TEST_HOME</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/collection1/conf"</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>file</name> <range>: <expr><name>_necessaryConfs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>subHome</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="string">"schema-tiny.xml"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>subHome</name></expr></argument>, <argument><expr><literal type="string">"schema-tiny.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="string">"solrconfig-minimal.xml"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>subHome</name></expr></argument>, <argument><expr><literal type="string">"solrconfig-minimal.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>CoreContainer</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
 
    <if_stmt><if>if <condition>(<expr><call><name><name>_solrHomeDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>_solrHomeDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to mkdirs workDir"</literal></expr></argument>, <argument><expr><call><name><name>_solrHomeDirectory</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to mkdirs workDir"</literal></expr></argument>, <argument><expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>copyConfFiles</name><argument_list>(<argument><expr><name>_solrHomeDirectory</name></expr></argument>, <argument><expr><literal type="string">"collection"</literal> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyConfFiles</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><literal type="string">"collection"</literal> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
 
    <decl_stmt><decl><type><name>File</name></type> <name>solrXml</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>_solrHomeDirectory</name></expr></argument>, <argument><expr><literal type="string">"solr.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>solrXml</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><literal type="string">"solr.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>solrXml</name></expr></argument>, <argument><expr><name>LOTS_SOLR_XML</name></expr></argument>, <argument><expr><call><name><name>IOUtils</name><operator>.</operator><name>CHARSET_UTF_8</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CoreContainer</name></type> <name>cores</name> <init>= <expr><operator>new</operator> <call><name>CoreContainer</name><argument_list>(<argument><expr><call><name><name>_solrHomeDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name><name>_solrHomeDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>solrXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//  h.getCoreContainer().load(_solrHomeDirectory.getAbsolutePath(), new File(_solrHomeDirectory, "solr.xml"));</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CoreContainer</name></type> <name>cores</name> <init>= <expr><operator>new</operator> <call><name>CoreContainer</name><argument_list>(<argument><expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>solrXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, "solr.xml"));</comment>
 
     <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>setPersistent</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><name>cores</name></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
  <function><annotation>@<name>After</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>after</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>_solrHomeDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>_solrHomeDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">155</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
 
       <comment type="line">// Just get a couple of searches to work!</comment>
       <expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"test prefix query"</literal></expr></argument>,
          <argument><expr><call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!prefix f=v_t}hel"</literal></expr></argument>)</argument_list></call>
          <call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!prefix f=v_t}hel"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr></argument>
           , <argument><expr><literal type="string">"//result[@numFound='2']"</literal></expr></argument>
       )</argument_list></call></expr>;
 
       <call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"test raw query"</literal></expr></argument>,
          <argument><expr><call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_t}hello"</literal></expr></argument>)</argument_list></call>
          <call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_t}hello"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr></argument>
           , <argument><expr><literal type="string">"//result[@numFound='2']"</literal></expr></argument>
       )</argument_list></call></block></expr>;</expr_stmt>
 
       <comment type="line">// Now just insure that the normal searching on "collection1" finds _0_ on the same query that found _2_ above.</comment>
       <comment type="line">// Use of makeReq above and req below is tricky, very tricky.</comment>
       <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"test raw query"</literal></expr></argument>,
          <argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_t}hello"</literal></expr></argument>)</argument_list></call>
          <call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_t}hello"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr></argument>
           , <argument><expr><literal type="string">"//result[@numFound='0']"</literal></expr></argument>
       )</argument_list></call></expr>;</expr_stmt>
 
       <comment type="line">// no analysis is done, so these should match nothing</comment>
       <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"test raw query"</literal></expr></argument>,
          <argument><expr><call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_t}Hello"</literal></expr></argument>)</argument_list></call>
          <call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_t}Hello"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr></argument>
           , <argument><expr><literal type="string">"//result[@numFound='0']"</literal></expr></argument>
       )</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"test raw query"</literal></expr></argument>,
          <argument><expr><call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_f}1.5"</literal></expr></argument>)</argument_list></call>
          <call><name>makeReq</name><argument_list>(<argument><expr><name>core4</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!raw f=v_f}1.5"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call></expr></argument>
           , <argument><expr><literal type="string">"//result[@numFound='0']"</literal></expr></argument>
       )</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
     <try>try <block>{<block_content>
       <comment type="line">// First check that all the cores that should be loaded at startup actually are.</comment>
 
      <expr_stmt><expr><call><name>checkInCores</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"collection1"</literal></expr></argument>,  <argument><expr><literal type="string">"collectionLazy2"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkNotInCores</name><argument_list>(<argument><expr><name>cc</name></expr></argument>,<argument><expr><literal type="string">"collectionLazy3"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy4"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy6"</literal></expr></argument>,
      <argument><expr><call><name>checkInCores</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"collection1"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy2"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy5"</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      <expr_stmt><expr><call><name>checkNotInCores</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"collectionLazy3"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy4"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy6"</literal></expr></argument>,
           <argument><expr><literal type="string">"collectionLazy7"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy8"</literal></expr></argument>, <argument><expr><literal type="string">"collectionLazy9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <comment type="line">// By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">251</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">248</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
   <comment type="line">// Test case for SOLR-4300</comment>
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testRace</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name> <name>_theCores</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name> <name>theCores</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SolrCore</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>CoreContainer</name></type> <name>cc</name> <init>= <expr><call><name>init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
           @<expr><name>Override</name>
           <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>()</argument_list></call> <block>{
             <expr><name>SolrCore</name> <name>core</name> <operator>=</operator> <call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"collectionLazy3"</literal></expr></argument>)</argument_list></call></expr>;
            <synchronized>synchronized <init>(<expr><name>_theCores</name></expr>)</init> <block>{<block_content>
              <expr_stmt><expr><call><name><name>_theCores</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name>theCores</name></expr>)</init> <block>{<block_content>
              <expr_stmt><expr><call><name><name>theCores</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></synchronized></block_content></block></synchronized></block></expr>}</block></expr></expr_stmt>
           </block_content>}</block></try>
         </block_content>}</block></try></block></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>threads</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>

       <for>for <control>(<init><decl><type><name>Thread</name></type> <name>thread</name> <range>: <expr><name>threads</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>_theCores</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Cores should be the same!"</literal></expr></argument>, <argument><expr><call><name><name>_theCores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>_theCores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>theCores</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Cores should be the same!"</literal></expr></argument>, <argument><expr><call><name><name>theCores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>theCores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>

      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><name>_theCores</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>SolrCore</name></type> <name>core</name> <range>: <expr><name>theCores</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">286</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></for>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>checkNotInCores</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>nameCheck</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkNotInCores</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>nameCheck</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCoreNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>nameCheck</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"core "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" was found in the list of cores"</literal></expr></argument>, <argument><expr><call><name><name>names</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>checkInCores</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>nameCheck</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkInCores</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>nameCheck</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCoreNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>nameCheck</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"core "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" was not found in the list of cores"</literal></expr></argument>, <argument><expr><call><name><name>names</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
   </block_content>}</block></function>
 

   <function><type><specifier>private</specifier> <name>void</name></type> <name>addLazy</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>fieldValues</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>UpdateHandler</name></type> <name>updater</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getUpdateHandler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrQueryRequest</name></type> <name>req</name> <init>= <expr><call><name>makeReq</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AddUpdateCommand</name></type> <name>cmd</name> <init>= <expr><operator>new</operator> <call><name>AddUpdateCommand</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fieldValues</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"The length of the string array (query arguments) needs to be even"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>solrDoc</name></name> <operator>=</operator> <operator>new</operator> <call><name>SolrInputDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>fieldValues</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>solrDoc</name><operator>.</operator><name>addField</name></name><argument_list>(<argument><expr><name><name>fieldValues</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fieldValues</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>AddUpdateCommand</name></type> <name>cmd</name> <init>= <expr><operator>new</operator> <call><name>AddUpdateCommand</name><argument_list>(<argument><expr><call><name>makeReq</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>solrDoc</name></name> <operator>=</operator> <call><name>sdoc</name><argument_list>(<argument><expr><name>fieldValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>updater</name><operator>.</operator><name>addDoc</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">333</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">318</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyCores</name> extends <name>SolrTestCaseJ4</name> <block>{
 
   <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>LOTS_SOLR_XML</name> <operator>=</operator> <literal type="string">" &lt;solr persistent=\"false\"&gt; "</literal> <operator>+</operator>
       <literal type="string">"&lt;cores adminPath=\"/admin/cores\" defaultCoreName=\"collectionLazy2\" transientCacheSize=\"4\"&gt;  "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collection1\" instanceDir=\"collection1\" /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy2\" instanceDir=\"collection2\" transient=\"true\" loadOnStartup=\"true\"  /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy3\" instanceDir=\"collection3\" transient=\"on\" loadOnStartup=\"false\"/&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy4\" instanceDir=\"collection4\" transient=\"false\" loadOnStartup=\"false\"/&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy5\" instanceDir=\"collection5\" transient=\"false\" loadOnStartup=\"true\"/&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy6\" instanceDir=\"collection6\" transient=\"true\" loadOnStartup=\"false\" /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy7\" instanceDir=\"collection7\" transient=\"true\" loadOnStartup=\"false\" /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy8\" instanceDir=\"collection8\" transient=\"true\" loadOnStartup=\"false\" /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collectionLazy9\" instanceDir=\"collection9\" transient=\"true\" loadOnStartup=\"false\" /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collection1\" instanceDir=\"collection1\" config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\" /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy2\" instanceDir=\"collection2\" transient=\"true\" loadOnStartup=\"true\"  "</literal> <operator>+</operator>
      <literal type="string">" config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\" /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy3\" instanceDir=\"collection3\" transient=\"on\" loadOnStartup=\"false\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy4\" instanceDir=\"collection4\" transient=\"false\" loadOnStartup=\"false\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy5\" instanceDir=\"collection5\" transient=\"false\" loadOnStartup=\"true\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy6\" instanceDir=\"collection6\" transient=\"true\" loadOnStartup=\"false\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy7\" instanceDir=\"collection7\" transient=\"true\" loadOnStartup=\"false\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy8\" instanceDir=\"collection8\" transient=\"true\" loadOnStartup=\"false\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

      <literal type="string">"&lt;core name=\"collectionLazy9\" instanceDir=\"collection9\" transient=\"true\" loadOnStartup=\"false\" "</literal> <operator>+</operator>
      <literal type="string">"config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\"  /&gt; "</literal> <operator>+</operator>

       <literal type="string">"&lt;/cores&gt; "</literal> <operator>+</operator>
       <literal type="string">"&lt;/solr&gt;"</literal></expr>;
 }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestSolrDiscoveryProperties</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestSolrDiscoveryProperties</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..2b7637af520</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestSolrDiscoveryProperties</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">389</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS F ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>TestSolrDiscoveryProperties</name> <super_list><extends>extends <super><name>SolrTestCaseJ4</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>NEW_LINE</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>initCore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>solrHomeDirectory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEMP_DIR</name></expr></argument>, <argument><expr><literal type="string">"org.apache.solr.core.TestSolrProperties"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"solrHome"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setMeUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to mkdirs workDir"</literal></expr></argument>, <argument><expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.solr.home"</literal></expr></argument>, <argument><expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addSolrPropertiesFile</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>extras</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>solrProps</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><name><name>SolrProperties</name><operator>.</operator><name>SOLR_PROPERTIES_FILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>SOLR_PROPERTIES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>extra</name> <range>: <expr><name>extras</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>extra</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>solrProps</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addSolrXml</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>tmpFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><name><name>SolrProperties</name><operator>.</operator><name>SOLR_XML_FILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>tmpFile</name></expr></argument>, <argument><expr><name>SOLR_XML</name></expr></argument>, <argument><expr><call><name><name>IOUtils</name><operator>.</operator><name>CHARSET_UTF_8</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Properties</name></type> <name>makeCorePropFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isLazy</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>loadOnStartup</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>extraProps</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_SCHEMA</name></name></expr></argument>, <argument><expr><literal type="string">"schema-tiny.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_CONFIG</name></name></expr></argument>, <argument><expr><literal type="string">"solrconfig-minimal.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_TRANSIENT</name></name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>isLazy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_LOADONSTARTUP</name></name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>loadOnStartup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_DATADIR</name></name></expr></argument>, <argument><expr><literal type="string">"${core.dataDir:stuffandnonsense}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>extra</name> <range>: <expr><name>extraProps</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>extra</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>props</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addCoreWithProps</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>stockProps</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>File</name></type> <name>propFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>,
        <argument><expr><call><name><name>stockProps</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <name><name>SolrProperties</name><operator>.</operator><name>CORE_PROP_FILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>parent</name> <init>= <expr><call><name><name>propFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to mkdirs for "</literal> <operator>+</operator> <call><name><name>parent</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stockProps</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>propFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addConfFiles</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addConfFiles</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>confDir</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>top</name> <init>= <expr><call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>TEST_HOME</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/collection1/conf"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to mkdirs for "</literal> <operator>+</operator> <call><name><name>confDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>confDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="string">"schema-tiny.xml"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>confDir</name></expr></argument>, <argument><expr><literal type="string">"schema-tiny.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="string">"solrconfig-minimal.xml"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>confDir</name></expr></argument>, <argument><expr><literal type="string">"solrconfig-minimal.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addConfigsForBackCompat</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>addConfFiles</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><literal type="string">"collection1"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>CoreContainer</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name><name>CoreContainer</name><operator>.</operator><name>Initializer</name></name></type> <name>init</name> <init>= <expr><operator>new</operator> <call><name><name>CoreContainer</name><operator>.</operator><name>Initializer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>CoreContainer</name></type> <name>cores</name> <init>= <expr><call><name><name>init</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>cores</name><operator>.</operator><name>setPersistent</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cores</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>After</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>after</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>solrHomeDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="line">// Test the basic setup, create some dirs with core.properties files in them, but no solr.xml (a solr.properties</comment>
  <comment type="line">// instead) and insure that we find all the cores and can load them.</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPropertiesFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>setMeUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addSolrPropertiesFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// name, isLazy, loadOnStartup</comment>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// I suspect what we're adding in here is a "configset" rather than a schema or solrconfig.</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CoreContainer</name></type> <name>cc</name> <init>= <expr><call><name>init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><name><name>cc</name><operator>.</operator><name>containerProperties</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/admin/cores/props"</literal></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.adminPath"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/admin/cores/props"</literal></expr></argument>, <argument><expr><call><name><name>cc</name><operator>.</operator><name>getAdminPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"defcore"</literal></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.defaultCoreName"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"defcore"</literal></expr></argument>, <argument><expr><call><name><name>cc</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"222.333.444.555"</literal></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"6000"</literal></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// getProperty actually looks at original props.</comment>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/solrprop"</literal></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.hostContext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"20"</literal></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.zkClientTimeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>TestLazyCores</name><operator>.</operator><name>checkInCores</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"core1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>TestLazyCores</name><operator>.</operator><name>checkNotInCores</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"lazy1"</literal></expr></argument>, <argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="string">"collection1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SolrCore</name></type> <name>core1</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>core2</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SolrCore</name></type> <name>lazy1</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>TestLazyCores</name><operator>.</operator><name>checkInCores</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="string">"lazy1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>core1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>core2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lazy1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>cc</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>


  <comment type="line">// Check that the various flavors of persistence work, including saving the state of a core when it's being swapped</comment>
  <comment type="line">// out. Added a test in here to insure that files that have config variables are saved with the config vars not the</comment>
  <comment type="line">// substitutions.</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPersistTrue</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>setMeUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addSolrPropertiesFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"solr.persistent"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Properties</name></type> <name>special</name> <init>= <expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>special</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>, <argument><expr><literal type="string">"${core1inst:anothersillypath}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><name>special</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"core1inst"</literal></expr></argument>, <argument><expr><literal type="string">"core1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CoreContainer</name></type> <name>cc</name> <init>= <expr><call><name>init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreC1</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreC1</name></expr></argument>, <argument><expr><literal type="string">"addedPropC1=addedC1"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC1B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC1C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreC2</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreC2</name></expr></argument>, <argument><expr><literal type="string">"addedPropC2=addedC2"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC2B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC2C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreL1</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreL1</name></expr></argument>, <argument><expr><literal type="string">"addedPropL1=addedL1"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL1B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL1C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreL2</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"lazy2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreL2</name></expr></argument>, <argument><expr><literal type="string">"addedPropL2=addedL2"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL2B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL2C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreL3</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"lazy3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreL3</name></expr></argument>, <argument><expr><literal type="string">"addedPropL3=addedL3"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL3B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL3C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>cc</name><operator>.</operator><name>persist</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Insure that one of the loaded cores was swapped out, with a cache size of 2 lazy1 should be gone.</comment>
      <expr_stmt><expr><call><name><name>TestLazyCores</name><operator>.</operator><name>checkInCores</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="string">"lazy2"</literal></expr></argument>, <argument><expr><literal type="string">"lazy3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>TestLazyCores</name><operator>.</operator><name>checkNotInCores</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"lazy1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>checkSolrProperties</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>File</name></type> <name>xmlFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><literal type="string">"solr.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"Solr.xml should NOT exist"</literal></expr></argument>, <argument><expr><call><name><name>xmlFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Properties</name></type> <name>orig</name> <init>= <expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>orig</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_INSTDIR</name></name></expr></argument>, <argument><expr><literal type="string">"${core1inst:anothersillypath}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="string">"addedPropC1=addedC1"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC1B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC1C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>orig</name> <operator>=</operator> <call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="string">"addedPropC2=addedC2"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC2B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC2C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// This test insures that a core that was swapped out has its properties file persisted. Currently this happens</comment>
      <comment type="line">// as the file is removed from the cache.</comment>
      <expr_stmt><expr><name>orig</name> <operator>=</operator> <call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="string">"addedPropL1=addedL1"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL1B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL1C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>orig</name> <operator>=</operator> <call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="string">"addedPropL2=addedL2"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL2B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL2C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>orig</name> <operator>=</operator> <call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="string">"addedPropL3=addedL3"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL3B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL3C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>coreC1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreC2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreL1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreL2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreL3</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>cc</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="line">// Make sure that, even if we do call persist, nothing's saved unless the flag is set in solr.properties.</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPersistFalse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>setMeUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addSolrPropertiesFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCoreWithProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CoreContainer</name></type> <name>cc</name> <init>= <expr><call><name>init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreC1</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreC1</name></expr></argument>, <argument><expr><literal type="string">"addedPropC1=addedC1"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC1B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC1C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreC2</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreC2</name></expr></argument>, <argument><expr><literal type="string">"addedPropC2=addedC2"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC2B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropC2C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreL1</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreL1</name></expr></argument>, <argument><expr><literal type="string">"addedPropL1=addedL1"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL1B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL1C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>coreL2</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getCore</name></name><argument_list>(<argument><expr><literal type="string">"lazy2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addCoreProps</name><argument_list>(<argument><expr><name>coreL2</name></expr></argument>, <argument><expr><literal type="string">"addedPropL2=addedL2"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL2B=foo"</literal></expr></argument>, <argument><expr><literal type="string">"addedPropL2C=bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>cc</name><operator>.</operator><name>persist</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkSolrProperties</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"core2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkCoreProps</name><argument_list>(<argument><expr><call><name>makeCorePropFile</name><argument_list>(<argument><expr><literal type="string">"lazy2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>coreC1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreC2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreL1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>coreL2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>cc</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>addCoreProps</name><parameter_list>(<parameter><decl><type><name>SolrCore</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>propPairs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>keyval</name> <range>: <expr><name>propPairs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pair</name> <init>= <expr><call><name><name>keyval</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>getCoreDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putProperty</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="line">// Insure that the solr.properties is as it should be after persisting _and_, in some cases, different than</comment>
  <comment type="line">// what's in memory</comment>
  <function><type><name>void</name></type> <name>checkSolrProperties</name><parameter_list>(<parameter><decl><type><name>CoreContainer</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>checkMemPairs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Properties</name></type> <name>orig</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>orig</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>SOLR_PROPERTIES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Properties</name></type> <name>curr</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getContainerProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Properties</name></type> <name>persisted</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>persisted</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><name><name>SolrProperties</name><operator>.</operator><name>SOLR_PROPERTIES_FILE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Persisted and original should be the same size"</literal></expr></argument>, <argument><expr><call><name><name>orig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>persisted</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>orig</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Values of original should match current"</literal></expr></argument>, <argument><expr><call><name><name>orig</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>persisted</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>Properties</name></type> <name>specialProps</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>special</name> <range>: <expr><name>checkMemPairs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pair</name> <init>= <expr><call><name><name>special</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>specialProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// OK, current should match original except if the property is "special"</comment>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>curr</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>specialProps</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Compare curr and val</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Modified property should be in current container properties"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name><name>curr</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="line">// Insure that the properties in the core passed in are exactly what's in the default core.properties below plus</comment>
  <comment type="line">// whatever extra is passed in.</comment>
  <function><type><name>void</name></type> <name>checkCoreProps</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>orig</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>extraProps</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Read the persisted file.</comment>
    <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>propParent</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>solrHomeDirectory</name></expr></argument>, <argument><expr><call><name><name>orig</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>CoreDescriptor</name><operator>.</operator><name>CORE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>propParent</name></expr></argument>, <argument><expr><name><name>SolrProperties</name><operator>.</operator><name>CORE_PROP_FILE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propSet</name> <init>= <expr><call><name><name>props</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Persisted properties should NOT contain extra properties"</literal></expr></argument>, <argument><expr><call><name><name>propSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>orig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>orig</name><operator>.</operator><name>stringPropertyNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Original and new properties should be equal for "</literal> <operator>+</operator> <name>prop</name></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>orig</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><name>extraProps</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pair</name> <init>= <expr><call><name><name>prop</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Modified parameters should not be present for "</literal> <operator>+</operator> <name>prop</name></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="line">// If there's a solr.xml AND a properties file, make sure that the xml file is loaded and the properties file</comment>
  <comment type="line">// is ignored.</comment>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBackCompatXml</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>setMeUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addSolrPropertiesFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addSolrXml</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addConfigsForBackCompat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CoreContainer</name></type> <name>cc</name> <init>= <expr><call><name>init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><call><name><name>cc</name><operator>.</operator><name>getContainerProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/admin/cores"</literal></expr></argument>, <argument><expr><call><name><name>cc</name><operator>.</operator><name>getAdminPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"collectionLazy2"</literal></expr></argument>, <argument><expr><call><name><name>cc</name><operator>.</operator><name>getDefaultCoreName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Shouldn't get these in properties at this point</comment>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.adminPath"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.defaultCoreName"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// getProperty actually looks at original props.</comment>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.hostContext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cores.zkClientTimeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>cc</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="line">// For this test I want some of these to be different than what would be in solr.xml by default.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SOLR_PROPERTIES</name> <init>=
      <expr><literal type="string">"persistent=${persistent:false}"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"cores.adminPath=/admin/cores/props"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"cores.defaultCoreName=defcore"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"host=222.333.444.555"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"port=6000"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"cores.hostContext=/solrprop"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"cores.zkClientTimeout=20"</literal> <operator>+</operator> <name>NEW_LINE</name> <operator>+</operator>
          <literal type="string">"cores.transientCacheSize=2"</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// For testing whether finding a solr.xml overrides looking at solr.properties</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SOLR_XML</name> <init>= <expr><literal type="string">" &lt;solr persistent=\"false\"&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;cores adminPath=\"/admin/cores\" defaultCoreName=\"collectionLazy2\" transientCacheSize=\"4\"&gt;  "</literal> <operator>+</operator>
      <literal type="string">"&lt;core name=\"collection1\" instanceDir=\"collection1\" config=\"solrconfig-minimal.xml\" schema=\"schema-tiny.xml\" /&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;/cores&gt; "</literal> <operator>+</operator>
      <literal type="string">"&lt;/solr&gt;"</literal></expr></init></decl>;</decl_stmt>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestHarness</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestHarness</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1588524ad9f</literal><operator>..</operator><literal type="number">097bcf66169</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestHarness</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestHarness</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestHarness</name> <block>{
           <expr><name>hostPort</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"hostPort"</literal></expr></argument>)</argument_list></call></expr>;
           <name>hostContext</name> <operator>=</operator> <literal type="string">"solr"</literal></block></expr>;</expr_stmt>
           <expr_stmt><expr><name>defaultCoreName</name> <operator>=</operator> <name><name>CoreContainer</name><operator>.</operator><name>DEFAULT_DEFAULT_CORE_NAME</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>initShardHandler</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>initShardHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>initZooKeeper</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"zkHost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></function>
       </block_content>}</block></function><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></for></block_content></block></function></block></class></block_content></block></for></block_content></block></if></if_stmt></block_content></block></try></block></expr></expr_stmt></block_content></block></try></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></constructor></block_content></block></for></block_content></block></for>

</unit>
