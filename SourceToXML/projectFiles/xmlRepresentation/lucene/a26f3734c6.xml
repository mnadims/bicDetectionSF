<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/a26f3734c6.java"><expr_stmt><expr><name>From</name> <name>a26f3734c60e2ab9d8cf82b8462b4b3e78080aa1</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Aug</name> <literal type="number">2008</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">31</literal><operator>:</operator><literal type="number">03</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">1219</literal><operator>:</operator> <name>add</name> <name><name>Fieldable</name><operator>.</operator><name>getBinaryValue</name></name><operator>/</operator><name>Offset</name><operator>/</operator><name>Length</name> <name>reuse</name>
 <name>API</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/java/trunk@686723 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                                   <operator>|</operator>  <literal type="number">5</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>AbstractField</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">42</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Field</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">74</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Fieldable</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">41</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">62</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsWriter</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">50</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">32</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <literal type="number">7</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">247</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">59</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>a3405f517d7</name><operator>..</operator><literal type="number">03ec689c1ca</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>API</name> <name>Changes</name>
     <name>frequency</name></expr><operator>,</operator> <expr><name>positions</name> <name>and</name> <name><name>payloads</name><operator>.</operator>  <name>This</name></name> <name>saves</name> <name>index</name> <name>space</name></expr><operator>,</operator> <expr><name>and</name>
     <name>indexing</name><operator>/</operator><name>searching</name> <name><name>time</name><operator>.</operator></name>  (<name>Eks</name> <name>Dev</name> <name>via</name> <name>Mike</name> <name>McCandless</name></expr></expr_stmt>)
 
<expr_stmt><expr><literal type="number">15.</literal> <name>LUCENE</name><operator>-</operator><literal type="number">1219</literal><operator>:</operator> <name>Add</name> <name>basic</name> <name>reuse</name> <name>API</name> <name>to</name> <name>Fieldable</name></expr></expr_stmt> <for>for binary fields:
    getBinaryValue/Offset/Length<control>(<init><expr/></init>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for> <expr_stmt><expr><name>currently</name> <name>only</name> <name>lazy</name> <name>fields</name> <name>reuse</name>
    <name>the</name> <name>provided</name> <name><name>byte</name><index>[]</index></name> <name>result</name> <name>to</name> <name><name>getBinaryValue</name><operator>.</operator></name>  (<name>Eks</name> <name>Dev</name> <name>via</name> <name>Mike</name>
    <name>McCandless</name></expr></expr_stmt>)

 <expr_stmt><expr><name>Bug</name> <name>fixes</name>
     
  <literal type="number">1.</literal> <name>LUCENE</name><operator>-</operator><literal type="number">1134</literal><operator>:</operator> <name>Fixed</name> <name><name>BooleanQuery</name><operator>.</operator><name>rewrite</name></name> <name>to</name> <name>only</name> <name>optimize</name> <name>a</name> <name>single</name> 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>AbstractField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>AbstractField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7eac52bf9be</literal><operator>..</operator><name>c9858314b85</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>AbstractField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>AbstractField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractField</name> implements <name>Fieldable</name> <block>{
   <expr><specifier>protected</specifier> <name>float</name> <name>boost</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;
   <comment type="line">// the one and only data object for all different kind of field values</comment>
   <expr><specifier>protected</specifier> <name>Object</name> <name>fieldsData</name> <operator>=</operator> <literal type="null">null</literal></expr>;
  <comment type="line">//length/offset for all primitive types</comment>
  <expr><specifier>protected</specifier> <name>int</name> <name>binaryLength</name></expr>;
  <expr><specifier>protected</specifier> <name>int</name> <name>binaryOffset</name></expr>;
 
   <expr><specifier>protected</specifier> <call><name>AbstractField</name><argument_list>()</argument_list></call>
   <block>{
    
   }</block>
 
   <specifier>protected</specifier> <call><name>AbstractField</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name></name> <name>store</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name></name> <name>index</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>TermVector</name></name> <name>termVector</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">199</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">201</literal></expr>,<expr><literal type="number">43</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractField</name> implements <name>Fieldable</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/** True iff the value of the filed is stored as binary */</comment>
  <specifier>public</specifier> <name>final</name> <name>boolean</name>  <call><name>isBinary</name><argument_list>()</argument_list></call>      <block>{ <return>return <expr><name>isBinary</name></expr>;</return></block></expr> }</block>
  <specifier>public</specifier> <name>final</name> <name>boolean</name>  <call><name>isBinary</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>isBinary</name></expr>;</return></block></expr>
  }</block>


  <comment type="block" format="javadoc">/**
   * Return the raw byte[] for the binary field.  Note that
   * you must also call {@link #getBinaryLength} and {@link
   * #getBinaryOffset} to know which range of bytes in this
   * returned array belong to the field.
   * @return reference to the Field value as byte[].
   */</comment>
  <specifier>public</specifier> <name><name>byte</name><index>[]</index></name> <call><name>getBinaryValue</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><call><name>getBinaryValue</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>
  
  <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBinaryValue</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name></decl></parameter>)</parameter_list><block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>isBinary</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>fieldsData</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns length of byte[] segment that is used as value, if Field is not binary
   * returned value is undefined
   * @return length of byte[] segment that represents this Field value
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getBinaryLength</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>binaryLength</name></expr>;</return>
    </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns offset into byte[] segment that is used as value, if Field is not binary
   * returned value is undefined
   * @return index of the first character in byte[] segment that represents this Field value
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getBinaryOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>binaryOffset</name></expr>;</return>
  </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** True if norms are omitted for this indexed field */</comment>
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getOmitNorms</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>omitNorms</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Field</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Field</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9d308424e81</literal><operator>..</operator><literal type="number">2b4c5223fce</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Field</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Field</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">39</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>Field</name> extends <name>AbstractField</name> implements <name>Fieldable</name></expr><operator>,</operator> <expr><name>Serializabl</name>
   
   <comment type="block" format="javadoc">/** The value of the field as a String, or null.  If null, the Reader value,
    * binary value, or TokenStream value is used.  Exactly one of stringValue(), 
   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */</comment>
   <operator>*</operator> <call><name>readerValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>getBinaryValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>and</name> <call><name>tokenStreamValue</name><argument_list>()</argument_list></call> <name>must</name> <name>be</name> <name><name>set</name><operator>.</operator></name> *<operator>/</operator>
   <specifier>public</specifier> <name>String</name> <call><name>stringValue</name><argument_list>()</argument_list></call>   <block>{ <return>return <expr><name>fieldsData</name> <operator>instanceof</operator> <name>String</name> <operator>?</operator> <operator>(</operator><name>String</name><operator>)</operator><name>fieldsData</name> <operator>:</operator> <literal type="null">null</literal></expr>;</return> }</block></expr></expr_stmt>
   
   <comment type="block" format="javadoc">/** The value of the field as a Reader, or null.  If null, the String value,
    * binary value, or TokenStream value is used.  Exactly one of stringValue(), 
   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */</comment>
   <expr_stmt><expr><operator>*</operator> <call><name>readerValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>getBinaryValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>and</name> <call><name>tokenStreamValue</name><argument_list>()</argument_list></call> <name>must</name> <name>be</name> <name><name>set</name><operator>.</operator></name> *<operator>/</operator>
   <specifier>public</specifier> <name>Reader</name> <call><name>readerValue</name><argument_list>()</argument_list></call>   <block>{ <return>return <expr><name>fieldsData</name> <operator>instanceof</operator> <name>Reader</name> <operator>?</operator> <operator>(</operator><name>Reader</name><operator>)</operator><name>fieldsData</name> <operator>:</operator> <literal type="null">null</literal></expr>;</return> }</block></expr></expr_stmt>
   
   <comment type="block" format="javadoc">/** The value of the field in Binary, or null.  If null, the Reader value,
    * String value, or TokenStream value is used. Exactly one of stringValue(), 
   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */</comment>
  <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>binaryValue</name><parameter_list>()</parameter_list>   <block>{<block_content> <return>return <expr><ternary><condition><expr><name>isBinary</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><name>fieldsData</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
   <expr_stmt><expr><operator>*</operator> <call><name>readerValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>getBinaryValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>and</name> <call><name>tokenStreamValue</name><argument_list>()</argument_list></call> <name>must</name> <name>be</name> <name><name>set</name><operator>.</operator></name>
   * @<name>deprecated</name> <name>This</name> <name>method</name> <name>must</name> <name>allocate</name> <name>a</name> <operator>new</operator> <name><name>byte</name><index>[]</index></name></expr></expr_stmt> <if_stmt><if>if
   * the <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>AbstractField</name><operator>#</operator><call><name>getBinaryOffset</name><argument_list>()</argument_list></call></expr></block_content>}</block></if></if_stmt> <expr_stmt><expr><name>is</name> <name>non</name><operator>-</operator><name>zero</name>
   <operator>*</operator> <name>or</name> <block>{@<expr><name>link</name> <name>AbstractField</name><operator>#</operator><call><name>getBinaryLength</name><argument_list>()</argument_list></call></expr>}</block> <name>is</name> <name>not</name> <name>the</name>
   <operator>*</operator> <name>full</name> <name>length</name> <name>of</name> <name>the</name> <name><name>byte</name><index>[]</index></name><operator>.</operator> <name>Please</name> <name>use</name> <block>{@<expr><name>link</name>
   <operator>*</operator> <name>AbstractField</name><operator>#</operator><call><name>getBinaryValue</name><argument_list>()</argument_list></call></expr>}</block> <name>instead</name></expr><operator>,</operator> <expr><name>which</name> <name>simply</name>
   <operator>*</operator> <name>returns</name> <name>the</name> <name><name>byte</name><index>[]</index></name><operator>.</operator>
   <operator>*</operator><operator>/</operator> 
  <specifier>public</specifier> <name><name>byte</name><index>[]</index></name> <call><name>binaryValue</name><argument_list>()</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isBinary</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <name>final</name> <name><name>byte</name><index>[]</index></name> <name>data</name> <operator>=</operator> <operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>fieldsData</name></block></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>binaryOffset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>binaryLength</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">//Optimization</comment>
    
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>binaryLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>binaryOffset</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>binaryLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>    
  }
   
   <comment type="block" format="javadoc">/** The value of the field as a TokesStream, or null.  If null, the Reader value,
    * String value, or binary value is used. Exactly one of stringValue(), 
   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */</comment>
   * <expr_stmt><expr><call><name>readerValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>getBinaryValue</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>and</name> <call><name>tokenStreamValue</name><argument_list>()</argument_list></call> <name>must</name> <name>be</name> <name><name>set</name><operator>.</operator></name> *<operator>/</operator>
   <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStreamValue</name><argument_list>()</argument_list></call>   <block>{ <return>return <expr><name>fieldsData</name> <operator>instanceof</operator> <name>TokenStream</name> <operator>?</operator> <operator>(</operator><name>TokenStream</name><operator>)</operator><name>fieldsData</name> <operator>:</operator> <literal type="null">null</literal></expr>;</return> }</block></expr></expr_stmt>
   
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">182</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>Field</name> extends <name>AbstractField</name> implements <name>Fieldable</name></expr><operator>,</operator> <expr><name>Serializabl</name>
   <comment type="block" format="javadoc">/** Expert: change the value of this field.  See &lt;a href="#setValue(java.lang.String)"&gt;setValue(String)&lt;/a&gt;. */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>setValue</name><argument_list>(<argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>fieldsData</name> <operator>=</operator> <name>value</name></expr>;
    <expr><name>binaryLength</name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>length</name></name></expr>;
    <expr><name>binaryOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/** Expert: change the value of this field.  See &lt;a href="#setValue(java.lang.String)"&gt;setValue(String)&lt;/a&gt;. */</comment>
  <specifier>public</specifier> <name>void</name> <call><name>setValue</name><argument_list>(<argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>fieldsData</name> <operator>=</operator> <name>value</name></expr>;
    <expr><name>binaryLength</name> <operator>=</operator> <name>length</name></expr>;
    <expr><name>binaryOffset</name> <operator>=</operator> <name>offset</name></expr>;
  }</block>
  
  
   <comment type="block" format="javadoc">/** Expert: change the value of this field.  See &lt;a href="#setValue(java.lang.String)"&gt;setValue(String)&lt;/a&gt;. */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>setValue</name><argument_list>(<argument><expr><name>TokenStream</name> <name>value</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>fieldsData</name> <operator>=</operator> <name>value</name></expr>;
@@ <expr><operator>-</operator><literal type="number">378</literal></expr>,<expr><literal type="number">34</literal> <operator>+</operator><literal type="number">405</literal></expr>,<expr><literal type="number">49</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>Field</name> extends <name>AbstractField</name> implements <name>Fieldable</name></expr>, <expr><name>Serializabl</name>
    <operator>*</operator> @<throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws></expr> <if_stmt><if>if store is &lt;code&gt;Store.NO&lt;/code&gt; 
    */
   public Field<condition>(<expr><name>String</name> <name>name</name></expr><operator>,</operator> <expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr><operator>,</operator> <expr><name>Store</name> <name>store</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block_content></block></if></if_stmt>}</block>

  <comment type="block" format="javadoc">/**
   * Create a stored field with binary value. Optionally the value may be compressed.
   * 
   * @param name The name of the field
   * @param value The binary value
   * @param offset Starting offset in value where this Field's bytes are
   * @param length Number of bytes to use for this Field, starting at offset
   * @param store How &lt;code&gt;value&lt;/code&gt; should be stored (compressed or not)
   * @throws IllegalArgumentException if store is &lt;code&gt;Store.NO&lt;/code&gt; 
   */</comment>
  <specifier>public</specifier> <call><name>Field</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>, <argument><expr><name>Store</name> <name>store</name></expr></argument>)</argument_list></call> <block>{

     <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"name cannot be null"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"value cannot be null"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fieldsData</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fieldsData</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
     
    <if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name><name>Store</name><operator>.</operator><name>YES</name></name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isStored</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCompressed</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name><name>Store</name><operator>.</operator><name>YES</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isStored</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>isCompressed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
     </block_content>}</block></if>
     <if type="elseif">else if <condition>(<expr><name>store</name> <operator>==</operator> <name><name>Store</name><operator>.</operator><name>COMPRESS</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isStored</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCompressed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>isStored</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>isCompressed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
     </block_content>}</block></if>
     <if type="elseif">else if <condition>(<expr><name>store</name> <operator>==</operator> <name><name>Store</name><operator>.</operator><name>NO</name></name></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"binary values can't be unstored"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
     <else>else<block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"unknown store parameter "</literal> <operator>+</operator> <name>store</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
     
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isIndexed</name></name>   <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTokenized</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>isIndexed</name>   <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>isTokenized</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
     
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isBinary</name></name>    <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>isBinary</name>    <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>binaryLength</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>binaryOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
     
     <expr_stmt><expr><call><name>setStoreTermVector</name><argument_list>(<argument><expr><name><name>TermVector</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>


 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Fieldable</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Fieldable</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">919ca30bfb6</literal><operator>..</operator><literal type="number">8fc11b48b91</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Fieldable</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>Fieldable</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">45</literal> @@ <specifier>public</specifier> interface <name>Fieldable</name> extends <name>Serializable</name> <block>{
    <expr><operator>*</operator> @</expr><return>return <expr><literal type="boolean">true</literal></expr></return> <if_stmt><if>if this field can be loaded lazily
    */
   boolean isLazy<condition>()</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
  
  <comment type="block" format="javadoc">/**
   * Returns offset into byte[] segment that is used as value, if Field is not binary
   * returned value is undefined
   * @return index of the first character in byte[] segment that represents this Field value
   */</comment>
  <specifier>abstract</specifier> <name>int</name> <call><name>getBinaryOffset</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
  
  <comment type="block" format="javadoc">/**
   * Returns length of byte[] segment that is used as value, if Field is not binary
   * returned value is undefined
   * @return length of byte[] segment that represents this Field value
   */</comment>
  <function_decl><type><specifier>abstract</specifier> <name>int</name></type> <name>getBinaryLength</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Return the raw byte[] for the binary field.  Note that
   * you must also call {@link #getBinaryLength} and {@link
   * #getBinaryOffset} to know which range of bytes in this
   * returned array belong to the field.
   * @return reference to the Field value as byte[].
   */</comment>
  <function_decl><type><specifier>abstract</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBinaryValue</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Return the raw byte[] for the binary field.  Note that
   * you must also call {@link #getBinaryLength} and {@link
   * #getBinaryOffset} to know which range of bytes in this
   * returned array belong to the field.&lt;p&gt;
   * About reuse: if you pass in the result byte[] and it is
   * used, likely the underlying implementation will hold
   * onto this byte[] and return it in future calls to
   * {@link #binaryValue()} or {@link #getBinaryValue()}.
   * So if you subsequently re-use the same byte[] elsewhere
   * it will alter this Fieldable's value.
   * @param result  User defined buffer that will be used if
   *  possible.  If this is null or not large enough, a new
   *  buffer is allocated
   * @return reference to the Field value as byte[].
   */</comment>
  <function_decl><type><specifier>abstract</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBinaryValue</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">17060cf8337</literal><operator>..</operator><name>e6872da0f4f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">450</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">450</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>final</name> <name>class</name> <name>FieldsReader</name> <block>{
      <expr><operator>*</operator> <name>String</name> <name>value</name></expr>, <expr><name>or</name> <name>TokenStream</name> <name>value</name> <name>is</name> <name><name>used</name><operator>.</operator> <name>Exactly</name></name> <name>one</name> <name>of</name> <call><name>stringValue</name><argument_list>()</argument_list></call></expr>, 
      <expr><operator>*</operator> <call><name>readerValue</name><argument_list>()</argument_list></call></expr>, <expr><call><name>binaryValue</name><argument_list>()</argument_list></call></expr>, <expr><name>and</name> <call><name>tokenStreamValue</name><argument_list>()</argument_list></call> <name>must</name> <name>be</name> <name><name>set</name><operator>.</operator></name> *<operator>/</operator>
     <specifier>public</specifier> <name><name>byte</name><index>[]</index></name> <call><name>binaryValue</name><argument_list>()</argument_list></call> <block>{
      <expr><call><name>ensureOpen</name><argument_list>()</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>isBinary</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fieldsData</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>toRead</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>IndexInput</name></type> <name>localFieldsStream</name> <init>= <expr><call><name>getFieldStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">//Throw this IO Exception since IndexReader.document does so anyway, so probably not that big of a change for people</comment>
          <comment type="line">//since they are already handling this exception when getting the document</comment>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>localFieldsStream</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localFieldsStream</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>isCompressed</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>fieldsData</name> <operator>=</operator> <call><name>uncompress</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></if></if_stmt></block_content></block></try></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
              <expr_stmt><expr><name>fieldsData</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></else></if_stmt>}</block></expr></expr_stmt>
          } catch <expr_stmt><expr><operator>(</operator><name>IOException</name> <name>e</name><operator>)</operator> <block>{
            <throw>throw <argument_list>new <argument><expr><call><name>FieldReaderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
          }</block></expr></expr_stmt>
        }
        return <expr_stmt><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>fieldsData</name></expr>;</expr_stmt>
      } else
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      <return>return <expr><call><name>getBinaryValue</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
     }
 
     <comment type="block" format="javadoc">/** The value of the field as a Reader, or null.  If null, the String value,
@@ -545,8 +524,45 @@ final class FieldsReader {
       ensureOpen();
       this.toRead = toRead;
     }
  }
 
    public byte[] getBinaryValue(byte[] result) {
      ensureOpen();

      if (isBinary) {
        if (fieldsData == null) {
          // Allocate new buffer if result is null or too small
          final byte[] b;
          if (result == null || result.length &lt; toRead)
            b = new byte[toRead];
          else
            b = result;
   
          IndexInput localFieldsStream = getFieldStream();

          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people
          // since they are already handling this exception when getting the document
          try {
            localFieldsStream.seek(pointer);
            localFieldsStream.readBytes(b, 0, toRead);
            if (isCompressed == true) {
              fieldsData = uncompress(b);
            } else {
              fieldsData = b;
            }
          } catch (IOException e) {
            throw new FieldReaderException(e);
          }

          binaryOffset = 0;
          binaryLength = toRead;
        }

        return (byte[]) fieldsData;
      } else
        return null;     
    }
  }
  
   private final byte[] uncompress(final byte[] input)
           throws CorruptIndexException, IOException {
 
diff --git a/src/java/org/apache/lucene/index/FieldsWriter.java b/src/java/org/apache/lucene/index/FieldsWriter.java
index 87e0496a4c4..dd0b043e433 100644
-- a/src/java/org/apache/lucene/index/FieldsWriter.java
++ b/src/java/org/apache/lucene/index/FieldsWriter.java
@@ -105,7 +105,7 @@ final class FieldsWriter
         doClose = true;
     }
 
    FieldsWriter(IndexOutput fdx, IndexOutput fdt, FieldInfos fn) throws IOException {
    FieldsWriter(IndexOutput fdx, IndexOutput fdt, FieldInfos fn) {
         fieldInfos = fn;
         fieldsStream = fdt;
         indexStream = fdx;
@@ -190,32 +190,42 @@ final class FieldsWriter
                 
       if (field.isCompressed()) {
         // compression is enabled for the current field
        byte[] data = null;
                  
        final byte[] data;
        final int len;
        final int offset;
         if (disableCompression) {
           // optimized case for merging, the data
           // is already compressed
          data = field.binaryValue();
          data = field.getBinaryValue();
          len = field.getBinaryLength();
          offset = field.getBinaryOffset();  
         } else {
           // check if it is a binary field
           if (field.isBinary()) {
            data = compress(field.binaryValue());
          }
          else {
            data = compress(field.stringValue().getBytes("UTF-8"));
            data = compress(field.getBinaryValue(), field.getBinaryOffset(), field.getBinaryLength());
          } else {
            byte x[] = field.stringValue().getBytes("UTF-8");
            data = compress(x, 0, x.length);
           }
          len = data.length;
          offset = 0;
         }
        final int len = data.length;
        
         fieldsStream.writeVInt(len);
        fieldsStream.writeBytes(data, len);
        fieldsStream.writeBytes(data, offset, len);
       }
       else {
         // compression is disabled for the current field
         if (field.isBinary()) {
          byte[] data = field.binaryValue();
          final int len = data.length;
          final byte[] data;
          final int len;
          final int offset;
          data = field.getBinaryValue();
          len = field.getBinaryLength();
          offset =  field.getBinaryOffset();

           fieldsStream.writeVInt(len);
          fieldsStream.writeBytes(data, len);
          fieldsStream.writeBytes(data, offset, len);
         }
         else {
           fieldsStream.writeString(field.stringValue());
@@ -259,7 +269,14 @@ final class FieldsWriter
         }
     }
 
    private final byte[] compress (byte[] input) {
    private final byte[] compress (byte[] input, int offset, int length) {
      // Create the compressor with highest level of compression
      Deflater compressor = new Deflater();
      compressor.setLevel(Deflater.BEST_COMPRESSION);

      // Give the compressor the data to compress
      compressor.setInput(input, offset, length);
      compressor.finish();
 
       /*
        * Create an expandable byte array to hold the compressed data.
@@ -267,10 +284,7 @@ final class FieldsWriter
        * there is no guarantee that the compressed data will be smaller than
        * the uncompressed data.
        */</comment>
      ByteArrayOutputStream <expr_stmt><expr><name>bos</name> <operator>=</operator> <operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Create the compressor with highest level of compression</comment>
      <decl_stmt><decl><type><name>Deflater</name></type> <name>compressor</name> <init>= <expr><operator>new</operator> <call><name>Deflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <try>try <block>{<block_content>
         <expr_stmt><expr><call><name><name>compressor</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>Deflater</name><operator>.</operator><name>BEST_COMPRESSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">53170bc0c13</literal><operator>..</operator><name>c8de7a86e2e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">3765</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">3765</literal></expr><operator>,</operator><expr><literal type="number">36</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriter</name> extends <name>LuceneTestCase</name>
     <name><name>w</name><operator>.</operator><name>doFail</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>rollback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></try>


  <comment type="line">// LUCENE-1219</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testBinaryFieldOffsetLength</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>MockRAMDirectory</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>MockRAMDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>WhitespaceAnalyzer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>IndexWriter</name><operator>.</operator><name>MaxFieldLength</name><operator>.</operator><name>UNLIMITED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">77</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
    
    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Field</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><literal type="string">"binary"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bx</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>bx</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name><name>bx</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getBinaryOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IndexReader</name></type> <name>ir</name> <init>= <expr><call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>ir</name><operator>.</operator><name>document</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>doc</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
 }
- 
<expr><literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
