<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/bf00c1a0a7.java"><expr_stmt><expr><name>From</name> <name>bf00c1a0a75df877b163bcabf52d52e145b6dc92</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Mar</name> <literal type="number">2015</literal> <literal type="number">01</literal><operator>:</operator><literal type="number">53</literal><operator>:</operator><literal type="number">41</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">7259</literal><operator>:</operator> <name>fix</name> <name>thread</name> <name>safety</name> <name>of</name> <name>lazy</name> <name>loaded</name> <name>plugins</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1667431 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PluginBag</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">50</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">1</literal> <name>file</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">33</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">17</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PluginBag</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PluginBag</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1122d4943e4</literal><operator>..</operator><literal type="number">1a4141203e4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PluginBag</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PluginBag</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>PluginBag</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>AutoCloseable</name> <block>{
    <expr><operator>*</operator> <name>subclasses</name> <name>may</name> <name>choose</name> <name>to</name> <name>lazily</name> <name>load</name> <name>the</name> <name>plugin</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name><name>PluginHolder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>AutoCloseable</name> <block>{
    <expr><specifier>protected</specifier> <name>T</name> <name>inst</name></expr>;
    <expr><specifier>private</specifier> <name>T</name> <name>inst</name></expr>;
     <expr><specifier>protected</specifier> <name>final</name> <name>PluginInfo</name> <name>pluginInfo</name></expr>;
 
     <expr><specifier>public</specifier> <call><name>PluginHolder</name><argument_list>(<argument><expr><name>PluginInfo</name> <name>info</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">257</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">257</literal></expr>,<expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>PluginBag</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>AutoCloseable</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr>
      <if_stmt><if>if <condition>(<expr><name>inst</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>inst</name> <operator>instanceof</operator> <name>AutoCloseable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>AutoCloseable</name><operator>)</operator> <name>inst</name><operator>)</operator><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>

      <comment type="line">// TODO: there may be a race here.  One thread can be creating a plugin</comment>
      <comment type="line">// and another thread can come along and close everything (missing the plugin</comment>
      <comment type="line">// that is in the state of being created and will probably never have close() called on it).</comment>
      <comment type="line">// can close() be called concurrently with other methods?</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isLoaded</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>T</name></type> <name>myInst</name> <init>= <expr><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>myInst</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>myInst</name> <operator>instanceof</operator> <name>AutoCloseable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>AutoCloseable</name><operator>)</operator> <name>myInst</name><operator>)</operator><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
     }</block>
 
     <specifier>public</specifier> <name>String</name> <call><name>getClassName</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">273</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">279</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>PluginBag</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>AutoCloseable</name> <block>{
    <expr><operator>*</operator> <name>the</name> <name>Plugin</name> <name>is</name> <name>initialized</name> <name>and</name> <name><name>returned</name><operator>.</operator></name>
    *<operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name><name>LazyPluginHolder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> extends <name><name>PluginHolder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
    <expr><specifier>private</specifier> <specifier>volatile</specifier> <name>T</name> <name>lazyInst</name></expr>;
     <expr><specifier>private</specifier> <name>final</name> <name><name>SolrConfig</name><operator>.</operator><name>SolrPluginInfo</name></name> <name>pluginMeta</name></expr>;
     <expr><specifier>protected</specifier> <name>SolrException</name> <name>solrException</name></expr>;
     <expr><specifier>private</specifier> <name>final</name> <name>SolrCore</name> <name>core</name></expr>;
@@ <expr><operator>-</operator><literal type="number">293</literal></expr>,<expr><literal type="number">37</literal> <operator>+</operator><literal type="number">300</literal></expr>,<expr><literal type="number">46</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>PluginBag</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>AutoCloseable</name> <block>{
       }</block></expr>
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name>boolean</name> <call><name>isLoaded</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><name>lazyInst</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return></block></expr>
    }</block>

     @<name>Override</name>
     <specifier>public</specifier> <name>T</name> <call><name>get</name><argument_list>()</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><name>inst</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>inst</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
      <if_stmt><if>if <condition>(<expr><name>lazyInst</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lazyInst</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
       <if_stmt><if>if <condition>(<expr><name>solrException</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><name>solrException</name></expr>;</throw></block_content></block></if></if_stmt>
      <call><name>createInst</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>pluginInfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>inst</name></expr>;</return>
      <if_stmt><if>if <condition>(<expr><call><name>createInst</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// check if we created the instance to avoid registering it again</comment>
        <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>lazyInst</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>pluginInfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>lazyInst</name></expr>;</return>
     }
 
    protected <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>createInst</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>inst</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>createInst</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>lazyInst</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Going to create a new {} with {} "</literal></expr></argument>, <argument><expr><name><name>pluginMeta</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><call><name><name>pluginInfo</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>resourceLoader</name> <operator>instanceof</operator> <name>MemClassLoader</name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>MemClassLoader</name></type> <name>loader</name> <init>= <expr><operator>(</operator><name>MemClassLoader</name><operator>)</operator> <name>resourceLoader</name></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>loadJars</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><operator>(</operator><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><operator>)</operator> <name><name>pluginMeta</name><operator>.</operator><name>clazz</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>createInstance</name></name><argument_list>(<argument><expr><name><name>pluginInfo</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name><name>pluginMeta</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>resourceLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>initInstance</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>pluginInfo</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>inst</name> <operator>instanceof</operator> <name>SolrCoreAware</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>assertAwareCompatibility</name></name><argument_list>(<argument><expr><name><name>SolrCoreAware</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SolrCoreAware</name><operator>)</operator> <name>inst</name><operator>)</operator><operator>.</operator><call><name>inform</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>T</name></type> <name>localInst</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>createInstance</name></name><argument_list>(<argument><expr><name><name>pluginInfo</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name><name>pluginMeta</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>resourceLoader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>initInstance</name><argument_list>(<argument><expr><name>localInst</name></expr></argument>, <argument><expr><name>pluginInfo</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>localInst</name> <operator>instanceof</operator> <name>SolrCoreAware</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>assertAwareCompatibility</name></name><argument_list>(<argument><expr><name><name>SolrCoreAware</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>localInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SolrCoreAware</name><operator>)</operator> <name>localInst</name><operator>)</operator><operator>.</operator><call><name>inform</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>inst</name> <operator>instanceof</operator> <name>ResourceLoaderAware</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>assertAwareCompatibility</name></name><argument_list>(<argument><expr><name><name>ResourceLoaderAware</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>localInst</name> <operator>instanceof</operator> <name>ResourceLoaderAware</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SolrResourceLoader</name><operator>.</operator><name>assertAwareCompatibility</name></name><argument_list>(<argument><expr><name><name>ResourceLoaderAware</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>localInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <try>try <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ResourceLoaderAware</name><operator>)</operator> <name>inst</name><operator>)</operator><operator>.</operator><call><name>inform</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ResourceLoaderAware</name><operator>)</operator> <name>localInst</name><operator>)</operator><operator>.</operator><call><name>inform</name><argument_list>(<argument><expr><call><name><name>core</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"error initializing component"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch></try>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lazyInst</name> <operator>=</operator> <name>localInst</name></expr>;</expr_stmt>  <comment type="line">// only assign the volatile until after the plugin is completely ready to use</comment>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
 
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function>

</unit>
