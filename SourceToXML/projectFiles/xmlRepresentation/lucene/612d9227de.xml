<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/612d9227de.java"><expr_stmt><expr><name>From</name> <literal type="number">612d9227dec4803fd648d605592ff72d9a2a2355</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">2</literal> <name>May</name> <literal type="number">2012</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">33</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">3427</literal><operator>:</operator> <name>fix</name> <name>NPE</name> <name>in</name> <name>UnInvertedField</name> <name>faceting</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1333125 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocTermOrds</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>TestRandomFaceting</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">252</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>SolrTestCaseJ4</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">260</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">7</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>TestRandomFaceting</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocTermOrds</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocTermOrds</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">677facbf6e1</literal><operator>..</operator><literal type="number">4b120b6a47e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocTermOrds</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocTermOrds</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">195</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">195</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocTermOrds</name> <block>{
    <expr><operator>*</operator>  <operator>&lt;</operator><name>p</name><operator>&gt;</operator><operator>&lt;</operator><name>b</name><operator>&gt;</operator><name><name>NOTE</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>b</name></argument>&gt;</argument_list></name><operator>:</operator> <name>you</name> <name>must</name> <name>pass</name> <name>the</name> <name>same</name> <name>reader</name> <name>that</name> <name>was</name>
    <operator>*</operator>  <name>used</name> <name>when</name> <name>creating</name> <name>this</name> <name>class</name> <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>TermsEnum</name> <call><name>getOrdTermsEnum</name><argument_list>(<argument><expr><name>AtomicReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <if_stmt><if>if <condition>(<expr><name>termInstances</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>indexedTermsArray</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <comment type="line">//System.out.println("GET normal enum");</comment>
       <decl_stmt><decl><type><specifier>final</specifier> <name>Fields</name></type> <name>fields</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>fields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">511</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">508</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocTermOrds</name> <block>{
           <break>break;</break>
       }</block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>indexedTerms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>indexedTermsArray</name> <operator>=</operator> <call><name><name>indexedTerms</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>BytesRef</name><index>[<expr><call><name><name>indexedTerms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>indexedTerms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>indexedTermsArray</name> <operator>=</operator> <call><name><name>indexedTerms</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>BytesRef</name><index>[<expr><call><name><name>indexedTerms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <decl_stmt><decl><type><name>long</name></type> <name>endTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>TestRandomFaceting</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>TestRandomFaceting</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..b4b1fa21489</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>TestRandomFaceting</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">252</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>_TestUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>noggit</name><operator>.</operator><name>JSONUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>noggit</name><operator>.</operator><name>ObjectBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>ModifiableSolrParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>TestUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>TestRandomFaceting</name> <super_list><extends>extends <super><name>SolrTestCaseJ4</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FOO_STRING_FIELD</name> <init>= <expr><literal type="string">"foo_s1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SMALL_STRING_FIELD</name> <init>= <expr><literal type="string">"small_s1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SMALL_INT_FIELD</name> <init>= <expr><literal type="string">"small_i"</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeTests</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig.xml"</literal></expr></argument>,<argument><expr><literal type="string">"schema12.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <decl_stmt><decl><type><name>int</name></type> <name>indexSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FldType</name></argument>&gt;</argument_list></name></type> <name>types</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Comparable</name></argument>, <argument><name>Doc</name></argument>&gt;</argument_list></name></type> <name>model</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>boolean</name></type> <name>validateResponses</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

  <function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>clearIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>model</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>indexSize</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><name>types</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FldType</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>,<argument><expr><name>ONE_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'Z'</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"score_f"</literal></expr></argument>,<argument><expr><name>ONE_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FVal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"foo_i"</literal></expr></argument>,<argument><expr><name>ZERO_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>indexSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small_s"</literal></expr></argument>,<argument><expr><name>ZERO_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'c'</literal><operator>+</operator><name>indexSize</name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small2_s"</literal></expr></argument>,<argument><expr><name>ZERO_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'c'</literal><operator>+</operator><name>indexSize</name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small2_ss"</literal></expr></argument>,<argument><expr><name>ZERO_TWO</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'c'</literal><operator>+</operator><name>indexSize</name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small3_ss"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'z'</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small_i"</literal></expr></argument>,<argument><expr><name>ZERO_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal><operator>+</operator><name>indexSize</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small2_i"</literal></expr></argument>,<argument><expr><name>ZERO_ONE</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal><operator>+</operator><name>indexSize</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small2_is"</literal></expr></argument>,<argument><expr><name>ZERO_TWO</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal><operator>+</operator><name>indexSize</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"small3_is"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"missing_i"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"missing_is"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"missing_s"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FldType</name><argument_list>(<argument><expr><literal type="string">"missing_ss"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>IRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>SVal</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TODO: doubles, multi-floats, ints with precisionStep&gt;0, booleans</comment>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>addMoreDocs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ndocs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>indexDocs</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>model</name></expr></argument>, <argument><expr><name>ndocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>deleteSomeDocs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>percent</name> <init>= <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>model</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ids</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>model</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Comparable</name></type> <name>id</name> <range>: <expr><call><name><name>model</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>percent</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ids</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name><name>ids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="string">"id:("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>id</name> <range>: <expr><name>ids</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>model</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>delQ</name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>optimize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="string">"softCommit"</literal></expr></argument>,<argument><expr><literal type="string">""</literal><operator>+</operator><operator>(</operator><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRandomFaceting</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addMoreDocs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>iter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>doFacetTests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>addMoreDocs</name><argument_list>(<argument><expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>indexSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>deleteSomeDocs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name>purgeFieldCache</name><argument_list>(<argument><expr><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// avoid FC insanity</comment>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>


  <function><type><name>void</name></type> <name>doFacetTests</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>FldType</name></type> <name>ftype</name> <range>: <expr><name>types</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>doFacetTests</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>


  <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>multiValuedMethods</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"enum"</literal></expr>,<expr><literal type="string">"fc"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>singleValuedMethods</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"enum"</literal></expr>,<expr><literal type="string">"fc"</literal></expr>,<expr><literal type="string">"fcs"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


  <function><type><name>void</name></type> <name>doFacetTests</name><parameter_list>(<parameter><decl><type><name>FldType</name></type> <name>ftype</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SolrQueryRequest</name></type> <name>req</name> <init>= <expr><call><name>req</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>validate</name> <init>= <expr><name>validateResponses</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ModifiableSolrParams</name></type> <name>params</name> <init>= <expr><call><name>params</name><argument_list>(<argument><expr><literal type="string">"facet"</literal></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>,<argument><expr><literal type="string">"json"</literal></expr></argument>, <argument><expr><literal type="string">"indent"</literal></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"omitHeader"</literal></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>,<argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>,<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO: select subsets</comment>
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"rows"</literal></expr></argument>,<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <decl_stmt><decl><type><name>SchemaField</name></type> <name>sf</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getField</name><argument_list>(<argument><expr><name><name>ftype</name><operator>.</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>multiValued</name> <init>= <expr><call><name><name>sf</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>multiValuedFieldCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>offset</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>indexSize</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>indexSize</name><operator>/</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"facet.offset"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>limit</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>indexSize</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>indexSize</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"index"</literal></expr> </then><else>: <expr><literal type="string">"count"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ftype</name><operator>.</operator><name>vals</name></name> <operator>instanceof</operator> <name>SVal</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// validate = false;</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>ftype</name><operator>.</operator><name>createValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator>  <call><name><name>_TestUtil</name><operator>.</operator><name>randomUnicodeString</name></name><argument_list>(<argument><expr><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>Character</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>prefix</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"facet.prefix"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"facet.missing"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// TODO: randomly add other facet params</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><name><name>ftype</name><operator>.</operator><name>fname</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>facet_field</name> <init>= <expr><name><name>ftype</name><operator>.</operator><name>fname</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="string">"alternate_key"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>facet_field</name> <operator>=</operator> <literal type="string">"{!key="</literal><operator>+</operator><name>key</name><operator>+</operator><literal type="string">"}"</literal><operator>+</operator><name><name>ftype</name><operator>.</operator><name>fname</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><name>facet_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>methods</name> <init>= <expr><ternary><condition><expr><name>multiValued</name></expr> ?</condition><then> <expr><name>multiValuedMethods</name></expr> </then><else>: <expr><name>singleValuedMethods</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>methods</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>method</name> <range>: <expr><name>methods</name></expr></range></decl></init>)</control> <block>{<block_content>
        <comment type="line">// params.add("facet.field", "{!key="+method+"}" + ftype.fname);</comment>
        <comment type="line">// TODO: allow method to be passed on local params?</comment>

        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"facet.method"</literal></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if (random().nextBoolean()) params.set("facet.mincount", "1");  // uncomment to test that validation fails</comment>

        <decl_stmt><decl><type><name>String</name></type> <name>strResponse</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Object realResponse = ObjectBuilder.fromJSON(strResponse);</comment>
        <comment type="line">// System.out.println(strResponse);</comment>

        <expr_stmt><expr><call><name><name>responses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>strResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="block" format="javadoc">/**
      String strResponse = h.query(req(params));
      Object realResponse = ObjectBuilder.fromJSON(strResponse);
      **/</comment>

      <if_stmt><if>if <condition>(<expr><name>validate</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>methods</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>err</name> <init>= <expr><call><name><name>JSONTestUtil</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"ERROR: mismatch facet response: "</literal> <operator>+</operator> <name>err</name> <operator>+</operator>
                <literal type="string">"\n expected ="</literal> <operator>+</operator> <call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                <literal type="string">"\n response = "</literal> <operator>+</operator> <call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator>
                <literal type="string">"\n request = "</literal> <operator>+</operator> <name>params</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>


    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

}</block></class>


<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>SolrTestCaseJ4</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>SolrTestCaseJ4</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c259686a35a</name><operator>..</operator><name>af666e5ed4c</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>SolrTestCaseJ4</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>SolrTestCaseJ4</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1154</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1154</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>SolrTestCaseJ4</name> extends <name>LuceneTestCase</name> <block>{
     <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>optimize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="string">"softCommit"</literal></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block></else></if_stmt>
 
     <comment type="line">// merging segments no longer selects just adjacent segments hence ids (doc.order) can be shuffled.</comment>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
