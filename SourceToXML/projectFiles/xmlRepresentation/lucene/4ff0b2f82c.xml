<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/4ff0b2f82c.java"><expr_stmt><expr><name>From</name> <literal type="number">4ff0b2f82c6b87266d9bab90cb273dab39bd6dda</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Christopher</name> <name>John</name> <name><name>Male</name> <argument_list type="generic">&lt;<argument><name>chrism</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sun</name></expr><operator>,</operator> <expr><literal type="number">25</literal> <name>Sep</name> <literal type="number">2011</literal> <literal type="number">05</literal><operator>:</operator><literal type="number">10</literal><operator>:</operator><literal type="number">25</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <name>Collapsing</name> <name>Analyzer</name> <name>and</name> <name>ReusableAnalyzerBase</name>
 <name>together</name></expr><operator>,</operator> <expr><name>mandating</name> <name>use</name> <name>of</name> <name>TokenStreamComponents</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1175297 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <name>lucene</name><operator>/</operator><name><name>MIGRATE</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>highlight</name><operator>/</operator><name><name>OffsetLimitTokenFilterTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>TokenSourcesTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>AbstractTestCase</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>IndexTimeSynonymTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">357</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name><operator>.</operator><name>old</name></name>  <operator>|</operator> <literal type="number">155</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>AnalyzerWrapper</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">89</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">308</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>TestAssertions</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterCommit</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterDelete</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLazyProxSkipping</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestMultiLevelSkipList</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>TestSameTokenSamePosition</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermVectorsReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermdocPerf</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositionIncrement</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ar</name><operator>/</operator><name><name>ArabicAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>bg</name><operator>/</operator><name><name>BulgarianAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>br</name><operator>/</operator><name><name>BrazilianAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ca</name><operator>/</operator><name><name>CatalanAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>ChineseAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>KeywordAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SimpleAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>StopAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>WhitespaceAnalyzer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cz</name><operator>/</operator><name><name>CzechAnalyzer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>da</name><operator>/</operator><name><name>DanishAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>GermanAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>el</name><operator>/</operator><name><name>GreekAnalyzer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>EnglishAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>es</name><operator>/</operator><name><name>SpanishAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>eu</name><operator>/</operator><name><name>BasqueAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>fa</name><operator>/</operator><name><name>PersianAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>fi</name><operator>/</operator><name><name>FinnishAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>fr</name><operator>/</operator><name><name>FrenchAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>gl</name><operator>/</operator><name><name>GalicianAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>hi</name><operator>/</operator><name><name>HindiAnalyzer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>hu</name><operator>/</operator><name><name>HungarianAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>hy</name><operator>/</operator><name><name>ArmenianAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>id</name><operator>/</operator><name><name>IndonesianAnalyzer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>it</name><operator>/</operator><name><name>ItalianAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>lv</name><operator>/</operator><name><name>LatvianAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>LimitTokenCountAnalyzer</name><operator>.</operator><name>java</name></name>              <operator>|</operator>  <literal type="number">33</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzer</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>PerFieldAnalyzerWrapper</name><operator>.</operator><name>java</name></name>              <operator>|</operator>  <literal type="number">45</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>nl</name><operator>/</operator><name><name>DutchAnalyzer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>no</name><operator>/</operator><name><name>NorwegianAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>pt</name><operator>/</operator><name><name>PortugueseAnalyzer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>query</name><operator>/</operator><name><name>QueryAutoStopWordAnalyzer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">84</literal> <operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ro</name><operator>/</operator><name><name>RomanianAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ru</name><operator>/</operator><name><name>RussianAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>shingle</name><operator>/</operator><name><name>ShingleAnalyzerWrapper</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">53</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>snowball</name><operator>/</operator><name><name>SnowballAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>sv</name><operator>/</operator><name><name>SwedishAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>th</name><operator>/</operator><name><name>ThaiAnalyzer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>tr</name><operator>/</operator><name><name>TurkishAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>util</name><operator>/</operator><name><name>StopwordAnalyzerBase</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>collation</name><operator>/</operator><name><name>CollationKeyAnalyzer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>TestChineseTokenizer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestStandardAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>TestUAX29URLEmailTokenizer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanLightStemFilter</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanMinimalStemFilter</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanStemFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>en</name><operator>/</operator><name><name>TestEnglishMinimalStemFilter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestKStemmer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestPorterStemFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>es</name><operator>/</operator><name><name>TestSpanishLightStemFilter</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>fi</name><operator>/</operator><name><name>TestFinnishLightStemFilter</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>fr</name><operator>/</operator><name><name>TestFrenchLightStemFilter</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>fr</name><operator>/</operator><name><name>TestFrenchMinimalStemFilter</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>gl</name><operator>/</operator><name><name>TestGalicianStemFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hu</name><operator>/</operator><name><name>TestHungarianLightStemFilter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>id</name><operator>/</operator><name><name>TestIndonesianStemmer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>it</name><operator>/</operator><name><name>TestItalianLightStemFilter</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>lv</name><operator>/</operator><name><name>TestLatvianStemmer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name>              <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>pt</name><operator>/</operator><name><name>TestPortugueseLightStemFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>pt</name><operator>/</operator><name><name>TestPortugueseMinimalStemFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>pt</name><operator>/</operator><name><name>TestPortugueseStemFilter</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>ru</name><operator>/</operator><name><name>TestRussianLightStemFilter</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>snowball</name><operator>/</operator><name><name>TestSnowballVocab</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>sv</name><operator>/</operator><name><name>TestSwedishLightStemFilter</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>synonym</name><operator>/</operator><name><name>TestSolrSynonymParser</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>synonym</name><operator>/</operator><name><name>TestSynonymMapFilter</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">21</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>synonym</name><operator>/</operator><name><name>TestWordnetSynonymParser</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestCollationKeyFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>collation</name><operator>/</operator><name><name>ICUCollationKeyAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUFoldingFilter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUNormalizer2Filter</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUTransformFilter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>icu</name><operator>/</operator><name>segmentation</name><operator>/</operator><name><name>TestICUTokenizer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestICUCollationKeyFilter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>morfologik</name><operator>/</operator><name><name>MorfologikAnalyzer</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>cn</name><operator>/</operator><name>smart</name><operator>/</operator><name><name>SmartChineseAnalyzer</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>pl</name><operator>/</operator><name><name>PolishAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>CategoryListIteratorTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>TestAnalyzingQueryParser</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name>            <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiFieldQueryParser</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiPhraseQueryParsing</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestMultiAnalyzerQPHelper</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestMultiFieldQPHelper</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>flexible</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>queryparser</name><operator>/</operator><name>util</name><operator>/</operator><name><name>QueryParserTestBase</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name><name>FSTSynonymFilterFactory</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>SolrAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">44</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>TokenizerChain</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">23</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name><name>AnalysisRequestHandlerBase</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>BoolField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchema</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">45</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchemaRuntimeFieldTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">72</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchemaTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">63</literal> <operator>+</operator><operator>--</operator><operator>-</operator>
 <name>solr</name><operator>/</operator><name>webapp</name><operator>/</operator><name>web</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>analysis</name><operator>.</operator><name>jsp</name></name>            <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">136</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">890</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">943</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name><operator>.</operator><name>old</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>AnalyzerWrapper</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchemaRuntimeFieldTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>bfc37f7bf41</name><operator>..</operator><literal type="number">84e5359b2ee</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">174</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">174</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>Changes</name> <name>in</name> <name>backwards</name> <name>compatibility</name> <name>policy</name>
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <call><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>TokenStreamComponents</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call> <name>now</name> <name>returns</name> <name>void</name> <name>instead</name>
   <name>of</name> <name><name>boolean</name><operator>.</operator>  <name>If</name></name> <name>a</name> <name>Component</name> <name>cannot</name> <name>be</name> <name>reset</name></expr><operator>,</operator> <expr><name>it</name> <name>should</name> <throw>throw <argument_list>an <argument><expr><name><name>Exception</name><operator>.</operator></name>  (<name>Chris</name> <name>Male</name></expr></argument>)</argument_list></throw>
 
<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <name>ReusableAnalyzerBase</name> <name>has</name> <name>been</name> <name>renamed</name> <name>to</name> <name><name>Analyzer</name><operator>.</operator>  <name>All</name></name> <name>Analyzer</name> <name>implementations</name>
  <name>must</name> <name>now</name> <name>use</name> <name><name>Analyzer</name><operator>.</operator><name>TokenStreamComponents</name></name></expr><operator>,</operator> <expr><name>rather</name> <name>than</name> <call><name><name>overriding</name> <operator>.</operator><name>tokenStream</name></name><argument_list>()</argument_list></call> <call><name><name>and</name>
  <operator>.</operator><name>reusableTokenStream</name></name><argument_list>()</argument_list></call> <operator>(</operator><name>which</name> <name>are</name> <name>now</name> <name>final</name><operator>)</operator><operator>.</operator> <operator>(</operator><name>Chris</name> <name>Male</name><operator>)</operator>

 <name>Changes</name> <name>in</name> <name>Runtime</name> <name>Behavior</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2846</literal><operator>:</operator> <name>omitNorms</name> <name>now</name> <name>behaves</name> <name>like</name> <name>omitTermFrequencyAndPositions</name></expr><operator>,</operator></expr_stmt> <if_stmt><if>if you
diff --git a/lucene/MIGRATE.txt b/lucene/MIGRATE.txt
index 8cf47a8e6f8..be1dc184ea0 100644
-- a/lucene/MIGRATE.txt
++ b/lucene/MIGRATE.txt
@@ -517<operator>,</operator><expr_stmt><expr><literal type="number">3</literal> <operator>+</operator><literal type="number">517</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>If</name> <name>you</name> <name>did</name> <name>this</name> <call><name>before</name> <argument_list>(<argument><expr><name>bytes</name> <name>is</name> <name>a</name> <name><name>byte</name><index>[]</index></name></expr></argument>)</argument_list></call><operator>:</operator>
 <name>you</name> <name>can</name> <name>now</name></expr></expr_stmt></if></if_stmt> <do>do<block type="pseudo"><block_content> <label><name>this</name>:</label>
 
   <expr_stmt><expr><operator>new</operator> <call><name>BinaryField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call>

<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <call><name><name>Analyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>()</argument_list></call> <call><name><name>and</name> <operator>.</operator><name>reusableTokenStream</name></name><argument_list>()</argument_list></call> <name>have</name> <name>been</name> <name>made</name> <name><name>final</name><operator>.</operator>
  <name>It</name></name> <name>is</name> <name>now</name> <name>necessary</name> <name>to</name> <name>use</name> <name><name>Analyzer</name><operator>.</operator><name>TokenStreamComponents</name></name> <name>to</name> <name>define</name> <name>an</name> <name>analysis</name> <name><name>process</name><operator>.</operator>
  <name>Analyzer</name></name> <name>also</name> <name>has</name> <name>its</name> <name>own</name> <name>way</name> <name>of</name> <name>managing</name> <name>the</name> <name>reuse</name> <name>of</name> <call><name>TokenStreamComponents</name> <argument_list>(<argument><expr><name>either</name>
  <name>globally</name></expr></argument>, <argument><expr><name>or</name> <name>per</name><operator>-</operator><name>field</name></expr></argument>)</argument_list></call><operator>.</operator>  <name>To</name> <name>define</name> <name>another</name> <name>Strategy</name></expr><operator>,</operator> <expr><name>implement</name> <name><name>Analyzer</name><operator>.</operator><name>ReuseStrategy</name><operator>.</operator></name>
\ <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2b2e176942b</literal><operator>..</operator><literal type="number">4f0369ad493</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1802</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1802</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>HighlighterTest</name> extends <name>BaseTokenStreamTestCase</name> implements <name>Formatte</name>
 <comment type="line">// behaviour to synonyms</comment>
 <comment type="line">// ===================================================================</comment>
 
<name>final</name> <name>class</name> <name>SynonymAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><name>final</name> <name>class</name> <name>SynonymAnalyzer</name> extends <name>Analyzer</name> <block>{
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>synonyms</name></expr>;
 
   <expr><specifier>public</specifier> <call><name>SynonymAnalyzer</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>synonyms</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>OffsetLimitTokenFilterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>OffsetLimitTokenFilterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8afcecd6f00</literal><operator>..</operator><name>d22d7215d4d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>OffsetLimitTokenFilterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>OffsetLimitTokenFilterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">49</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">49</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>OffsetLimitTokenFilterTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><call><name>assertTokenStreamContents</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"short"</literal></expr>, <expr><literal type="string">"toolong"</literal></expr>,
         <expr><literal type="string">"evenmuchlongertext"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;
     
    <expr><call><name>checkOneTermReuse</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
    <expr_stmt><expr><call><name>checkOneTermReuse</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>TokenSourcesTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>TokenSourcesTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0e0bb8585ab</literal><operator>..</operator><name>f482a674c44</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>TokenSourcesTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>TokenSourcesTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
 <class><specifier>public</specifier> class <name>TokenSourcesTest</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FIELD</name> <init>= <expr><literal type="string">"text"</literal></expr></init></decl>;</decl_stmt>
 
  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>OverlapAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>OverlapAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>AbstractTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>AbstractTestCase</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c28b3dac6c0</name><operator>..</operator><literal type="number">080252ba7f4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>AbstractTestCase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>AbstractTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractTestCase</name> extends <name>LuceneTestCase</name> <block>{
     <return>return <expr><name>phraseQuery</name></expr>;</return>
   }</block>
 
  <specifier>static</specifier> <name>final</name> class <name>BigramAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>static</specifier> <name>final</name> class <name>BigramAnalyzer</name> extends <name>Analyzer</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
       <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicNGramTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>IndexTimeSynonymTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>IndexTimeSynonymTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">433c6347bb2</literal><operator>..</operator><name>feb06b5e80a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>IndexTimeSynonymTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>highlighter</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>IndexTimeSynonymTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">290</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">290</literal><operator>,</operator><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>IndexTimeSynonymTest</name> extends <name>AbstractTestCase</name> <block>{
     <return>return <expr><name>token</name></expr>;</return>
   }</block></block>
   
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> class <name>TokenArrayAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> class <name>TokenArrayAnalyzer</name> extends <name>Analyzer</name> <block>{
     <expr><name>final</name> <name><name>Token</name><index>[]</index></name> <name>tokens</name></expr>;
     <expr><specifier>public</specifier> <call><name>TokenArrayAnalyzer</name><argument_list>(<argument><expr><name>Token</name><operator>...</operator> <name>tokens</name></expr></argument>)</argument_list></call> <block>{
       <expr><name><name>this</name><operator>.</operator><name>tokens</name></name> <operator>=</operator> <name>tokens</name></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9529250f7fc</literal><operator>..</operator><literal type="number">683bd8014fd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">6</literal> @@</expr>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name></name>;</package></block></expr>
 
<comment type="block" format="javadoc">/**
/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -17,98 +17,106 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */</comment>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import></block></expr>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import></block></expr>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import></block></expr></expr_stmt>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CloseableThreadLocal</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>AlreadyClosedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CloseableThreadLocal</name></name>;</import>
 
<comment type="block" format="javadoc">/** An Analyzer builds TokenStreams, which analyze text.  It thus represents a
 *  policy for extracting index terms from text.
 *  &lt;p&gt;
 *  Typical implementations first build a Tokenizer, which breaks the stream of
 *  characters from the Reader into raw Tokens.  One or more TokenFilters may
 *  then be applied to the output of the Tokenizer.
import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;

/**
 * An Analyzer builds TokenStreams, which analyze text.  It thus represents a
 * policy for extracting index terms from text.
 * &lt;p&gt;
 * To prevent consistency problems, this class does not allow subclasses to
 * extend {@link #reusableTokenStream(String, Reader)} or
 * {@link #tokenStream(String, Reader)} directly. Instead, subclasses must
 * implement {@link #createComponents(String, Reader)}.
 * &lt;/p&gt;
  * &lt;p&gt;The {@code Analyzer}-API in Lucene is based on the decorator pattern.
 * Therefore all non-abstract subclasses must be final or their {@link #tokenStream}
 * and {@link #reusableTokenStream} implementations must be final! This is checked
 * Therefore all non-abstract subclasses must be final! This is checked
  * when Java assertions are enabled.
  */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Analyzer</name> <super_list><implements>implements <super><name>Closeable</name></super></implements></super_list> <block>{
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Analyzer</name> <block>{
 
  <constructor><specifier>protected</specifier> <name>Analyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <assert>assert <expr><call><name>assertFinal</name><argument_list>()</argument_list></call></expr>;</assert>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReuseStrategy</name></type> <name>reuseStrategy</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Analyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GlobalReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
  
  private boolean assertFinal(</block></constructor>)</block_content> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clazz</name><operator>.</operator><name>desiredAssertionStatus</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
      <assert>assert <expr><call><name><name>clazz</name><operator>.</operator><name>isAnonymousClass</name></name><argument_list>()</argument_list></call> <operator>||</operator>
        <operator>(</operator><call><name><name>clazz</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name><name>Modifier</name><operator>.</operator><name>FINAL</name></name> <operator>|</operator> <name><name>Modifier</name><operator>.</operator><name>PRIVATE</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator>
          <call><name><name>Modifier</name><operator>.</operator><name>isFinal</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"tokenStream"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Reader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getModifiers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <call><name><name>Modifier</name><operator>.</operator><name>isFinal</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"reusableTokenStream"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Reader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getModifiers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>)</operator> <operator>:</operator>
        <literal type="string">"Analyzer implementation classes or at least their tokenStream() and reusableTokenStream() implementations must be final"</literal></expr>;</assert>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <expr_stmt/>}</block_content> catch (NoSuchMethodException nsme</block></try>)</block_content> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    <expr_stmt/>}</block_content>

  public Analyzer(ReuseStrategy reuseStrategy</block></block></block></constructor>)</block> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reuseStrategy</name></name> <operator>=</operator> <name>reuseStrategy</name></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
 
  <comment type="block" format="javadoc">/** Creates a TokenStream which tokenizes all the text in the provided
   * Reader.  Must be able to handle null field name for
   * backward compatibility.
   */</comment>
  public abstract TokenStream tokenStream(String fieldName</block><operator>,</operator> <expr_stmt><expr><name>Reader</name> <name>reader</name></expr></expr_stmt></class></block></class></block_content></block></function></block></class></block></class></block></class></block_content></block></function></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" format="javadoc">/** Creates a TokenStream that is allowed to be re-used
   *  from the previous time that the same thread called
   *  this method.  Callers that do not need to use more
   *  than one TokenStream at the same time from this
   *  analyzer should use this method for better
   *  performance.
  /**
   * Creates a new {@link TokenStreamComponents} instance for this analyzer.
   * 
   * @param fieldName
   *          the name of the fields content passed to the
   *          {@link TokenStreamComponents} sink as a reader
   * @param aReader
   *          the reader passed to the {@link Tokenizer} constructor
   * @return the {@link TokenStreamComponents} for this analyzer.
    */</comment>
  <function><type><specifier>public</specifier> <name>TokenStream</name></type> <name>reusableTokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>tokenStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  <expr_stmt/>}</block_content>
  protected abstract TokenStreamComponents createComponents(String fieldName</block><operator>,</operator>
      Reader aReader</function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>
 
  <specifier>private</specifier> <name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <name>tokenStreams</name> <operator>=</operator> <operator>new</operator> <call><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;

  <comment type="block" format="javadoc">/** Used by Analyzers that implement reusableTokenStream
   *  to retrieve previously saved TokenStreams for re-use
   *  by the same thread. */</comment>
  <expr><specifier>protected</specifier> <name>Object</name> <call><name>getPreviousTokenStream</name><argument_list>()</argument_list></call> <block>{
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>tokenStreams</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    <expr_stmt/></block_content></block></try>}</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tokenStreams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      <expr_stmt/></block_content></block></if></if_stmt></block_content></block></catch>}</block></expr> <if_stmt><else>else <block>{<block_content>
        <throw>throw <expr><name>npe</name></expr>;</throw>
      <expr_stmt/></block_content></block></else></if_stmt>}</block>
  <comment type="block" format="javadoc">/**
   * Creates a TokenStream that is allowed to be re-use from the previous time
   * that the same thread called this method.  Callers that do not need to use
   * more than one TokenStream at the same time from this analyzer should use
   * this method for better performance.
   * &lt;p&gt;
   * This method uses {@link #createComponents(String, Reader)} to obtain an
   * instance of {@link TokenStreamComponents}. It returns the sink of the
   * components and stores the components internally. Subsequent calls to this
   * method will reuse the previously stored components after resetting them
   * through {@link TokenStreamComponents#reset(Reader)}.
   * &lt;/p&gt;
   * 
   * @param fieldName the name of the field the created TokenStream is used for
   * @param reader the reader the streams source reads from
   */</comment>
  <specifier>public</specifier> <name>final</name> <name>TokenStream</name> <call><name>reusableTokenStream</name><argument_list>(<argument><expr><name>final</name> <name>String</name> <name>fieldName</name></expr></argument>,
      <argument><expr><name>final</name> <name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>TokenStreamComponents</name> <name>components</name> <operator>=</operator> <call><name><name>reuseStrategy</name><operator>.</operator><name>getReusableComponents</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>final</name> <name>Reader</name> <name>r</name> <operator>=</operator> <call><name>initReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>components</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>components</name> <operator>=</operator> <call><name>createComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>reuseStrategy</name><operator>.</operator><name>setReusableComponents</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt></block_content></block> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    return components.getTokenStream(</do>)<empty_stmt>;</empty_stmt>
   }
 
  <comment type="block" format="javadoc">/** Used by Analyzers that implement reusableTokenStream
   *  to save a TokenStream for later re-use by the same
   *  thread. */</comment>
  protected <function><type><name>void</name></type> <name>setPreviousTokenStream</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>tokenStreams</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tokenStreams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><name>npe</name></expr>;</throw>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></catch></try>
  <comment type="block" format="javadoc">/**
   * Creates a TokenStream which tokenizes all the text in the provided
   * Reader.
   * &lt;p&gt;
   * This method uses {@link #createComponents(String, Reader)} to obtain an
   * instance of {@link TokenStreamComponents} and returns the sink of the
   * components. Each calls to this method will create a new instance of
   * {@link TokenStreamComponents}. Created {@link TokenStream} instances are 
   * never reused.
   * &lt;/p&gt;
   * 
   * @param fieldName the name of the field the created TokenStream is used for
   * @param reader the reader the streams source reads from
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fieldName</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><call><name>initReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTokenStream</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Override this if you want to add a CharFilter chain.
   */</comment>
  <function><type><specifier>protected</specifier> <name>Reader</name></type> <name>initReader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>reader</name></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -149,7 +157,196 @@ public abstract class Analyzer implements Closeable {
 
   /** Frees persistent resources used by this Analyzer */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tokenStreams</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tokenStreams</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reuseStrategy</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This class encapsulates the outer components of a token stream. It provides
   * access to the source ({@link Tokenizer}) and the outer end (sink), an
   * instance of {@link TokenFilter} which also serves as the
   * {@link TokenStream} returned by
   * {@link Analyzer#tokenStream(String, Reader)} and
   * {@link Analyzer#reusableTokenStream(String, Reader)}.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TokenStreamComponents</name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Tokenizer</name></type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>sink</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new {@link TokenStreamComponents} instance.
     * 
     * @param source
     *          the analyzer's tokenizer
     * @param result
     *          the analyzer's resulting token stream
     */</comment>
    <constructor><specifier>public</specifier> <name>TokenStreamComponents</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Tokenizer</name></type> <name>source</name></decl></parameter>,
        <parameter><decl><type><specifier>final</specifier> <name>TokenStream</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sink</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * Creates a new {@link TokenStreamComponents} instance.
     * 
     * @param source
     *          the analyzer's tokenizer
     */</comment>
    <constructor><specifier>public</specifier> <name>TokenStreamComponents</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Tokenizer</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sink</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Resets the encapsulated components with the given reader. If the components
     * cannot be reset, an Exception should be thrown.
     * 
     * @param reader
     *          a reader to reset the source component
     * @throws IOException
     *           if the component's reset method throws an {@link IOException}
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the sink {@link TokenStream}
     * 
     * @return the sink {@link TokenStream}
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenStream</name></type> <name>getTokenStream</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>sink</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the component's {@link Tokenizer}
     *
     * @return Component's {@link Tokenizer}
     */</comment>
    <function><type><specifier>public</specifier> <name>Tokenizer</name></type> <name>getTokenizer</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>source</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Strategy defining how TokenStreamComponents are reused per call to
   * {@link Analyzer#tokenStream(String, java.io.Reader)}.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>ReuseStrategy</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedValue</name> <init>= <expr><operator>new</operator> <call><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets the reusable TokenStreamComponents for the field with the given name
     *
     * @param fieldName Name of the field whose reusable TokenStreamComponents
     *        are to be retrieved
     * @return Reusable TokenStreamComponents for the field, or {@code null}
     *         if there was no previous components for the field
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Stores the given TokenStreamComponents as the reusable components for the
     * field with the give name
     *
     * @param fieldName Name of the field whose TokenStreamComponents are being set
     * @param components TokenStreamComponents which are to be reused for the field
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setReusableComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>TokenStreamComponents</name> <name>components</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns the currently stored value
     *
     * @return Currently stored value or {@code null} if no value is stored
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Object</name></type> <name>getStoredValue</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <return>return <expr><call><name><name>storedValue</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><name>npe</name></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the stored value
     *
     * @param storedValue Value to store
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setStoredValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>storedValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>storedValue</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>storedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><name>npe</name></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Closes the ReuseStrategy, freeing any resources
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>storedValue</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>storedValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Implementation of {@link ReuseStrategy} that reuses the same components for
   * every field.
   */</comment>
  <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>GlobalReuseStrategy</name> <super_list><extends>extends <super><name>ReuseStrategy</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>TokenStreamComponents</name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>setStoredValue</name><argument_list>(<argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Implementation of {@link ReuseStrategy} that reuses components per-field by
   * maintaining a Map of TokenStreamComponent per field name.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>PerFieldReuseStrategy</name> <super_list><extends>extends <super><name>ReuseStrategy</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name></type> <name>componentsPerField</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>componentsPerField</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>componentsPerField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name></type> <name>componentsPerField</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>componentsPerField</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>componentsPerField</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setStoredValue</name><argument_list>(<argument><expr><name>componentsPerField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>componentsPerField</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name><operator>.</operator><name>old</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name><operator>.</operator><name>old</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..9529250f7fc</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Analyzer</name><operator>.</operator><name>java</name><operator>.</operator><name>old</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">155</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CloseableThreadLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>AlreadyClosedException</name></name>;</import>

<comment type="block" format="javadoc">/** An Analyzer builds TokenStreams, which analyze text.  It thus represents a
 *  policy for extracting index terms from text.
 *  &lt;p&gt;
 *  Typical implementations first build a Tokenizer, which breaks the stream of
 *  characters from the Reader into raw Tokens.  One or more TokenFilters may
 *  then be applied to the output of the Tokenizer.
 * &lt;p&gt;The {@code Analyzer}-API in Lucene is based on the decorator pattern.
 * Therefore all non-abstract subclasses must be final or their {@link #tokenStream}
 * and {@link #reusableTokenStream} implementations must be final! This is checked
 * when Java assertions are enabled.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Analyzer</name> <super_list><implements>implements <super><name>Closeable</name></super></implements></super_list> <block>{

  <constructor><specifier>protected</specifier> <name>Analyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <assert>assert <expr><call><name>assertFinal</name><argument_list>()</argument_list></call></expr>;</assert>
  </block_content>}</block></constructor>
  
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>assertFinal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clazz</name><operator>.</operator><name>desiredAssertionStatus</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
      <assert>assert <expr><call><name><name>clazz</name><operator>.</operator><name>isAnonymousClass</name></name><argument_list>()</argument_list></call> <operator>||</operator>
        <operator>(</operator><call><name><name>clazz</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name><name>Modifier</name><operator>.</operator><name>FINAL</name></name> <operator>|</operator> <name><name>Modifier</name><operator>.</operator><name>PRIVATE</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator>
          <call><name><name>Modifier</name><operator>.</operator><name>isFinal</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"tokenStream"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Reader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getModifiers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <call><name><name>Modifier</name><operator>.</operator><name>isFinal</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"reusableTokenStream"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Reader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getModifiers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>)</operator> <operator>:</operator>
        <literal type="string">"Analyzer implementation classes or at least their tokenStream() and reusableTokenStream() implementations must be final"</literal></expr>;</assert>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Creates a TokenStream which tokenizes all the text in the provided
   * Reader.  Must be able to handle null field name for
   * backward compatibility.
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/** Creates a TokenStream that is allowed to be re-used
   *  from the previous time that the same thread called
   *  this method.  Callers that do not need to use more
   *  than one TokenStream at the same time from this
   *  analyzer should use this method for better
   *  performance.
   */</comment>
  <function><type><specifier>public</specifier> <name>TokenStream</name></type> <name>reusableTokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>tokenStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>tokenStreams</name> <init>= <expr><operator>new</operator> <call><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Used by Analyzers that implement reusableTokenStream
   *  to retrieve previously saved TokenStreams for re-use
   *  by the same thread. */</comment>
  <function><type><specifier>protected</specifier> <name>Object</name></type> <name>getPreviousTokenStream</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>tokenStreams</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tokenStreams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><name>npe</name></expr>;</throw>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Used by Analyzers that implement reusableTokenStream
   *  to save a TokenStream for later re-use by the same
   *  thread. */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>setPreviousTokenStream</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>tokenStreams</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tokenStreams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><name>npe</name></expr>;</throw>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Invoked before indexing a IndexableField instance if
   * terms have already been added to that field.  This allows custom
   * analyzers to place an automatic position increment gap between
   * IndexbleField instances using the same field name.  The default value
   * position increment gap is 0.  With a 0 position increment gap and
   * the typical default token position increment of 1, all terms in a field,
   * including across IndexableField instances, are in successive positions, allowing
   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.
   *
   * @param fieldName IndexableField name being indexed.
   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getPositionIncrementGap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Just like {@link #getPositionIncrementGap}, except for
   * Token offsets instead.  By default this returns 1 for
   * tokenized fields and, as if the fields were joined
   * with an extra space character, and 0 for un-tokenized
   * fields.  This method is only called if the field
   * produced at least one token for indexing.
   *
   * @param field the field just indexed
   * @return offset gap, added to the next token emitted from {@link #tokenStream(String,Reader)}
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getOffsetGap</name><parameter_list>(<parameter><decl><type><name>IndexableField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>fieldType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tokenized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Frees persistent resources used by this Analyzer */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tokenStreams</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tokenStreams</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>AnalyzerWrapper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>AnalyzerWrapper</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..d9b766ac50a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>AnalyzerWrapper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">89</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Extension to {@link Analyzer} suitable for Analyzers which wrap
 * other Analyzers.
 * &lt;p/&gt;
 * {@link #getWrappedAnalyzer(String)} allows the Analyzer
 * to wrap multiple Analyzers which are selected on a per field basis.
 * &lt;p/&gt;
 * {@link #wrapComponents(String, Analyzer.TokenStreamComponents)} allows the
 * TokenStreamComponents of the wrapped Analyzer to then be wrapped
 * (such as adding a new {@link TokenFilter} to form new TokenStreamComponents.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AnalyzerWrapper</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{

  <comment type="block" format="javadoc">/**
   * Creates a new AnalyzerWrapper.  Since the {@link Analyzer.ReuseStrategy} of
   * the wrapped Analyzers are unknown, {@link Analyzer.PerFieldReuseStrategy} is assumed
   */</comment>
  <constructor><specifier>protected</specifier> <name>AnalyzerWrapper</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Retrieves the wrapped Analyzer appropriate for analyzing the field with
   * the given name
   *
   * @param fieldName Name of the field which is to be analyzed
   * @return Analyzer for the field with the given name.  Assumed to be non-null
   */</comment>
  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>Analyzer</name></type> <name>getWrappedAnalyzer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Wraps / alters the given TokenStreamComponents, taken from the wrapped
   * Analyzer, to form new components.  It is through this method that new
   * TokenFilters can be added by AnalyzerWrappers.
   *
   *
   * @param fieldName Name of the field which is to be analyzed
   * @param components TokenStreamComponents taken from the wrapped Analyzer
   * @return Wrapped / altered TokenStreamComponents.
   */</comment>
  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>TokenStreamComponents</name></type> <name>wrapComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <specifier>final</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>aReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>wrapComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><call><name>getWrappedAnalyzer</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>aReader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getPositionIncrementGap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getWrappedAnalyzer</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPositionIncrementGap</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getOffsetGap</name><parameter_list>(<parameter><decl><type><name>IndexableField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getWrappedAnalyzer</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOffsetGap</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">638e7ab53d3</literal><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">308</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>AlreadyClosedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CloseableThreadLocal</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An convenience subclass of Analyzer that makes it easy to implement
 * {@link TokenStream} reuse.
 * &lt;p&gt;
 * ReusableAnalyzerBase is a simplification of Analyzer that supports easy reuse
 * for the most common use-cases. Analyzers such as
 * PerFieldAnalyzerWrapper that behave differently depending upon the
 * field name need to subclass Analyzer directly instead.
 * &lt;/p&gt;
 * &lt;p&gt;
 * To prevent consistency problems, this class does not allow subclasses to
 * extend {@link #reusableTokenStream(String, Reader)} or
 * {@link #tokenStream(String, Reader)} directly. Instead, subclasses must
 * implement {@link #createComponents(String, Reader)}.
 * &lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ReusableAnalyzerBase</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReuseStrategy</name></type> <name>reuseStrategy</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ReusableAnalyzerBase</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GlobalReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>ReusableAnalyzerBase</name><parameter_list>(<parameter><decl><type><name>ReuseStrategy</name></type> <name>reuseStrategy</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reuseStrategy</name></name> <operator>=</operator> <name>reuseStrategy</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Creates a new {@link TokenStreamComponents} instance for this analyzer.
   * 
   * @param fieldName
   *          the name of the fields content passed to the
   *          {@link TokenStreamComponents} sink as a reader
   * @param aReader
   *          the reader passed to the {@link Tokenizer} constructor
   * @return the {@link TokenStreamComponents} for this analyzer.
   */</comment>
  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>,
      <parameter><decl><type><name>Reader</name></type> <name>aReader</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * This method uses {@link #createComponents(String, Reader)} to obtain an
   * instance of {@link TokenStreamComponents}. It returns the sink of the
   * components and stores the components internally. Subsequent calls to this
   * method will reuse the previously stored components if and only if the
   * {@link TokenStreamComponents#reset(Reader)} method returned
   * &lt;code&gt;true&lt;/code&gt;. Otherwise a new instance of
   * {@link TokenStreamComponents} is created.
   * 
   * @param fieldName the name of the field the created TokenStream is used for
   * @param reader the reader the streams source reads from
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>reusableTokenStream</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fieldName</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TokenStreamComponents</name></type> <name>components</name> <init>= <expr><call><name><name>reuseStrategy</name><operator>.</operator><name>getReusableComponents</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>r</name> <init>= <expr><call><name>initReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>components</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>components</name> <operator>=</operator> <call><name>createComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>reuseStrategy</name><operator>.</operator><name>setReusableComponents</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name><name>components</name><operator>.</operator><name>getTokenStream</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This method uses {@link #createComponents(String, Reader)} to obtain an
   * instance of {@link TokenStreamComponents} and returns the sink of the
   * components. Each calls to this method will create a new instance of
   * {@link TokenStreamComponents}. Created {@link TokenStream} instances are 
   * never reused.
   * 
   * @param fieldName the name of the field the created TokenStream is used for
   * @param reader the reader the streams source reads from
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fieldName</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><call><name>initReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTokenStream</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Override this if you want to add a CharFilter chain.
   */</comment>
  <function><type><specifier>protected</specifier> <name>Reader</name></type> <name>initReader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>reader</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reuseStrategy</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This class encapsulates the outer components of a token stream. It provides
   * access to the source ({@link Tokenizer}) and the outer end (sink), an
   * instance of {@link TokenFilter} which also serves as the
   * {@link TokenStream} returned by
   * {@link Analyzer#tokenStream(String, Reader)} and
   * {@link Analyzer#reusableTokenStream(String, Reader)}.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TokenStreamComponents</name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Tokenizer</name></type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>sink</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new {@link TokenStreamComponents} instance.
     * 
     * @param source
     *          the analyzer's tokenizer
     * @param result
     *          the analyzer's resulting token stream
     */</comment>
    <constructor><specifier>public</specifier> <name>TokenStreamComponents</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Tokenizer</name></type> <name>source</name></decl></parameter>,
        <parameter><decl><type><specifier>final</specifier> <name>TokenStream</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sink</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * Creates a new {@link TokenStreamComponents} instance.
     * 
     * @param source
     *          the analyzer's tokenizer
     */</comment>
    <constructor><specifier>public</specifier> <name>TokenStreamComponents</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Tokenizer</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sink</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Resets the encapsulated components with the given reader. If the components
     * cannot be reset, an Exception should be thrown.
     * 
     * @param reader
     *          a reader to reset the source component
     * @throws IOException
     *           if the component's reset method throws an {@link IOException}
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the sink {@link TokenStream}
     * 
     * @return the sink {@link TokenStream}
     */</comment>
    <function><type><specifier>protected</specifier> <name>TokenStream</name></type> <name>getTokenStream</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>sink</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <comment type="block" format="javadoc">/**
   * Strategy defining how TokenStreamComponents are reused per call to
   * {@link ReusableAnalyzerBase#tokenStream(String, java.io.Reader)}.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>ReuseStrategy</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedValue</name> <init>= <expr><operator>new</operator> <call><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets the reusable TokenStreamComponents for the field with the given name
     *
     * @param fieldName Name of the field whose reusable TokenStreamComponents
     *        are to be retrieved
     * @return Reusable TokenStreamComponents for the field, or {@code null}
     *         if there was no previous components for the field
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Stores the given TokenStreamComponents as the reusable components for the
     * field with the give name
     *
     * @param fieldName Name of the field whose TokenStreamComponents are being set
     * @param components TokenStreamComponents which are to be reused for the field
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the currently stored value
     *
     * @return Currently stored value or {@code null} if no value is stored
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Object</name></type> <name>getStoredValue</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <return>return <expr><call><name><name>storedValue</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><name>npe</name></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the stored value
     *
     * @param storedValue Value to store
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setStoredValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>storedValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>storedValue</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>storedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><name>npe</name></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Closes the ReuseStrategy, freeing any resources
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>storedValue</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>storedValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Implementation of {@link ReuseStrategy} that reuses the same components for
   * every field.
   */</comment>
  <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>GlobalReuseStrategy</name> <super_list><extends>extends <super><name>ReuseStrategy</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>TokenStreamComponents</name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>setStoredValue</name><argument_list>(<argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Implementation of {@link ReuseStrategy} that reuses components per-field by
   * maintaining a Map of TokenStreamComponent per field name.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>PerFieldReuseStrategy</name> <super_list><extends>extends <super><name>ReuseStrategy</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name></type> <name>componentsPerField</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>componentsPerField</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>componentsPerField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name></type> <name>componentsPerField</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>componentsPerField</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>componentsPerField</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setStoredValue</name><argument_list>(<argument><expr><name>componentsPerField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>componentsPerField</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6762bd03b89</literal><operator>..</operator><literal type="number">8083a51b149</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>automaton</name><operator>.</operator><name>CharacterRunAutomaton</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <operator>&lt;</operator><operator>/</operator><name>ul</name><operator>&gt;</operator>
  <operator>*</operator> @<name>see</name> <name>MockTokenizer</name>
  <operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>MockAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>MockAnalyzer</name> extends <name>Analyzer</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>CharacterRunAutomaton</name> <name>runAutomaton</name></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>boolean</name> <name>lowerCase</name></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>CharacterRunAutomaton</name> <name>filter</name></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dbf9c2a2026</name><operator>..</operator><literal type="number">54234a0783b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">30</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">30</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
  <operator>*</operator>
  <operator>*</operator>
  <operator>*</operator><operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>MockPayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>MockPayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
 
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>TestAssertions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>TestAssertions</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4a3c75e1310</literal><operator>..</operator><literal type="number">34138ae83f1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>TestAssertions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>TestAssertions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">6</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name></name>;</package></block></expr>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import></block></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAssertions</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }
   
  static <class>class <name>TestAnalyzer1</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
  <class><specifier>static</specifier> class <name>TestAnalyzer1</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>aReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAssertions</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <class><specifier>static</specifier> <specifier>final</specifier> class <name>TestAnalyzer2</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
  <class><specifier>static</specifier> <specifier>final</specifier> class <name>TestAnalyzer2</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>aReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAssertions</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <class><specifier>static</specifier> class <name>TestAnalyzer3</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
  <class><specifier>static</specifier> class <name>TestAnalyzer3</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>aReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAssertions</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <class><specifier>static</specifier> class <name>TestAnalyzer4</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
  <class><specifier>static</specifier> class <name>TestAnalyzer4</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>aReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3dc7c055a9b</literal><operator>..</operator><name>a4f90814952</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocumentWriter</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>testPositionIncrementGap</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content> <block>{<block_content>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">138</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">138</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocumentWriter</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>testTokenReuse</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content> <block>{<block_content>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9fca64934d8</literal><operator>..</operator><literal type="number">31b9aa30362</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1706</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1706</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriter</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
   }</block>
 
  <specifier>static</specifier> <name>final</name> <name>class</name> <name>StringSplitAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>static</specifier> <name>final</name> <name>class</name> <name>StringSplitAnalyzer</name> extends <name>Analyzer</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
       <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringSplitTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterCommit</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterCommit</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">553cf076b91</literal><operator>..</operator><literal type="number">9e6c9281cc3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterCommit</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterCommit</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">175</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">175</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriterCommit</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>Analyzer</name> <name>analyzer</name></expr>;
     <if_stmt><if>if <condition>(<expr><call><name><name>random</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <comment type="line">// no payloads</comment>
     <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
     <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
         <function><annotation>@<name>Override</name></annotation>
         <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriterCommit</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <comment type="line">// fixed length payloads</comment>
       <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name> <init>= <expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
      <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
         <function><annotation>@<name>Override</name></annotation>
         <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterDelete</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterDelete</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bfea6ddcea3</name><operator>..</operator><literal type="number">8bb4cf04138</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterDelete</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterDelete</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">899</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">899</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriterDelete</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>final</name> <name>Random</name> <name>r</name> <operator>=</operator> <name>random</name></expr>;
     <name>Directory</name> <name>dir</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <comment type="line">// note this test explicitly disables payloads</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d0369b0bce4</name><operator>..</operator><name>a9f9e2b6530</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">386</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">386</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriterExceptions</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>newField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"a field"</literal></expr></argument>, <argument><expr><name><name>TextField</name><operator>.</operator><name>TYPE_STORED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>PerFieldReuseStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Analyzer</name><operator>.</operator><name>PerFieldReuseStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>MockTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">454</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">454</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriterExceptions</name> extends <name>LuceneTestCase</name> <block>{
   <comment type="line">// LUCENE-1072</comment>
   <expr><specifier>public</specifier> <name>void</name> <call><name>testExceptionFromTokenStream</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>Directory</name> <name>dir</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>IndexWriterConfig</name> <name>conf</name> <operator>=</operator> <call><name>newIndexWriterConfig</name><argument_list>( <argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>IndexWriterConfig</name></type> <name>conf</name> <init>= <expr><call><name>newIndexWriterConfig</name><argument_list>( <argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
 
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">591</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">591</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestIndexWriterExceptions</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>testDocumentsWriterExceptions</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(<operator>new</operator> <call><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>PerFieldReuseStrategy</name></name><argument_list>()</argument_list></call></argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt></block_content></block></function></block></class></expr></argument>)</argument_list></call> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Analyzer</name><operator>.</operator><name>PerFieldReuseStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>MockTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">687</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">687</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestIndexWriterExceptions</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>testDocumentsWriterExceptionThreads</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(<operator>new</operator> <call><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>PerFieldReuseStrategy</name></name><argument_list>()</argument_list></call></argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt></block_content></block></function></block></class></expr></block></expr></init></decl></decl_stmt></block></class></expr></argument>)</argument_list></call> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Analyzer</name><operator>.</operator><name>PerFieldReuseStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>MockTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLazyProxSkipping</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLazyProxSkipping</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d5975eb2bea</name><operator>..</operator><literal type="number">65787b06803</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLazyProxSkipping</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLazyProxSkipping</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLazyProxSkipping</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>private</specifier> <name>void</name> <call><name>createIndex</name><argument_list>(<argument><expr><name>int</name> <name>numHits</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>int</name> <name>numDocs</name> <operator>=</operator> <literal type="number">500</literal></expr></block></expr></argument></throws></expr>;
         
        <name>final</name> <name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
           <function><annotation>@<name>Override</name></annotation>
           <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestMultiLevelSkipList</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestMultiLevelSkipList</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6f4a5d97254</literal><operator>..</operator><literal type="number">0a911ec6885</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestMultiLevelSkipList</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestMultiLevelSkipList</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiLevelSkipList</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Wrong payload for the target "</literal> <operator>+</operator> <name>target</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name><name>b</name><operator>.</operator><name>bytes</name><index>[<expr><name><name>b</name><operator>.</operator><name>offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>target</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>bytes</name><index>[<expr><name><name>b</name><operator>.</operator><name>offset</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name>AtomicInteger</name> <name>payloadCount</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
     @<name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d68a8f8bbba</name><operator>..</operator><literal type="number">247d59bb483</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">405</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">405</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
     <comment type="block" format="javadoc">/**
      * This Analyzer uses an WhitespaceTokenizer and PayloadFilter.
      */</comment>
    <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
    <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
         <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>PayloadData</name></argument>&gt;</argument_list></name> <name>fieldToData</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>PayloadData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
         <specifier>public</specifier> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestSameTokenSamePosition</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestSameTokenSamePosition</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b117adab69b</name><operator>..</operator><literal type="number">20184e848c5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestSameTokenSamePosition</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestSameTokenSamePosition</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package></block></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import></block></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSameTokenSamePosition</name> extends <name>LuceneTestCase</name> <block>{
   }</block></expr></expr_stmt>
 }</block_content>
 
final class BugReproAnalyzer extends ReusableAnalyzerBase <block>{<block_content>
<class><specifier>final</specifier> class <name>BugReproAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BugReproAnalyzerTokenizer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermVectorsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermVectorsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2aad70c16f9</literal><operator>..</operator><name>bde0890e1b3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermVectorsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermVectorsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermVectorsReader</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block_content>
 
  private class MyAnalyzer extends ReusableAnalyzerBase <block>{<block_content>
  <class><specifier>private</specifier> class <name>MyAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MyTokenStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermdocPerf</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermdocPerf</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dbe1b94fbd8</name><operator>..</operator><literal type="number">44c8394a1a3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermdocPerf</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermdocPerf</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermdocPerf</name> extends <name>LuceneTestCase</name> <block>{
   <expr><name>void</name> <call><name>addDocs</name><argument_list>(<argument><expr><name>final</name> <name>Random</name> <name>random</name></expr></argument>, <argument><expr><name>Directory</name> <name>dir</name></expr></argument>, <argument><expr><name>final</name> <name>int</name> <name>ndocs</name></expr></argument>, <argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>val</name></expr></argument>, <argument><expr><name>final</name> <name>int</name> <name>maxTF</name></expr></argument>, <argument><expr><name>final</name> <name>float</name> <name>percentDocs</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>final</name> <name>RepeatingTokenStream</name> <name>ts</name> <operator>=</operator> <operator>new</operator> <call><name>RepeatingTokenStream</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>percentDocs</name></expr></argument>, <argument><expr><name>maxTF</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
 
    <name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d63296c53ef</name><operator>..</operator><literal type="number">137f6fbca60</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">346</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">345</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiPhraseQuery</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block_content>
 
  private static class CannedAnalyzer extends ReusableAnalyzerBase <block>{<block_content>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CannedAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TokenAndPos</name><index>[]</index></name></type> <name>tokens</name></decl>;</decl_stmt>
     
     <constructor><specifier>public</specifier> <name>CannedAnalyzer</name><parameter_list>(<parameter><decl><type><name><name>TokenAndPos</name><index>[]</index></name></type> <name>tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a60a8824377</name><operator>..</operator><literal type="number">2398c9f507f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPhraseQuery</name> extends <name>LuceneTestCase</name> <block>{
   @<expr><name>BeforeClass</name>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>beforeClass</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>directory</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositionIncrement</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositionIncrement</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4e59e0f3d43</literal><operator>..</operator><literal type="number">6e128cfef11</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositionIncrement</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositionIncrement</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPositionIncrement</name> extends <name>LuceneTestCase</name> <block>{
   <expr><name>final</name> <specifier>static</specifier> <name>boolean</name> <name>VERBOSE</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
 
   <specifier>public</specifier> <name>void</name> <call><name>testSetPosition</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws>)</block> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Tokenizer</name></super><argument_list>()</argument_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3b6fa24d10c</literal><operator>..</operator><name>a93e295778e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestTermRangeQuery</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"queries with different inclusive are not equal"</literal></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>private</specifier> <specifier>static</specifier> class <name>SingleCharAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> class <name>SingleCharAnalyzer</name> extends <name>Analyzer</name> <block>{
 
     <expr><specifier>private</specifier> <specifier>static</specifier> class <name>SingleCharTokenizer</name> extends <name>Tokenizer</name> <block>{
       <expr><name><name>char</name><index>[]</index></name> <name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4648af7871f</literal><operator>..</operator><literal type="number">13352d40646</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">55</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> class <name>PayloadHelper</name> <block>{
 
   <expr><specifier>public</specifier> <name>IndexReader</name> <name>reader</name></expr>;
 
  <specifier>public</specifier> <name>final</name> class <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>public</specifier> <name>final</name> class <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
 
     <expr><specifier>public</specifier> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6b37b5c7d9b</literal><operator>..</operator><literal type="number">510341e3347</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">55</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestPayloadNearQuery</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name> <name>payload2</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">2</literal></expr>}</block></expr>;
   <specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name> <name>payload4</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">4</literal></expr>}</block></block></block></expr>;
 
  <specifier>private</specifier> <specifier>static</specifier> class <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> class <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cd952447ebb</name><operator>..</operator><literal type="number">943fd4676ae</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestPayloadTermQuery</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>byte</name><index>[]</index></name> <name>payloadMultiField2</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">4</literal></expr>}</block></expr>;
   <specifier>protected</specifier> <specifier>static</specifier> <name>Directory</name> <name>directory</name></block></block></expr>;
 
  <specifier>private</specifier> <specifier>static</specifier> class <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> class <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
 
     <expr><specifier>private</specifier> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">15448e5ba49</literal><operator>..</operator><name>a364135e0f5</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">96</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">96</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestBasics</name> extends <name>LuceneTestCase</name> <block>{
     }</block></block></expr>
   }</block>
   
  <specifier>static</specifier> <name>final</name> <name>Analyzer</name> <name>simplePayloadAnalyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>simplePayloadAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">85771161ef0</literal><operator>..</operator><literal type="number">321e6fc6d79</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">476</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">476</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestPayloadSpans</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>numSpans</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <name>final</name> class <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><name>final</name> class <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">530</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">530</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestPayloadSpans</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr>
   }</block>
   
  <specifier>public</specifier> <name>final</name> class <name>TestPayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>public</specifier> <name>final</name> class <name>TestPayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ar</name><operator>/</operator><name><name>ArabicAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ar</name><operator>/</operator><name><name>ArabicAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">53020bd2524</literal><operator>..</operator><literal type="number">4549a17e023</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ar</name><operator>/</operator><name><name>ArabicAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>ar</name><operator>/</operator><name><name>ArabicAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">126</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">126</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> class <name>ArabicAnalyzer</name> extends <name>StopwordAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link LowerCaseFilter}, {@link StopFilter},
    *         {@link ArabicNormalizationFilter}, {@link KeywordMarkerFilter}
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java
index 1a82aac2d2c..6f0419ec65f 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java
@@ -107,11 +107,11 @@ public final class BulgarianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
index 373421da068..2ba53153998 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
@@ -117,10 +117,10 @@ public final class BrazilianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}
    *         , and {@link BrazilianStemFilter}.
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/ca/CatalanAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/ca/CatalanAnalyzer.java
index 34b9b0a502b..eaaed17030b 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/ca/CatalanAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/ca/CatalanAnalyzer.java
@@ -105,11 +105,11 @@ public final class CatalanAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
index 4bd985c3351..886f5e77ebb 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
@@ -20,7 +20,6 @@ package org.apache.lucene.analysis.cn;
 import java.io.Reader;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer; // javadoc @link
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
 
@@ -31,14 +30,14 @@ import org.apache.lucene.analysis.Tokenizer;
  * This analyzer will be removed in Lucene 5.0
  */</comment>
 @<expr><name>Deprecated</name>
<specifier>public</specifier> <name>final</name> class <name>ChineseAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> class <name>ChineseAnalyzer</name> extends <name>Analyzer</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link ChineseTokenizer} filtered with
    *         {@link ChineseFilter}
    */</comment>
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>KeywordAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>KeywordAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c61f0957a99</name><operator>..</operator><literal type="number">5bf37e32988</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>KeywordAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>KeywordAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">13</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">13</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name></name>;</package></block></expr>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * "Tokenizes" the entire stream as a single token. This is useful
  * for data like zip codes, ids, and some product names.
  */</comment>
<specifier>public</specifier> <name>final</name> class <name>KeywordAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> class <name>KeywordAnalyzer</name> extends <name>Analyzer</name> <block>{
   <expr><specifier>public</specifier> <call><name>KeywordAnalyzer</name><argument_list>()</argument_list></call> <block>{
   }</block>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SimpleAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SimpleAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">357c9861e44</literal><operator>..</operator><name>a458626317d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SimpleAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SimpleAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21</literal></expr>,<expr><literal type="number">6</literal> @@</expr> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharTokenizer</name></name>;</import></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
 <comment type="block" format="javadoc">/** An {@link Analyzer} that filters {@link LetterTokenizer} 
@@ -36,7 +35,7 @@ import org.apache.lucene.util.Version;
  * &lt;/ul&gt;
  * &lt;p&gt;
  **/</comment>
<specifier>public</specifier> <name>final</name> class <name>SimpleAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> class <name>SimpleAnalyzer</name> extends <name>Analyzer</name> <block>{
 
   <expr><specifier>private</specifier> <name>final</name> <name>Version</name> <name>matchVersion</name></expr>;
   
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>StopAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>StopAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1420896d385</literal><operator>..</operator><literal type="number">75fb8c4c3aa</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>StopAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>StopAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">95</literal>,<literal type="number">10</literal> <operator>+</operator><literal type="number">95</literal>,<literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> class <name>StopAnalyzer</name> extends <name>StopwordAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link LowerCaseTokenizer} filtered with
    *         {@link StopFilter}
    */</comment>
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>WhitespaceAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>WhitespaceAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">496abd929e9</literal><operator>..</operator><name>e22952d5153</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>WhitespaceAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>WhitespaceAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">8</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name></name>;</package></block></block></expr>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -35,7 +35,7 @@ import org.apache.lucene.util.Version;
  * &lt;/ul&gt;
  * &lt;p&gt;
  **/</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WhitespaceAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WhitespaceAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
   
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Version</name></type> <name>matchVersion</name></decl>;</decl_stmt>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cz</name><operator>/</operator><name><name>CzechAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cz</name><operator>/</operator><name><name>CzechAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">87a05170e26</literal><operator>..</operator><literal type="number">0df03a1ed93</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cz</name><operator>/</operator><name><name>CzechAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cz</name><operator>/</operator><name><name>CzechAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharArraySet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>StopwordAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>WordlistLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> class <name>CzechAnalyzer</name> extends <name>StopwordAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , and {@link CzechStemFilter} (only if version is &gt;= LUCENE_31). If
@@ -135,7 +134,7 @@ public final class CzechAnalyzer extends StopwordAnalyzerBase {
    *         {@link CzechStemFilter}.
    */</comment>
   @<expr><name>Override</name>
  <specifier>protected</specifier> <name><name>ReusableAnalyzerBase</name><operator>.</operator><name>TokenStreamComponents</name></name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>,
  <argument><expr><specifier>protected</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>,
       <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>final</name> <name>Tokenizer</name> <name>source</name> <operator>=</operator> <operator>new</operator> <call><name>StandardTokenizer</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
     <name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>StandardFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>da</name><operator>/</operator><name><name>DanishAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>da</name><operator>/</operator><name><name>DanishAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a5c048a126e</name><operator>..</operator><literal type="number">65505dca4e9</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>da</name><operator>/</operator><name><name>DanishAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>da</name><operator>/</operator><name><name>DanishAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">106</literal>,<literal type="number">11</literal> <operator>+</operator><literal type="number">106</literal>,<literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> class <name>DanishAnalyzer</name> extends <name>StopwordAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
index 9a0aba0d4b5..2c69900daad 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
@@ -158,10 +158,10 @@ public final class GermanAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
index 5a1d9867706..8cbd82931e0 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
@@ -101,10 +101,10 @@ public final class GreekAnalyzer extends StopwordAnalyzerBase {
   
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link GreekLowerCaseFilter}, {@link StandardFilter},
    *         {@link StopFilter}, and {@link GreekStemFilter}
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java
index 8d0f6cf977d..6e71e40af86 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java
@@ -89,11 +89,11 @@ public final class EnglishAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishAnalyzer.java
index a4e33c26be5..025415d9422 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishAnalyzer.java
@@ -106,11 +106,11 @@ public final class SpanishAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/eu/BasqueAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/eu/BasqueAnalyzer.java
index a878182d8d6..9ed380823fa 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/eu/BasqueAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/eu/BasqueAnalyzer.java
@@ -105,11 +105,11 @@ public final class BasqueAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
index f441c525f48..efdbd2e1010 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
@@ -107,10 +107,10 @@ public final class PersianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},
    *         {@link PersianNormalizationFilter} and Persian Stop words
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishAnalyzer.java
index 575d460a31e..85a0e595146 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishAnalyzer.java
@@ -106,11 +106,11 @@ public final class FinnishAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
index 4276aa2e771..087f6a104e8 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
@@ -168,10 +168,10 @@ public final class FrenchAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link ElisionFilter},
    *         {@link LowerCaseFilter}, {@link StopFilter},
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianAnalyzer.java
index 5af84635130..60dc7c3a6d2 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianAnalyzer.java
@@ -104,11 +104,11 @@ public final class GalicianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiAnalyzer.java
index fbdf5d77759..ba326623b84 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiAnalyzer.java
@@ -106,10 +106,10 @@ public final class HindiAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link IndicTokenizer} filtered with
    *         {@link LowerCaseFilter}, {@link IndicNormalizationFilter},
    *         {@link HindiNormalizationFilter}, {@link KeywordMarkerFilter}
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianAnalyzer.java
index 39fdb7110a2..be3a8794782 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianAnalyzer.java
@@ -106,11 +106,11 @@ public final class HungarianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/hy/ArmenianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/hy/ArmenianAnalyzer.java
index d43096a3574..76983deeba5 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/hy/ArmenianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/hy/ArmenianAnalyzer.java
@@ -105,11 +105,11 @@ public final class ArmenianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer.java
index 877b5fe2f00..dfea4042b4b 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer.java
@@ -106,10 +106,10 @@ public final class IndonesianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter},
    *         {@link StopFilter}, {@link KeywordMarkerFilter}
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianAnalyzer.java
index 797902a093b..22790bb3e19 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianAnalyzer.java
@@ -123,11 +123,11 @@ public final class ItalianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link ElisionFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianAnalyzer.java
index 2bcf036a376..d0ff1e10323 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianAnalyzer.java
@@ -104,11 +104,11 @@ public final class LatvianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.java
index 433ad96e154..a52ac5f2d6d 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.java
@@ -18,17 +18,13 @@ package org.apache.lucene.analysis.miscellaneous;
  */</comment>
 
 <expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name></expr>;</block></block></expr></expr_stmt>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>AnalyzerWrapper</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * This Analyzer limits the number of tokens while indexing. It is
  * a replacement for the maximum field length setting inside {@link org.apache.lucene.index.IndexWriter}.
  */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>LimitTokenCountAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> <specifier>final</specifier> class <name>LimitTokenCountAnalyzer</name> <super_list><extends>extends <super><name>AnalyzerWrapper</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>delegate</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxTokenCount</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>final</name> class <name>LimitTokenCountAnalyzer</name> extends <name>Analyzer</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>delegate</name></expr>;
     <name><name>this</name><operator>.</operator><name>maxTokenCount</name></name> <operator>=</operator> <name>maxTokenCount</name></block></expr>;</expr_stmt>
   <expr_stmt/>}</block>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>LimitTokenCountFilter</name><argument_list>(
      <argument><expr><call><name><name>delegate</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxTokenCount</name></expr></argument>
    )</argument_list></call></expr>;</return>
  <expr_stmt/>}</block_content>
  
  @Override
  public TokenStream reusableTokenStream(String fieldName</block><operator>,</operator> Reader reader</function></class>)</block> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
    <return>return <expr><operator>new</operator> <call><name>LimitTokenCountFilter</name><argument_list>(
      <argument><expr><call><name><name>delegate</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxTokenCount</name></expr></argument>
    )</argument_list></call></expr>;</return></class>
  <expr_stmt/>}</block>
  

   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getPositionIncrementGap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>getPositionIncrementGap</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>protected</specifier> <name>Analyzer</name></type> <name>getWrappedAnalyzer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>delegate</name></expr>;</return>
   <expr_stmt/>}</block_content>
 
   @Override
  public int getOffsetGap(IndexableField field</block></function>)</block_content> <block>{<block_content>
    <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>getOffsetGap</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>wrapComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><call><name><name>components</name><operator>.</operator><name>getTokenizer</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><operator>new</operator> <call><name>LimitTokenCountFilter</name><argument_list>(<argument><expr><call><name><name>components</name><operator>.</operator><name>getTokenStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>maxTokenCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
   
   @Override
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
index 4c12b31afb6..daf70773ece 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
@@ -27</block><operator>,</operator>7 +27<operator>,</operator>6 @@ import java.util.regex.Matcher;</function>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>StopAnalyzer</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> @<call><name>deprecated</name> <argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call> <name>use</name> <name>the</name> <name>pattern</name><operator>-</operator><name>based</name> <name>analysis</name> <name>in</name> <name>the</name> <name>analysis</name><operator>/</operator><name>pattern</name></expr></expr_stmt> <package>package <name><name>instead</name><operator>.</operator></name>
  */
 @<name>Deprecated</name>
public <name>final</name> class <name>PatternAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{<block_content>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PatternAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
   
   <comment type="block" format="javadoc">/** &lt;code&gt;"\\W+"&lt;/code&gt;; Divides text at non-letters (NOT Character.isLetter(c)) */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>NON_WORD_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\W+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PerFieldAnalyzerWrapper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PerFieldAnalyzerWrapper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">08ec36ac17a</literal><operator>..</operator><literal type="number">514f211d84f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PerFieldAnalyzerWrapper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PerFieldAnalyzerWrapper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>miscellaneous</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>AnalyzerWrapper</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * This analyzer is used to facilitate scenarios where different
@@ -50,7 +46,7 @@ import java.util.HashMap;
  * &lt;p&gt;A PerFieldAnalyzerWrapper can be used like any other analyzer, for both indexing
  * and query parsing.
  */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PerFieldAnalyzerWrapper</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PerFieldAnalyzerWrapper</name> <super_list><extends>extends <super><name>AnalyzerWrapper</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>defaultAnalyzer</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Analyzer</name></argument>&gt;</argument_list></name></type> <name>fieldAnalyzers</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>final</name> class <name>PerFieldAnalyzerWrapper</name> extends <name>Analyzer</name> <block>{
    <expr><operator>*</operator> <name>used</name></expr> <for>for those fields 
    */
   public PerFieldAnalyzerWrapper<control>(<init><decl><type><name>Analyzer</name></type> <name>defaultAnalyzer</name></decl>,
      <decl><type ref="prev"/><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Analyzer</name></argument>&gt;</argument_list></name> <name>fieldAnalyzers</name></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Analyzer</name></argument>&gt;</argument_list></name> <name>fieldAnalyzers</name></expr></expr_stmt></block_content></block></for></block></expr></expr_stmt></block></class></block></class></block></class></block_content></block></package></block_content></block></block></function></class></block></class></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></block></block></expr></block></block></expr></block></block></block></expr></block></expr></block></expr></expr_stmt></block></class></expr></argument>)</argument_list></call> <block>{
     <expr><name><name>this</name><operator>.</operator><name>defaultAnalyzer</name></name> <operator>=</operator> <name>defaultAnalyzer</name></expr>;
     <name><name>this</name><operator>.</operator><name>fieldAnalyzers</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fieldAnalyzers</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>fieldAnalyzers</name></expr> </then><else>: <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></else></ternary>, <name>Analyzer</name><operator>&gt;</operator><call><name>emptyMap</name><argument_list>()</argument_list></call></block></expr>;</return>
   <expr_stmt/>}</block_content>
 
   @Override
  public TokenStream tokenStream(String fieldName</block><operator>,</operator> Reader reader</function>)</block> <block>{
  <function><type><specifier>protected</specifier> <name>Analyzer</name></type> <name>getWrappedAnalyzer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><call><name><name>fieldAnalyzers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>analyzer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <name>defaultAnalyzer</name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>

    return analyzer.tokenStream(fieldName</block><operator>,</operator> <expr_stmt><expr><name>reader</name></expr></expr_stmt></if></if_stmt>)</block_content></block>;</function>
  <expr_stmt/>}</block>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TokenStream</name></type> <name>reusableTokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><call><name><name>fieldAnalyzers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>analyzer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <name>defaultAnalyzer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>analyzer</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  <expr_stmt/>}</block_content>
  
  <comment type="block" format="javadoc">/** Return the positionIncrementGap from the analyzer assigned to fieldName */</comment>
  @Override
  public int getPositionIncrementGap(String fieldName</block></function></class></expr>) <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <call><name><name>fieldAnalyzers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</block></block></expr></expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>analyzer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <name>defaultAnalyzer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>analyzer</name><operator>.</operator><name>getPositionIncrementGap</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>analyzer</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>analyzer</name></expr> </then><else>: <expr><name>defaultAnalyzer</name></expr></else></ternary></expr>;</return>
   <expr_stmt/>}</block_content>
 
  <comment type="block" format="javadoc">/** Return the offsetGap from the analyzer assigned to field */</comment>
   @Override
  public int getOffsetGap(IndexableField field</block></function>)</block> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><call><name><name>fieldAnalyzers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>analyzer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <name>defaultAnalyzer</name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    return analyzer.getOffsetGap(field</block></if></if_stmt>)</block><empty_stmt>;</empty_stmt></class></expr></init></decl></decl_stmt>
  <function><type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>wrapComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>components</name></expr>;</return>
   <expr_stmt/>}</block_content>
   
   @Override
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
index fcf4d033b14..3931fa107c2 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
@@ -29</block><operator>,</operator>7 +29<operator>,</operator>6 @@ import org.apache.lucene.analysis.standard.StandardFilter;</function>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>  <comment type="line">// for javadoc</comment>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharArraySet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>WordlistLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator><operator>&lt;</operator><name>b</name><operator>&gt;</operator><name><name>NOTE</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>b</name></argument>&gt;</argument_list></name><operator>:</operator> <name>This</name> <name>class</name> <name>uses</name> <name>the</name> <name>same</name> <block>{@<expr><name>link</name> <name>Version</name></expr>}</block>
  <operator>*</operator> <name>dependent</name> <name>settings</name> <name>as</name> <block>{@<expr><name>link</name> <name>StandardAnalyzer</name></expr>}</block><operator>.</operator><operator>&lt;</operator><operator>/</operator><name>p</name><operator>&gt;</operator>
  <operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>DutchAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>DutchAnalyzer</name> extends <name>Analyzer</name> <block>{
   
   <comment type="block" format="javadoc">/** File containing default Dutch stopwords. */</comment>
   <expr><specifier>public</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>DEFAULT_STOPWORD_FILE</name> <operator>=</operator> <literal type="string">"dutch_stop.txt"</literal></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>no</name><operator>/</operator><name><name>NorwegianAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>no</name><operator>/</operator><name><name>NorwegianAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b9dd5cc3bba</name><operator>..</operator><name>ecb66f6c8b2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>no</name><operator>/</operator><name><name>NorwegianAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>no</name><operator>/</operator><name><name>NorwegianAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">106</literal>,<literal type="number">11</literal> <operator>+</operator><literal type="number">106</literal>,<literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NorwegianAnalyzer</name> extends <name>StopwordAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseAnalyzer.java
index b50acdb3130..3d2893313ba 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseAnalyzer.java
@@ -106,11 +106,11 @@ public final class PortugueseAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
index 066b77419ed..791e994266e 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
@@ -16,20 +16,19 @@ package org.apache.lucene.analysis.query;
  * limitations under the License.
  */</comment>
 
<expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>AnalyzerWrapper</name></name></expr>;</block></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiFields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>StopFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CharsRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -42,7 +41,7 @@ import java.util.*;
  * this term to take 2 seconds.
  * &lt;/p&gt;
  */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>QueryAutoStopWordAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> <specifier>final</specifier> class <name>QueryAutoStopWordAnalyzer</name> <super_list><extends>extends <super><name>AnalyzerWrapper</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>delegate</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>stopWordsPerField</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>QueryAutoStopWordAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <call><name>QueryAutoStopWordAnalyzer</name><argument_list>(
       <argument><expr><name>Version</name> <name>matchVersion</name></expr></argument>,
      <argument><expr><name>Analyzer</name> <name>delegate</name></expr></argument>, 
      <argument><expr><name>Analyzer</name> <name>delegate</name></expr></argument>,
       <argument><expr><name>IndexReader</name> <name>indexReader</name></expr></argument>,
       <argument><expr><name>float</name> <name>maxPercentDocs</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>this</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>delegate</name></expr></argument>, <argument><expr><name>indexReader</name></expr></argument>, <argument><expr><call><name><name>indexReader</name><operator>.</operator><name>getFieldNames</name></name><argument_list>(<argument><expr><name><name>IndexReader</name><operator>.</operator><name>FieldOption</name><operator>.</operator><name>INDEXED</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxPercentDocs</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
@@ <operator>-</operator><literal type="number">168</literal>,<literal type="number">79</literal> <operator>+</operator><literal type="number">167</literal>,<literal type="number">18</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>QueryAutoStopWordAnalyzer</name> extends <name>Analyzer</name> <block>{
   }</block></block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>TokenStream</name> <name>result</name></expr>;</block></expr></expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>delegate</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> catch (IOException e</block></try>)</block> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>delegate</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    Set&lt;String&gt; stopWords = stopWordsPerField.get(fieldName</block></class>)</block>;</class>
    <if_stmt><if>if <condition>(<expr><name>stopWords</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    return result</block><empty_stmt>;</empty_stmt></if></if_stmt>
  <function><type><specifier>protected</specifier> <name>Analyzer</name></type> <name>getWrappedAnalyzer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>delegate</name></expr>;</return>
   <expr_stmt/>}</block_content>
  
  private class SavedStreams <block>{<block_content>
    <comment type="block">/* the underlying stream */</comment>
    <decl_stmt><decl><type><name>TokenStream</name></type> <name>wrapped</name></decl>;</decl_stmt>
 
    <comment type="block">/*
     * when there are no stopwords for the field, refers to wrapped.
     * if there stopwords, it is a StopFilter around wrapped.
     */</comment>
    <decl_stmt><decl><type><name>TokenStream</name></type> <name>withStopFilter</name></decl>;</decl_stmt>
  <expr_stmt/>}</block_content>

  @SuppressWarnings("unchecked"</block></block></function>)</block>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TokenStream</name></type> <name>reusableTokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="block">/* map of SavedStreams for each field */</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SavedStreams</name></argument>&gt;</argument_list></name></type> <name>streamMap</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SavedStreams</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getPreviousTokenStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>streamMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>streamMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SavedStreams</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setPreviousTokenStream</name><argument_list>(<argument><expr><name>streamMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>

    SavedStreams streams = streamMap.get(fieldName</block></if></if_stmt>)</block_content></block>;</function></class></block></expr></expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>streams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* an entry for this field does not exist, create one */</comment>
      <expr_stmt><expr><name>streams</name> <operator>=</operator> <operator>new</operator> <call><name>SavedStreams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>streamMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name> <operator>=</operator> <call><name><name>delegate</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* if there are any stopwords for the field, save the stopfilter */</comment>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stopWords</name> <init>= <expr><call><name><name>stopWordsPerField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>stopWords</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>withStopFilter</name></name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content> else <block>{<block_content>
        <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>withStopFilter</name></name> <operator>=</operator> <name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
    } else <block>{<block_content>
      <comment type="block">/*
      * an entry for this field exists, verify the wrapped stream has not
      * changed. if it has not, reuse it, otherwise wrap the new stream.
      */</comment>
      <decl_stmt><decl><type><name>TokenStream</name></type> <name>result</name> <init>= <expr><call><name><name>delegate</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the wrapped analyzer reused the stream */</comment>
      <expr_stmt/>}</block_content> else <block>{<block_content>
        <comment type="block">/*
        * the wrapped analyzer did not. if there are any stopwords for the
        * field, create a new StopFilter around the new stream
        */</comment>
        <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stopWords</name> <init>= <expr><call><name><name>stopWordsPerField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>stopWords</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>withStopFilter</name></name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content> else <block>{<block_content>
          <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>withStopFilter</name></name> <operator>=</operator> <name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
      }
  protected TokenStreamComponents wrapComponents(String fieldName</block></block><operator>,</operator> <expr_stmt><expr><name>TokenStreamComponents</name> <name>components</name></expr></expr_stmt></if></if_stmt>)</block_content> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stopWords</name> <init>= <expr><call><name><name>stopWordsPerField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>stopWords</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>components</name></expr>;</return>
     <expr_stmt/>}</block_content>

    return streams.withStopFilter</block><empty_stmt>;</empty_stmt></if></if_stmt>
    <decl_stmt><decl><type><name>StopFilter</name></type> <name>stopFilter</name> <init>= <expr><operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><call><name><name>components</name><operator>.</operator><name>getTokenStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><call><name><name>components</name><operator>.</operator><name>getTokenizer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stopFilter</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
 
   <comment type="block" format="javadoc">/**
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/ro/RomanianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/ro/RomanianAnalyzer.java
index ef07e98e1e0..1d3c40d6dbe 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/ro/RomanianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/ro/RomanianAnalyzer.java
@@ -110,11 +110,11 @@ public final class RomanianAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
index ea19bb9f8df..6ddf665a578 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
@@ -139,10 +139,10 @@ public final class RussianAnalyzer extends StopwordAnalyzerBase
    
   /**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
index 217a3622b51..2e41a146893 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
@@ -17,11 +17,8 @@ package org.apache.lucene.analysis.shingle;
  * limitations under the License.
  */</comment>
 
import java.io.IOException</block></block></block><empty_stmt>;</empty_stmt></if></if_stmt>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>AnalyzerWrapper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>A</name> <name>shingle</name> <name>is</name> <name>another</name> <name>name</name></expr></expr_stmt> <for>for a token based n-gram.
  * &lt;/p&gt;
  */
public final class ShingleAnalyzerWrapper extends Analyzer <block>{<block_content>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ShingleAnalyzerWrapper</name> <super_list><extends>extends <super><name>AnalyzerWrapper</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>defaultAnalyzer</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxShingleSize</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">48</literal> <operator>+</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ShingleAnalyzerWrapper</name> extends <name>Analyzer</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>TokenStream</name> <name>wrapped</name></expr>;</block></expr></expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <call><name><name>defaultAnalyzer</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> catch (IOException e</block></try>)</block> <block>{<block_content>
      <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <call><name><name>defaultAnalyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    ShingleFilter filter = new ShingleFilter(wrapped</block><operator>,</operator> <expr_stmt><expr><name>minShingleSize</name></expr><operator>,</operator> <expr><name>maxShingleSize</name></expr></expr_stmt></class>)</block_content></block><empty_stmt>;</empty_stmt></for>
  <function><type><specifier>protected</specifier> <name>Analyzer</name></type> <name>getWrappedAnalyzer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>defaultAnalyzer</name></expr>;</return>
  <expr_stmt/>}</block_content>

  @Override
  protected TokenStreamComponents wrapComponents(String fieldName</block><operator>,</operator> TokenStreamComponents components</function>)</block_content> <block>{<block_content>
    <decl_stmt><decl><type><name>ShingleFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>ShingleFilter</name><argument_list>(<argument><expr><call><name><name>components</name><operator>.</operator><name>getTokenStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>minShingleSize</name></expr></argument>, <argument><expr><name>maxShingleSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setMinShingleSize</name></name><argument_list>(<argument><expr><name>minShingleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setMaxShingleSize</name></name><argument_list>(<argument><expr><name>maxShingleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setTokenSeparator</name></name><argument_list>(<argument><expr><name>tokenSeparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setOutputUnigrams</name></name><argument_list>(<argument><expr><name>outputUnigrams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setOutputUnigramsIfNoShingles</name></name><argument_list>(<argument><expr><name>outputUnigramsIfNoShingles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>filter</name></expr>;</return>
  <expr_stmt/>}</block_content>
  
  private class SavedStreams <block>{<block_content>
    <decl_stmt><decl><type><name>TokenStream</name></type> <name>wrapped</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ShingleFilter</name></type> <name>shingle</name></decl>;</decl_stmt>
  <expr_stmt/>}</block_content>
  
  @Override
  public TokenStream reusableTokenStream(String fieldName</block></block></block></block></block><operator>,</operator> <expr_stmt><expr><name>Reader</name> <name>reader</name></expr></expr_stmt></if></if_stmt>)</block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>SavedStreams</name> <name>streams</name> <operator>=</operator> <operator>(</operator><name>SavedStreams</name><operator>)</operator> <call><name>getPreviousTokenStream</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block><empty_stmt>;</empty_stmt></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>streams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>streams</name> <operator>=</operator> <operator>new</operator> <call><name>SavedStreams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name> <operator>=</operator> <call><name><name>defaultAnalyzer</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>shingle</name></name> <operator>=</operator> <operator>new</operator> <call><name>ShingleFilter</name><argument_list>(<argument><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setPreviousTokenStream</name><argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> else <block>{<block_content>
      <decl_stmt><decl><type><name>TokenStream</name></type> <name>result</name> <init>= <expr><call><name><name>defaultAnalyzer</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the wrapped analyzer did not, create a new shingle around the new one */</comment>
        <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>shingle</name></name> <operator>=</operator> <operator>new</operator> <call><name>ShingleFilter</name><argument_list>(<argument><expr><name><name>streams</name><operator>.</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
    }
    streams.shingle.setMaxShingleSize(maxShingleSize</block></if></if_stmt>)</block_content></block></block><empty_stmt>;</empty_stmt></if></if_stmt>
    <expr_stmt><expr><call><name><name>streams</name><operator>.</operator><name>shingle</name><operator>.</operator><name>setMinShingleSize</name></name><argument_list>(<argument><expr><name>minShingleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>streams</name><operator>.</operator><name>shingle</name><operator>.</operator><name>setTokenSeparator</name></name><argument_list>(<argument><expr><name>tokenSeparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>streams</name><operator>.</operator><name>shingle</name><operator>.</operator><name>setOutputUnigrams</name></name><argument_list>(<argument><expr><name>outputUnigrams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>streams</name><operator>.</operator><name>shingle</name><operator>.</operator><name>setOutputUnigramsIfNoShingles</name></name><argument_list>(<argument><expr><name>outputUnigramsIfNoShingles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>streams</name><operator>.</operator><name>shingle</name></name></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><call><name><name>components</name><operator>.</operator><name>getTokenizer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
 }
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
index 1233da835c2..7a6c710d849 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
@@ -24</block><operator>,</operator>7 +24<operator>,</operator>6 @@ import org.apache.lucene.analysis.en.EnglishPossessiveFilter<empty_stmt>;</empty_stmt></constructor>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tr</name><operator>.</operator><name>TurkishLowerCaseFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharArraySet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>This</name> <name>analyzer</name> <name>will</name> <name>be</name> <name>removed</name> <name>in</name> <name>Lucene</name> <literal type="number">5.0</literal>
  <operator>*</operator><operator>/</operator>
 @<name>Deprecated</name>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>SnowballAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>SnowballAnalyzer</name> extends <name>Analyzer</name> <block>{
   <expr><specifier>private</specifier> <name>String</name> <name>name</name></expr>;
   <specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>stopSet</name></block></expr>;
   <specifier>private</specifier> <name>final</name> <name>Version</name> <name>matchVersion</name></block></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>sv</name><operator>/</operator><name><name>SwedishAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>sv</name><operator>/</operator><name><name>SwedishAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bc012dda195</name><operator>..</operator><literal type="number">7dd1702cde5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>sv</name><operator>/</operator><name><name>SwedishAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>sv</name><operator>/</operator><name><name>SwedishAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SwedishAnalyzer</name> extends <name>StopwordAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
index fcf10cf4db2..979339ff9da 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
@@ -27,7 +27,6 @@ import org.apache.lucene.analysis.core.StopFilter;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.analysis.standard.StandardFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.util.Version;
 
 /**
@@ -36,7 +35,7 @@ import org.apache.lucene.util.Version;
  * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: This class uses the same {@link Version}
  * dependent settings as {@link StandardAnalyzer}.&lt;/p&gt;
  */</comment>
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>ThaiAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>ThaiAnalyzer</name> extends <name>Analyzer</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>Version</name> <name>matchVersion</name></expr>;
 
   <specifier>public</specifier> <call><name>ThaiAnalyzer</name><argument_list>(<argument><expr><name>Version</name> <name>matchVersion</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">45</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">44</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ThaiAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Creates
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * used to tokenize all the text in the provided {@link Reader}.
    * 
   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from a {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and
    *         {@link StopFilter}
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishAnalyzer.java
index b7868490c38..e74732494ea 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishAnalyzer.java
@@ -109,11 +109,11 @@ public final class TurkishAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link TurkishLowerCaseFilter},
    *         {@link StopFilter}, {@link KeywordMarkerFilter} if a stem
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase.java
index 4daa59d76c0..c99dc54e092 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase.java
@@ -20,15 +20,14 @@ package org.apache.lucene.analysis.util;
 import java.io.IOException;
 import java.util.Set;
 
import org.apache.lucene.analysis.ReusableAnalyzerBase;
import org.apache.lucene.analysis.util.WordlistLoader;
import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.util.Version;
 
 /**
  * Base class for Analyzers that need to make use of stopword sets. 
  * 
  */</comment>
<expr><specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>StopwordAnalyzerBase</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>StopwordAnalyzerBase</name> extends <name>Analyzer</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * An immutable stopword set
@@ -92,7 +91,7 @@ public abstract class StopwordAnalyzerBase extends ReusableAnalyzerBase {
    *           if loading the stopwords throws an {@link IOException}
    */</comment>
   <expr><specifier>protected</specifier> <specifier>static</specifier> <name>CharArraySet</name> <call><name>loadStopwordSet</name><argument_list>(<argument><expr><name>final</name> <name>boolean</name> <name>ignoreCase</name></expr></argument>,
      <argument><expr><name>final</name> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ReusableAnalyzerBase</name></extends></argument>&gt;</argument_list></name> <name>aClass</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>resource</name></expr></argument>,
      <argument><expr><name>final</name> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Analyzer</name></extends></argument>&gt;</argument_list></name> <name>aClass</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>resource</name></expr></argument>,
       <argument><expr><name>final</name> <name>String</name> <name>comment</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>wordSet</name> <operator>=</operator> <call><name><name>WordlistLoader</name><operator>.</operator><name>getWordSet</name></name><argument_list>(<argument><expr><name>aClass</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>,
         <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>CollationKeyAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>CollationKeyAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7e75d18aaed</literal><operator>..</operator><literal type="number">97b6a3f897f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>CollationKeyAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>CollationKeyAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal>,<literal type="number">8</literal> <operator>+</operator><literal type="number">18</literal>,<literal type="number">8</literal> @@</block></expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>collation</name></name>;</package>
  <operator>*</operator><operator>/</operator></block></expr>
 
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>KeywordTokenizer</name></name>;</import></block></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IndexableBinaryStringTools</name></name>;</import></block></expr></expr_stmt> <comment type="line">// javadoc @link</comment>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>   <name>versions</name> <name>will</name> <name>encode</name> <name>the</name> <name>bytes</name> <name>with</name> <block>{@<expr><name>link</name> <name>IndexableBinaryStringTools</name></expr>}</block><operator>.</operator>
  <operator>*</operator> <operator>&lt;</operator><operator>/</operator><name>ul</name><operator>&gt;</operator>
  <operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>CollationKeyAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>CollationKeyAnalyzer</name> extends <name>Analyzer</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>Collator</name> <name>collator</name></expr>;
   <specifier>private</specifier> <name>final</name> <name>CollationAttributeFactory</name> <name>factory</name></block></expr>;
   <specifier>private</specifier> <name>final</name> <name>Version</name> <name>matchVersion</name></block></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>TestChineseTokenizer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>TestChineseTokenizer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3cec2995305</literal><operator>..</operator><literal type="number">15ff5a08fe3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>TestChineseTokenizer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>TestChineseTokenizer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestChineseTokenizer</name> extends <name>BaseTokenStreamTestCase</name>
      <operator>*</operator> <name>Analyzer</name> <name>that</name> <name>just</name> <name>uses</name> <name>ChineseTokenizer</name></expr><operator>,</operator> <expr><name>not</name> <name><name>ChineseFilter</name><operator>.</operator></name>
      * <name>convenience</name> <name>to</name> <name>show</name> <name>the</name> <name>behavior</name> <name>of</name> <name>the</name> <name>tokenizer</name>
      <operator>*</operator><operator>/</operator>
    <specifier>private</specifier> <name>class</name> <name>JustChineseTokenizerAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
    <expr><specifier>private</specifier> <name>class</name> <name>JustChineseTokenizerAnalyzer</name> extends <name>Analyzer</name> <block>{
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
         <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChineseTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
@@ <operator>-</operator><literal type="number">75</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">75</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestChineseTokenizer</name> extends <name>BaseTokenStreamTestCase</name>
      <operator>*</operator> <name>Analyzer</name> <name>that</name> <name>just</name> <name>uses</name> <name>ChineseFilter</name>, <name>not</name> <name><name>ChineseTokenizer</name><operator>.</operator></name>
      * <name>convenience</name> <name>to</name> <name>show</name> <name>the</name> <name>behavior</name> <name>of</name> <name>the</name> <name><name>filter</name><operator>.</operator></name>
      *<operator>/</operator>
    <specifier>private</specifier> <name>class</name> <name>JustChineseFilterAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
    <expr><specifier>private</specifier> <name>class</name> <name>JustChineseFilterAnalyzer</name> extends <name>Analyzer</name> <block>{
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
         <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_CURRENT</name></name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2119fc4a909</literal><operator>..</operator><literal type="number">8bdbf9aa7a7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">84</literal>,<literal type="number">7</literal> <operator>+</operator><literal type="number">84</literal>,<literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommonGramsFilterTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
    <expr><operator>*</operator> @</expr><return>return <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>testCommonGramsQueryFilter</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></return>)</block> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommonGramsFilterTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
   }</block>
   
   <specifier>public</specifier> <name>void</name> <call><name>testCommonGramsFilter</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content> <block>{<block_content>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b3fed982ead</name><operator>..</operator><literal type="number">3f3974da8f8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAnalyzers</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><name><name>String</name><index>[]</index></name> <name>y</name> <operator>=</operator> <name><name>StandardTokenizer</name><operator>.</operator><name>TOKEN_TYPES</name></name></expr>;
   }</block>
 
  <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>LowerCaseWhitespaceAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>LowerCaseWhitespaceAnalyzer</name> extends <name>Analyzer</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestStandardAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestStandardAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">08b49ef9b94</literal><operator>..</operator><name>fa1a638bba6</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestStandardAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestStandardAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestStandardAnalyzer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><call><name><name>BaseTokenStreamTestCase</name><operator>.</operator><name>assertTokenStreamContents</name></name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"testing"</literal></expr>, <expr><literal type="string">"1234"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>private</specifier> <name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name>
       <parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestUAX29URLEmailTokenizer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestUAX29URLEmailTokenizer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4a5002c93ea</literal><operator>..</operator><literal type="number">1af100c4098</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestUAX29URLEmailTokenizer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestUAX29URLEmailTokenizer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">8</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">8</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>UAX29URLEmailTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>TypeAttribute</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestUAX29URLEmailTokenizer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><call><name><name>BaseTokenStreamTestCase</name><operator>.</operator><name>assertTokenStreamContents</name></name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"testing"</literal></expr>, <expr><literal type="string">"1234"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>private</specifier> <name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name>
       <parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestUAX29URLEmailTokenizer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block_content>
 
  private Analyzer urlAnalyzer = new ReusableAnalyzerBase(</block></function>)</block> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>urlAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <decl_stmt><decl><type><name>UAX29URLEmailTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>UAX29URLEmailTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestUAX29URLEmailTokenizer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block_content></block>;</function>
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>emailAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>emailAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <decl_stmt><decl><type><name>UAX29URLEmailTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>UAX29URLEmailTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">431</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">430</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestUAX29URLEmailTokenizer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
   <comment type="block" format="javadoc">/** @deprecated remove this and sophisticated backwards layer in 5.0 */</comment>
   @<expr><name>Deprecated</name>
   <specifier>public</specifier> <name>void</name> <call><name>testCombiningMarksBackwards</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr>) <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name>
         <parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanLightStemFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanLightStemFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">20aab6b2b00</literal><operator>..</operator><literal type="number">3c3528d6a9f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanLightStemFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanLightStemFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Simple</name> <name>tests</name></expr></expr_stmt> <for>for <block>{<block_content><annotation>@<name>link</name></annotation> <expr_stmt><expr><name>GermanLightStemFilter</name></expr></expr_stmt>}</block_content>
  */
 public class TestGermanLightStemFilter extends BaseTokenStreamTestCase <block>{<block_content>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>,
         <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanMinimalStemFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanMinimalStemFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">521721fc074</literal><operator>..</operator><name>cc1a669e341</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanMinimalStemFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanMinimalStemFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Simple</name> <name>tests</name></expr></expr_stmt> <for>for <block>{<block_content><annotation>@<name>link</name></annotation> <expr_stmt><expr><name>GermanMinimalStemFilter</name></expr></expr_stmt>}</block_content>
  */
 public class TestGermanMinimalStemFilter extends BaseTokenStreamTestCase <block>{<block_content>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>,
         <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanStemFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanStemFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5d3e6c6673a</literal><operator>..</operator><literal type="number">27e9a846338</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanStemFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>de</name><operator>/</operator><name><name>TestGermanStemFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>KeywordTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>LowerCaseFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>
  <operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>TestGermanStemFilter</name> extends <name>BaseTokenStreamTestCase</name> <block>{
  <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>,
         <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestEnglishMinimalStemFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestEnglishMinimalStemFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">74004805c18</literal><operator>..</operator><literal type="number">43c269627e6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestEnglishMinimalStemFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestEnglishMinimalStemFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Simple tests for {@link EnglishMinimalStemFilter}
  */</comment>
 <class><specifier>public</specifier> class <name>TestEnglishMinimalStemFilter</name> <super_list><extends>extends <super><name>BaseTokenStreamTestCase</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>,
         <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestKStemmer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestKStemmer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7b76ecb176f</literal><operator>..</operator><literal type="number">3449f81e85a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestKStemmer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestKStemmer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Tests for {@link KStemmer}
  */</comment>
 <class><specifier>public</specifier> class <name>TestKStemmer</name> <super_list><extends>extends <super><name>BaseTokenStreamTestCase</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>protected</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestPorterStemFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestPorterStemFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">20a6c0fecab</literal><operator>..</operator><literal type="number">0aec8d6771c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestPorterStemFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>en</name><operator>/</operator><name><name>TestPorterStemFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>miscellaneous</name><operator>.</operator><name>KeywordMarkerFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharArraySet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>VocabularyAssert</name><operator>.</operator><name>*</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Test</name> <name>the</name> <name>PorterStemFilter</name> <name>with</name> <name>Martin</name> <name>Porter</name><literal type="char">'s test data.
  */
 public class TestPorterStemFilter extends BaseTokenStreamTestCase {
  Analyzer a = new ReusableAnalyzerBase() {
  Analyzer a = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/es/TestSpanishLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/es/TestSpanishLightStemFilter.java
index aa05f8c6758..daaca467161 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/es/TestSpanishLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/es/TestSpanishLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link SpanishLightStemFilter}
  */
 public class TestSpanishLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/fi/TestFinnishLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/fi/TestFinnishLightStemFilter.java
index f604bab45d3..5cd64550441 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/fi/TestFinnishLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/fi/TestFinnishLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link FinnishLightStemFilter}
  */
 public class TestFinnishLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchLightStemFilter.java
index 3b477b87b58..57eb8adb782 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link FrenchLightStemFilter}
  */
 public class TestFrenchLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter.java
index 4e812163692..e6fb11fb618 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link FrenchMinimalStemFilter}
  */
 public class TestFrenchMinimalStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/gl/TestGalicianStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/gl/TestGalicianStemFilter.java
index 17056b1021f..c48b3412742 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/gl/TestGalicianStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/gl/TestGalicianStemFilter.java
@@ -28,13 +28,12 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 /**
  * Simple tests for {@link GalicianStemFilter}
  */
 public class TestGalicianStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/hu/TestHungarianLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/hu/TestHungarianLightStemFilter.java
index 7237bcf9752..90e4768db31 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/hu/TestHungarianLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/hu/TestHungarianLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link HungarianLightStemFilter}
  */
 public class TestHungarianLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/id/TestIndonesianStemmer.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/id/TestIndonesianStemmer.java
index cec4fa45688..2d9f832dc23 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/id/TestIndonesianStemmer.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/id/TestIndonesianStemmer.java
@@ -24,14 +24,13 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.KeywordTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 /**
  * Tests {@link IndonesianStemmer}
  */
 public class TestIndonesianStemmer extends BaseTokenStreamTestCase {
   /* full stemming, no stopwords */
  Analyzer a = new ReusableAnalyzerBase() {
  Analyzer a = new Analyzer() {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new KeywordTokenizer(reader);
@@ -112,7 +111,7 @@ public class TestIndonesianStemmer extends BaseTokenStreamTestCase {
   }
   
   /* inflectional-only stemming */
  Analyzer b = new ReusableAnalyzerBase() {
  Analyzer b = new Analyzer() {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new KeywordTokenizer(reader);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/it/TestItalianLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/it/TestItalianLightStemFilter.java
index ac1c77f4d36..90f96168dff 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/it/TestItalianLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/it/TestItalianLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link ItalianLightStemFilter}
  */
 public class TestItalianLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer.java
index d3a6b1dc35f..68201d11b9e 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer.java
@@ -24,13 +24,12 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 /**
  * Basic tests for {@link LatvianStemmer}
  */
 public class TestLatvianStemmer extends BaseTokenStreamTestCase {
  private Analyzer a = new ReusableAnalyzerBase() {
  private Analyzer a = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java
index 52191ac68ea..dc988b5df92 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java
@@ -213,7 +213,7 @@ public class TestWordDelimiterFilter extends BaseTokenStreamTestCase {
     final CharArraySet protWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet&lt;String&gt;(Arrays.asList("NUTCH")), false);
     
     /* analyzer that uses whitespace + wdf */
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       public TokenStreamComponents createComponents(String field, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -241,7 +241,7 @@ public class TestWordDelimiterFilter extends BaseTokenStreamTestCase {
         new int[] { 1, 1, 1 });
     
     /* analyzer that will consume tokens with large position increments */
    Analyzer a2 = new ReusableAnalyzerBase() {
    Analyzer a2 = new Analyzer() {
       @Override
       public TokenStreamComponents createComponents(String field, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -274,7 +274,7 @@ public class TestWordDelimiterFilter extends BaseTokenStreamTestCase {
         new int[] { 6, 14, 19 },
         new int[] { 1, 11, 1 });
 
    Analyzer a3 = new ReusableAnalyzerBase() {
    Analyzer a3 = new Analyzer() {
       @Override
       public TokenStreamComponents createComponents(String field, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseLightStemFilter.java
index 96a13bcf48c..a5b6ec283da 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseLightStemFilter.java
@@ -26,7 +26,6 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -34,7 +33,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link PortugueseLightStemFilter}
  */
 public class TestPortugueseLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseMinimalStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseMinimalStemFilter.java
index 410b87e8f85..1e6afe843da 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseMinimalStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseMinimalStemFilter.java
@@ -26,7 +26,6 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -34,7 +33,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link PortugueseMinimalStemFilter}
  */
 public class TestPortugueseMinimalStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseStemFilter.java
index 9ff23409a64..c71c8d6fbf0 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/pt/TestPortugueseStemFilter.java
@@ -28,13 +28,12 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 /**
  * Simple tests for {@link PortugueseStemFilter}
  */
 public class TestPortugueseStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianLightStemFilter.java
index 852093cc94e..015a7726810 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link RussianLightStemFilter}
  */
 public class TestRussianLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab.java
index dcaff635305..ed7f2c729df 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab.java
@@ -23,7 +23,6 @@ import java.io.Reader;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.KeywordTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.util.LuceneTestCase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
@@ -69,7 +68,7 @@ public class TestSnowballVocab extends LuceneTestCase {
       throws IOException {
     if (VERBOSE) System.out.println("checking snowball language: " + snowballLanguage);
     
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName,
           Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/sv/TestSwedishLightStemFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/sv/TestSwedishLightStemFilter.java
index 93b40ca627f..ae30b9be3cd 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/sv/TestSwedishLightStemFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/sv/TestSwedishLightStemFilter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import static org.apache.lucene.analysis.VocabularyAssert.*;
 
@@ -32,7 +31,7 @@ import static org.apache.lucene.analysis.VocabularyAssert.*;
  * Simple tests for {@link SwedishLightStemFilter}
  */
 public class TestSwedishLightStemFilter extends BaseTokenStreamTestCase {
  private Analyzer analyzer = new ReusableAnalyzerBase() {
  private Analyzer analyzer = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser.java
index cd2362435f3..f958f013686 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser.java
@@ -27,7 +27,6 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.en.EnglishAnalyzer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.junit.Test;
 
 /**
@@ -48,7 +47,7 @@ public class TestSolrSynonymParser extends BaseTokenStreamTestCase {
     parser.add(new StringReader(testFile));
     final SynonymMap map = parser.build();
     
    Analyzer analyzer = new ReusableAnalyzerBase() {
    Analyzer analyzer = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
@@ -121,7 +120,7 @@ public class TestSolrSynonymParser extends BaseTokenStreamTestCase {
     SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random, MockTokenizer.KEYWORD, false));
     parser.add(new StringReader(testFile));
     final SynonymMap map = parser.build();
    Analyzer analyzer = new ReusableAnalyzerBase() {
    Analyzer analyzer = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java
index ebfb00ff172..a49a8a0135c 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter.java
@@ -33,7 +33,6 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.*;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util._TestUtil;
 
@@ -387,7 +386,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
       final SynonymMap map = b.build();
       final boolean ignoreCase = random.nextBoolean();
       
      final Analyzer analyzer = new ReusableAnalyzerBase() {
      final Analyzer analyzer = new Analyzer() {
         @Override
         protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
           Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);
@@ -409,7 +408,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     parser.add(new StringReader(testFile));
     final SynonymMap map = parser.build();
       
    Analyzer analyzer = new ReusableAnalyzerBase() {
    Analyzer analyzer = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
@@ -467,7 +466,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     add("z x c v", "zxcv", keepOrig);
     add("x c", "xc", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -507,7 +506,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     add("a b", "ab", keepOrig);
     add("a b", "ab", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -527,7 +526,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     add("a b", "ab", keepOrig);
     add("a b", "ab", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -545,7 +544,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     final boolean keepOrig = false;
     add("zoo", "zoo", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -564,7 +563,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     add("zoo", "zoo", keepOrig);
     add("zoo", "zoo zoo", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -588,7 +587,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     add("z x c v", "zxcv", keepOrig);
     add("x c", "xc", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -633,7 +632,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     final boolean keepOrig = true;
     add("zoo zoo", "zoo", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
@@ -652,7 +651,7 @@ public class TestSynonymMapFilter extends BaseTokenStreamTestCase {
     add("zoo zoo", "zoo", keepOrig);
     add("zoo", "zoo zoo", keepOrig);
     final SynonymMap map = b.build();
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser.java
index fc2e4b34974..ed3472ee521 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser.java
@@ -25,7 +25,6 @@ import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 public class TestWordnetSynonymParser extends BaseTokenStreamTestCase {
   Analyzer analyzer;
@@ -46,7 +45,7 @@ public class TestWordnetSynonymParser extends BaseTokenStreamTestCase {
     parser.add(new StringReader(synonymsFile));
     final SynonymMap map = parser.build();
     
    Analyzer analyzer = new ReusableAnalyzerBase() {
    Analyzer analyzer = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java b/modules/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
index cb9c6e49214..929f04819e8 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
@@ -52,7 +52,7 @@ public class TestCollationKeyFilter extends CollationTestBase {
     (collator.getCollationKey(secondRangeEndOriginal).toByteArray()));
 
   
  public final class TestAnalyzer extends ReusableAnalyzerBase {
  public final class TestAnalyzer extends Analyzer {
     private Collator _collator;
 
     TestAnalyzer(Collator collator) {
diff --git a/modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java b/modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
index fc41cc8e546..95fafb428d4 100644
-- a/modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
++ b/modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
@@ -19,8 +19,8 @@ package org.apache.lucene.collation;
 
 
 import com.ibm.icu.text.Collator;
import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.core.KeywordTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.collation.CollationKeyAnalyzer; // javadocs
 import org.apache.lucene.util.IndexableBinaryStringTools; // javadocs
 import org.apache.lucene.util.Version;
@@ -75,7 +75,7 @@ import java.io.Reader;
  *   versions will encode the bytes with {@link IndexableBinaryStringTools}.
  * &lt;/ul&gt;
  */
public final class ICUCollationKeyAnalyzer extends ReusableAnalyzerBase {
public final class ICUCollationKeyAnalyzer extends Analyzer {
   private final Collator collator;
   private final ICUCollationAttributeFactory factory;
   private final Version matchVersion;
diff --git a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUFoldingFilter.java b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUFoldingFilter.java
index 9a632d6c280..dc0f26462e8 100644
-- a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUFoldingFilter.java
++ b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUFoldingFilter.java
@@ -27,7 +27,7 @@ import org.apache.lucene.analysis.core.WhitespaceTokenizer;
  * Tests ICUFoldingFilter
  */
 public class TestICUFoldingFilter extends BaseTokenStreamTestCase {
  Analyzer a = new ReusableAnalyzerBase() {
  Analyzer a = new Analyzer() {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);
diff --git a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter.java b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter.java
index a7fbbaeb714..e81c02d6a6a 100644
-- a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter.java
++ b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter.java
@@ -29,7 +29,7 @@ import com.ibm.icu.text.Normalizer2;
  * Tests the ICUNormalizer2Filter
  */
 public class TestICUNormalizer2Filter extends BaseTokenStreamTestCase {
  Analyzer a = new ReusableAnalyzerBase() {
  Analyzer a = new Analyzer() {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);
@@ -59,7 +59,7 @@ public class TestICUNormalizer2Filter extends BaseTokenStreamTestCase {
   }
   
   public void testAlternate() throws IOException {
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);
diff --git a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilter.java b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilter.java
index c4905be10d8..4d766155d91 100644
-- a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilter.java
++ b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilter.java
@@ -26,7 +26,6 @@ import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.KeywordTokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.analysis.TokenStream;
 
 import com.ibm.icu.text.Transliterator;
@@ -92,7 +91,7 @@ public class TestICUTransformFilter extends BaseTokenStreamTestCase {
   /** blast some random strings through the analyzer */
   public void testRandomStrings() throws Exception {
     final Transliterator transform = Transliterator.getInstance("Any-Latin");
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);
diff --git a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer.java b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer.java
index ab579f39dc5..c768e0fbf52 100644
-- a/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer.java
++ b/modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer.java
@@ -22,7 +22,6 @@ import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.icu.ICUNormalizer2Filter;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -61,7 +60,7 @@ public class TestICUTokenizer extends BaseTokenStreamTestCase {
     assertTokenStreamContents(tokenizer, expected);
   }
   
  private Analyzer a = new ReusableAnalyzerBase() {
  private Analyzer a = new Analyzer() {
     @Override
     protected TokenStreamComponents createComponents(String fieldName,
         Reader reader) {
diff --git a/modules/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java b/modules/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
index a513bba3b4f..f1a038ac6ee 100644
-- a/modules/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
++ b/modules/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
@@ -44,7 +44,7 @@ public class TestICUCollationKeyFilter extends CollationTestBase {
     (collator.getCollationKey(secondRangeEndOriginal).toByteArray()));
 
   
  public final class TestAnalyzer extends ReusableAnalyzerBase {
  public final class TestAnalyzer extends Analyzer {
     private Collator _collator;
 
     TestAnalyzer(Collator collator) {
diff --git a/modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikAnalyzer.java b/modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikAnalyzer.java
index ec74568f0a6..bfe0ca40519 100644
-- a/modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikAnalyzer.java
++ b/modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikAnalyzer.java
@@ -20,10 +20,10 @@ package org.apache.lucene.analysis.morfologik;
 
 import java.io.Reader;
 
import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.standard.StandardFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.util.Version;
 
 import morfologik.stemming.PolishStemmer.DICTIONARY;
@@ -32,7 +32,7 @@ import morfologik.stemming.PolishStemmer.DICTIONARY;
  * {@link org.apache.lucene.analysis.Analyzer} using Morfologik library.
  * @see &lt;a href="http://morfologik.blogspot.com/"&gt;Morfologik project page&lt;/a&gt;
  */
public class MorfologikAnalyzer extends ReusableAnalyzerBase {
public class MorfologikAnalyzer extends Analyzer {
 
   private final DICTIONARY dictionary;
   private final Version version;
@@ -62,14 +62,14 @@ public class MorfologikAnalyzer extends ReusableAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @param field ignored field name
    * @param reader source of tokens
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter} and {@link MorfologikFilter}.
    */
diff --git a/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java b/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
index d805717a34b..f078b6ab1d7 100644
-- a/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
++ b/modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
@@ -25,7 +25,6 @@ import java.util.Collections;
 import java.util.Set;
 
 import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.analysis.en.PorterStemFilter;
 import org.apache.lucene.analysis.util.WordlistLoader;
 import org.apache.lucene.analysis.TokenStream;
@@ -55,7 +54,7 @@ import org.apache.lucene.util.Version;
  * &lt;/p&gt;
  * @lucene.experimental
  */
public final class SmartChineseAnalyzer extends ReusableAnalyzerBase {
public final class SmartChineseAnalyzer extends Analyzer {
 
   private final Set&lt;?&gt; stopWords;
   
diff --git a/modules/analysis/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer.java b/modules/analysis/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer.java
index 107af33788e..8dc589a6936 100644
-- a/modules/analysis/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer.java
++ b/modules/analysis/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer.java
@@ -121,11 +121,11 @@ public final class PolishAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Creates a
   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    * which tokenizes all the text in the provided {@link Reader}.
    * 
    * @return A
   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}
   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}
    *         built from an {@link StandardTokenizer} filtered with
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}
    *         , {@link KeywordMarkerFilter} if a stem exclusion set is
diff --git a/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java b/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java
index 45103b6260d..eed8d356020 100644
-- a/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java
++ b/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java
@@ -137,7 +137,7 @@ public class CategoryListIteratorTest extends LuceneTestCase {
     DataTokenStream dts2 = new DataTokenStream("2",new SortingIntEncoder(
         new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));
     // this test requires that no payloads ever be randomly present!
    final Analyzer noPayloadsAnalyzer = new ReusableAnalyzerBase() {
    final Analyzer noPayloadsAnalyzer = new Analyzer() {
       @Override
       public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.KEYWORD, false));
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java
index 1e900c0cc1e..80cfff336de 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java
@@ -134,7 +134,7 @@ final class TestFoldingFilter extends TokenFilter {
   }
 }
 
final class ASCIIAnalyzer extends ReusableAnalyzerBase {
final class ASCIIAnalyzer extends Analyzer {
 
   @Override
   public TokenStreamComponents createComponents(String fieldName, Reader reader) {
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
index a845161f99d..a510c9d89ed 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
@@ -122,7 +122,7 @@ public class TestMultiAnalyzer extends BaseTokenStreamTestCase {
    * Expands "multi" to "multi" and "multi2", both at the same position,
    * and expands "triplemulti" to "triplemulti", "multi3", and "multi2".  
    */
  private class MultiAnalyzer extends ReusableAnalyzerBase {
  private class MultiAnalyzer extends Analyzer {
 
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
@@ -192,7 +192,7 @@ public class TestMultiAnalyzer extends BaseTokenStreamTestCase {
    * Analyzes "the quick brown" as: quick(incr=2) brown(incr=1).
    * Does not work correctly for input other than "the quick brown ...".
    */
  private class PosIncrementAnalyzer extends ReusableAnalyzerBase {
  private class PosIncrementAnalyzer extends Analyzer {
 
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
index 8ee4fcaf1b2..e3d29cccf67 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
@@ -300,7 +300,7 @@ public class TestMultiFieldQueryParser extends LuceneTestCase {
   /**
    * Return empty tokens for field "f1".
    */
  private static class AnalyzerReturningNull extends ReusableAnalyzerBase {
  private static class AnalyzerReturningNull extends Analyzer {
     MockAnalyzer stdAnalyzer = new MockAnalyzer(random);
 
     public AnalyzerReturningNull() {
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing.java
index 8da47149fa2..85471dfedf6 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing.java
@@ -18,7 +18,6 @@ package org.apache.lucene.queryparser.classic;
  */
 
 import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
@@ -42,7 +41,7 @@ public class TestMultiPhraseQueryParsing extends LuceneTestCase {
       }
     }
 
  private static class CannedAnalyzer extends ReusableAnalyzerBase {
  private static class CannedAnalyzer extends Analyzer {
     private final TokenAndPos[] tokens;
 
     public CannedAnalyzer(TokenAndPos[] tokens) {
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser.java
index 86f27f95205..c7755da8717 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser.java
@@ -112,7 +112,7 @@ public class TestPrecedenceQueryParser extends LuceneTestCase {
     }
   }
 
  public static final class QPTestAnalyzer extends ReusableAnalyzerBase {
  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters MockTokenizer with StopFilter. */
     @Override
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java
index 65d4973d884..7b1d49b8d33 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java
@@ -143,7 +143,7 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase {
    * Expands "multi" to "multi" and "multi2", both at the same position, and
    * expands "triplemulti" to "triplemulti", "multi3", and "multi2".
    */
  private class MultiAnalyzer extends ReusableAnalyzerBase {
  private class MultiAnalyzer extends Analyzer {
 
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
@@ -210,7 +210,7 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase {
    * Analyzes "the quick brown" as: quick(incr=2) brown(incr=1). Does not work
    * correctly for input other than "the quick brown ...".
    */
  private class PosIncrementAnalyzer extends ReusableAnalyzerBase {
  private class PosIncrementAnalyzer extends Analyzer {
 
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
index 97ef084bde8..a4354418e66 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
@@ -338,7 +338,7 @@ public class TestMultiFieldQPHelper extends LuceneTestCase {
   /**
    * Return empty tokens for field "f1".
    */
  private static final class AnalyzerReturningNull extends ReusableAnalyzerBase {
  private static final class AnalyzerReturningNull extends Analyzer {
     MockAnalyzer stdAnalyzer = new MockAnalyzer(random);
 
     public AnalyzerReturningNull() {
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
index 6627609a5d5..a132341c280 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
@@ -128,7 +128,7 @@ public class TestQPHelper extends LuceneTestCase {
     }
   }
 
  public static final class QPTestAnalyzer extends ReusableAnalyzerBase {
  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters MockTokenizer with StopFilter. */
     @Override
@@ -345,7 +345,7 @@ public class TestQPHelper extends LuceneTestCase {
     }
   }
 
  private class SimpleCJKAnalyzer extends ReusableAnalyzerBase {
  private class SimpleCJKAnalyzer extends Analyzer {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       return new TokenStreamComponents(new SimpleCJKTokenizer(reader));
@@ -1242,7 +1242,7 @@ public class TestQPHelper extends LuceneTestCase {
     }
   }
 
  private class CannedAnalyzer extends ReusableAnalyzerBase {
  private class CannedAnalyzer extends Analyzer {
     @Override
     public TokenStreamComponents createComponents(String ignored, Reader alsoIgnored) {
       return new TokenStreamComponents(new CannedTokenStream());
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
index dae74708d2d..d4cf0350031 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
@@ -98,7 +98,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
   }
 
   
  public static final class QPTestAnalyzer extends ReusableAnalyzerBase {
  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters MockTokenizer with StopFilter. */
     @Override
@@ -240,7 +240,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
     }
   }
 
  private class SimpleCJKAnalyzer extends ReusableAnalyzerBase {
  private class SimpleCJKAnalyzer extends Analyzer {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       return new TokenStreamComponents(new SimpleCJKTokenizer(reader));
@@ -343,7 +343,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
     assertQueryEquals("a OR -b", null, "a -b");
 
     // +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator
    Analyzer a = new ReusableAnalyzerBase() {
    Analyzer a = new Analyzer() {
       @Override
       public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));
@@ -1157,7 +1157,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
   }
   
   /** whitespace+lowercase analyzer with synonyms */
  private class Analyzer1 extends ReusableAnalyzerBase {
  private class Analyzer1 extends Analyzer {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
@@ -1166,7 +1166,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
   }
   
   /** whitespace+lowercase analyzer without synonyms */
  private class Analyzer2 extends ReusableAnalyzerBase {
  private class Analyzer2 extends Analyzer {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));
@@ -1231,7 +1231,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
     }
     
   }
  private class MockCollationAnalyzer extends ReusableAnalyzerBase {
  private class MockCollationAnalyzer extends Analyzer {
     @Override
     public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
diff --git a/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java
index 57779bbbd22..2cbd5204abe 100644
-- a/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java
++ b/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java
@@ -37,7 +37,6 @@ import org.apache.lucene.analysis.synonym.SynonymFilter;
 import org.apache.lucene.analysis.synonym.SynonymMap;
 import org.apache.lucene.analysis.synonym.SolrSynonymParser;
 import org.apache.lucene.analysis.synonym.WordnetSynonymParser;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.util.Version;
 import org.apache.solr.common.ResourceLoader;
 import org.apache.solr.common.SolrException;
@@ -70,7 +69,7 @@ final class FSTSynonymFilterFactory extends BaseTokenFilterFactory implements Re
 
     final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);
     
    Analyzer analyzer = new ReusableAnalyzerBase() {
    Analyzer analyzer = new Analyzer() {
       @Override
       protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
         Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);
diff --git a/solr/core/src/java/org/apache/solr/analysis/SolrAnalyzer.java b/solr/core/src/java/org/apache/solr/analysis/SolrAnalyzer.java
index aad0807b260..6ab3fac2bb7 100644
-- a/solr/core/src/java/org/apache/solr/analysis/SolrAnalyzer.java
++ b/solr/core/src/java/org/apache/solr/analysis/SolrAnalyzer.java
@@ -26,10 +26,10 @@ import java.io.IOException;
  *
  */
 public abstract class SolrAnalyzer extends Analyzer {
  int posIncGap=0;
  
  int posIncGap = 0;

   public void setPositionIncrementGap(int gap) {
    posIncGap=gap;
    posIncGap = gap;
   }
 
   @Override
@@ -38,43 +38,13 @@ public abstract class SolrAnalyzer extends Analyzer {
   }
 
   /** wrap the reader in a CharStream, if appropriate */
  public Reader charStream(Reader reader){
  @Deprecated
  public Reader charStream(Reader reader) {
     return reader;
   }
 
   @Override
  public TokenStream tokenStream(String fieldName, Reader reader) {
    return getStream(fieldName, reader).getTokenStream();
  }

  public static class TokenStreamInfo {
    private final Tokenizer tokenizer;
    private final TokenStream tokenStream;
    public TokenStreamInfo(Tokenizer tokenizer, TokenStream tokenStream) {
      this.tokenizer = tokenizer;
      this.tokenStream = tokenStream;
    }
    public Tokenizer getTokenizer() { return tokenizer; }
    public TokenStream getTokenStream() { return tokenStream; }
  }


  public abstract TokenStreamInfo getStream(String fieldName, Reader reader);

  @Override
  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
    // if (true) return tokenStream(fieldName, reader);
    TokenStreamInfo tsi = (TokenStreamInfo)getPreviousTokenStream();
    if (tsi != null) {
      tsi.getTokenizer().reset(charStream(reader));
      // the consumer will currently call reset() on the TokenStream to hit all the filters.
      // this isn'</literal><name>t</name> <name>necessarily</name> <name>guaranteed</name> <name>by</name> <name>the</name> <name>APIs</name><operator>...</operator> <name>but</name> <name>is</name> <name>currently</name> <name>done</name></expr></expr_stmt>
      <comment type="line">// by lucene indexing in DocInverterPerField, and in the QueryParser</comment>
      <return>return <expr><call><name><name>tsi</name><operator>.</operator><name>getTokenStream</name></name><argument_list>()</argument_list></call></expr>;</return>
    <expr_stmt/>}</block_content> else <block>{<block_content>
      <expr_stmt><expr><name>tsi</name> <operator>=</operator> <call><name>getStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setPreviousTokenStream</name><argument_list>(<argument><expr><name>tsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>tsi</name><operator>.</operator><name>getTokenStream</name></name><argument_list>()</argument_list></call></expr>;</return>
    <expr_stmt/>}</block_content>
  protected Reader initReader(Reader reader</block></block></function>)</block> <block>{
    <return>return <expr><call><name>charStream</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block>
 <expr_stmt/></class></expr>}</init>
<name>diff</name> --<name>git</name> <name>a</name>/<name>solr</name>/<name>core</name>/<name>src</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>solr</name>/<name>analysis</name>/<name><name>TokenizerChain</name><operator>.</operator><name>java</name></name> <name>b</name>/<name>solr</name>/<name>core</name>/<name>src</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>solr</name>/<name>analysis</name>/<name><name>TokenizerChain</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cf04a82c17d</name>..19ee0e63092 100644
-- <name>a</name>/<name>solr</name>/<name>core</name>/<name>src</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>solr</name>/<name>analysis</name>/<name><name>TokenizerChain</name><operator>.</operator><name>java</name></name>
++ <name>b</name>/<name>solr</name>/<name>core</name>/<name>src</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>solr</name>/<name>analysis</name>/<name><name>TokenizerChain</name><operator>.</operator><name>java</name></name>
@@ -17</decl>,10 +17,7 @@
 
 package <decl><type ref="prev"/><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>analysis</name></name></decl>;</decl_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>CharStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>CharReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>TokenizerChain</name> extends <name>SolrAnalyzer</name> <block>{
   <expr><specifier>public</specifier> <name><name>TokenFilterFactory</name><index>[]</index></name> <call><name>getTokenFilterFactories</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><name>filters</name></expr>;</return> }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>Reader</name> <call><name>charStream</name><argument_list>(<argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call><block>{
    <if_stmt><if>if<condition>( <expr><name>charFilters</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>charFilters</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
  <function><type><specifier>public</specifier> <name>Reader</name></type> <name>initReader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>charFilters</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>charFilters</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>CharStream</name></type> <name>cs</name> <init>= <expr><call><name><name>CharReader</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>reader</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>charFilters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>cs</name> <operator>=</operator> <name><name>charFilters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>CharFilterFactory</name></type> <name>charFilter</name> <range>: <expr><name>charFilters</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name><name>charFilter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
       reader = cs</block><empty_stmt>;</empty_stmt></for>
     <expr_stmt/>}</block_content>
@@ -64</block><operator>,</operator><expr_stmt><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>TokenizerChain</name> extends <name>SolrAnalyzer</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>TokenStreamInfo</name> <call><name>getStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>Tokenizer</name> <name>tk</name> <operator>=</operator> <call><name><name>tokenizer</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>charStream</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <specifier>protected</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>aReader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>Tokenizer</name> <name>tk</name> <operator>=</operator> <call><name><name>tokenizer</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>aReader</name></expr></argument>)</argument_list></call></expr>;
     <name>TokenStream</name> <name>ts</name> <operator>=</operator> <name>tk</name></block></block></expr>;</expr_stmt></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>filters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>TokenFilterFactory</name></type> <name>filter</name> <range>: <expr><name>filters</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
    return new TokenStreamInfo(tk</block><operator>,</operator><expr_stmt><expr><name>ts</name></expr></expr_stmt></for>)</block_content></block><empty_stmt>;</empty_stmt></for>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tk</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
index 314d10e4db6..16c598fe1a1 100644
-- a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
++ b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
@@ -113</block><operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AnalysisRequestHandlerBase</name> extends <name>RequestHandlerBase</name> <block>{
       }</block></expr></expr_stmt></if></if_stmt>
     }</block_content>
 
    TokenStream tokenStream = tfac.create(tokenizerChain.charStream(new StringReader(value</block></function>)</block_content></block></if></if_stmt>)</block></expr>)</block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TokenStream</name></type> <name>tokenStream</name> <init>= <expr><call><name><name>tfac</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>tokenizerChain</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AttributeSource</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>analyzeTokenStream</name><argument_list>(<argument><expr><name>tokenStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>namedList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tokenStream</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>convertTokensToNamedLists</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AnalysisRequestHandlerBase</name> extends <name>RequestHandlerBase</name> <block>{
   <comment type="block" format="javadoc">/**
    * Converts the list of Tokens to a list of NamedLists representing the tokens.
    *
   * @param tokens  Tokens to convert
   * @param tokenList  Tokens to convert
    * @param context The analysis context
    *
    * @return List of NamedLists containing the relevant information taken from the tokens
diff --git a/solr/core/src/java/org/apache/solr/schema/BoolField.java b/solr/core/src/java/org/apache/solr/schema/BoolField.java
index 02ac067aecc..ecdeeb3761b 100644
-- a/solr/core/src/java/org/apache/solr/schema/BoolField.java
++ b/solr/core/src/java/org/apache/solr/schema/BoolField.java
@@ -30,7 +30,6 @@ import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueBool;
 import org.apache.solr.search.QParser;
import org.apache.solr.search.function.*;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
@@ -70,7 +69,7 @@ public class BoolField extends FieldType {
 
   protected final static Analyzer boolAnalyzer = new SolrAnalyzer() {
     @Override
    public TokenStreamInfo getStream(String fieldName, Reader reader) {
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer tokenizer = new Tokenizer(reader) {
         final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
         boolean done = false;
@@ -95,7 +94,7 @@ public class BoolField extends FieldType {
         }
       };
 
      return new TokenStreamInfo(tokenizer, tokenizer);
      return new TokenStreamComponents(tokenizer);
     }
   };
 
diff --git a/solr/core/src/java/org/apache/solr/schema/FieldType.java b/solr/core/src/java/org/apache/solr/schema/FieldType.java
index 0babcf289d9..814df41b988 100644
-- a/solr/core/src/java/org/apache/solr/schema/FieldType.java
++ b/solr/core/src/java/org/apache/solr/schema/FieldType.java
@@ -389,7 +389,7 @@ public abstract class FieldType extends FieldProperties {
     }
 
     @Override
    public TokenStreamInfo getStream(String fieldName, Reader reader) {
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
       Tokenizer ts = new Tokenizer(reader) {
         final char[] cbuf = new char[maxChars];
         final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
@@ -406,7 +406,7 @@ public abstract class FieldType extends FieldProperties {
         }
       };
 
      return new TokenStreamInfo(ts, ts);
      return new TokenStreamComponents(ts);
     }
   }
 
diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index 3e1ac3bce43..1325397a37e 100644
-- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -18,7 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.AnalyzerWrapper;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
@@ -41,8 +41,6 @@ import org.xml.sax.InputSource;
 import javax.xml.xpath.XPath;
 import javax.xml.xpath.XPathConstants;
 import javax.xml.xpath.XPathExpressionException;
import java.io.Reader;
import java.io.IOException;
 import java.util.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -292,50 +290,38 @@ public final class IndexSchema {
     queryAnalyzer = new SolrQueryAnalyzer();
   }
 
  private class SolrIndexAnalyzer extends Analyzer {
    protected final HashMap&lt;String,Analyzer&gt; analyzers;
  private class SolrIndexAnalyzer extends AnalyzerWrapper {
    protected final HashMap&lt;String, Analyzer&gt; analyzers;
 
     SolrIndexAnalyzer() {
       analyzers = analyzerCache();
     }
 
    protected HashMap&lt;String,Analyzer&gt; analyzerCache() {
      HashMap&lt;String,Analyzer&gt; cache = new HashMap&lt;String,Analyzer&gt;();
       for (SchemaField f : getFields().values()) {
    protected HashMap&lt;String, Analyzer&gt; analyzerCache() {
      HashMap&lt;String, Analyzer&gt; cache = new HashMap&lt;String, Analyzer&gt;();
      for (SchemaField f : getFields().values()) {
         Analyzer analyzer = f.getType().getAnalyzer();
         cache.put(f.getName(), analyzer);
       }
       return cache;
     }
 
    protected Analyzer getAnalyzer(String fieldName)
    {
      Analyzer analyzer = analyzers.get(fieldName);
      return analyzer!=null ? analyzer : getDynamicFieldType(fieldName).getAnalyzer();
    }

    @Override
    public TokenStream tokenStream(String fieldName, Reader reader)
    {
      return getAnalyzer(fieldName).tokenStream(fieldName,reader);
    }

     @Override
    public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
      return getAnalyzer(fieldName).reusableTokenStream(fieldName,reader);
    protected Analyzer getWrappedAnalyzer(String fieldName) {
      Analyzer analyzer = analyzers.get(fieldName);
      return analyzer != null ? analyzer : getDynamicFieldType(fieldName).getAnalyzer();
     }
 
     @Override
    public int getPositionIncrementGap(String fieldName) {
      return getAnalyzer(fieldName).getPositionIncrementGap(fieldName);
    protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {
      return components;
     }
   }
 

   private class SolrQueryAnalyzer extends SolrIndexAnalyzer {
     @Override
    protected HashMap&lt;String,Analyzer&gt; analyzerCache() {
      HashMap&lt;String,Analyzer&gt; cache = new HashMap&lt;String,Analyzer&gt;();
    protected HashMap&lt;String, Analyzer&gt; analyzerCache() {
      HashMap&lt;String, Analyzer&gt; cache = new HashMap&lt;String, Analyzer&gt;();
        for (SchemaField f : getFields().values()) {
         Analyzer analyzer = f.getType().getQueryAnalyzer();
         cache.put(f.getName(), analyzer);
@@ -344,10 +330,9 @@ public final class IndexSchema {
     }
 
     @Override
    protected Analyzer getAnalyzer(String fieldName)
    {
    protected Analyzer getWrappedAnalyzer(String fieldName) {
       Analyzer analyzer = analyzers.get(fieldName);
      return analyzer!=null ? analyzer : getDynamicFieldType(fieldName).getQueryAnalyzer();
      return analyzer != null ? analyzer : getDynamicFieldType(fieldName).getQueryAnalyzer();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest.java b/solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest.java
new file mode 100644
index 00000000000..9b915497d38
-- /dev/null
++ b/solr/core/src/test/org/apache/solr/schema/IndexSchemaRuntimeFieldTest.java
@@ -0,0 +1,72 @@
package org.apache.solr.schema;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name></expr>;</block></expr></expr_stmt>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>SolrQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>LocalSolrQueryRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>IndexSchemaRuntimeFieldTest</name> <super_list><extends>extends <super><name>SolrTestCaseJ4</name></super></extends></super_list> <block>{

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig.xml"</literal></expr></argument>,<argument><expr><literal type="string">"schema.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/>}</block_content>

  @Test
  public void testRuntimeFieldCreation(</block></function>)</block> <block>{<block_content>
    <comment type="line">// any field manipulation needs to happen when you know the core will not</comment>
    <comment type="line">// be accepting any requests.  Typically this is done within the inform()</comment>
    <comment type="line">// method.  Since this is a single threaded test, we can change the fields</comment>
    <comment type="line">// willi-nilly</comment>

    <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexSchema</name></type> <name>schema</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fieldName</name> <init>= <expr><literal type="string">"runtimefield"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SchemaField</name></type> <name>sf</name> <init>= <expr><operator>new</operator> <call><name>SchemaField</name><argument_list>( <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><call><name><name>schema</name><operator>.</operator><name>getFieldTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>( <argument><expr><literal type="string">"string"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>( <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>sf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// also register a new copy field (from our new field)</comment>
    <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>registerCopyField</name></name><argument_list>( <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="string">"dynamic_runtime"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <constructor_decl><name><name>schema</name><operator>.</operator><name>refreshAnalyzers</name></name><parameter_list>()</parameter_list>;</constructor_decl>

    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrQuery</name></type> <name>query</name> <init>= <expr><operator>new</operator> <call><name>SolrQuery</name><argument_list>( <argument><expr><name>fieldName</name><operator>+</operator><literal type="string">":aaa"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>set</name></name><argument_list>( <argument><expr><literal type="string">"indent"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SolrQueryRequest</name></type> <name>req</name> <init>= <expr><operator>new</operator> <call><name>LocalSolrQueryRequest</name><argument_list>( <argument><expr><name>core</name></expr></argument>, <argument><expr><name>query</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"Make sure they got in"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>
            ,<argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>
            ,<argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.='10']"</literal></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check to see if our copy field made it out safely</comment>
    <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setQuery</name></name><argument_list>( <argument><expr><literal type="string">"dynamic_runtime:aaa"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"Make sure they got in"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>
            ,<argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>
            ,<argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.='10']"</literal></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    <constructor_decl><name>clearIndex</name><parameter_list>()</parameter_list>;</constructor_decl>
  <expr_stmt/>}</block_content>
}
diff --git a/solr/core/src/test/org/apache/solr/schema/IndexSchemaTest.java b/solr/core/src/test/org/apache/solr/schema/IndexSchemaTest.java
index 4d54a6fd2c5..6e97833a7b9 100644
-- a/solr/core/src/test/org/apache/solr/schema/IndexSchemaTest.java
++ b/solr/core/src/test/org/apache/solr/schema/IndexSchemaTest.java
@@ -17</block><operator>,</operator><expr_stmt><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@</expr></expr_stmt></class>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>SimilarityProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>SolrQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>CommonParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>MapSolrParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>LocalSolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>MockConfigurableSimilarityProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>SimilarityProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

 
 <class><specifier>public</specifier> class <name>IndexSchemaTest</name> <super_list><extends>extends <super><name>SolrTestCaseJ4</name></super></extends></super_list> <block>{
   <function><annotation>@<name>BeforeClass</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig.xml"</literal></expr></argument>,<argument><expr><literal type="string">"schema.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/>}</block_content>    
  }
 
   <comment type="block" format="javadoc">/**
    * This test assumes the schema includes:
@@ -45,22 +44,22 @@ public class IndexSchemaTest extends SolrTestCaseJ4 {
    * &lt;dynamicField name="*_dynamic" type="string" indexed="true" stored="true"/&gt;
    */</comment>
   @Test
  public void testDynamicCopy(</block></function>)</block> 
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDynamicCopy</name><parameter_list>()</parameter_list>
   <block>{<block_content>
     <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"aaa_dynamic"</literal></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name><name>CommonParams</name><operator>.</operator><name>Q</name></name></expr></argument>, <argument><expr><literal type="string">"title:test"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><literal type="string">"indent"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>SolrQueryRequest</name></type> <name>req</name> <init>= <expr><operator>new</operator> <call><name>LocalSolrQueryRequest</name><argument_list>( <argument><expr><name>core</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MapSolrParams</name><argument_list>( <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    

     <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"Make sure they got in"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>
             ,<argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>
             ,<argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.='10']"</literal></expr></argument>
             )</argument_list></call></expr>;</expr_stmt>
    

     <expr_stmt><expr><name>args</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><name><name>CommonParams</name><operator>.</operator><name>Q</name></name></expr></argument>, <argument><expr><literal type="string">"aaa_dynamic:aaa"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><literal type="string">"indent"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchemaTest</name> extends <name>SolrTestCaseJ4</name> <block>{
             )</block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>clearIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
  
  @Test
  public void testRuntimeFieldCreation(</block></function></class>)</block>
  <block>{
    <comment type="line">// any field manipulation needs to happen when you know the core will not </comment>
    <comment type="line">// be accepting any requests.  Typically this is done within the inform() </comment>
    <comment type="line">// method.  Since this is a single threaded test, we can change the fields</comment>
    <comment type="line">// willi-nilly</comment>
 
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSimilarityProviderFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexSchema</name></type> <name>schema</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fieldName</name> <init>= <expr><literal type="string">"runtimefield"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SchemaField</name></type> <name>sf</name> <init>= <expr><operator>new</operator> <call><name>SchemaField</name><argument_list>( <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><call><name><name>schema</name><operator>.</operator><name>getFieldTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>( <argument><expr><literal type="string">"string"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>( <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>sf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// also register a new copy field (from our new field)</comment>
    <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>registerCopyField</name></name><argument_list>( <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="string">"dynamic_runtime"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SolrQuery</name></type> <name>query</name> <init>= <expr><operator>new</operator> <call><name>SolrQuery</name><argument_list>( <argument><expr><name>fieldName</name><operator>+</operator><literal type="string">":aaa"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>set</name></name><argument_list>( <argument><expr><literal type="string">"indent"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SolrQueryRequest</name></type> <name>req</name> <init>= <expr><operator>new</operator> <call><name>LocalSolrQueryRequest</name><argument_list>( <argument><expr><name>core</name></expr></argument>, <argument><expr><name>query</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"Make sure they got in"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>
            ,<argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>
            ,<argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.='10']"</literal></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// Check to see if our copy field made it out safely</comment>
    <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setQuery</name></name><argument_list>( <argument><expr><literal type="string">"dynamic_runtime:aaa"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><literal type="string">"Make sure they got in"</literal></expr></argument>, <argument><expr><name>req</name></expr></argument>
            ,<argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>
            ,<argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.='10']"</literal></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clearIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SimilarityProvider</name></type> <name>similarityProvider</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimilarityProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"wrong class"</literal></expr></argument>, <argument><expr><name>similarityProvider</name> <operator>instanceof</operator> <name>MockConfigurableSimilarityProvider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"is there an echo?"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MockConfigurableSimilarityProvider</name><operator>)</operator><name>similarityProvider</name><operator>)</operator><operator>.</operator><call><name>getPassthrough</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
  

   @Test
   public void testIsDynamicField(</block></function>)</block> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>SolrCore</name> <name>core</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></class></expr></init></decl></decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchemaTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><name>SolrCore</name> <name>core</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr>;
     <name>IndexSchema</name> <name>schema</name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiValued</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt/>}</block>
 <expr_stmt/></class>}</block_content>
diff --git a/solr/webapp/web/admin/analysis.jsp b/solr/webapp/web/admin/analysis.jsp
index e517eb0f842..180719ffc75 100644
-- a/solr/webapp/web/admin/analysis.jsp
++ b/solr/webapp/web/admin/analysis.jsp
@@ -204</block><operator>,</operator>7 +204<operator>,</operator>7 @@
          }
        }
 
       TokenStream tstream <init>= <expr><call><name><name>tfac</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>tchain</name><operator>.</operator><name>charStream</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument></argument_list></call></expr>)</init>;</function>
       <decl_stmt><decl><type><name>TokenStream</name></type> <name>tstream</name> <init>= <expr><call><name><name>tfac</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>tchain</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AttributeSource</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>getTokens</name><argument_list>(<argument><expr><name>tstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>writeHeader</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>tfac</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tfac</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block></class></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block_content></block></block></for></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block_content></block></block></for></block_content></block></function></block></class></expr></block></block></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block></class></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></block></function></block></class></expr></block></block></expr></block></expr></block></block></expr></block></expr></block></expr></expr_stmt></block></class></block_content></block></block></function></block></class></expr></init></decl></decl_stmt></block></class></block></expr></expr_stmt></block_content></block></function></block></class></block_content></block></block></function></block></class></block_content></block></block></function></block></class></expr></init></decl></decl_stmt></block></class></block></expr></expr_stmt></block_content></block></function></block></class></expr></block></block></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block_content></block></function></block></class></expr></expr_stmt></block></class></expr></expr_stmt></block_content></block></else></if_stmt></block_content></block></function></block></class></expr></expr_stmt></block></class></expr></expr_stmt></block_content></block></if></if_stmt></block></block></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></block></function></block></class></block></class></block></class></block></class></block></class></block></class></block></class></block></class>

</unit>
