<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/ed1f977916.java"><expr_stmt><expr><name>From</name> <name>ed1f9779161d3c1aa1c9cd13b17b1c13f71b422e</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">17</literal> <name>Jun</name> <literal type="number">2010</literal> <literal type="number">03</literal><operator>:</operator><literal type="number">05</literal><operator>:</operator><literal type="number">46</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">1885</literal> <name>and</name> <name>SOLR</name><operator>-</operator><literal type="number">1711</literal><operator>:</operator> <name>release</name> <name>connections</name> <name>to</name> <name>prevent</name> <name>hang</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@955471 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solrj</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>StreamingUpdateSolrServer</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">126</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">68</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">64</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">9e1638adf69</literal><operator>..</operator><name>afff725a78a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>Bug</name> <call><name>Fixes</name>
   <argument_list>(<argument><expr><name>Robert</name> <name>Muir</name> <name>via</name> <name>shalin</name></expr></argument>)</argument_list></call>
 
 <operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">1711</literal><operator>:</operator> <name>SolrJ</name> <operator>-</operator> <name>StreamingUpdateSolrServer</name> <name>had</name> <name>a</name> <name>race</name> <name>condition</name> <name>that</name>
  <name>could</name> <name>halt</name> <name>the</name> <name>streaming</name> <name>of</name> <name><name>documents</name><operator>.</operator></name> (<name>Attila</name> <name>Babo</name> <name>via</name> <name>yonik</name></expr></expr_stmt>)
  
  <decl_stmt><decl><type><name>could</name> <name>halt</name> <name>the</name> <name>streaming</name> <name>of</name> <name><name>documents</name><operator>.</operator> <name>The</name></name> <name>original</name> <name>patch</name> <name>to</name> <name>fix</name></type> <name>this</name>
  <argument_list>(<argument><expr><name>never</name> <name>officially</name> <name>released</name></expr></argument>)</argument_list> <name>introduced</name> <name>another</name> <name>hanging</name> <name>bug</name> <name>due</name> <name>to</name>
  <name>connections</name> <name>not</name> <name>being</name> <name><name>released</name><operator>.</operator></name>  (<name>Attila</name> <name>Babo</name></decl>, <decl><type ref="prev"/><name>Erik</name> <name>Hetzner</name> <name>via</name> <name>yonik</name></decl>)  

 * SOLR-1748<operator>,</operator> SOLR-1747<operator>,</operator> SOLR-1746<operator>,</operator> SOLR-1745<operator>,</operator> SOLR-1744: Streams and Readers
   retrieved from ContentStreams are not closed in various places<operator>,</operator> resulting
   in file descriptor leaks.
diff --git a/solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java b/solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java
index 8254b93dacf..f979b84b132 100644
-- a/solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java
++ b/solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java
@@ -100<operator>,</operator>79 +100<operator>,</operator>81 @@ public class StreamingUpdateSolrServer extends CommonsHttpSolrServer
       PostMethod method = null;</decl_stmt>
       <try>try <block>{<block_content>
         <do>do <block>{<block_content>
        <decl_stmt><decl><type><name>RequestEntity</name></type> <name>request</name> <init>= <expr><operator>new</operator> <class><super><name>RequestEntity</name></super><argument_list>()</argument_list> <block>{
          <comment type="line">// we don't know the length</comment>
          <function><type><specifier>public</specifier> <name>long</name></type> <name>getContentLength</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
          <function><type><specifier>public</specifier> <name>String</name></type> <name>getContentType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>ClientUtils</name><operator>.</operator><name>TEXT_XML</name></name></expr>;</return> </block_content>}</block></function>
          <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRepeatable</name><parameter_list>()</parameter_list>  <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
  
          <function><type><specifier>public</specifier> <name>void</name></type> <name>writeRequest</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <try>try <block>{<block_content>
              <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"&lt;stream&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="line">// can be anything...</comment>
              <decl_stmt><decl><type><name>UpdateRequest</name></type> <name>req</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>( <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
              <while>while<condition>( <expr><name>req</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>( <argument><expr><literal type="string">"sending: {}"</literal></expr></argument> , <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>writeXML</name></name><argument_list>( <argument><expr><name>writer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
                
                <comment type="line">// check for commit or optimize</comment>
                <decl_stmt><decl><type><name>SolrParams</name></type> <name>params</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>( <expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>fmt</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                  <if_stmt><if>if<condition>( <expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>OPTIMIZE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
                    <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"&lt;optimize waitSearcher=\"%s\" waitFlush=\"%s\" /&gt;"</literal></expr>;</expr_stmt>
                  </block_content>}</block></if>
                  <if type="elseif">else if<condition>( <expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>COMMIT</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
                    <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"&lt;commit waitSearcher=\"%s\" waitFlush=\"%s\" /&gt;"</literal></expr>;</expr_stmt>
                  </block_content>}</block></if></if_stmt>
                  <if_stmt><if>if<condition>( <expr><name>fmt</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, 
                        <argument><expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>WAIT_SEARCHER</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,
                        <argument><expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>WAIT_FLUSH</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>RequestEntity</name></type> <name>request</name> <init>= <expr><operator>new</operator> <class><super><name>RequestEntity</name></super><argument_list>()</argument_list> <block>{
              <comment type="line">// we don't know the length</comment>
              <function><type><specifier>public</specifier> <name>long</name></type> <name>getContentLength</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
              <function><type><specifier>public</specifier> <name>String</name></type> <name>getContentType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>ClientUtils</name><operator>.</operator><name>TEXT_XML</name></name></expr>;</return> </block_content>}</block></function>
              <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRepeatable</name><parameter_list>()</parameter_list>  <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
      
              <function><type><specifier>public</specifier> <name>void</name></type> <name>writeRequest</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
                <try>try <block>{<block_content>
                  <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"&lt;stream&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="line">// can be anything...</comment>
                  <decl_stmt><decl><type><name>UpdateRequest</name></type> <name>req</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>( <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                  <while>while<condition>( <expr><name>req</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>( <argument><expr><literal type="string">"sending: {}"</literal></expr></argument> , <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>writeXML</name></name><argument_list>( <argument><expr><name>writer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
                    
                    <comment type="line">// check for commit or optimize</comment>
                    <decl_stmt><decl><type><name>SolrParams</name></type> <name>params</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if<condition>( <expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                      <decl_stmt><decl><type><name>String</name></type> <name>fmt</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                      <if_stmt><if>if<condition>( <expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>OPTIMIZE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"&lt;optimize waitSearcher=\"%s\" waitFlush=\"%s\" /&gt;"</literal></expr>;</expr_stmt>
                      </block_content>}</block></if>
                      <if type="elseif">else if<condition>( <expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>COMMIT</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"&lt;commit waitSearcher=\"%s\" waitFlush=\"%s\" /&gt;"</literal></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt>
                      <if_stmt><if>if<condition>( <expr><name>fmt</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, 
                            <argument><expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>WAIT_SEARCHER</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,
                            <argument><expr><call><name><name>params</name><operator>.</operator><name>getBool</name></name><argument_list>( <argument><expr><name><name>UpdateParams</name><operator>.</operator><name>WAIT_FLUSH</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>req</name> <operator>=</operator> <call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>( <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></while>
                  <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"&lt;/stream&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                  <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></catch></try>
                
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>req</name> <operator>=</operator> <call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>( <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></function>
              <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"&lt;/stream&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <constructor_decl><name><name>writer</name><operator>.</operator><name>flush</name></name><parameter_list>()</parameter_list>;</constructor_decl>
            }</block></class></expr></init></decl>;</decl_stmt>
          
            <expr_stmt><expr><name>method</name> <operator>=</operator> <operator>new</operator> <call><name>PostMethod</name><argument_list>(<argument><expr><name>_baseURL</name><operator>+</operator><name>updateUrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>setRequestEntity</name></name><argument_list>( <argument><expr><name>request</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>setFollowRedirects</name></name><argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>addRequestHeader</name></name><argument_list>( <argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>AGENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>int</name></type> <name>statusCode</name> <init>= <expr><call><name>getHttpClient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeMethod</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>statusCode</name> <operator>!=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_OK</name></name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>StringBuilder</name></type> <name>msg</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><call><name><name>method</name><operator>.</operator><name>getStatusLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReasonPhrase</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"\n\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><call><name><name>method</name><operator>.</operator><name>getStatusText</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"\n\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"request: "</literal><operator>+</operator><call><name><name>method</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>handleError</name><argument_list>( <argument><expr><operator>new</operator> <call><name>Exception</name><argument_list>( <argument><expr><call><name><name>msg</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
            <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <try>try <block>{<block_content>
              <comment type="line">// make sure to release the connection</comment>
              <if_stmt><if>if<condition>(<expr><name>method</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>releaseConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
             </block_content>}</block>
            <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter> )</parameter_list><block>{<block_content/>}</block></catch></try>
           </block_content>}</block></finally>
        </block_content>}</block></try><empty_stmt>;</empty_stmt>
        
        <expr_stmt><expr><name>method</name> <operator>=</operator> <operator>new</operator> <call><name>PostMethod</name><argument_list>(<argument><expr><name>_baseURL</name><operator>+</operator><name>updateUrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>setRequestEntity</name></name><argument_list>( <argument><expr><name>request</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>setFollowRedirects</name></name><argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>addRequestHeader</name></name><argument_list>( <argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>AGENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>statusCode</name> <init>= <expr><call><name>getHttpClient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeMethod</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>statusCode</name> <operator>!=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_OK</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>StringBuilder</name></type> <name>msg</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><call><name><name>method</name><operator>.</operator><name>getStatusLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReasonPhrase</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"\n\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><call><name><name>method</name><operator>.</operator><name>getStatusText</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"\n\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>( <argument><expr><literal type="string">"request: "</literal><operator>+</operator><call><name><name>method</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>handleError</name><argument_list>( <argument><expr><operator>new</operator> <call><name>Exception</name><argument_list>( <argument><expr><call><name><name>msg</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>  <while>while<condition>( <expr><operator>!</operator> <call><name><name>queue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
        </block_content>}</block></if></if_stmt> <while>while<condition>( <expr><operator>!</operator> <call><name><name>queue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
       </block_content>}</block></while>
       <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <expr_stmt><expr><call><name>handleError</name><argument_list>( <argument><expr><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></catch> 
       <finally>finally <block>{<block_content>
        <try>try <block>{<block_content>
          <comment type="line">// make sure to release the connection</comment>
          <if_stmt><if>if<condition>(<expr><name>method</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>releaseConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter> )</parameter_list><block>{<block_content/>}</block></catch></try>
        
         <comment type="line">// remove it from the list of running things...</comment>
         <synchronized>synchronized <init>(<expr><name>runners</name></expr>)</init> <block>{<block_content>
           <expr_stmt><expr><call><name><name>runners</name><operator>.</operator><name>remove</name></name><argument_list>( <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></synchronized></block_content></block></finally></block_content></block></try></block_content></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></do></block_content></block></try>

</unit>
