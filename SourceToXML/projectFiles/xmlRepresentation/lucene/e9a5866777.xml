<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/e9a5866777.java"><expr_stmt><expr><name>From</name> <name>e9a586677731eb6634f731c63a81012b9db46390</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">19</literal> <name>Nov</name> <literal type="number">2007</literal> <literal type="number">19</literal><operator>:</operator><literal type="number">10</literal><operator>:</operator><literal type="number">37</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">1057</literal><operator>:</operator> <name>call</name> <name>clear</name> <name>when</name> <name>reusing</name> <name>token</name></expr><operator>,</operator> <expr><name>change</name> <name>clear</name> <name>to</name>
 <name>only</name> <name>resent</name> <name>essential</name> <name>fields</name></expr><operator>,</operator> <expr><name>re</name><operator>-</operator><name>add</name> <call><name><name>Token</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/java/trunk@596398 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Token</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">21</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocumentsWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">83</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">94</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">16</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Token</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Token</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">873b44512c5</literal><operator>..</operator><literal type="number">3bf67dfb3e1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Token</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>Token</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">361</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">361</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>class</name> <name>Token</name> implements <name>Cloneable</name> <block>{
     <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** Reset all state for this token back to defaults. */</comment>
  <comment type="block" format="javadoc">/** Resets the term text, payload, and positionIncrement to default.
   * Other fields such as startOffset, endOffset and the token type are
   * not reset since they are normally overwritten by the tokenizer. */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name>payload</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     <comment type="line">// Leave termBuffer to allow re-use</comment>
     <expr_stmt><expr><name>termLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>termText</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>positionIncrement</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>startOffset</name> <operator>=</operator> <name>endOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>DEFAULT_TYPE</name></expr>;</expr_stmt>
    <comment type="line">// startOffset = endOffset = 0;</comment>
    <comment type="line">// type = DEFAULT_TYPE;</comment>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>Token</name><operator>)</operator><call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>termBuffer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>termBuffer</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setTermBuffer</name></name><argument_list>(<argument><expr><name>termBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>termLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>t</name></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>  <comment type="line">// shouldn't happen</comment>
    </block_content>}</block></catch></try>
   </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocumentsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocumentsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e8b1fa310a4</name><operator>..</operator><name>e354235ad64</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocumentsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocumentsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1281</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1281</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>final</name> <name>class</name> <name>DocumentsWriter</name> <block>{
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>field</name><operator>.</operator><name>isTokenized</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>		  <comment type="line">// un-tokenized field</comment>
           <decl_stmt><decl><type><name>String</name></type> <name>stringValue</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>stringValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><name>localToken</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>setTermText</name></name><argument_list>(<argument><expr><name>stringValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>setStartOffset</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>setEndOffset</name></name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <call><name><name>stringValue</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1319</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1320</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>final</name> <name>class</name> <name>DocumentsWriter</name> <block>{
           <try>try <block>{<block_content>
             <expr_stmt><expr><name>offsetEnd</name> <operator>=</operator> <name>offset</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
             <decl_stmt><decl><type><name>Token</name></type> <name>token</name></decl>;</decl_stmt>
            <while>while<condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>localToken</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
              <expr_stmt><expr><call><name><name>localToken</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>localToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
               <expr_stmt><expr><name>position</name> <operator>+=</operator> <operator>(</operator><call><name><name>token</name><operator>.</operator><name>getPositionIncrement</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
               <expr_stmt><expr><call><name>addPosition</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <if_stmt><if>if <condition>(<expr><operator>++</operator><name>length</name> <operator>&gt;=</operator> <name>maxFieldLength</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ea5961015b5</name><operator>..</operator><literal type="number">1a42d604150</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>SimpleAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WhitespaceAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WhitespaceTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name><operator>.</operator><name>TermVector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Fieldable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Similarity</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>RAMDirectory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>TestDocumentWriter</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <name>RAMDirectory</name></type> <name>dir</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">125</literal></expr><operator>,</operator><expr><literal type="number">71</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocumentWriter</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">502</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
   <expr_stmt/></block></class></block_content></block></if></if_stmt></block_content></block></for></block_content></block></while></block_content></block></try></block></expr></expr_stmt></block_content></block></if></if_stmt>}</block>
  

  <specifier>public</specifier> <name>void</name> <call><name>testTokenReuse</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt>) <block>{<block_content>
      <function><type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>TokenFilter</name></super><argument_list>(<argument><expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{
          <decl_stmt><decl><type><name>boolean</name></type> <name>first</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Token</name></type> <name>buffered</name></decl>;</decl_stmt>

          <function><type><specifier>public</specifier> <name>Token</name></type> <name>next</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <return>return <expr><call><name><name>input</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></function>

          <function><type><specifier>public</specifier> <name>Token</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>result</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><name>buffered</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>buffered</name><operator>=</operator><literal type="null">null</literal></expr>;</expr_stmt>
              <return>return <expr><name>t</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>termBuffer</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setPositionIncrement</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>termBuffer</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
              <comment type="line">// set payload on first position only</comment>
              <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Payload</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">100</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// index a "synonym" for every token</comment>
            <expr_stmt><expr><name>buffered</name> <operator>=</operator> <operator>(</operator><name>Token</name><operator>)</operator><call><name><name>t</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buffered</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buffered</name><operator>.</operator><name>setPositionIncrement</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buffered</name><operator>.</operator><name>setTermBuffer</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>char</name><index>[]</index></name><block>{<expr><literal type="char">'b'</literal></expr>}</block></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>t</name></expr>;</return>
          </block_content>}</block></function>
        }</block></class></expr>;</return>
      </block_content>}</block></function>
    </block_content>}</block><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>IndexWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><literal type="string">"a 5 a a"</literal></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name><operator>.</operator><name>TOKENIZED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>info</name> <init>= <expr><call><name><name>writer</name><operator>.</operator><name>newestSegment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SegmentReader</name></type> <name>reader</name> <init>= <expr><call><name><name>SegmentReader</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TermPositions</name></type> <name>termPositions</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>termPositions</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>termPositions</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>termPositions</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>isPayloadAvailable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>isPayloadAvailable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>termPositions</name><operator>.</operator><name>isPayloadAvailable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }


   public <function><type><name>void</name></type> <name>testPreAnalyzedField</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Similarity</name></type> <name>similarity</name> <init>= <expr><call><name><name>Similarity</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>IndexWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SimpleAnalyzer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function>

</unit>
