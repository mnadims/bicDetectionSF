<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/017a3bf628.java"><expr_stmt><expr><name>From</name> <literal type="number">017a3bf628189bfd559dfb187f8b42ddabdb2c7e</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">19</literal> <name>Sep</name> <literal type="number">2013</literal> <literal type="number">20</literal><operator>:</operator><literal type="number">57</literal><operator>:</operator><literal type="number">09</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">5123</literal><operator>:</operator> <name>invert</name> <name>postings</name> <name>writing</name> <name>API</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1524840 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">11</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsWriter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>bloom</name><operator>/</operator><name><name>BloomFilteringPostingsFormat</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">49</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>DirectPostingsFormat</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">16</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTOrdTermsReader</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">14</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTOrdTermsWriter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsReader</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">14</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryDocValuesProducer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryPostingsFormat</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsReader</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">11</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsWriter</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">288</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>SimpleTextTermVectorsReader</name><operator>.</operator><name>java</name></name>          <operator>|</operator>  <literal type="number">11</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>SimpleTextTermVectorsWriter</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">16</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>FieldsConsumer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">75</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsConsumer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">81</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsFormat</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PushFieldsConsumer</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">181</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermVectorsWriter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermsConsumer</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">141</literal> <operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name><name>CompressingTermVectorsReader</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">12</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>CompressingTermVectorsWriter</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsWriter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene42</name><operator>/</operator><name><name>Lucene42DocValuesProducer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene45</name><operator>/</operator><name><name>Lucene45DocValuesProducer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>perfield</name><operator>/</operator><name><name>PerFieldPostingsFormat</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">184</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AutomatonTermsEnum</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DocTermOrds</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilterAtomicReader</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">11</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxFields</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">523</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriter</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">104</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriterPerField</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">265</literal> <operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappedMultiFields</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">136</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name>                 <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MergeState</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTerms</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">19</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTermsEnum</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">31</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentMerger</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">22</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedSetDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermVectorsConsumer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">6</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>TermVectorsConsumerPerField</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsEnum</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsHashPerField</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreAutoRewrite</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>DocTermOrdsRewriteMethod</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRewriteMethod</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">7</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FuzzyTermsEnum</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>NumericRangeQuery</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">14</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PrefixTermsEnum</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ScoringRewrite</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermCollectingRewrite</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermRangeTermsEnum</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TopTermsRewrite</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator></expr></expr_stmt><package>package.<name>html</name>     <operator>|</operator>   2 +-
 .../<name>apache</name>/<name>lucene</name>/<name>util</name>/<name><name>BytesRefIterator</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  14 -
 .../<name>lucene41</name>/<name><name>TestBlockPostingsFormat3</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   1 -
 .../<name>org</name>/<name>apache</name>/<name>lucene</name>/<name>index</name>/<name><name>TestCodecs</name><operator>.</operator><name>java</name></name>   <operator>|</operator> 294 ++++++++--
 .../<name>index</name>/<name><name>TestConcurrentMergeScheduler</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   5 +-
 .../<name>lucene</name>/<name>index</name>/<name><name>TestDirectoryReader</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   1 -
 .../<name>index</name>/<name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  11 +-
 .../<name>apache</name>/<name>lucene</name>/<name>index</name>/<name><name>TestLongPostings</name><operator>.</operator><name>java</name></name> <operator>|</operator>   3 +
 .../<name>lucene</name>/<name>index</name>/<name>memory</name>/<name><name>MemoryIndex</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  10 -
 .../<name><name>SlowCollatedTermRangeTermsEnum</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   3 +-
 .../<name>sandbox</name>/<name>queries</name>/<name><name>SlowFuzzyTermsEnum</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   2 +-
 .../<name><name>AbstractVisitingPrefixTreeFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  10 +-
 .../<name>search</name>/<name>spell</name>/<name><name>HighFrequencyDictionary</name><operator>.</operator><name>java</name></name> <operator>|</operator>  10 -
 .../<name>search</name>/<name>spell</name>/<name><name>PlainTextDictionary</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  14 +-
 .../<name>lucene</name>/<name>search</name>/<name>spell</name>/<name><name>TermFreqIterator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   6 -
 .../<name><name>BufferingTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  10 -
 .../<name>lucene</name>/<name>search</name>/<name>suggest</name>/<name><name>BytesRefArray</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   5 -
 .../<name>lucene</name>/<name>search</name>/<name>suggest</name>/<name><name>FileDictionary</name><operator>.</operator><name>java</name></name> <operator>|</operator>   7 -
 .../<name><name>SortedTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   5 -
 .../<name>search</name>/<name>suggest</name>/<name>fst</name>/<name><name>ExternalRefSorter</name><operator>.</operator><name>java</name></name> <operator>|</operator>  13 +-
 .../<name>search</name>/<name>suggest</name>/<name>jaspell</name>/<name><name>JaspellLookup</name><operator>.</operator><name>java</name></name> <operator>|</operator>   6 -
 .../<name>lucene</name>/<name>search</name>/<name>suggest</name>/<name>tst</name>/<name><name>TSTLookup</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   8 +-
 .../<name>search</name>/<name>suggest</name>/<name><name>TermFreqArrayIterator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   6 -
 .../<name>suggest</name>/<name><name>TermFreqPayloadArrayIterator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   6 -
 .../<name>suggest</name>/<name><name>TestHighFrequencyDictionary</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   1 -
 .../<name>asserting</name>/<name><name>AssertingPostingsFormat</name><operator>.</operator><name>java</name></name>    <operator>|</operator> 138 ++++-
 .../<name>asserting</name>/<name><name>AssertingTermVectorsFormat</name><operator>.</operator><name>java</name></name> <operator>|</operator>   6 -
 .../<name>codecs</name>/<name>ramonly</name>/<name><name>RAMOnlyPostingsFormat</name><operator>.</operator><name>java</name></name> <operator>|</operator>  60 +-
 .../<name>index</name>/<name><name>BasePostingsFormatTestCase</name><operator>.</operator><name>java</name></name>     <operator>|</operator> 502 ++++++++++++++---
 .../<name>index</name>/<name><name>BaseTermVectorsFormatTestCase</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   2 +-
 .../<name>apache</name>/<name>lucene</name>/<name>util</name>/<name><name>LuceneTestCase</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   1 -
 94 <name>files</name> <name>changed</name><operator>,</operator> 2165 <name>insertions</name>(+</package>)<operator>,</operator> <expr_stmt><expr><literal type="number">1600</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PushFieldsConsumer</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxFields</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappedMultiFields</name><operator>.</operator><name>java</name></name>
 <name>rename</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><block>{<expr><name>codecs</name> <operator>=</operator><operator>&gt;</operator> <name>index</name></expr>}</block><operator>/</operator><call><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">87</literal><operator>%</operator></expr></argument>)</argument_list></call>
 <name>rename</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><block>{<expr><name>codecs</name> <operator>=</operator><operator>&gt;</operator> <name>index</name></expr>}</block><operator>/</operator><call><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">86</literal><operator>%</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>ffb94a0fea0</name><operator>..</operator><name>c2c8c224bc3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>New</name> <name>Features</name>
 <operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">3359</literal><operator>:</operator> <name>Added</name> <name>analyzer</name> <name>attribute</name><operator>/</operator><name>property</name> <name>to</name> <name><name>SynonymFilterFactory</name><operator>.</operator></name>
   (<name>Ryo</name> <name>Onodera</name> <name>via</name> <name>Koji</name> <name>Sekiguchi</name></expr></expr_stmt>)
 
<expr_stmt><expr><operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">5123</literal><operator>:</operator> <name>Add</name> <name>a</name> <literal type="string">"push"</literal> <name>option</name> <name>to</name> <name>the</name> <name>postings</name> <name>writing</name> <name>API</name></expr><operator>,</operator> <expr><name>so</name>
  <name>that</name> <name>a</name> <name>PostingsFormat</name> <name>now</name> <name>receives</name> <name>a</name> <name>Fields</name> <name>instance</name> <name>and</name> <name>it</name> <name>is</name>
  <name>responsible</name></expr></expr_stmt> <for>for iterating through all fields<operator>,</operator> <expr_stmt><expr><name>terms</name></expr><operator>,</operator> <expr><name>documents</name> <name>and</name>
  <name><name>positions</name><operator>.</operator></name>  (<name>Robert</name> <name>Muir</name></expr><operator>,</operator> <expr><name>Mike</name> <name>McCandless</name></expr></expr_stmt></for>)

 <expr_stmt><expr><name>Optimizations</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">4848</literal><operator>:</operator> <name>Use</name> <name>Java</name> <literal type="number">7</literal> <name>NIO2</name><operator>-</operator><name>FileChannel</name> <name>instead</name> <name>of</name> <name>RandomAccessFile</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a35e3c3ca5e</name><operator>..</operator><literal type="number">43786aa7331</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>blockterms</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">244</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">243</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTermsReader</name> extends <name>FieldsProducer</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>longsSize</name></name> <operator>=</operator> <name>longsSize</name></expr>;
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <return>return <expr><operator>new</operator> <call><name>SegmentTermsEnum</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">349</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">343</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTermsReader</name> extends <name>FieldsProducer</name> <block>{
         <expr><name>longs</name> <operator>=</operator> <operator>new</operator> <name><name>long</name><index>[<expr><name>longsSize</name></expr>]</index></name></expr>;
       }</block>
 
      @<name>Override</name>
      <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
        <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></expr></expr_stmt>

       <comment type="line">// TODO: we may want an alternate mode here which is</comment>
       <comment type="line">// "if you are about to return NOT_FOUND I won't use</comment>
       <comment type="line">// the terms data from that"; eg FuzzyTermsEnum will</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2bd8c91b605</literal><operator>..</operator><name>a8abaea349a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>blockterms</name><operator>/</operator><name><name>BlockTermsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>blockterms</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsWriterBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>BlockTermState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfos</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexFileNames</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>RamUsageEstimator</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> @<name><name>lucene</name><operator>.</operator><name>experimental</name></name>
  <operator>*</operator><operator>/</operator>
 
<specifier>public</specifier> <name>class</name> <name>BlockTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
<expr><specifier>public</specifier> <name>class</name> <name>BlockTermsWriter</name> extends <name>PushFieldsConsumer</name> <block>{
 
   <expr><name>final</name> <specifier>static</specifier> <name>String</name> <name>CODEC_NAME</name> <operator>=</operator> <literal type="string">"BLOCK_TERMS_DICT"</literal></expr>;
 
@@ <expr><operator>-</operator><literal type="number">100</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">99</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
   <expr><specifier>public</specifier> <call><name>BlockTermsWriter</name><argument_list>(<argument><expr><name>TermsIndexWriterBase</name> <name>termsIndexWriter</name></expr></argument>,
       <argument><expr><name>SegmentWriteState</name> <name>state</name></expr></argument>, <argument><expr><name>PostingsWriterBase</name> <name>postingsWriter</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><name>final</name> <name>String</name> <name>termsFileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>TERMS_EXTENSION</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>termsIndexWriter</name></name> <operator>=</operator> <name>termsIndexWriter</name></expr>;
     <expr><name>out</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>termsFileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">200</literal></expr>,<expr><literal type="number">11</literal> <operator>+</operator><literal type="number">200</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>longsSize</name></name> <operator>=</operator> <call><name><name>postingsWriter</name><operator>.</operator><name>setField</name></name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>)</argument_list></call></expr>;
     }</block>
     
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
    }</block>

     @<name>Override</name>
     <specifier>public</specifier> <name>PostingsConsumer</name> <call><name>startTerm</name><argument_list>(<argument><expr><name>BytesRef</name> <name>text</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <comment type="line">//System.out.println("BTW: startTerm term=" + fieldInfo.name + ":" + text.utf8ToString() + " " + text + " seg=" + segment);</comment>
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>bloom</name><operator>/</operator><name><name>BloomFilteringPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>bloom</name><operator>/</operator><name><name>BloomFilteringPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">38b8602376e</literal><operator>..</operator><name>c8af4e96575</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>bloom</name><operator>/</operator><name><name>BloomFilteringPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>bloom</name><operator>/</operator><name><name>BloomFilteringPostingsFormat</name><operator>.</operator><name>java</name></name></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">18</literal> @@</expr></argument></throws></expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>bloom</name></name>;</package></block></expr>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>bloom</name><operator>.</operator><name>FuzzySet</name><operator>.</operator><name>ContainsResult</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>BloomFilteringPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>delegatePostingsFormat</name></name> <operator>=</operator> <name>delegatePostingsFormat</name></expr>;
     <expr><name><name>this</name><operator>.</operator><name>bloomFilterFactory</name></name> <operator>=</operator> <name>bloomFilterFactory</name></expr>;
   }</block></expr></expr_stmt>
  

   <comment type="block" format="javadoc">/**
    * Creates Bloom filters for a selection of fields created in the index. This
    * is recorded as a set of Bitsets held as a segment summary in an additional
    * "blm" file. This PostingsFormat delegates to a choice of delegate
    * PostingsFormat for encoding all other postings data. This choice of
    * constructor defaults to the {@link DefaultBloomFilterFactory} for
   * configuring per-field BloomFilters.
   * configuring per-field BloomFilters.  Note that the
   * wrapped PostingsFormat must use a {@link PushFieldsConsumer}
   * for writing.
    * 
    * @param delegatePostingsFormat
    *          The PostingsFormat that records all the non-bloom filter data i.e.
@@ -141,9 +143,12 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       throw new UnsupportedOperationException("Error - " + getClass().getName()
           + " has been constructed without a choice of PostingsFormat");
     }
    FieldsConsumer fieldsConsumer = delegatePostingsFormat.fieldsConsumer(state);
    if (!(fieldsConsumer instanceof PushFieldsConsumer)) {
      throw new UnsupportedOperationException("Wrapped PostingsFormat must return a PushFieldsConsumer");
    }
     return new BloomFilteredFieldsConsumer(
        delegatePostingsFormat.fieldsConsumer(state), state,
        delegatePostingsFormat);
              (PushFieldsConsumer) fieldsConsumer, state);
   }
   
   @Override
@@ -251,11 +256,6 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
         return new BloomFilteredTermsEnum(delegateTerms, reuse, filter);
       }
       
      @Override
      public Comparator&lt;BytesRef&gt; getComparator() {
        return delegateTerms.getComparator();
      }
      
       @Override
       public long size() throws IOException {
         return delegateTerms.size();
@@ -326,11 +326,6 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
         return delegate().next();
       }
       
      @Override
      public final Comparator&lt;BytesRef&gt; getComparator() {
        return delegateTerms.getComparator();
      }
      
       @Override
       public final boolean seekExact(BytesRef text)
           throws IOException {
@@ -388,8 +383,6 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
           throws IOException {
         return delegate().docs(liveDocs, reuse, flags);
       }
      
      
     }
 
     @Override
@@ -401,17 +394,16 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       }
       return sizeInBytes;
     }
    
   }
   
  class BloomFilteredFieldsConsumer extends FieldsConsumer {
    private FieldsConsumer delegateFieldsConsumer;
  class BloomFilteredFieldsConsumer extends PushFieldsConsumer {
    private PushFieldsConsumer delegateFieldsConsumer;
     private Map&lt;FieldInfo,FuzzySet&gt; bloomFilters = new HashMap&lt;FieldInfo,FuzzySet&gt;();
     private SegmentWriteState state;
     
    
    public BloomFilteredFieldsConsumer(FieldsConsumer fieldsConsumer,
        SegmentWriteState state, PostingsFormat delegatePostingsFormat) {
    public BloomFilteredFieldsConsumer(PushFieldsConsumer fieldsConsumer,
        SegmentWriteState state) {
      super(state);
       this.delegateFieldsConsumer = fieldsConsumer;
       this.state = state;
     }
@@ -422,7 +414,7 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       if (bloomFilter != null) {
         assert bloomFilters.containsKey(field) == false;
         bloomFilters.put(field, bloomFilter);
        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field),bloomFilter);
        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field), bloomFilter);
       } else {
         // No, use the unfiltered fieldsConsumer - we are not interested in
         // recording any term Bitsets.
@@ -510,12 +502,5 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
         throws IOException {
       delegateTermsConsumer.finish(sumTotalTermFreq, sumDocFreq, docCount);
     }
    
    @Override
    public Comparator&lt;BytesRef&gt; getComparator() throws IOException {
      return delegateTermsConsumer.getComparator();
    }
    
   }
  
 }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
index 584cd9f629d..e3e370e1cf7 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
@@ -19,7 +19,6 @@ package org.apache.lucene.codecs.memory;
 
 import java.io.IOException;
 import java.util.Collections;
import java.util.Comparator;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.TreeMap;
@@ -660,11 +659,6 @@ public final class DirectPostingsFormat extends PostingsFormat {
       return docCount;
     }
 
    @Override
    public Comparator&lt;BytesRef&gt; getComparator() {
      return BytesRef.getUTF8SortedAsUnicodeComparator();
    }

     @Override
     public boolean hasOffsets() {
       return hasOffsets;
@@ -700,11 +694,6 @@ public final class DirectPostingsFormat extends PostingsFormat {
         termOrd = -1;
       }
 
      @Override
      public Comparator&lt;BytesRef&gt; getComparator() {
        return BytesRef.getUTF8SortedAsUnicodeComparator();
      }

       @Override
       public BytesRef next() {
         termOrd++;
@@ -1096,11 +1085,6 @@ public final class DirectPostingsFormat extends PostingsFormat {
         }
       }
 
      @Override
      public Comparator&lt;BytesRef&gt; getComparator() {
        return BytesRef.getUTF8SortedAsUnicodeComparator();
      }

       private void grow() {
         if (states.length == 1+stateUpto) {
           final State[] newStates = new State[states.length+1];
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
index 0a74b91c4c4..4403a308cdc 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
@@ -18,13 +18,10 @@ package org.apache.lucene.codecs.memory;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>ByteArrayDataInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IOContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>automaton</name><operator>.</operator><name>ByteRunAutomaton</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">210</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTOrdTermsReader</name> extends <name>FieldsProducer</name> <block>{
       <expr><call><name><name>blockIn</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>metaBytesBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>metaBytesBlock</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

     <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasFreqs</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">376</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">367</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTOrdTermsReader</name> extends <name>FieldsProducer</name> <block>{
         }</block></expr></expr_stmt>
       </block_content>}</block></function>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TermState</name></type> <name>termState</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name>decodeMetaData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTOrdTermsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTOrdTermsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c11d11e84e9</name><operator>..</operator><literal type="number">1330e8415ce</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTOrdTermsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTOrdTermsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>BlockTermState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsWriterBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfos</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>DataOutput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexOutput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>RAMOutputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IntsRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>Builder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>FST</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>PositiveIntOutputs</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>BlockTermState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsWriterBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 
 <comment type="block" format="javadoc">/** 
  * FST-based term dict, using ord as FST output.
@@ -144,7 +142,7 @@ import org.apache.lucene.codecs.CodecUtil;
  * @lucene.experimental 
  */</comment>
 
<class><specifier>public</specifier> class <name>FSTOrdTermsWriter</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> class <name>FSTOrdTermsWriter</name> <super_list><extends>extends <super><name>PushFieldsConsumer</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TERMS_INDEX_EXTENSION</name> <init>= <expr><literal type="string">"tix"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TERMS_BLOCK_EXTENSION</name> <init>= <expr><literal type="string">"tbk"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TERMS_CODEC_NAME</name> <init>= <expr><literal type="string">"FST_ORD_TERMS_DICT"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTOrdTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
   <expr><name>IndexOutput</name> <name>indexOut</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
   <expr><specifier>public</specifier> <call><name>FSTOrdTermsWriter</name><argument_list>(<argument><expr><name>SegmentWriteState</name> <name>state</name></expr></argument>, <argument><expr><name>PostingsWriterBase</name> <name>postingsWriter</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><name>final</name> <name>String</name> <name>termsIndexFileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>TERMS_INDEX_EXTENSION</name></expr></argument>)</argument_list></call></expr>;
     <expr><name>final</name> <name>String</name> <name>termsBlockFileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>TERMS_BLOCK_EXTENSION</name></expr></argument>)</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">189</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">188</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTOrdTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>IOException</name> <name>ioe</name> <operator>=</operator> <literal type="null">null</literal></expr></block></expr></argument></throws></expr>;
     <try>try <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>indexDirStart</name> <init>= <expr><call><name><name>indexOut</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>blockDirStart</name> <init>= <expr><call><name><name>blockOut</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <comment type="line">// write field summary</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">286</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">284</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTOrdTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>lastMetaBytesFP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr></expr_stmt></block_content></block></try>
    }</block>

     @<name>Override</name>
     <specifier>public</specifier> <name>PostingsConsumer</name> <call><name>startTerm</name><argument_list>(<argument><expr><name>BytesRef</name> <name>text</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name><name>postingsWriter</name><operator>.</operator><name>startTerm</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e5716f76da5</name><operator>..</operator><name>e9e9a7c8038</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr>,<expr><literal type="number">12</literal> <operator>+</operator><literal type="number">18</literal></expr>,<expr><literal type="number">9</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name></name>;</package>
  <operator>*</operator><operator>/</operator></block></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>ByteArrayDataInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IOContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>automaton</name><operator>.</operator><name>ByteRunAutomaton</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTTermsReader</name> extends <name>FieldsProducer</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>dict</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>FST</name><argument_list type="generic">&lt;<argument><name><name>FSTTermOutputs</name><operator>.</operator><name>TermData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FSTTermOutputs</name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>, <argument><expr><name>longsSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">251</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTTermsReader</name> extends <name>FieldsProducer</name> <block>{
         <comment type="line">// NOTE: metadata will only be initialized in child class</comment>
       }</block>
 
      @<name>Override</name>
      <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
        <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></expr></expr_stmt>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TermState</name></type> <name>termState</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name>decodeMetaData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0afa6645fb8</literal><operator>..</operator><literal type="number">3edc0dfcd9b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>FSTTermsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>BlockTermState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsWriterBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfos</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>DataOutput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexOutput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>RAMOutputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IntsRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>Builder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>FST</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>fst</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>BlockTermState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsWriterBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * FST-based term dict, using metadata as FST output.
@@ -121,7 +119,7 @@ import org.apache.lucene.codecs.CodecUtil;
  * @lucene.experimental
  */</comment>
 
<class><specifier>public</specifier> class <name>FSTTermsWriter</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> class <name>FSTTermsWriter</name> <super_list><extends>extends <super><name>PushFieldsConsumer</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TERMS_EXTENSION</name> <init>= <expr><literal type="string">"tmp"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TERMS_CODEC_NAME</name> <init>= <expr><literal type="string">"FST_TERMS_DICT"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TERMS_VERSION_START</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
   <expr><name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>FieldMetaData</name></argument>&gt;</argument_list></name> <name>fields</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FieldMetaData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
   <expr><specifier>public</specifier> <call><name>FSTTermsWriter</name><argument_list>(<argument><expr><name>SegmentWriteState</name> <name>state</name></expr></argument>, <argument><expr><name>PostingsWriterBase</name> <name>postingsWriter</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><name>final</name> <name>String</name> <name>termsFileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>TERMS_EXTENSION</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><name><name>this</name><operator>.</operator><name>postingsWriter</name></name> <operator>=</operator> <name>postingsWriter</name></expr>;
@@ <expr><operator>-</operator><literal type="number">217</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">216</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
     <expr><specifier>private</specifier> <name>long</name> <name>numTerms</name></expr>;
 
     <expr><specifier>private</specifier> <name>final</name> <name>IntsRef</name> <name>scratchTerm</name> <operator>=</operator> <operator>new</operator> <call><name>IntsRef</name><argument_list>()</argument_list></call></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name>RAMOutputStream</name> <name>statsWriter</name> <operator>=</operator> <operator>new</operator> <call><name>RAMOutputStream</name><argument_list>()</argument_list></call></expr>;
     <expr><specifier>private</specifier> <name>final</name> <name>RAMOutputStream</name> <name>metaWriter</name> <operator>=</operator> <operator>new</operator> <call><name>RAMOutputStream</name><argument_list>()</argument_list></call></expr>;
 
     <expr><call><name>TermsWriter</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>fieldInfo</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">228</literal></expr>,<expr><literal type="number">11</literal> <operator>+</operator><literal type="number">226</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSTTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>builder</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>FSTTermOutputs</name><operator>.</operator><name>TermData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>FST</name><operator>.</operator><name>INPUT_TYPE</name><operator>.</operator><name>BYTE1</name></name></expr></argument>, <argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
    }</block>

     @<name>Override</name>
     <specifier>public</specifier> <name>PostingsConsumer</name> <call><name>startTerm</name><argument_list>(<argument><expr><name>BytesRef</name> <name>text</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name><name>postingsWriter</name><operator>.</operator><name>startTerm</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryDocValuesProducer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryDocValuesProducer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">302197ad3a6</literal><operator>..</operator><literal type="number">34380773cb8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryDocValuesProducer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryDocValuesProducer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr>,<expr><literal type="number">6</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name></name>;</package>
  <operator>*</operator><operator>/</operator></block></expr>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">565</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">564</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>MemoryDocValuesProducer</name> extends <name>DocValuesProducer</name> <block>{
       }</block></expr></expr_stmt>
     }</block></class>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>SeekStatus</name></type> <name>seekCeil</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>seekCeil</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8f2611ea75f</literal><operator>..</operator><name>c77b389977e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryPostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MemoryPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
         <comment type="line">//System.out.println("finish field=" + field.name + " fp=" + out.getFilePointer());</comment>
       }</block></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>EXTENSION</name> <init>= <expr><literal type="string">"ram"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">288</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MemoryPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     <expr><name>final</name> <name>String</name> <name>fileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>EXTENSION</name></expr></argument>)</argument_list></call></expr>;
     <expr><name>final</name> <name>IndexOutput</name> <name>out</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;
     
    <return>return <expr><operator>new</operator> <class><super><name>FieldsConsumer</name></super><argument_list>()</argument_list> <block>{
    <return>return <expr><operator>new</operator> <class><super><name>PushFieldsConsumer</name></super><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>TermsConsumer</name></type> <name>addField</name><parameter_list>(<parameter><decl><type><name>FieldInfo</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <comment type="line">//System.out.println("\naddField field=" + field.name);</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">758</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">753</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MemoryPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <return>return <expr><name>totalTermFreq</name></expr>;</return></block></expr></expr_stmt></block_content></block></function></block></class></expr></return></block></class></expr></return>
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ord</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <comment type="line">// NOTE: we could add this...</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">826</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">816</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MemoryPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <return>return <expr><operator>new</operator> <call><name>FSTTermsEnum</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>fst</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>field</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fa9a78a3120</name><operator>..</operator><literal type="number">8fbc16288c7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>simpletext</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>SimpleTextFieldsReader</name> extends <name>FieldsProducer</name> <block>{
       }</block></expr></expr_stmt> 
       <return>return <expr><call><name><name>docsAndPositionsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>docsStart</name></expr></argument>, <argument><expr><name>liveDocs</name></expr></argument>, <argument><expr><name>indexOptions</name></expr></argument>, <argument><expr><name>docFreq</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>
 
   <class><specifier>private</specifier> class <name>SimpleTextDocsEnum</name> <super_list><extends>extends <super><name>DocsEnum</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">589</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">583</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>SimpleTextFieldsReader</name> extends <name>FieldsProducer</name> <block>{
       }</block></expr></expr_stmt>
     }</block></class>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <name>termCount</name></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5a59399662c</literal><operator>..</operator><name>ed16cd60c73</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextFieldsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>simpletext</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<class>class <name>SimpleTextFieldsWriter</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{
<class>class <name>SimpleTextFieldsWriter</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends> <implements>implements <super><name>Closeable</name></super></implements></super_list> <block>{
   
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexOutput</name></type> <name>out</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BytesRef</name></type> <name>scratch</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SegmentWriteState</name></type> <name>writeState</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>BytesRef</name></type> <name>END</name>          <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>BytesRef</name></type> <name>FIELD</name>        <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"field "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">134</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">171</literal> @@ <name>class</name> <name>SimpleTextFieldsWriter</name> extends <name>FieldsConsumer</name> <block>{
   <expr><name>final</name> <specifier>static</specifier> <name>BytesRef</name> <name>END_OFFSET</name>   <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"      endOffset "</literal></expr></argument>)</argument_list></call></expr>;
   <expr><name>final</name> <specifier>static</specifier> <name>BytesRef</name> <name>PAYLOAD</name>      <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"        payload "</literal></expr></argument>)</argument_list></call></expr>;
 
  <expr><specifier>public</specifier> <call><name>SimpleTextFieldsWriter</name><argument_list>(<argument><expr><name>SegmentWriteState</name> <name>state</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>final</name> <name>String</name> <name>fileName</name> <operator>=</operator> <call><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>getPostingsFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>out</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;
  }</block>

  <specifier>private</specifier> <name>void</name> <call><name>write</name><argument_list>(<argument><expr><name>String</name> <name>s</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
  }</block></class>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>newline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>writeNewline</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <constructor><specifier>public</specifier> <name>SimpleTextFieldsWriter</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>writeState</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>getPostingsFileName</name></name><argument_list>(<argument><expr><name><name>writeState</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>writeState</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>writeState</name><operator>.</operator><name>directory</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>writeState</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeState</name></name> <operator>=</operator> <name>writeState</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TermsConsumer</name></type> <name>addField</name><parameter_list>(<parameter><decl><type><name>FieldInfo</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>SimpleTextTermsWriter</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <class><specifier>private</specifier> class <name>SimpleTextTermsWriter</name> <super_list><extends>extends <super><name>TermsConsumer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SimpleTextPostingsWriter</name></type> <name>postingsWriter</name></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>SimpleTextTermsWriter</name><parameter_list>(<parameter><decl><type><name>FieldInfo</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>postingsWriter</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleTextPostingsWriter</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>PostingsConsumer</name></type> <name>startTerm</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>postingsWriter</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>finishTerm</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>TermStats</name></type> <name>stats</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>sumTotalTermFreq</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sumDocFreq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docCount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>writeState</name><operator>.</operator><name>fieldInfos</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeWhileHandlingException</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block></finally></try>
   </block_content>}</block></function>
 
  <class><specifier>private</specifier> class <name>SimpleTextPostingsWriter</name> <super_list><extends>extends <super><name>PostingsConsumer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>BytesRef</name></type> <name>term</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>wroteTerm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexOptions</name></type> <name>indexOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>writePositions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>writeOffsets</name></decl>;</decl_stmt>

    <comment type="line">// for assert:</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>lastStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleTextPostingsWriter</name><parameter_list>(<parameter><decl><type><name>FieldInfo</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexOptions</name></name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>writePositions</name> <operator>=</operator> <call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>writeOffsets</name> <operator>=</operator> <call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <comment type="line">//System.out.println("writeOffsets=" + writeOffsets);</comment>
      <comment type="line">//System.out.println("writePos=" + writePositions);</comment>
    </block_content>}</block></constructor>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>FieldInfos</name></type> <name>fieldInfos</name></decl></parameter>, <parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>startDoc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>termDocFreq</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wroteTerm</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// we lazily do this, in case the term had zero docs</comment>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>TERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wroteTerm</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <comment type="line">// for each field</comment>
    <for>for<control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Annoyingly, this can happen!</comment>
        <continue>continue;</continue>
       </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>DOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>indexOptions</name> <operator>!=</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>termDocFreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name> <init>= <expr><call><name><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>wroteField</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>hasPositions</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>hasPositions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// TODO: shouldn't we add hasFreqs to Terms?</comment>
      <comment type="line">// then we don't need FieldInfos here?</comment>
      <decl_stmt><decl><type><name>boolean</name></type> <name>hasFreqs</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>hasPayloads</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>hasPayloads</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>hasOffsets</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>hasOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>hasPositions</name></expr>)</condition> <block>{<block_content>
        
        <if_stmt><if>if <condition>(<expr><name>hasPayloads</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_PAYLOADS</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>hasOffsets</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_OFFSETS</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>hasFreqs</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></else></if_stmt>
 
      <expr_stmt><expr><name>lastStartOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <function><type><specifier>public</specifier> <name>PostingsConsumer</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wroteTerm</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endOffset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>writePositions</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DocsAndPositionsEnum</name></type> <name>posEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DocsEnum</name></type> <name>docsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// for each term in field</comment>
      <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>hasPositions</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>posEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>posEnum</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <name>posEnum</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsEnum</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <assert>assert <expr><name>docsEnum</name> <operator>!=</operator> <literal type="null">null</literal><operator>:</operator> <literal type="string">"termsEnum="</literal> <operator>+</operator> <name>termsEnum</name> <operator>+</operator> <literal type="string">" hasPos="</literal> <operator>+</operator> <name>hasPositions</name> <operator>+</operator> <literal type="string">" flags="</literal> <operator>+</operator> <name>flags</name></expr>;</assert>

        <decl_stmt><decl><type><name>boolean</name></type> <name>wroteTerm</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// for each doc in field+term</comment>
        <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wroteTerm</name></expr>)</condition> <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wroteField</name></expr>)</condition> <block>{<block_content>
              <comment type="line">// we lazily do this, in case the field had</comment>
              <comment type="line">// no terms              </comment>
              <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>wroteField</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// we lazily do this, in case the term had</comment>
            <comment type="line">// zero docs</comment>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>TERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>wroteTerm</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>DOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>hasFreqs</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>hasPositions</name></expr>)</condition> <block>{<block_content>
              <comment type="line">// for assert:</comment>
              <decl_stmt><decl><type><name>int</name></type> <name>lastStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

              <comment type="line">// for each pos in field+term+doc</comment>
              <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>hasOffsets</name></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>int</name></type> <name>startOffset</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>startOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>int</name></type> <name>endOffset</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>endOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <assert>assert <expr><name>endOffset</name> <operator>&gt;=</operator> <name>startOffset</name></expr>;</assert>
                  <assert>assert <expr><name>startOffset</name> <operator>&gt;=</operator> <name>lastStartOffset</name><operator>:</operator> <literal type="string">"startOffset="</literal> <operator>+</operator> <name>startOffset</name> <operator>+</operator> <literal type="string">" lastStartOffset="</literal> <operator>+</operator> <name>lastStartOffset</name></expr>;</assert>
                  <expr_stmt><expr><name>lastStartOffset</name> <operator>=</operator> <name>startOffset</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>START_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>END_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>endOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>BytesRef</name></type> <name>payload</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>payload</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                  <assert>assert <expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</assert>
                  <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
       </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
 
      <if_stmt><if>if <condition>(<expr><name>writeOffsets</name></expr>)</condition> <block>{<block_content>
        <assert>assert <expr><name>endOffset</name> <operator>&gt;=</operator> <name>startOffset</name></expr>;</assert>
        <assert>assert <expr><name>startOffset</name> <operator>&gt;=</operator> <name>lastStartOffset</name><operator>:</operator> <literal type="string">"startOffset="</literal> <operator>+</operator> <name>startOffset</name> <operator>+</operator> <literal type="string">" lastStartOffset="</literal> <operator>+</operator> <name>lastStartOffset</name></expr>;</assert>
        <expr_stmt><expr><name>lastStartOffset</name> <operator>=</operator> <name>startOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>START_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>END_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>endOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 
      <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>payload</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <assert>assert <expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</assert>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>finishDoc</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></function>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>newline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>writeNewline</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5a5cf54a337</literal><operator>..</operator><name>f23fdb69da9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentReadState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexFileNames</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentReadState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 
 <comment type="block" format="javadoc">/** For debugging, curiosity, transparency only!!  Do not
  *  use this codec in production.
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
index b650f1c9683..fa053233395 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
@@ -19,7 +19,6 @@ package org.apache.lucene.codecs.simpletext;
 
 import java.io.IOException;
 import java.util.Collections;
import java.util.Comparator;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.SortedMap;
@@ -271,11 +270,6 @@ public class SimpleTextTermVectorsReader extends TermVectorsReader {
       return new SimpleTVTermsEnum(terms);
     }
 
    @Override
    public Comparator&lt;BytesRef&gt; getComparator() {
      return BytesRef.getUTF8SortedAsUnicodeComparator();
    }

     @Override
     public long size() throws IOException {
       return terms.size();
@@ -394,11 +388,6 @@ public class SimpleTextTermVectorsReader extends TermVectorsReader {
       e.reset(liveDocs, postings.positions, postings.startOffsets, postings.endOffsets, postings.payloads);
       return e;
     }

    @Override
    public Comparator&lt;BytesRef&gt; getComparator() {
      return BytesRef.getUTF8SortedAsUnicodeComparator();
    }
   }
   
   // note: these two enum classes are exactly like the Default impl...
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java
index 486eda58820..04dd5523121 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java
@@ -18,7 +18,6 @@ package org.apache.lucene.codecs.simpletext;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermVectorsWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleTextTermVectorsWriter</name> extends <name>TermVectorsWriter</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
   
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
   <function><type><specifier>private</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>SimpleTextUtil</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9e355e3eb43</literal><operator>..</operator><literal type="number">47eb520b068</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">497</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">496</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
       <return>return <expr><operator>new</operator> <call><name>SegmentTermsEnum</name><argument_list>()</argument_list></call><operator>.</operator><call><name>computeBlockStats</name><argument_list>()</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1238</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1232</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
         <expr><name><name>term</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;
       }</block>
 
      @<name>Override</name>
      <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
        <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></expr></expr_stmt>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>boolean</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1454</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1443</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
         <return>return <expr><name><name>arcs</name><index>[<expr><name>ord</name></expr>]</index></name></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>

       <comment type="line">// Pushes a frame we seek'd to</comment>
       <function><type><name>Frame</name></type> <name>pushFrame</name><parameter_list>(<parameter><decl><type><name><name>FST</name><operator>.</operator><name><name>Arc</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></name></type> <name>arc</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>frameData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name><name>scratchReader</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>frameData</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>frameData</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>frameData</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">661e8bf6261</literal><operator>..</operator><literal type="number">114f8b1f81b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">174</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>packed</name><operator>.</operator><name>PackedInts</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> @<name><name>lucene</name><operator>.</operator><name>experimental</name></name>
  <operator>*</operator><operator>/</operator>
 
<specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> <block>{
<expr><specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>PushFieldsConsumer</name> <block>{
 
   <comment type="block" format="javadoc">/** Suggested default value for the {@code
    *  minItemsInBlock} parameter to {@link
@@ -274,6 +273,7 @@ public class BlockTreeTermsWriter extends FieldsConsumer {
                               int maxItemsInBlock)
     throws IOException
   {
    super(state);
     if (minItemsInBlock &lt;= 1) {
       throw new IllegalArgumentException("minItemsInBlock must be &gt;= 2; got " + minItemsInBlock);
     }
@@ -1017,11 +1017,6 @@ public class BlockTreeTermsWriter extends FieldsConsumer {
       this.longsSize = postingsWriter.setField(fieldInfo);
     }
     
    @Override
    public Comparator&lt;BytesRef&gt; getComparator() {
      return BytesRef.getUTF8SortedAsUnicodeComparator();
    }

     @Override
     public PostingsConsumer startTerm(BytesRef text) throws IOException {
       //if (DEBUG) System.out.println("\nBTTW.startTerm term=" + fieldInfo.name + ":" + toString(text) + " seg=" + segment);
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java
index c7c203abbcf..80fa473253d 100644
-- a/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java
++ b/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java
@@ -17,60 +17,63 @@ package org.apache.lucene.codecs;
  * limitations under the License.
  */</comment>
 
<expr><name>import</name> <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name></expr>;
 <expr><name>import</name> <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr>;
 
<expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name></expr>;
<expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name></expr>; <comment type="line">// javadocs</comment>
 <expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name></expr>;
<expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MergeState</name></name></expr>;
 <expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name></expr>; <comment type="line">// javadocs</comment>
<expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name></expr>;
 
 <comment type="block" format="javadoc">/** 
  * Abstract API that consumes terms, doc, freq, prox, offset and
  * payloads postings.  Concrete implementations of this
  * actually do "something" with the postings (write it into
  * the index in a specific format).
 * &lt;p&gt;
 * The lifecycle is:
 * &lt;ol&gt;
 *   &lt;li&gt;FieldsConsumer is created by 
 *       {@link PostingsFormat#fieldsConsumer(SegmentWriteState)}.
 *   &lt;li&gt;For each field, {@link #addField(FieldInfo)} is called,
 *       returning a {@link TermsConsumer} for the field.
 *   &lt;li&gt;After all fields are added, the consumer is {@link #close}d.
 * &lt;/ol&gt;
  *
  * @lucene.experimental
  */</comment>
<expr><specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{

<expr><specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldsConsumer</name> <block>{
 
   <comment type="block" format="javadoc">/** Sole constructor. (For invocation by subclass 
    *  constructors, typically implicit.) */</comment>
   <expr><specifier>protected</specifier> <call><name>FieldsConsumer</name><argument_list>()</argument_list></call> <block>{
   }</block>
 
  <comment type="block" format="javadoc">/** Add a new field */</comment>
  <specifier>public</specifier> <specifier>abstract</specifier> <name>TermsConsumer</name> <call><name>addField</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>field</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
  
  <comment type="block" format="javadoc">/** Called when we are done adding everything. */</comment>
  @<expr><name>Override</name>
  <specifier>public</specifier> <specifier>abstract</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
  <comment type="line">// TODO: can we somehow compute stats for you...?</comment>
 
  <comment type="block" format="javadoc">/** Called during merging to merge all {@link Fields} from
   *  sub-readers.  This must recurse to merge all postings
   *  (terms, docs, positions, etc.).  A {@link
   *  PostingsFormat} can override this default
   *  implementation to do its own merging. */</comment>
  <expr><specifier>public</specifier> <name>void</name> <call><name>merge</name><argument_list>(<argument><expr><name>MergeState</name> <name>mergeState</name></expr></argument>, <argument><expr><name>Fields</name> <name>fields</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>FieldInfo</name></type> <name>info</name> <init>= <expr><call><name><name>mergeState</name><operator>.</operator><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <assert>assert <expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"FieldInfo for field is null: "</literal><operator>+</operator> <name>field</name></expr>;</assert>
      <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermsConsumer</name></type> <name>termsConsumer</name> <init>= <expr><call><name>addField</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><call><name><name>info</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr>
    }</block></expr>
  }</block>
  <comment type="line">// TODO: maybe we should factor out "limited" (only</comment>
  <comment type="line">// iterables, no counts/stats) base classes from</comment>
  <comment type="line">// Fields/Terms/Docs/AndPositions?</comment>

  <comment type="block" format="javadoc">/** Write all fields, terms and postings.  This the "pull"
   *  API, allowing you to iterate more than once over the
   *  postings, somewhat analogous to using a DOM API to
   *  traverse an XML tree.  Alternatively, if you subclass
   *  {@link PushFieldsConsumer}, then all postings are
   *  pushed in a single pass, somewhat analogous to using a
   *  SAX API to traverse an XML tree.
   *
   *  &lt;p&gt;This API is has certain restrictions vs {@link
   *  PushFieldsConsumer}:
   *
   *  &lt;ul&gt;
   *    &lt;li&gt; You must compute index statistics yourself,
   *         including each Term's docFreq and totalTermFreq,
   *         as well as the summary sumTotalTermFreq,
   *         sumTotalDocFreq and docCount.
   *
   *    &lt;li&gt; You must skip terms that have no docs and
   *         fields that have no terms, even though the provided
   *         Fields API will expose them; this typically
   *         requires lazily writing the field or term until
   *         you've actually seen the first term or
   *         document.
   *
   *    &lt;li&gt; The provided Fields instance is limited: you
   *         cannot call any methods that return
   *         statistics/counts; you cannot pass a non-null
   *         live docs when pulling docs/positions enums.
   *  &lt;/ul&gt;
   */</comment>
  <specifier>public</specifier> <specifier>abstract</specifier> <name>void</name> <call><name>write</name><argument_list>(<argument><expr><name>Fields</name> <name>fields</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
 }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsConsumer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsConsumer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4a746a6093b</literal><operator>..</operator><literal type="number">642d107cf16</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsConsumer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsConsumer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MergeState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>FixedBitSet</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Abstract API that consumes postings for an individual term.
@@ -70,79 +64,4 @@ public abstract class PostingsConsumer {
   /** Called when we are done adding positions &amp; payloads
    *  for each doc. */</comment>
   <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>finishDoc</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <comment type="block" format="javadoc">/** Default merge impl: append documents, mapping around
   *  deletes */</comment>
  <function><type><specifier>public</specifier> <name>TermStats</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MergeState</name></type> <name>mergeState</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>indexOptions</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>DocsEnum</name></type> <name>postings</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>FixedBitSet</name></type> <name>visitedDocs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>df</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>totTF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr>)</condition> <block>{<block_content>
      <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>df</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>totTF</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr>)</condition> <block>{<block_content>
      <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>df</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>totTF</name> <operator>+=</operator> <name>freq</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>postingsEnum</name> <init>= <expr><operator>(</operator><name>DocsAndPositionsEnum</name><operator>)</operator> <name>postings</name></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totTF</name> <operator>+=</operator> <name>freq</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>payload</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>df</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <assert>assert <expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr>;</assert>
      <decl_stmt><decl><type><specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>postingsEnum</name> <init>= <expr><operator>(</operator><name>DocsAndPositionsEnum</name><operator>)</operator> <name>postings</name></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totTF</name> <operator>+=</operator> <name>freq</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>payload</name> <init>= <expr><call><name><name>postingsEnum</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><call><name><name>postingsEnum</name><operator>.</operator><name>startOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>postingsEnum</name><operator>.</operator><name>endOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>df</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>TermStats</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><ternary><condition><expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>totTF</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">090e3949242</literal><operator>..</operator><name>f9b676f62f9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>PostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceLoader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>perfield</name><operator>.</operator><name>PerFieldPostingsFormat</name></name>;</import> <comment type="line">// javadocs</comment>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentReadState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedSPILoader</name></name>;</import>
 
 <comment type="block" format="javadoc">/** 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PushFieldsConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/PushFieldsConsumer.java
new file mode 100644
index 00000000000..5a10c904fb4
-- /dev/null
++ b/lucene/core/src/java/org/apache/lucene/codecs/PushFieldsConsumer.java
@@ -0,0 +1,181 @@
package org.apache.lucene.codecs;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>FixedBitSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>

<comment type="block" format="javadoc">/** Translates the "pull" API from {@link FieldsConsumer}
 *  into a "push" API that pushes fields, terms, postings to
 *  the consumer.
 *
 *  &lt;p&gt;
 *  The lifecycle is:
 *  &lt;ol&gt;
 *    &lt;li&gt;PushFieldsConsumer is created by 
 *        {@link PostingsFormat#fieldsConsumer(SegmentWriteState)}.
 *    &lt;li&gt;For each field, {@link #addField(FieldInfo)} is called,
 *        returning a {@link TermsConsumer} for the field.
 *    &lt;li&gt;After all fields are added, the consumer is {@link #close}d.
 *  &lt;/ol&gt;
 *
 * @lucene.experimental
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PushFieldsConsumer</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends> <implements>implements <super><name>Closeable</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>final</specifier> <name>SegmentWriteState</name></type> <name>writeState</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Sole constructor */</comment>
  <constructor><specifier>protected</specifier> <name>PushFieldsConsumer</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>writeState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeState</name></name> <operator>=</operator> <name>writeState</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/** Add a new field */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TermsConsumer</name></type> <name>addField</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>field</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Called when we are done adding everything. */</comment>
  <function_decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <for>for<control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content> <comment type="line">// for all fields</comment>
        <decl_stmt><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name> <init>= <expr><call><name><name>writeState</name><operator>.</operator><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IndexOptions</name></type> <name>indexOptions</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TermsConsumer</name></type> <name>termsConsumer</name> <init>= <expr><call><name>addField</name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>

          <comment type="line">// Holds all docs that have this field:</comment>
          <decl_stmt><decl><type><name>FixedBitSet</name></type> <name>visitedDocs</name> <init>= <expr><operator>new</operator> <call><name>FixedBitSet</name><argument_list>(<argument><expr><call><name><name>writeState</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>boolean</name></type> <name>hasFreq</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>boolean</name></type> <name>hasPositions</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <assert>assert <expr><name>hasPositions</name> <operator>==</operator> <call><name><name>terms</name><operator>.</operator><name>hasPositions</name></name><argument_list>()</argument_list></call></expr>;</assert>
          <decl_stmt><decl><type><name>boolean</name></type> <name>hasOffsets</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <assert>assert <expr><name>hasOffsets</name> <operator>==</operator> <call><name><name>terms</name><operator>.</operator><name>hasOffsets</name></name><argument_list>()</argument_list></call></expr>;</assert>
          <decl_stmt><decl><type><name>boolean</name></type> <name>hasPayloads</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>hasPayloads</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>long</name></type> <name>sumTotalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>sumDocFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>hasPositions</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>hasFreq</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>hasPayloads</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_PAYLOADS</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasOffsets</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_OFFSETS</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>

          <decl_stmt><decl><type><name>DocsEnum</name></type> <name>docsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>DocsAndPositionsEnum</name></type> <name>docsAndPositionsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content> <comment type="line">// for all terms in this field</comment>
            <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasPositions</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>docsAndPositionsEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsAndPositionsEnum</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <name>docsAndPositionsEnum</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsEnum</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>docsAndPositionsEnum</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <assert>assert <expr><name>docsEnum</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

            <decl_stmt><decl><type><name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name><name>termsConsumer</name><operator>.</operator><name>startTerm</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// How many documents have this term:</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>docFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// How many times this term occurs:</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>totalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content> <comment type="line">// for all docs in this field+term</comment>
              <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><name>docFreq</name><operator>++</operator></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name>hasFreq</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>totalTermFreq</name> <operator>+=</operator> <name>freq</name></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>hasPositions</name></expr>)</condition> <block>{<block_content>
                  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// for all positions in this field+term + doc</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name><name>docsAndPositionsEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>BytesRef</name></type> <name>payload</name> <init>= <expr><call><name><name>docsAndPositionsEnum</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>hasOffsets</name></expr>)</condition> <block>{<block_content>
                      <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><call><name><name>docsAndPositionsEnum</name><operator>.</operator><name>startOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>docsAndPositionsEnum</name><operator>.</operator><name>endOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                      <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                  </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name>docFreq</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finishTerm</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TermStats</name><argument_list>(<argument><expr><name>docFreq</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasFreq</name></expr> ?</condition><then> <expr><name>totalTermFreq</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>sumTotalTermFreq</name> <operator>+=</operator> <name>totalTermFreq</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>sumDocFreq</name> <operator>+=</operator> <name>docFreq</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></while>

          <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>hasFreq</name></expr> ?</condition><then> <expr><name>sumTotalTermFreq</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sumDocFreq</name></expr></argument>, <argument><expr><call><name><name>visitedDocs</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeWhileHandlingException</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermVectorsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermVectorsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c15be770d8c</name><operator>..</operator><name>c3a30193991</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermVectorsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermVectorsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">292</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>TermVectorsWriter</name> implements <name>Closeable</name> <block>{
     <assert>assert <expr><name>fieldCount</name> <operator>==</operator> <name>numFields</name></expr>;</assert>
     <call><name>finishDocument</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
   </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/** Return the BytesRef Comparator used to sort terms
   *  before feeding to this API. */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
 
   <function_decl><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermsConsumer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermsConsumer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">47445182257..84fde04977b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermsConsumer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TermsConsumer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import> <comment type="line">// javadocs</comment>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MergeState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsAndPositionsEnum</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>FixedBitSet</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Abstract API that consumes terms for an individual field.
@@ -38,7 +29,7 @@ import org.apache.lucene.util.FixedBitSet;
  * The lifecycle is:
  * &lt;ol&gt;
  *   &lt;li&gt;TermsConsumer is returned for each field 
 *       by {@link FieldsConsumer#addField(FieldInfo)}.
 *       by {@link PushFieldsConsumer#addField(FieldInfo)}.
  *   &lt;li&gt;TermsConsumer returns a {@link PostingsConsumer} for
  *       each term in {@link #startTerm(BytesRef)}.
  *   &lt;li&gt;When the producer (e.g. IndexWriter)
@@ -73,134 +64,4 @@ public abstract class TermsConsumer {
    *  &lt;code&gt;sumTotalTermFreq&lt;/code&gt; will be -1 when term 
    *  frequencies are omitted for the field. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>finish</name><argument_list>(<argument><expr><name>long</name> <name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>long</name> <name>sumDocFreq</name></expr></argument>, <argument><expr><name>int</name> <name>docCount</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Return the BytesRef Comparator used to sort terms
   *  before feeding to this API. */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <decl_stmt><decl><type><specifier>private</specifier> <name>MappingMultiDocsEnum</name></type> <name>docsEnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>MappingMultiDocsEnum</name></type> <name>docsAndFreqsEnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>MappingMultiDocsAndPositionsEnum</name></type> <name>postingsEnum</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Default merge impl */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>indexOptions</name></decl></parameter>, <parameter><decl><type><name>TermsEnum</name></type> <name>termsEnum</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name></decl>;</decl_stmt>
    <assert>assert <expr><name>termsEnum</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    <decl_stmt><decl><type><name>long</name></type> <name>sumTotalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>sumDocFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>sumDFsinceLastAbortCheck</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FixedBitSet</name></type> <name>visitedDocs</name> <init>= <expr><operator>new</operator> <call><name>FixedBitSet</name><argument_list>(<argument><expr><call><name><name>mergeState</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>docsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>MappingMultiDocsEnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>docsEnum</name><operator>.</operator><name>setMergeState</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MultiDocsEnum</name></type> <name>docsEnumIn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <while>while<condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// We can pass null for liveDocs, because the</comment>
        <comment type="line">// mapping enum will skip the non-live docs:</comment>
        <expr_stmt><expr><name>docsEnumIn</name> <operator>=</operator> <operator>(</operator><name>MultiDocsEnum</name><operator>)</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsEnumIn</name></expr></argument>, <argument><expr><name><name>DocsEnum</name><operator>.</operator><name>FLAG_NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>docsEnumIn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>docsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>docsEnumIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name>startTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>TermStats</name></type> <name>stats</name> <init>= <expr><call><name><name>postingsConsumer</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><name>indexOptions</name></expr></argument>, <argument><expr><name>docsEnum</name></expr></argument>, <argument><expr><name>visitedDocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>.</operator><name>docFreq</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>finishTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumTotalTermFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumDocFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>sumDFsinceLastAbortCheck</name> <operator>&gt;</operator> <literal type="number">60000</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>mergeState</name><operator>.</operator><name>checkAbort</name><operator>.</operator><name>work</name></name><argument_list>(<argument><expr><name>sumDFsinceLastAbortCheck</name><operator>/</operator><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>docsAndFreqsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>docsAndFreqsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>MappingMultiDocsEnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>docsAndFreqsEnum</name><operator>.</operator><name>setMergeState</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MultiDocsEnum</name></type> <name>docsAndFreqsEnumIn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <while>while<condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// We can pass null for liveDocs, because the</comment>
        <comment type="line">// mapping enum will skip the non-live docs:</comment>
        <expr_stmt><expr><name>docsAndFreqsEnumIn</name> <operator>=</operator> <operator>(</operator><name>MultiDocsEnum</name><operator>)</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsAndFreqsEnumIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>docsAndFreqsEnumIn</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><call><name><name>docsAndFreqsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>docsAndFreqsEnumIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name>startTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermStats</name></type> <name>stats</name> <init>= <expr><call><name><name>postingsConsumer</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><name>indexOptions</name></expr></argument>, <argument><expr><name>docsAndFreqsEnum</name></expr></argument>, <argument><expr><name>visitedDocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>.</operator><name>docFreq</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>finishTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumTotalTermFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>totalTermFreq</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumDocFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>sumDFsinceLastAbortCheck</name> <operator>&gt;</operator> <literal type="number">60000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mergeState</name><operator>.</operator><name>checkAbort</name><operator>.</operator><name>work</name></name><argument_list>(<argument><expr><name>sumDFsinceLastAbortCheck</name><operator>/</operator><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>postingsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>postingsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>MappingMultiDocsAndPositionsEnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>postingsEnum</name><operator>.</operator><name>setMergeState</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>MultiDocsAndPositionsEnum</name></type> <name>postingsEnumIn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// We can pass null for liveDocs, because the</comment>
        <comment type="line">// mapping enum will skip the non-live docs:</comment>
        <expr_stmt><expr><name>postingsEnumIn</name> <operator>=</operator> <operator>(</operator><name>MultiDocsAndPositionsEnum</name><operator>)</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>postingsEnumIn</name></expr></argument>, <argument><expr><name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_PAYLOADS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>postingsEnumIn</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><call><name><name>postingsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>postingsEnumIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name>startTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermStats</name></type> <name>stats</name> <init>= <expr><call><name><name>postingsConsumer</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><name>indexOptions</name></expr></argument>, <argument><expr><name>postingsEnum</name></expr></argument>, <argument><expr><name>visitedDocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>.</operator><name>docFreq</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>finishTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumTotalTermFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>totalTermFreq</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumDocFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>sumDFsinceLastAbortCheck</name> <operator>&gt;</operator> <literal type="number">60000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mergeState</name><operator>.</operator><name>checkAbort</name><operator>.</operator><name>work</name></name><argument_list>(<argument><expr><name>sumDFsinceLastAbortCheck</name><operator>/</operator><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <assert>assert <expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr>;</assert>
      <if_stmt><if>if <condition>(<expr><name>postingsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>postingsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>MappingMultiDocsAndPositionsEnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>postingsEnum</name><operator>.</operator><name>setMergeState</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>MultiDocsAndPositionsEnum</name></type> <name>postingsEnumIn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// We can pass null for liveDocs, because the</comment>
        <comment type="line">// mapping enum will skip the non-live docs:</comment>
        <expr_stmt><expr><name>postingsEnumIn</name> <operator>=</operator> <operator>(</operator><name>MultiDocsAndPositionsEnum</name><operator>)</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>postingsEnumIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>postingsEnumIn</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><call><name><name>postingsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>postingsEnumIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name>startTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermStats</name></type> <name>stats</name> <init>= <expr><call><name><name>postingsConsumer</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><name>indexOptions</name></expr></argument>, <argument><expr><name>postingsEnum</name></expr></argument>, <argument><expr><name>visitedDocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>.</operator><name>docFreq</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>finishTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumTotalTermFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>totalTermFreq</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sumDocFreq</name> <operator>+=</operator> <name><name>stats</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>sumDFsinceLastAbortCheck</name> <operator>&gt;</operator> <literal type="number">60000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mergeState</name><operator>.</operator><name>checkAbort</name><operator>.</operator><name>work</name></name><argument_list>(<argument><expr><name>sumDFsinceLastAbortCheck</name><operator>/</operator><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumDFsinceLastAbortCheck</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><ternary><condition><expr><name>indexOptions</name> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>sumTotalTermFreq</name></expr></else></ternary></expr></argument>, <argument><expr><name>sumDocFreq</name></expr></argument>, <argument><expr><call><name><name>visitedDocs</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e3bcd83c494</name><operator>..</operator><literal type="number">619541b9423</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>compressing</name><operator>.</operator><name>CompressingTermVectorsWriter</name><operator>.</operator>
 
 <name>import</name></name> <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LongsRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>RamUsageEstimator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>packed</name><operator>.</operator><name>BlockPackedReaderIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>packed</name><operator>.</operator><name>PackedInts</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">722</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">720</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>CompressingTermVectorsReader</name> extends <name>TermVectorsReader</name> <name>implem</name></expr></expr_stmt>
       <return>return <expr><name>termsEnum</name></expr>;</return>
     </block_content>}</block></function>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <return>return <expr><name>numTerms</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">819</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">812</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>CompressingTermVectorsReader</name> extends <name>TermVectorsReader</name> <name>implem</name></expr></expr_stmt>
       <return>return <expr><name>term</name></expr>;</return>
     </block_content>}</block></function>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>SeekStatus</name></type> <name>seekCeil</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list>
         <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1fcd7a6b9dd</literal><operator>..</operator><name>b3b466276d3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>compressing</name><operator>/</operator><name><name>CompressingTermVectorsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>compressing</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayDeque</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Deque</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedSet</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">662</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">661</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>CompressingTermVectorsWriter</name> extends <name>TermVectorsWriter</name> <block>{
     <expr><call><name><name>indexWriter</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><name>numDocs</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>addProx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numProx</name></decl></parameter>, <parameter><decl><type><name>DataInput</name></type> <name>positions</name></decl></parameter>, <parameter><decl><type><name>DataInput</name></type> <name>offsets</name></decl></parameter>)</parameter_list>
       <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bb0b2c5dd01</name><operator>..</operator><literal type="number">89ba92eaabc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene40</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">360</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">359</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>Lucene40TermVectorsReader</name> extends <name>TermVectorsReader</name> implements <name>Clos</name></expr></expr_stmt>
       <return>return <expr><literal type="number">1</literal></expr>;</return>
     </block_content>}</block></function>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// TODO: really indexer hardwires</comment>
      <comment type="line">// this...?  I guess codec could buffer and re-sort...</comment>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name>storeOffsets</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">569</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">561</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>Lucene40TermVectorsReader</name> extends <name>TermVectorsReader</name> implements <name>Clos</name>
       <call><name><name>docsAndPositionsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>liveDocs</name></expr></argument>, <argument><expr><name>positions</name></expr></argument>, <argument><expr><name>startOffsets</name></expr></argument>, <argument><expr><name>endOffsets</name></expr></argument>, <argument><expr><name>payloadOffsets</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>docsAndPositionsEnum</name></expr>;</return>
     </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>
 
   <comment type="line">// NOTE: sort of a silly class, since you can get the</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">938d4c07993</literal><operator>..</operator><name>cc9a24573fd</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene40</name><operator>/</operator><name><name>Lucene40TermVectorsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene40</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermVectorsReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">443</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">442</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>Lucene40TermVectorsWriter</name> extends <name>TermVectorsWriter</name> <block>{
     <expr><call><name><name>IOUtils</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>tvx</name></expr></argument>, <argument><expr><name>tvd</name></expr></argument>, <argument><expr><name>tvf</name></expr></argument>)</argument_list></call></expr>;
     <expr><name>tvx</name> <operator>=</operator> <name>tvd</name> <operator>=</operator> <name>tvf</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene42</name><operator>/</operator><name><name>Lucene42DocValuesProducer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene42</name><operator>/</operator><name><name>Lucene42DocValuesProducer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>af87be89e39</name><operator>..</operator><name>c7117a19062</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene42</name><operator>/</operator><name><name>Lucene42DocValuesProducer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene42</name><operator>/</operator><name><name>Lucene42DocValuesProducer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene42</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">510</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">509</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>Lucene42DocValuesProducer</name> extends <name>DocValuesProducer</name> <block>{
       }</block></expr></expr_stmt>
     }</block></class>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>SeekStatus</name></type> <name>seekCeil</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>seekCeil</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene45</name><operator>/</operator><name><name>Lucene45DocValuesProducer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene45</name><operator>/</operator><name><name>Lucene45DocValuesProducer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">620997ac5b1</literal><operator>..</operator><literal type="number">3e09281b477</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene45</name><operator>/</operator><name><name>Lucene45DocValuesProducer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene45</name><operator>/</operator><name><name>Lucene45DocValuesProducer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene45</name><operator>.</operator><name>Lucene45DocValuesConsumer</name><operator>.</operator><name>BINARY</name></name>
 
 <name>import</name> <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import> <comment type="line">// javadocs</comment>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">811</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">810</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>Lucene45DocValuesProducer</name> extends <name>DocValuesProducer</name> implements <name>Clos</name>
         <specifier>public</specifier> <name>long</name> <call><name>ord</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
           <return>return <expr><name>currentOrd</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
 
         <function><annotation>@<name>Override</name></annotation>
         <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>PerFieldPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>PerFieldPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b9695236153</name><operator>..</operator><name>a472af77633</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>PerFieldPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>PerFieldPostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>perfield</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceLoader</name></name>;</import> <comment type="line">// javadocs</comment>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentReadState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>RamUsageEstimator</name></name>;</import>
 
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilterAtomicReader</name><operator>.</operator><name>FilterFields</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * Enables per field postings support.
  * &lt;p&gt;
@@ -65,96 +68,22 @@ public abstract class PerFieldPostingsFormat extends PostingsFormat {
    *  segment suffix name for each field. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PER_FIELD_SUFFIX_KEY</name> <init>= <expr><call><name><name>PerFieldPostingsFormat</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".suffix"</literal></expr></init></decl>;</decl_stmt>
 
  
   <comment type="block" format="javadoc">/** Sole constructor. */</comment>
   <constructor><specifier>public</specifier> <name>PerFieldPostingsFormat</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>PER_FIELD_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>FieldsConsumer</name></type> <name>fieldsConsumer</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>state</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>FieldsWriter</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <class><specifier>static</specifier> class <name>FieldsConsumerAndSuffix</name> <super_list><implements>implements <super><name>Closeable</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><name>FieldsConsumer</name></type> <name>consumer</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Group of fields written by one PostingsFormat */</comment>
  <class><specifier>static</specifier> class <name>FieldsGroup</name> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>suffix</name></decl>;</decl_stmt>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>
    
  <class><specifier>private</specifier> class <name>FieldsWriter</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>PostingsFormat</name></argument>,<argument><name>FieldsConsumerAndSuffix</name></argument>&gt;</argument_list></name></type> <name>formats</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>PostingsFormat</name></argument>,<argument><name>FieldsConsumerAndSuffix</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>suffixes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SegmentWriteState</name></type> <name>segmentWriteState</name></decl>;</decl_stmt>
 
    <constructor><specifier>public</specifier> <name>FieldsWriter</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>segmentWriteState</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    <comment type="block" format="javadoc">/** Custom SegmentWriteState for this group of fields,
     *  with the segmentSuffix uniqueified for this
     *  PostingsFormat */</comment>
    <decl_stmt><decl><type><name>SegmentWriteState</name></type> <name>state</name></decl>;</decl_stmt>
  }</block></class><empty_stmt>;</empty_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TermsConsumer</name></type> <name>addField</name><parameter_list>(<parameter><decl><type><name>FieldInfo</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsFormat</name></type> <name>format</name> <init>= <expr><call><name>getPostingsFormatForField</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"invalid null PostingsFormat for field=\""</literal> <operator>+</operator> <name><name>field</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>formatName</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <decl_stmt><decl><type><name>String</name></type> <name>previousValue</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>putAttribute</name></name><argument_list>(<argument><expr><name>PER_FIELD_FORMAT_KEY</name></expr></argument>, <argument><expr><name>formatName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <assert>assert <expr><name>previousValue</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
      
      <decl_stmt><decl><type><name>Integer</name></type> <name>suffix</name></decl>;</decl_stmt>
      
      <decl_stmt><decl><type><name>FieldsConsumerAndSuffix</name></type> <name>consumer</name> <init>= <expr><call><name><name>formats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>consumer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// First time we are seeing this format; create a new instance</comment>
        
        <comment type="line">// bump the suffix</comment>
        <expr_stmt><expr><name>suffix</name> <operator>=</operator> <call><name><name>suffixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>formatName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>suffix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>suffix</name> <operator>=</operator> <name>suffix</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>suffixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>formatName</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>segmentSuffix</name> <init>= <expr><call><name>getFullSegmentSuffix</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>,
                                                          <argument><expr><name><name>segmentWriteState</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>,
                                                          <argument><expr><call><name>getSuffix</name><argument_list>(<argument><expr><name>formatName</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>consumer</name> <operator>=</operator> <operator>new</operator> <call><name>FieldsConsumerAndSuffix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consumer</name><operator>.</operator><name>consumer</name></name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>fieldsConsumer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SegmentWriteState</name><argument_list>(<argument><expr><name>segmentWriteState</name></expr></argument>, <argument><expr><name>segmentSuffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consumer</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formats</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// we've already seen this format, so just grab its suffix</comment>
        <assert>assert <expr><call><name><name>suffixes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>formatName</name></expr></argument>)</argument_list></call></expr>;</assert>
        <expr_stmt><expr><name>suffix</name> <operator>=</operator> <name><name>consumer</name><operator>.</operator><name>suffix</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      
      <expr_stmt><expr><name>previousValue</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>putAttribute</name></name><argument_list>(<argument><expr><name>PER_FIELD_SUFFIX_KEY</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <assert>assert <expr><name>previousValue</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>

      <comment type="line">// TODO: we should only provide the "slice" of FIS</comment>
      <comment type="line">// that this PF actually sees ... then stuff like</comment>
      <comment type="line">// .hasProx could work correctly?</comment>
      <comment type="line">// NOTE: .hasProx is already broken in the same way for the non-perfield case,</comment>
      <comment type="line">// if there is a fieldinfo with prox that has no postings, you get a 0 byte file.</comment>
      <return>return <expr><call><name><name>consumer</name><operator>.</operator><name>consumer</name><operator>.</operator><name>addField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <comment type="line">// Close all subs</comment>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><call><name><name>formats</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>
  
   <function><type><specifier>static</specifier> <name>String</name></type> <name>getSuffix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>formatName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><name>formatName</name> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <name>suffix</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">87</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>PerFieldPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"cannot embed PerFieldPostingsFormat inside itself (field \""</literal> <operator>+</operator> <name>fieldName</name> <operator>+</operator> <literal type="string">"\" returned PerFieldPostingsFormat)"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
  
  <class><specifier>private</specifier> class <name>FieldsWriter</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>SegmentWriteState</name></type> <name>writeState</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FieldsWriter</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>writeState</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeState</name></name> <operator>=</operator> <name>writeState</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

      <comment type="line">// Maps a PostingsFormat instance to the suffix it</comment>
      <comment type="line">// should use</comment>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>PostingsFormat</name></argument>,<argument><name>FieldsGroup</name></argument>&gt;</argument_list></name></type> <name>formatToGroups</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>PostingsFormat</name></argument>,<argument><name>FieldsGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Holds last suffix of each PostingFormat name</comment>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>suffixes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// First pass: assign field -&gt; PostingsFormat</comment>
      <for>for<control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name> <init>= <expr><call><name><name>writeState</name><operator>.</operator><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsFormat</name></type> <name>format</name> <init>= <expr><call><name>getPostingsFormatForField</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
        <if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"invalid null PostingsFormat for field=\""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>formatName</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>FieldsGroup</name></type> <name>group</name> <init>= <expr><call><name><name>formatToGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// First time we are seeing this format; create a</comment>
          <comment type="line">// new instance</comment>

          <comment type="line">// bump the suffix</comment>
          <decl_stmt><decl><type><name>Integer</name></type> <name>suffix</name> <init>= <expr><call><name><name>suffixes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>formatName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>suffix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>suffix</name> <operator>=</operator> <name>suffix</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name><name>suffixes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>formatName</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>String</name></type> <name>segmentSuffix</name> <init>= <expr><call><name>getFullSegmentSuffix</name><argument_list>(<argument><expr><name>field</name></expr></argument>,
                                                      <argument><expr><name><name>writeState</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>,
                                                      <argument><expr><call><name>getSuffix</name><argument_list>(<argument><expr><name>formatName</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>group</name> <operator>=</operator> <operator>new</operator> <call><name>FieldsGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>group</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>new</operator> <call><name>SegmentWriteState</name><argument_list>(<argument><expr><name>writeState</name></expr></argument>, <argument><expr><name>segmentSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>group</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>formatToGroups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// we've already seen this format, so just grab its suffix</comment>
          <assert>assert <expr><call><name><name>suffixes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>formatName</name></expr></argument>)</argument_list></call></expr>;</assert>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>previousValue</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>putAttribute</name></name><argument_list>(<argument><expr><name>PER_FIELD_FORMAT_KEY</name></expr></argument>, <argument><expr><name>formatName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>previousValue</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>

        <expr_stmt><expr><name>previousValue</name> <operator>=</operator> <call><name><name>fieldInfo</name><operator>.</operator><name>putAttribute</name></name><argument_list>(<argument><expr><name>PER_FIELD_SUFFIX_KEY</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>group</name><operator>.</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>previousValue</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
      </block_content>}</block></for>

      <comment type="line">// Second pass: write postings</comment>
      <for>for<control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>PostingsFormat</name></argument>,<argument><name>FieldsGroup</name></argument>&gt;</argument_list></name></name></type> <name>ent</name> <range>: <expr><call><name><name>formatToGroups</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>PostingsFormat</name></type> <name>format</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FieldsGroup</name></type> <name>group</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Exposes only the fields from this group:</comment>
        <decl_stmt><decl><type><name>Fields</name></type> <name>maskedFields</name> <init>= <expr><operator>new</operator> <class><super><name>FilterFields</name></super><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><call><name><name>group</name><operator>.</operator><name>fields</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>
          }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>fieldsConsumer</name></name><argument_list>(<argument><expr><name><name>group</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>maskedFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></function>
  }</block></class>
 
   <class><specifier>private</specifier> class <name>FieldsReader</name> <super_list><extends>extends <super><name>FieldsProducer</name></super></extends></super_list> <block>{
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">238</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">248</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>PerFieldPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>FieldsConsumer</name></type> <name>fieldsConsumer</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>state</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>FieldsWriter</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <specifier>final</specifier> <name>FieldsProducer</name></type> <name>fieldsProducer</name><parameter_list>(<parameter><decl><type><name>SegmentReadState</name></type> <name>state</name></decl></parameter>)</parameter_list>
       <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AutomatonTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AutomatonTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">980fce8139a</literal><operator>..</operator><name>e7984e95919</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AutomatonTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AutomatonTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IntsRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>AutomatonTermsEnum</name> extends <name>FilteredTermsEnum</name> <block>{
   <comment type="line">// of terms where we should simply do sequential reads instead.</comment>
   <expr><specifier>private</specifier> <name>boolean</name> <name>linear</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>BytesRef</name> <name>linearUpperBound</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>final</name> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>termComp</name></expr>;
 
   <comment type="block" format="javadoc">/**
    * Construct an enumerator based upon an automaton, enumerating the specified
@@ -85,8 +83,6 @@ class AutomatonTermsEnum extends FilteredTermsEnum {
 
     // used for path tracking, where each bit is a numbered state.
     visited = new long[runAutomaton.getSize()];

    termComp = getComparator();
   }
   
   /**
@@ -99,10 +95,10 @@ class AutomatonTermsEnum extends FilteredTermsEnum {
       if (runAutomaton.run(term.bytes, term.offset, term.length))
         return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;
       else
        return (linear &amp;&amp; termComp.compare(term, linearUpperBound) &lt; 0) ? 
        return (linear &amp;&amp; term.compareTo(linearUpperBound) &lt; 0) ? 
             AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;
     } else {
      return (linear &amp;&amp; termComp.compare(term, linearUpperBound) &lt; 0) ? 
      return (linear &amp;&amp; term.compareTo(linearUpperBound) &lt; 0) ? 
           AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;
     }
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index b22a076153d..6563e03ab1a 100644
-- a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
++ b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -761,8 +761,6 @@ public class CheckIndex {
       
       BytesRef lastTerm = null;
       
      Comparator&lt;BytesRef&gt; termComp = terms.getComparator();
      
       long sumTotalTermFreq = 0;
       long sumDocFreq = 0;
       FixedBitSet visitedDocs = new FixedBitSet(maxDoc);
@@ -780,7 +778,7 @@ public class CheckIndex {
         if (lastTerm == null) {
           lastTerm = BytesRef.deepCopyOf(term);
         } else {
          if (termComp.compare(lastTerm, term) &gt;= 0) {
          if (lastTerm.compareTo(term) &gt;= 0) {
             throw new RuntimeException("terms out of order: lastTerm=" + lastTerm + " term=" + term);
           }
           lastTerm.copyBytes(term);
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java b/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java
index 56859ce3f2a..42f1b2164f7 100644
-- a/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java
++ b/lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java
@@ -20,7 +20,6 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
import java.util.Comparator;
 import java.util.List;
 
 import org.apache.lucene.codecs.PostingsFormat; // javadocs
@@ -611,11 +610,6 @@ public class DocTermOrds {
       termsEnum = reader.fields().terms(field).iterator(null);
     }
 
    @Override
    public Comparator&lt;BytesRef&gt; getComparator() {
      return termsEnum.getComparator();
    }

     @Override    
     public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {
       return termsEnum.docs(liveDocs, reuse, flags);
diff --git a/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java b/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
index 4a8a55a3433..01d9d50e103 100644
-- a/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
++ b/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
@@ -18,7 +18,6 @@ package org.apache.lucene.index;
  */</comment>
 
 <expr><name>import</name> <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr>;
<expr><name>import</name> <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name></expr>;
 <expr><name>import</name> <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name></expr>;
 
 <expr><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>CachingWrapperFilter</name></name></expr>;
@@ <expr><operator>-</operator><literal type="number">98</literal></expr>,<expr><literal type="number">11</literal> <operator>+</operator><literal type="number">97</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FilterAtomicReader</name> extends <name>AtomicReader</name> <block>{
     <expr><specifier>public</specifier> <name>TermsEnum</name> <call><name>iterator</name><argument_list>(<argument><expr><name>TermsEnum</name> <name>reuse</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <return>return <expr><call><name><name>in</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
     }</block>
    
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>in</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">200</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FilterAtomicReader</name> extends <name>AtomicReader</name> <block>{
     <expr><specifier>public</specifier> <name>DocsAndPositionsEnum</name> <call><name>docsAndPositions</name><argument_list>(<argument><expr><name>Bits</name> <name>liveDocs</name></expr></argument>, <argument><expr><name>DocsAndPositionsEnum</name> <name>reuse</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <return>return <expr><call><name><name>in</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><name>liveDocs</name></expr></argument>, <argument><expr><name>reuse</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>in</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** Base class for filtering {@link DocsEnum} implementations. */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4a704d39639</literal><operator>..</operator><literal type="number">3213a22db46</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSource</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Abstract</name> <name>class</name></expr></expr_stmt> <for>for enumerating a subset of all terms. 
  * 
  * &lt;p&gt;Term enumerations are always ordered by
 * <block>{<block_content><annotation>@<name>link</name></annotation> <expr><operator>#</operator><name>getComparator</name></expr></block_content>}</block></for><expr_stmt><expr><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
 <operator>*</operator> <block>{@<expr><name>link</name> <name>BytesRef</name><operator>#</operator><name>compareTo</name></expr>}</block><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
  <operator>*</operator> <name>greater</name> <name>than</name> <name>all</name> <name>that</name> <name>precede</name> <name><name>it</name><operator>.</operator></name>&lt;<operator>/</operator><name>p</name><operator>&gt;</operator>
  <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator><operator>&lt;</operator><name>em</name><operator>&gt;</operator><name>Please</name> <name>note</name><operator>:</operator><operator>&lt;</operator><operator>/</operator><name>em</name><operator>&gt;</operator> <name>Consumers</name> <name>of</name> <name>this</name> enum <name>cannot</name>
  <operator>*</operator> <name>call</name> <block>{@<expr><name>code</name> <call><name>seek</name><argument_list>()</argument_list></call></expr>}</block></expr><operator>,</operator> <expr><name>it</name> <name>is</name> <name>forward</name> <name>only</name></expr>;</expr_stmt> <expr_stmt><expr><name>it</name> <throws>throws
<argument/>@<argument>@ <expr><operator>-</operator><literal type="number">134</literal></expr></argument>,<argument><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">133</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FilteredTermsEnum</name> extends <name>TermsEnum</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name><name>tenum</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tenum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name><name>tenum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">221</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FilteredTermsEnum</name> extends <name>TermsEnum</name> <block>{
         <expr><name>final</name> <name>BytesRef</name> <name>t</name> <operator>=</operator> <call><name>nextSeekTerm</name><argument_list>(<argument><expr><name>actualTerm</name></expr></argument>)</argument_list></call></expr>;
         <comment type="line">//System.out.println("  seek to t=" + (t == null ? "null" : t.utf8ToString()) + " tenum=" + tenum);</comment>
         <comment type="line">// Make sure we always seek forward:</comment>
        <assert>assert <expr><name>actualTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>actualTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>:</operator> <literal type="string">"curTerm="</literal> <operator>+</operator> <name>actualTerm</name> <operator>+</operator> <literal type="string">" seekTerm="</literal> <operator>+</operator> <name>t</name></expr>;</assert></block></expr></expr_stmt>
        <assert>assert <expr><name>actualTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>actualTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>:</operator> <literal type="string">"curTerm="</literal> <operator>+</operator> <name>actualTerm</name> <operator>+</operator> <literal type="string">" seekTerm="</literal> <operator>+</operator> <name>t</name></expr>;</assert>
         <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>tenum</name><operator>.</operator><name>seekCeil</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>)</condition> <block>{<block_content>
           <comment type="line">// no more terms to seek to or enum exhausted</comment>
           <comment type="line">//System.out.println("  return null");</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxFields</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxFields</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..ed4eddb5f71</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxFields</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">523</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FreqProxTermsWriterPerField</name><operator>.</operator><name>FreqProxPostingsArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSource</name></name>;</import> <comment type="line">// javadocs</comment>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>

<comment type="block" format="javadoc">/** Implements limited (iterators only, no stats) {@link
 *  Fields} interface over the in-RAM buffered
 *  fields/terms/postings, to flush postings through the
 *  PostingsFormat. */</comment>

<class>class <name>FreqProxFields</name> <super_list><extends>extends <super><name>Fields</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>FreqProxTermsWriterPerField</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>FreqProxTermsWriterPerField</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>FreqProxFields</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FreqProxTermsWriterPerField</name></argument>&gt;</argument_list></name></type> <name>fieldList</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// NOTE: fields are already sorted by field name</comment>
    <for>for<control>(<init><decl><type><name>FreqProxTermsWriterPerField</name></type> <name>field</name> <range>: <expr><name>fieldList</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>fields</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Terms</name></type> <name>terms</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>FreqProxTermsWriterPerField</name></type> <name>perField</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>perField</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>FreqProxTerms</name><argument_list>(<argument><expr><name>perField</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//return fields.size();</comment>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FreqProxTerms</name> <super_list><extends>extends <super><name>Terms</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FreqProxTerms</name><parameter_list>(<parameter><decl><type><name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>FreqProxTermsEnum</name></type> <name>termsEnum</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>instanceof</operator> <name>FreqProxTermsEnum</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>FreqProxTermsEnum</name><operator>)</operator> <name>reuse</name><operator>)</operator><operator>.</operator><name>terms</name> <operator>==</operator> <name><name>this</name><operator>.</operator><name>terms</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <operator>(</operator><name>FreqProxTermsEnum</name><operator>)</operator> <name>reuse</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>FreqProxTermsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>termsEnum</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>termsEnum</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">//return terms.termsHashPerField.bytesHash.size();</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumTotalTermFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">//return terms.sumTotalTermFreq;</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumDocFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">//return terms.sumDocFreq;</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getDocCount</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">//return terms.docCount;</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// NOTE: the in-memory buffer may have indexed offsets</comment>
      <comment type="line">// because that's what FieldInfo said when we started,</comment>
      <comment type="line">// but during indexing this may have been downgraded:</comment>
      <return>return <expr><call><name><name>terms</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>      
    </block_content>}</block></function>
  
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPositions</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// NOTE: the in-memory buffer may have indexed positions</comment>
      <comment type="line">// because that's what FieldInfo said when we started,</comment>
      <comment type="line">// but during indexing this may have been downgraded:</comment>
      <return>return <expr><call><name><name>terms</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
  
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPayloads</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>terms</name><operator>.</operator><name>hasPayloads</name></name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FreqProxTermsEnum</name> <super_list><extends>extends <super><name>TermsEnum</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>sortedTermIDs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxPostingsArray</name></type> <name>postingsArray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>scratch</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numTerms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ord</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FreqProxTermsEnum</name><parameter_list>(<parameter><decl><type><name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numTerms</name></name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>bytesHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sortedTermIDs</name> <operator>=</operator> <name><name>terms</name><operator>.</operator><name>sortedTermIDs</name></name></expr>;</expr_stmt>
      <assert>assert <expr><name>sortedTermIDs</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
      <expr_stmt><expr><name>postingsArray</name> <operator>=</operator> <operator>(</operator><name>FreqProxPostingsArray</name><operator>)</operator> <name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>postingsArray</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>ord</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SeekStatus</name></type> <name>seekCeil</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <comment type="line">// TODO: we could instead keep the BytesRefHash</comment>
      <comment type="line">// intact so this is a hash lookup</comment>

      <comment type="line">// binary search:</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><name>numTerms</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>hi</name> <operator>&gt;=</operator> <name>lo</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>textStart</name> <init>= <expr><name><name>postingsArray</name><operator>.</operator><name>textStarts</name><index>[<expr><name><name>sortedTermIDs</name><index>[<expr><name>mid</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>bytePool</name><operator>.</operator><name>setBytesRef</name></name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>textStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>scratch</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// found:</comment>
          <expr_stmt><expr><name>ord</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
          <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>FOUND</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>

      <comment type="line">// not found:</comment>
      <expr_stmt><expr><name>ord</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>==</operator> <name>numTerms</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>NOT_FOUND</name></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ord</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ord</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ord</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>textStart</name> <init>= <expr><name><name>postingsArray</name><operator>.</operator><name>textStarts</name><index>[<expr><name><name>sortedTermIDs</name><index>[<expr><name><name>this</name><operator>.</operator><name>ord</name></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>bytePool</name><operator>.</operator><name>setBytesRef</name></name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>textStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>ord</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&gt;=</operator> <name>numTerms</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>textStart</name> <init>= <expr><name><name>postingsArray</name><operator>.</operator><name>textStarts</name><index>[<expr><name><name>sortedTermIDs</name><index>[<expr><name>ord</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>bytePool</name><operator>.</operator><name>setBytesRef</name></name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>textStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>scratch</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>term</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>scratch</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>ord</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>ord</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// We do not store this per-term, and we cannot</comment>
      <comment type="line">// implement this at merge time w/o an added pass</comment>
      <comment type="line">// through the postings:</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>totalTermFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// We do not store this per-term, and we cannot</comment>
      <comment type="line">// implement this at merge time w/o an added pass</comment>
      <comment type="line">// through the postings:</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DocsEnum</name></type> <name>docs</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>liveDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"liveDocs must be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>FreqProxDocsEnum</name></type> <name>docsEnum</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>terms</name><operator>.</operator><name>hasFreq</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Caller wants freqs but we didn't index them;</comment>
        <comment type="line">// don't lie:</comment>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"did not index freq"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>instanceof</operator> <name>FreqProxDocsEnum</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <operator>(</operator><name>FreqProxDocsEnum</name><operator>)</operator> <name>reuse</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>docsEnum</name><operator>.</operator><name>postingsArray</name></name> <operator>!=</operator> <name>postingsArray</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>FreqProxDocsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>postingsArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>FreqProxDocsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>postingsArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>docsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>sortedTermIDs</name><index>[<expr><name>ord</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>docsEnum</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DocsAndPositionsEnum</name></type> <name>docsAndPositions</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsAndPositionsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>liveDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"liveDocs must be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>FreqProxDocsAndPositionsEnum</name></type> <name>posEnum</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>terms</name><operator>.</operator><name>hasProx</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Caller wants positions but we didn't index them;</comment>
        <comment type="line">// don't lie:</comment>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"did not index positions"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>terms</name><operator>.</operator><name>hasOffsets</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_OFFSETS</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Caller wants offsets but we didn't index them;</comment>
        <comment type="line">// don't lie:</comment>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"did not index offsets"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>instanceof</operator> <name>FreqProxDocsAndPositionsEnum</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>posEnum</name> <operator>=</operator> <operator>(</operator><name>FreqProxDocsAndPositionsEnum</name><operator>)</operator> <name>reuse</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>posEnum</name><operator>.</operator><name>postingsArray</name></name> <operator>!=</operator> <name>postingsArray</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>posEnum</name> <operator>=</operator> <operator>new</operator> <call><name>FreqProxDocsAndPositionsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>postingsArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>posEnum</name> <operator>=</operator> <operator>new</operator> <call><name>FreqProxDocsAndPositionsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>postingsArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>posEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>sortedTermIDs</name><index>[<expr><name>ord</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>posEnum</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Expert: Returns the TermsEnums internal state to position the TermsEnum
     * without re-seeking the term dictionary.
     * &lt;p&gt;
     * NOTE: A seek by {@link TermState} might not capture the
     * {@link AttributeSource}'s state. Callers must maintain the
     * {@link AttributeSource} states separately
     * 
     * @see TermState
     * @see #seekExact(BytesRef, TermState)
     */</comment>
    <function><type><specifier>public</specifier> <name>TermState</name></type> <name>termState</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <class><super><name>TermState</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>copyFrom</name><parameter_list>(<parameter><decl><type><name>TermState</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FreqProxDocsEnum</name> <super_list><extends>extends <super><name>DocsEnum</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxPostingsArray</name></type> <name>postingsArray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ByteSliceReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>ByteSliceReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>readTermFreq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>docID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>ended</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>termID</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FreqProxDocsEnum</name><parameter_list>(<parameter><decl><type><name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>FreqProxPostingsArray</name></type> <name>postingsArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>postingsArray</name></name> <operator>=</operator> <name>postingsArray</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readTermFreq</name></name> <operator>=</operator> <name><name>terms</name><operator>.</operator><name>hasFreq</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>termID</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termID</name></name> <operator>=</operator> <name>termID</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>termID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ended</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>docID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>docID</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// Don't lie here ... don't want codecs writings lots</comment>
      <comment type="line">// of wasted 1s into the index:</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readTermFreq</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"freq was not indexed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>freq</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>nextDoc</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>reader</name><operator>.</operator><name>eof</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ended</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>NO_MORE_DOCS</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>ended</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>docID</name> <operator>=</operator> <name><name>postingsArray</name><operator>.</operator><name>lastDocIDs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>readTermFreq</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>postingsArray</name><operator>.</operator><name>termFreqs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readTermFreq</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>docID</name> <operator>+=</operator> <name>code</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>docID</name> <operator>+=</operator> <name>code</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <assert>assert <expr><name>docID</name> <operator>!=</operator> <name><name>postingsArray</name><operator>.</operator><name>lastDocIDs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</assert>
      </block_content>}</block></else></if_stmt>

      <return>return <expr><name>docID</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>cost</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FreqProxDocsAndPositionsEnum</name> <super_list><extends>extends <super><name>DocsAndPositionsEnum</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxPostingsArray</name></type> <name>postingsArray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ByteSliceReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>ByteSliceReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ByteSliceReader</name></type> <name>posReader</name> <init>= <expr><operator>new</operator> <call><name>ByteSliceReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>readOffsets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>docID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>startOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>endOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>posLeft</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>termID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>ended</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>hasPayload</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BytesRef</name></type> <name>payload</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FreqProxDocsAndPositionsEnum</name><parameter_list>(<parameter><decl><type><name>FreqProxTermsWriterPerField</name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>FreqProxPostingsArray</name></type> <name>postingsArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>postingsArray</name></name> <operator>=</operator> <name>postingsArray</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readOffsets</name></name> <operator>=</operator> <name><name>terms</name><operator>.</operator><name>hasOffsets</name></name></expr>;</expr_stmt>
      <assert>assert <expr><name><name>terms</name><operator>.</operator><name>hasProx</name></name></expr>;</assert>
      <assert>assert <expr><name><name>terms</name><operator>.</operator><name>hasFreq</name></name></expr>;</assert>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>termID</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termID</name></name> <operator>=</operator> <name>termID</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>termID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>terms</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><name>posReader</name></expr></argument>, <argument><expr><name>termID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ended</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>docID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>posLeft</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>docID</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>freq</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>nextDoc</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <while>while <condition>(<expr><name>posLeft</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>nextPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><call><name><name>reader</name><operator>.</operator><name>eof</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ended</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>NO_MORE_DOCS</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>ended</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>docID</name> <operator>=</operator> <name><name>postingsArray</name><operator>.</operator><name>lastDocIDs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>postingsArray</name><operator>.</operator><name>termFreqs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>docID</name> <operator>+=</operator> <name>code</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <assert>assert <expr><name>docID</name> <operator>!=</operator> <name><name>postingsArray</name><operator>.</operator><name>lastDocIDs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</assert>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>posLeft</name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>startOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>docID</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>cost</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>nextPosition</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <assert>assert <expr><name>posLeft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
      <expr_stmt><expr><name>posLeft</name><operator>--</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name><name>posReader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>code</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hasPayload</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// has a payload</comment>
        <expr_stmt><expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name><name>posReader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>payload</name><operator>.</operator><name>bytes</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>payload</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>payload</name><operator>.</operator><name>grow</name></name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>posReader</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>hasPayload</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>readOffsets</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>startOffset</name> <operator>+=</operator> <call><name><name>posReader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>endOffset</name> <operator>=</operator> <name>startOffset</name> <operator>+</operator> <call><name><name>posReader</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>pos</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>startOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOffsets</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"offsets were not indexed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>startOffset</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>endOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOffsets</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"offsets were not indexed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>endOffset</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>getPayload</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>hasPayload</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>payload</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">476ac2aecd7</literal><operator>..</operator><literal type="number">7d50b39cb48</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">62</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CollectionUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
 
 <class><specifier>final</specifier> class <name>FreqProxTermsWriter</name> <super_list><extends>extends <super><name>TermsHashConsumer</name></super></extends></super_list> <block>{
 
   <function><annotation>@<name>Override</name></annotation>
   <type><name>void</name></type> <name>abort</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>applyDeletes</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Process any pending Term deletes for this newly</comment>
    <comment type="line">// flushed segment:</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>segDeletes</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>segDeletes</name><operator>.</operator><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Term</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>segDeletes</name> <init>= <expr><name><name>state</name><operator>.</operator><name>segDeletes</name><operator>.</operator><name>terms</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>deleteTerms</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Term</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>segDeletes</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>deleteTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>lastField</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DocsEnum</name></type> <name>docsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>Term</name></type> <name>deleteTerm</name> <range>: <expr><name>deleteTerms</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>deleteTerm</name><operator>.</operator><name>field</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>lastField</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>lastField</name> <operator>=</operator> <call><name><name>deleteTerm</name><operator>.</operator><name>field</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>lastField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>termsEnum</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>termsEnum</name><operator>.</operator><name>seekExact</name></name><argument_list>(<argument><expr><call><name><name>deleteTerm</name><operator>.</operator><name>bytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsEnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>delDocLimit</name> <init>= <expr><call><name><name>segDeletes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>deleteTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>&lt;</operator> <name>delDocLimit</name></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>liveDocs</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>state</name><operator>.</operator><name>liveDocs</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>liveDocsFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newLiveDocs</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>liveDocs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>state</name><operator>.</operator><name>delCountOnFlush</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>liveDocs</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

   <comment type="line">// TODO: would be nice to factor out more of this, eg the</comment>
   <comment type="line">// FreqProxFieldMergeState, and code to visit all Fields</comment>
   <comment type="line">// under the same FieldInfo together, up into TermsHash*.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">63</literal> <operator>+</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <name>final</name> <name>class</name> <name>FreqProxTermsWriter</name> extends <name>TermsHashConsumer</name> <block>{
     <for>for <control>(<init><decl><type><name>TermsHashConsumerPerField</name></type> <name>f</name> <range>: <expr><call><name><name>fieldsToFlush</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxTermsWriterPerField</name></type> <name>perField</name> <init>= <expr><operator>(</operator><name>FreqProxTermsWriterPerField</name><operator>)</operator> <name>f</name></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>perField</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>bytesHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>perField</name><operator>.</operator><name>sortPostings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><call><name><name>perField</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>isIndexed</name></name><argument_list>()</argument_list></call></expr>;</assert>
         <expr_stmt><expr><call><name><name>allFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>perField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></for>
 
    <name>final</name> <name>int</name> <name>numAllFields</name> <operator>=</operator> <call><name><name>allFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>

     <comment type="line">// Sort by field name</comment>
     <constructor_decl><name><name>CollectionUtil</name><operator>.</operator><name>introSort</name></name><parameter_list>(<parameter><decl><type><name>allFields</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldsConsumer</name></type> <name>consumer</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postingsFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>TermsHash</name></type> <name>termsHash</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/*
    Current writer chain:
      FieldsConsumer
        -&gt; IMPL: FormatPostingsTermsDictWriter
          -&gt; TermsConsumer
            -&gt; IMPL: FormatPostingsTermsDictWriter.TermsWriter
              -&gt; DocsConsumer
                -&gt; IMPL: FormatPostingsDocsWriter
                  -&gt; PositionsConsumer
                    -&gt; IMPL: FormatPostingsPositionsWriter
       */</comment>
      
      <for>for <control>(<init><decl><type><name>int</name></type> <name>fieldNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fieldNumber</name> <operator>&lt;</operator> <name>numAllFields</name></expr>;</condition> <incr><expr><name>fieldNumber</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FieldInfo</name></type> <name>fieldInfo</name> <init>= <expr><call><name><name>allFields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldNumber</name></expr></argument>)</argument_list></call><operator>.</operator><name>fieldInfo</name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxTermsWriterPerField</name></type> <name>fieldWriter</name> <init>= <expr><call><name><name>allFields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If this field has postings then add them to the</comment>
        <comment type="line">// segment</comment>
        <expr_stmt><expr><call><name><name>fieldWriter</name><operator>.</operator><name>flush</name></name><argument_list>(<argument><expr><name><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>TermsHashPerField</name></type> <name>perField</name> <init>= <expr><name><name>fieldWriter</name><operator>.</operator><name>termsHashPerField</name></name></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>termsHash</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>termsHash</name> <operator>==</operator> <name><name>perField</name><operator>.</operator><name>termsHash</name></name></expr>;</assert>
        <expr_stmt><expr><name>termsHash</name> <operator>=</operator> <name><name>perField</name><operator>.</operator><name>termsHash</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numPostings</name> <init>= <expr><call><name><name>perField</name><operator>.</operator><name>bytesHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>perField</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perField</name><operator>.</operator><name>shrinkHash</name></name><argument_list>(<argument><expr><name>numPostings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fieldWriter</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <if_stmt><if>if <condition>(<expr><name>termsHash</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>termsHash</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeWhileHandlingException</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></finally></try>
    <decl_stmt><decl><type><name>Fields</name></type> <name>fields</name> <init>= <expr><operator>new</operator> <call><name>FreqProxFields</name><argument_list>(<argument><expr><name>allFields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor_decl><name>applyDeletes</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>fields</name></type></decl></parameter>)</parameter_list>;</constructor_decl>

    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postingsFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
   <decl_stmt><decl><type><name>BytesRef</name></type> <name>payload</name></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriterPerField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriterPerField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">97f6df2691f</literal><operator>..</operator><literal type="number">99bd4a4a5fd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriterPerField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FreqProxTermsWriterPerField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PayloadAttribute</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>FixedBitSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>RamUsageEstimator</name></name>;</import>
 
 <comment type="line">// TODO: break into separate freq and prox writers as</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>final</name> <name>class</name> <name>FreqProxTermsWriterPerField</name> extends <name>TermsHashConsumerPerField</name> <name>implem</name>
   <name>final</name> <name>FieldInfo</name> <name>fieldInfo</name></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>final</specifier> <name><name>DocumentsWriterPerThread</name><operator>.</operator><name>DocState</name></name></type> <name>docState</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>final</specifier> <name>FieldInvertState</name></type> <name>fieldState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasFreq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasProx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasOffsets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>boolean</name></type> <name>hasFreq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>boolean</name></type> <name>hasProx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>boolean</name></type> <name>hasOffsets</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PayloadAttribute</name></type> <name>payloadAttribute</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>OffsetAttribute</name></type> <name>offsetAttribute</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>sumTotalTermFreq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>sumDocFreq</name></decl>;</decl_stmt>

  <comment type="line">// How many docs have this field:</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>docCount</name></decl>;</decl_stmt>
 
   <constructor><specifier>public</specifier> <name>FreqProxTermsWriterPerField</name><parameter_list>(<parameter><decl><type><name>TermsHashPerField</name></type> <name>termsHashPerField</name></decl></parameter>, <parameter><decl><type><name>FreqProxTermsWriter</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termsHashPerField</name></name> <operator>=</operator> <name>termsHashPerField</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>final</name> <name>class</name> <name>FreqProxTermsWriterPerField</name> extends <name>TermsHashConsumerPerField</name> <name>implem</name>
 
   @<name>Override</name>
   <name>void</name> <call><name>finish</name><argument_list>()</argument_list></call> <block>{
    <expr><name>sumDocFreq</name> <operator>+=</operator> <name><name>fieldState</name><operator>.</operator><name>uniqueTermCount</name></name></expr>;
    <name>sumTotalTermFreq</name> <operator>+=</operator> <name><name>fieldState</name><operator>.</operator><name>length</name></name></block></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fieldState</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>docCount</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

     <if_stmt><if>if <condition>(<expr><name>hasPayloads</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>fieldInfo</name><operator>.</operator><name>setStorePayloads</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>final</name> <name>class</name> <name>FreqProxTermsWriterPerField</name> extends <name>TermsHashConsumerPerField</name> <name>implem</name></expr></expr_stmt>
     <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>name</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></constructor>
 
  <comment type="line">// Called after flush</comment>
  <function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Record, up front, whether our in-RAM format will be</comment>
    <comment type="line">// with or without term freqs:</comment>
    <expr_stmt><expr><call><name>setIndexOptions</name><argument_list>(<argument><expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payloadAttribute</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>void</name></type> <name>setIndexOptions</name><parameter_list>(<parameter><decl><type><name>IndexOptions</name></type> <name>indexOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>indexOptions</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <comment type="line">// field could later be updated with indexed=true, so set everything on</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">318</literal></expr><operator>,</operator><expr><literal type="number">233</literal> <operator>+</operator><literal type="number">312</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>final</name> <name>class</name> <name>FreqProxTermsWriterPerField</name> extends <name>TermsHashConsumerPerField</name> <name>implem</name>
 
   <name>BytesRef</name> <name>payload</name></expr>;</expr_stmt>
 
  <comment type="block">/* Walk through all unique text tokens (Posting
   * instances) found in this field and serialize them
   * into a single RAM segment. */</comment>
  <function><type><name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>FieldsConsumer</name></type> <name>consumer</name></decl></parameter>,  <parameter><decl><type><specifier>final</specifier> <name>SegmentWriteState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fieldInfo</name><operator>.</operator><name>isIndexed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return> <comment type="line">// nothing to flush, don't bother the codec with the unindexed field</comment>
    </block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><specifier>final</specifier> <name>TermsConsumer</name></type> <name>termsConsumer</name> <init>= <expr><call><name><name>consumer</name><operator>.</operator><name>addField</name></name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>termComp</name> <init>= <expr><call><name><name>termsConsumer</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// CONFUSING: this.indexOptions holds the index options</comment>
    <comment type="line">// that were current when we first saw this field.  But</comment>
    <comment type="line">// it's possible this has changed, eg when other</comment>
    <comment type="line">// documents are indexed that cause a "downgrade" of the</comment>
    <comment type="line">// IndexOptions.  So we must decode the in-RAM buffer</comment>
    <comment type="line">// according to this.indexOptions, but then write the</comment>
    <comment type="line">// new segment to the directory according to</comment>
    <comment type="line">// currentFieldIndexOptions:</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexOptions</name></type> <name>currentFieldIndexOptions</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <assert>assert <expr><name>currentFieldIndexOptions</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>writeTermFreq</name> <init>= <expr><call><name><name>currentFieldIndexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>writePositions</name> <init>= <expr><call><name><name>currentFieldIndexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>writeOffsets</name> <init>= <expr><call><name><name>currentFieldIndexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>readTermFreq</name> <init>= <expr><name><name>this</name><operator>.</operator><name>hasFreq</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>readPositions</name> <init>= <expr><name><name>this</name><operator>.</operator><name>hasProx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>readOffsets</name> <init>= <expr><name><name>this</name><operator>.</operator><name>hasOffsets</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">//System.out.println("flush readTF=" + readTermFreq + " readPos=" + readPositions + " readOffs=" + readOffsets);</comment>

    <comment type="line">// Make sure FieldInfo.update is working correctly!:</comment>
    <assert>assert <expr><operator>!</operator><name>writeTermFreq</name> <operator>||</operator> <name>readTermFreq</name></expr>;</assert>
    <assert>assert <expr><operator>!</operator><name>writePositions</name> <operator>||</operator> <name>readPositions</name></expr>;</assert>
    <assert>assert <expr><operator>!</operator><name>writeOffsets</name> <operator>||</operator> <name>readOffsets</name></expr>;</assert>

    <assert>assert <expr><operator>!</operator><name>writeOffsets</name> <operator>||</operator> <name>writePositions</name></expr>;</assert>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Term</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>segDeletes</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>segDeletes</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>segDeletes</name><operator>.</operator><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>segDeletes</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>segDeletes</name><operator>.</operator><name>terms</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>segDeletes</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>termIDs</name> <init>= <expr><call><name><name>termsHashPerField</name><operator>.</operator><name>sortPostings</name></name><argument_list>(<argument><expr><name>termComp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numTerms</name> <init>= <expr><call><name><name>termsHashPerField</name><operator>.</operator><name>bytesHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>text</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FreqProxPostingsArray</name></type> <name>postings</name> <init>= <expr><operator>(</operator><name>FreqProxPostingsArray</name><operator>)</operator> <name><name>termsHashPerField</name><operator>.</operator><name>postingsArray</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ByteSliceReader</name></type> <name>freq</name> <init>= <expr><operator>new</operator> <call><name>ByteSliceReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ByteSliceReader</name></type> <name>prox</name> <init>= <expr><operator>new</operator> <call><name>ByteSliceReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FixedBitSet</name></type> <name>visitedDocs</name> <init>= <expr><operator>new</operator> <call><name>FixedBitSet</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>sumTotalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>sumDocFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Term</name></type> <name>protoTerm</name> <init>= <expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numTerms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>termID</name> <init>= <expr><name><name>termIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <comment type="line">//System.out.println("term=" + termID);</comment>
      <comment type="line">// Get BytesRef</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>textStart</name> <init>= <expr><name><name>postings</name><operator>.</operator><name>textStarts</name><index>[<expr><name>termID</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>termsHashPerField</name><operator>.</operator><name>bytePool</name><operator>.</operator><name>setBytesRef</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>termsHashPerField</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><name>freq</name></expr></argument>, <argument><expr><name>termID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>readPositions</name> <operator>||</operator> <name>readOffsets</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>termsHashPerField</name><operator>.</operator><name>initReader</name></name><argument_list>(<argument><expr><name>prox</name></expr></argument>, <argument><expr><name>termID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// TODO: really TermsHashPerField should take over most</comment>
      <comment type="line">// of this loop, including merge sort of terms from</comment>
      <comment type="line">// multiple threads and interacting with the</comment>
      <comment type="line">// TermsConsumer, only calling out to us (passing us the</comment>
      <comment type="line">// DocsConsumer) to handle delivery of docs/positions</comment>

      <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name><name>termsConsumer</name><operator>.</operator><name>startTerm</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>delDocLimit</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>segDeletes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>protoTerm</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>docIDUpto</name> <init>= <expr><call><name><name>segDeletes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>protoTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>docIDUpto</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>delDocLimit</name> <operator>=</operator> <name>docIDUpto</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>delDocLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>delDocLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// Now termStates has numToMerge FieldMergeStates</comment>
      <comment type="line">// which all share the same term.  Now we must</comment>
      <comment type="line">// interleave the docID streams.</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>docFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>totalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>docID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//System.out.println("  cycle");</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>termFreq</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>freq</name><operator>.</operator><name>eof</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>postings</name><operator>.</operator><name>lastDocCodes</name><index>[<expr><name>termID</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Return last doc</comment>
            <expr_stmt><expr><name>docID</name> <operator>=</operator> <name><name>postings</name><operator>.</operator><name>lastDocIDs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>readTermFreq</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>termFreq</name> <operator>=</operator> <name><name>postings</name><operator>.</operator><name>termFreqs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>termFreq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>postings</name><operator>.</operator><name>lastDocCodes</name><index>[<expr><name>termID</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// EOF</comment>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>code</name> <init>= <expr><call><name><name>freq</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readTermFreq</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>docID</name> <operator>+=</operator> <name>code</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>termFreq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>docID</name> <operator>+=</operator> <name>code</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>termFreq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>termFreq</name> <operator>=</operator> <call><name><name>freq</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>

          <assert>assert <expr><name>docID</name> <operator>!=</operator> <name><name>postings</name><operator>.</operator><name>lastDocIDs</name><index>[<expr><name>termID</name></expr>]</index></name></expr>;</assert>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>docFreq</name><operator>++</operator></expr>;</expr_stmt>
        <assert>assert <expr><name>docID</name> <operator>&lt;</operator> <call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call><operator>:</operator> <literal type="string">"doc="</literal> <operator>+</operator> <name>docID</name> <operator>+</operator> <literal type="string">" maxDoc="</literal> <operator>+</operator> <call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <comment type="line">// NOTE: we could check here if the docID was</comment>
        <comment type="line">// deleted, and skip it.  However, this is somewhat</comment>
        <comment type="line">// dangerous because it can yield non-deterministic</comment>
        <comment type="line">// behavior since we may see the docID before we see</comment>
        <comment type="line">// the term that caused it to be deleted.  This</comment>
        <comment type="line">// would mean some (but not all) of its postings may</comment>
        <comment type="line">// make it into the index, which'd alter the docFreq</comment>
        <comment type="line">// for those terms.  We could fix this by doing two</comment>
        <comment type="line">// passes, ie first sweep marks all del docs, and</comment>
        <comment type="line">// 2nd sweep does the real flush, but I suspect</comment>
        <comment type="line">// that'd add too much time to flush.</comment>
        <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>, <argument><expr><ternary><condition><expr><name>writeTermFreq</name></expr> ?</condition><then> <expr><name>termFreq</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>docID</name> <operator>&lt;</operator> <name>delDocLimit</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// Mark it deleted.  TODO: we could also skip</comment>
          <comment type="line">// writing its postings; this would be</comment>
          <comment type="line">// deterministic (just for this Term's docs).</comment>
          
          <comment type="line">// TODO: can we do this reach-around in a cleaner way????</comment>
          <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>liveDocs</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>liveDocs</name></name> <operator>=</operator> <call><name><name>docState</name><operator>.</operator><name>docWriter</name><operator>.</operator><name>codec</name><operator>.</operator><name>liveDocsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newLiveDocs</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>liveDocs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>delCountOnFlush</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>liveDocs</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>totalTermFreq</name> <operator>+=</operator> <name>termFreq</name></expr>;</expr_stmt>
        
        <comment type="line">// Carefully copy over the prox + payload info,</comment>
        <comment type="line">// changing the format to match Lucene's segment</comment>
        <comment type="line">// format.</comment>

        <if_stmt><if>if <condition>(<expr><name>readPositions</name> <operator>||</operator> <name>readOffsets</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// we did record positions (&amp; maybe payload) and/or offsets</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>termFreq</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>thisPayload</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>readPositions</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>code</name> <init>= <expr><call><name><name>prox</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>position</name> <operator>+=</operator> <name>code</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

                <comment type="line">// This position has a payload</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>payloadLength</name> <init>= <expr><call><name><name>prox</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name>payload</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>payload</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>payloadLength</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>payload</name><operator>.</operator><name>bytes</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>payloadLength</name></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name><name>payload</name><operator>.</operator><name>grow</name></name><argument_list>(<argument><expr><name>payloadLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>prox</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>payloadLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>payloadLength</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>thisPayload</name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>

              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>thisPayload</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>

              <if_stmt><if>if <condition>(<expr><name>readOffsets</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>startOffset</name> <init>= <expr><name>offset</name> <operator>+</operator> <call><name><name>prox</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>endOffset</name> <init>= <expr><name>startOffset</name> <operator>+</operator> <call><name><name>prox</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>writePositions</name></expr>)</condition> <block>{<block_content>
                  <if_stmt><if>if <condition>(<expr><name>writeOffsets</name></expr>)</condition> <block>{<block_content>
                    <assert>assert <expr><name>startOffset</name> <operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>endOffset</name> <operator>&gt;=</operator> <name>startOffset</name> <operator>:</operator> <literal type="string">"startOffset="</literal> <operator>+</operator> <name>startOffset</name> <operator>+</operator> <literal type="string">",endOffset="</literal> <operator>+</operator> <name>endOffset</name> <operator>+</operator> <literal type="string">",offset="</literal> <operator>+</operator> <name>offset</name></expr>;</assert>
                    <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>thisPayload</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><name>endOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>thisPayload</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>startOffset</name></expr>;</expr_stmt>
              </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>writePositions</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>thisPayload</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finishTerm</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TermStats</name><argument_list>(<argument><expr><name>docFreq</name></expr></argument>, <argument><expr><ternary><condition><expr><name>writeTermFreq</name></expr> ?</condition><then> <expr><name>totalTermFreq</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sumTotalTermFreq</name> <operator>+=</operator> <name>totalTermFreq</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sumDocFreq</name> <operator>+=</operator> <name>docFreq</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortedTermIDs</name></decl>;</decl_stmt>
 
    <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>writeTermFreq</name></expr> ?</condition><then> <expr><name>sumTotalTermFreq</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sumDocFreq</name></expr></argument>, <argument><expr><call><name><name>visitedDocs</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><type><name>void</name></type> <name>sortPostings</name><parameter_list>()</parameter_list> <block>{<block_content>
    <assert>assert <expr><name>sortedTermIDs</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
    <expr_stmt><expr><name>sortedTermIDs</name> <operator>=</operator> <call><name><name>termsHashPerField</name><operator>.</operator><name>sortPostings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappedMultiFields</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappedMultiFields</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..7bee81e79b0</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappedMultiFields</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">136</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilterAtomicReader</name><operator>.</operator><name>FilterFields</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilterAtomicReader</name><operator>.</operator><name>FilterTerms</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilterAtomicReader</name><operator>.</operator><name>FilterTermsEnum</name></name>;</import>

<comment type="block" format="javadoc">/** A {@link Fields} implementation that merges multiple
 *  Fields into one, and maps around deleted documents.
 *  This is used for merging. */</comment>

<class>class <name>MappedMultiFields</name> <super_list><extends>extends <super><name>FilterFields</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>final</specifier> <name>MergeState</name></type> <name>mergeState</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>MappedMultiFields</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>, <parameter><decl><type><name>MultiFields</name></type> <name>multiFields</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>multiFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Terms</name></type> <name>terms</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>MultiTerms</name></type> <name>terms</name> <init>= <expr><operator>(</operator><name>MultiTerms</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>MappedMultiTerms</name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>MappedMultiTerms</name> <super_list><extends>extends <super><name>FilterTerms</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>MergeState</name></type> <name>mergeState</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MappedMultiTerms</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>, <parameter><decl><type><name>MultiTerms</name></type> <name>multiTerms</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>multiTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>MappedMultiTermsEnum</name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, <argument><expr><operator>(</operator><name>MultiTermsEnum</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumTotalTermFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumDocFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getDocCount</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>MappedMultiTermsEnum</name> <super_list><extends>extends <super><name>FilterTermsEnum</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>MergeState</name></type> <name>mergeState</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MappedMultiTermsEnum</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>, <parameter><decl><type><name>MultiTermsEnum</name></type> <name>multiTermsEnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>multiTermsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>totalTermFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DocsEnum</name></type> <name>docs</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>liveDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"liveDocs must be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>MappingMultiDocsEnum</name></type> <name>mappingDocsEnum</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>instanceof</operator> <name>MappingMultiDocsEnum</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mappingDocsEnum</name> <operator>=</operator> <operator>(</operator><name>MappingMultiDocsEnum</name><operator>)</operator> <name>reuse</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>mappingDocsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>MappingMultiDocsEnum</name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      
      <decl_stmt><decl><type><name>MultiDocsEnum</name></type> <name>docsEnum</name> <init>= <expr><operator>(</operator><name>MultiDocsEnum</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><name>liveDocs</name></expr></argument>, <argument><expr><name><name>mappingDocsEnum</name><operator>.</operator><name>multiDocsEnum</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mappingDocsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>docsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>mappingDocsEnum</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DocsAndPositionsEnum</name></type> <name>docsAndPositions</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsAndPositionsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>liveDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"liveDocs must be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>MappingMultiDocsAndPositionsEnum</name></type> <name>mappingDocsAndPositionsEnum</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>instanceof</operator> <name>MappingMultiDocsAndPositionsEnum</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mappingDocsAndPositionsEnum</name> <operator>=</operator> <operator>(</operator><name>MappingMultiDocsAndPositionsEnum</name><operator>)</operator> <name>reuse</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>mappingDocsAndPositionsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>MappingMultiDocsAndPositionsEnum</name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      
      <decl_stmt><decl><type><name>MultiDocsAndPositionsEnum</name></type> <name>docsAndPositionsEnum</name> <init>= <expr><operator>(</operator><name>MultiDocsAndPositionsEnum</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><name>liveDocs</name></expr></argument>, <argument><expr><name><name>mappingDocsAndPositionsEnum</name><operator>.</operator><name>multiDocsAndPositionsEnum</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mappingDocsAndPositionsEnum</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>docsAndPositionsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>mappingDocsAndPositionsEnum</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">87</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">34aa53be703</literal><operator>..</operator><name>bcc3735ad5b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappingMultiDocsAndPositionsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
 
 <comment type="block">/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -18,9 +18,6 @@ package org.apache.lucene.codecs;
  */</comment>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MergeState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsAndPositionsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsAndPositionsEnum</name><operator>.</operator><name>EnumWithSlice</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> @<name><name>lucene</name><operator>.</operator><name>experimental</name></name>
  <operator>*</operator><operator>/</operator>
 
<specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsAndPositionsEnum</name> extends <name>DocsAndPositionsEnum</name> <block>{
<expr><name>final</name> <name>class</name> <name>MappingMultiDocsAndPositionsEnum</name> extends <name>DocsAndPositionsEnum</name> <block>{
   <expr><specifier>private</specifier> <name><name>MultiDocsAndPositionsEnum</name><operator>.</operator><name>EnumWithSlice</name><index>[]</index></name> <name>subs</name></expr>;
   <name>int</name> <name>numSubs</name></block></expr>;
   <name>int</name> <name>upto</name></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsAndPositionsEnum</name> extends <name>DocsAndPositionsEnum</name>
   <name>int</name> <name>currentBase</name></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>MergeState</name></type> <name>mergeState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MultiDocsAndPositionsEnum</name></type> <name>multiDocsAndPositionsEnum</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/** Sole constructor. */</comment>
  <constructor><specifier>public</specifier> <name>MappingMultiDocsAndPositionsEnum</name><parameter_list>()</parameter_list> <block>{<block_content>
  <constructor><specifier>public</specifier> <name>MappingMultiDocsAndPositionsEnum</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <function><type><name>MappingMultiDocsAndPositionsEnum</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>MultiDocsAndPositionsEnum</name></type> <name>postingsEnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsAndPositionsEnum</name> extends <name>DocsAndPositionsEnum</name>
     <name><name>this</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <call><name><name>postingsEnum</name><operator>.</operator><name>getSubs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>upto</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiDocsAndPositionsEnum</name></name> <operator>=</operator> <name>postingsEnum</name></expr>;</expr_stmt>
     <return>return <expr><name>this</name></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Sets the {@link MergeState}, which is used to re-map
   *  document IDs. */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setMergeState</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/** How many sub-readers we are merging.
    *  @see #getSubs */</comment>
   <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSubs</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsAndPositionsEnum</name> extends <name>DocsAndPositionsEnum</name>
 
       <name>int</name> <name>doc</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>!=</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name> <operator>&gt;</operator> <literal type="number">60000</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>mergeState</name><operator>.</operator><name>checkAbort</name><operator>.</operator><name>work</name></name><argument_list>(<argument><expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name><operator>/</operator><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

         <comment type="line">// compact deletions</comment>
         <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>currentMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">86</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7f9252a04dd</literal><operator>..</operator><literal type="number">148ea5c1f9a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MappingMultiDocsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
 
 <comment type="block">/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -17,9 +17,6 @@ package org.apache.lucene.codecs;
  * limitations under the License.
  */</comment>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MergeState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsEnum</name><operator>.</operator><name>EnumWithSlice</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> @<name><name>lucene</name><operator>.</operator><name>experimental</name></name>
  <operator>*</operator><operator>/</operator>
 
<specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsEnum</name> extends <name>DocsEnum</name> <block>{
<expr><name>final</name> <name>class</name> <name>MappingMultiDocsEnum</name> extends <name>DocsEnum</name> <block>{
   <expr><specifier>private</specifier> <name><name>MultiDocsEnum</name><operator>.</operator><name>EnumWithSlice</name><index>[]</index></name> <name>subs</name></expr>;
   <name>int</name> <name>numSubs</name></block></expr>;
   <name>int</name> <name>upto</name></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsEnum</name> extends <name>DocsEnum</name> <block>{
   <expr><name>DocsEnum</name> <name>current</name></expr>;
   <name>int</name> <name>currentBase</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>MergeState</name></type> <name>mergeState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MergeState</name></type> <name>mergeState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MultiDocsEnum</name></type> <name>multiDocsEnum</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/** Sole constructor. */</comment>
  <constructor><specifier>public</specifier> <name>MappingMultiDocsEnum</name><parameter_list>()</parameter_list> <block>{<block_content>
  <constructor><specifier>public</specifier> <name>MappingMultiDocsEnum</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <function><type><name>MappingMultiDocsEnum</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>MultiDocsEnum</name></type> <name>docsEnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numSubs</name></name> <operator>=</operator> <call><name><name>docsEnum</name><operator>.</operator><name>getNumSubs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <call><name><name>docsEnum</name><operator>.</operator><name>getSubs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiDocsEnum</name></name> <operator>=</operator> <name>docsEnum</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>upto</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     <return>return <expr><name>this</name></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Sets the {@link MergeState}, which is used to re-map
   *  document IDs. */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setMergeState</name><parameter_list>(<parameter><decl><type><name>MergeState</name></type> <name>mergeState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergeState</name></name> <operator>=</operator> <name>mergeState</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/** How many sub-readers we are merging.
    *  @see #getSubs */</comment>
   <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSubs</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MappingMultiDocsEnum</name> extends <name>DocsEnum</name> <block>{
 
       <expr><name>int</name> <name>doc</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>!=</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name> <operator>&gt;</operator> <literal type="number">60000</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>mergeState</name><operator>.</operator><name>checkAbort</name><operator>.</operator><name>work</name></name><argument_list>(<argument><expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name><operator>/</operator><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mergeState</name><operator>.</operator><name>checkAbortCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

         <comment type="line">// compact deletions</comment>
         <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>currentMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MergeState</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MergeState</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">35e7cc810b5</literal><operator>..</operator><name>cc60b8ecafa</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MergeState</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MergeState</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>MergeState</name> <block>{
   <comment type="block" format="javadoc">/** InfoStream for debugging messages. */</comment>
   <expr><specifier>public</specifier> <name>final</name> <name>InfoStream</name> <name>infoStream</name></expr>;
 
  <comment type="block" format="javadoc">/** Counter used for periodic calls to checkAbort
   * @lucene.internal */</comment>
  <specifier>public</specifier> <name>int</name> <name>checkAbortCount</name></block></expr>;</expr_stmt>

   <comment type="line">// TODO: get rid of this? it tells you which segments are 'aligned' (e.g. for bulk merging)</comment>
   <comment type="line">// but is this really so expensive to compute again in different components, versus once in SM?</comment>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTerms</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTerms</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cbf5c5d9bb2</name><operator>..</operator><literal type="number">96994daa9f9</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTerms</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTerms</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>automaton</name><operator>.</operator><name>CompiledAutomaton</name></name>;</import>
 <class><specifier>public</specifier> <specifier>final</specifier> class <name>MultiTerms</name> <super_list><extends>extends <super><name>Terms</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Terms</name><index>[]</index></name></type> <name>subs</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReaderSlice</name><index>[]</index></name></type> <name>subSlices</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>termComp</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasOffsets</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasPositions</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasPayloads</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTerms</name> extends <name>Terms</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>subs</name></name> <operator>=</operator> <name>subs</name></expr>;
     <name><name>this</name><operator>.</operator><name>subSlices</name></name> <operator>=</operator> <name>subSlices</name></block></expr>;</expr_stmt>
     
    <decl_stmt><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>_termComp</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <assert>assert <expr><name><name>subs</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="string">"inefficient: don't use MultiTerms over one sub"</literal></expr>;</assert>
     <decl_stmt><decl><type><name>boolean</name></type> <name>_hasOffsets</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>boolean</name></type> <name>_hasPositions</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>boolean</name></type> <name>_hasPayloads</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>subs</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>_termComp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>_termComp</name> <operator>=</operator> <name><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getComparator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// We cannot merge sub-readers that have</comment>
        <comment type="line">// different TermComps</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>subTermComp</name> <init>= <expr><name><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getComparator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subTermComp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>subTermComp</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>_termComp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"sub-readers have different BytesRef.Comparators; cannot merge"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
       <expr_stmt><expr><name>_hasOffsets</name> <operator>&amp;=</operator> <name><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>hasOffsets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>_hasPositions</name> <operator>&amp;=</operator> <name><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>hasPositions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>_hasPayloads</name> <operator>|=</operator> <name><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>hasPayloads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
 
    <expr_stmt><expr><name>termComp</name> <operator>=</operator> <name>_termComp</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>hasOffsets</name> <operator>=</operator> <name>_hasOffsets</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>hasPositions</name> <operator>=</operator> <name>_hasPositions</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>hasPayloads</name> <operator>=</operator> <name>hasPositions</name> <operator>&amp;&amp;</operator> <name>_hasPayloads</name></expr>;</expr_stmt> <comment type="line">// if all subs have pos, and at least one has payloads.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTerms</name> extends <name>Terms</name> <block>{
     <return>return <expr><name>sum</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>termComp</name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>hasOffsets</name></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">937804e18db</literal><operator>..</operator><literal type="number">9e2abdd5706</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Exposes {@link TermsEnum} API, merged from {@link TermsEnum} API of sub-segments.
@@ -47,7 +46,6 @@ public final class MultiTermsEnum extends TermsEnum {
   private int numTop;
   private int numSubs;
   private BytesRef current;
  private Comparator&lt;BytesRef&gt; termComp;
 
   static class TermsEnumIndex {
     public final static TermsEnumIndex[] EMPTY_ARRAY = new TermsEnumIndex[0];
@@ -95,36 +93,18 @@ public final class MultiTermsEnum extends TermsEnum {
     return current;
   }
 
  @Override
  public Comparator&lt;BytesRef&gt; getComparator() {
    return termComp;
  }

   /** The terms array must be newly created TermsEnum, ie
    *  {@link TermsEnum#next} has not yet been called. */</comment>
   <function><type><specifier>public</specifier> <name>TermsEnum</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name><name>TermsEnumIndex</name><index>[]</index></name></type> <name>termsEnumsIndex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <assert>assert <expr><name><name>termsEnumsIndex</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <name><name>top</name><operator>.</operator><name>length</name></name></expr>;</assert>
     <expr_stmt><expr><name>numSubs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>numTop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>termComp</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>termsEnumsIndex</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
 
       <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnumIndex</name></type> <name>termsEnumIndex</name> <init>= <expr><name><name>termsEnumsIndex</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <assert>assert <expr><name>termsEnumIndex</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
 
      <comment type="line">// init our term comp</comment>
      <if_stmt><if>if <condition>(<expr><name>termComp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>queue</name><operator>.</operator><name>termComp</name></name> <operator>=</operator> <name>termComp</name> <operator>=</operator> <call><name><name>termsEnumIndex</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// We cannot merge sub-readers that have</comment>
        <comment type="line">// different TermComps</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>subTermComp</name> <init>= <expr><call><name><name>termsEnumIndex</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subTermComp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>subTermComp</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>termComp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"sub-readers have different BytesRef.Comparators: "</literal> <operator>+</operator> <name>subTermComp</name> <operator>+</operator> <literal type="string">" vs "</literal> <operator>+</operator> <name>termComp</name> <operator>+</operator> <literal type="string">"; cannot merge"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

       <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnumIndex</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnumWithSlice</name></type> <name>entry</name> <init>= <expr><name><name>subs</name><index>[<expr><name><name>termsEnumIndex</name><operator>.</operator><name>subIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">149</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTermsEnum</name> extends <name>TermsEnum</name> <block>{
     <expr><name>numTop</name> <operator>=</operator> <literal type="number">0</literal></expr>;
 
     <name>boolean</name> <name>seekOpt</name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastSeek</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>lastSeek</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lastSeek</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>lastSeek</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>seekOpt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTermsEnum</name> extends <name>TermsEnum</name> <block>{
       <if_stmt><if>if <condition>(<expr><name>seekOpt</name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>curTerm</name> <init>= <expr><name><name>currentSubs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>current</name></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>curTerm</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>curTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>curTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
           </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">201</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">181</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTermsEnum</name> extends <name>TermsEnum</name> <block>{
     <expr><name>lastSeekExact</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
 
     <name>boolean</name> <name>seekOpt</name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastSeek</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>lastSeek</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lastSeek</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>lastSeek</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>seekOpt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTermsEnum</name> extends <name>TermsEnum</name> <block>{
       <if_stmt><if>if <condition>(<expr><name>seekOpt</name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>curTerm</name> <init>= <expr><name><name>currentSubs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>current</name></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>curTerm</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>curTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>curTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>SeekStatus</name><operator>.</operator><name>FOUND</name></name></expr>;</expr_stmt>
           </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">519</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">499</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MultiTermsEnum</name> extends <name>TermsEnum</name> <block>{
   }</block>
 
   <specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>class</name> <name>TermMergeQueue</name> extends <name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>TermsEnumWithSlice</name></argument>&gt;</argument_list></name> <block>{
    <expr><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>termComp</name></expr>;
     <call><name>TermMergeQueue</name><argument_list>(<argument><expr><name>int</name> <name>size</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
     @<name>Override</name>
     <specifier>protected</specifier> <name>boolean</name> <call><name>lessThan</name><argument_list>(<argument><expr><name>TermsEnumWithSlice</name> <name>termsA</name></expr></argument>, <argument><expr><name>TermsEnumWithSlice</name> <name>termsB</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>final</name> <name>int</name> <name>cmp</name> <operator>=</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>termsA</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>termsB</name><operator>.</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;
      <name>final</name> <name>int</name> <name>cmp</name> <operator>=</operator> <call><name><name>termsA</name><operator>.</operator><name>current</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>termsB</name><operator>.</operator><name>current</name></name></expr></argument>)</argument_list></call></block></block></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
       </block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentMerger</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentMerger</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">718687bcc85</literal><operator>..</operator><literal type="number">8b513139cc9</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentMerger</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentMerger</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldInfosWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>DocValuesConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldInfosWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>StoredFieldsWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermVectorsWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>DocValuesType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">375</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">374</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>final</name> <name>class</name> <name>SegmentMerger</name> <block>{
       <expr><name>docBase</name> <operator>+=</operator> <name>maxDoc</name></expr>;
     }</block></expr></expr_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldsConsumer</name></type> <name>consumer</name> <init>= <expr><call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>segmentWriteState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>,
                     <argument><expr><operator>new</operator> <call><name>MultiFields</name><argument_list>(<argument><expr><call><name><name>fields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name><name>Fields</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name><name>slices</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name><name>ReaderSlice</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeWhileHandlingException</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></finally></try>
    <decl_stmt><decl><type><name>Fields</name></type> <name>mergedFields</name> <init>= <expr><operator>new</operator> <call><name>MappedMultiFields</name><argument_list>(<argument><expr><name>mergeState</name></expr></argument>, 
                                                <argument><expr><operator>new</operator> <call><name>MultiFields</name><argument_list>(<argument><expr><call><name><name>fields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name><name>Fields</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                                <argument><expr><call><name><name>slices</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name><name>ReaderSlice</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>segmentWriteState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>mergedFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></else></if_stmt>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedDocValuesTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e3d9c5cdc17</name><operator>..</operator><literal type="number">0dedfab5f38</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>SortedDocValuesTermsEnum</name> extends <name>TermsEnum</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>TermState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <assert>assert <expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>instanceof</operator> <name>OrdTermState</name></expr>;</assert>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedSetDocValuesTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedSetDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3c04135205f</literal><operator>..</operator><name>a48f3ebca9d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedSetDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SortedSetDocValuesTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>class</name> <name>SortedSetDocValuesTermsEnum</name> extends <name>TermsEnum</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>TermState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <assert>assert <expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>instanceof</operator> <name>OrdTermState</name></expr>;</assert>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermVectorsConsumer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermVectorsConsumer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f548eeab2b9</name><operator>..</operator><name>f8b9cca74fc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermVectorsConsumer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermVectorsConsumer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>final</name> <name>class</name> <name>TermVectorsConsumer</name> extends <name>TermsHashConsumer</name> <block>{
         <expr><name>hasVectors</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
       }</block></expr></expr_stmt>
     </block_content>}</block></function>

    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TermsHashConsumerPerField</name></type> <name>field</name> <range>: <expr><call><name><name>fieldsToFlush</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content>
      <decl_stmt><decl><type><name>TermVectorsConsumerPerField</name></type> <name>perField</name> <init>= <expr><operator>(</operator><name>TermVectorsConsumerPerField</name><operator>)</operator> <name>field</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>perField</name><operator>.</operator><name>termsHashPerField</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>perField</name><operator>.</operator><name>shrinkHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** Fills in no-term-vectors for all docs we haven't seen
diff --git a/lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java b/lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
index 7dc13d56d26..d2f99f8a08d 100644
-- a/lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
++ b/lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
@@ -156,7 +156,7 @@ final class TermVectorsConsumerPerField extends TermsHashConsumerPerField {
     TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;
     final TermVectorsWriter tv = termsWriter.writer;
 
    final int[] termIDs = termsHashPerField.sortPostings(tv.getComparator());
    final int[] termIDs = termsHashPerField.sortPostings();
 
     tv.startField(fieldInfo, numPostings, doVectorPositions, doVectorOffsets, hasPayloads);
     
@@ -191,11 +191,6 @@ final class TermVectorsConsumerPerField extends TermsHashConsumerPerField {
     fieldInfo.setStoreTermVectors();
   }
 
  void shrinkHash() {
    termsHashPerField.shrinkHash(maxNumPostings);
    maxNumPostings = 0;
  }

   @Override
   void start(IndexableField f) {
     if (doVectorOffsets) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/Terms.java b/lucene/core/src/java/org/apache/lucene/index/Terms.java
index 45924d40d0d..179bb0ad1b8 100644
-- a/lucene/core/src/java/org/apache/lucene/index/Terms.java
++ b/lucene/core/src/java/org/apache/lucene/index/Terms.java
@@ -18,7 +18,6 @@ package org.apache.lucene.index;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>automaton</name><operator>.</operator><name>CompiledAutomaton</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>Terms</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <comment type="block" format="javadoc">/** Return the BytesRef Comparator used to sort terms
   *  provided by the iterator.  This method may return null
   *  if there are no terms.  This method may be invoked
   *  many times; it's best to cache a single instance &amp;
   *  reuse it. */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>;</function_decl>

   <comment type="block" format="javadoc">/** Returns the number of terms for this field, or -1 if this 
    *  measure isn't stored by the codec. Note that, just like 
    *  other term measures, this measure does not take deleted 
@@ -109,6 +101,8 @@ public abstract class Terms {
    *  measures, this measure does not take deleted documents
    *  into account. */</comment>
   <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getDocCount</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <comment type="line">// TODO: shouldn't we have hasFreq() as well?</comment>
   
   <comment type="block" format="javadoc">/** Returns true if documents in this field store offsets. */</comment>
   <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b54c19ef9e4</name><operator>..</operator><literal type="number">895018be0da</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRefIterator</name></name>;</import>
  <expr><operator>*</operator> <operator>#</operator><name>docs</name></expr></block_content>}</block></if></if_stmt><operator>.</operator>
  <operator>*</operator> 
  <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator><name>Term</name> <name>enumerations</name> <name>are</name> <name>always</name> <name>ordered</name> <name>by</name>
 <operator>*</operator> <block>{@<expr><name>link</name> <operator>#</operator><name>getComparator</name></expr>}</block></block><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
 <operator>*</operator> <name>greater</name> <name>than</name> <name>the</name> <name>one</name> <name>before</name> <name><name>it</name><operator>.</operator></name>&lt;<operator>/</operator><name>p</name><operator>&gt;</operator>
 <operator>*</operator> <name><name>BytesRef</name><operator>.</operator><name>compareTo</name></name></expr><operator>,</operator> <expr><name>which</name> <name>is</name> <name>Unicode</name> <name>sort</name>
 <operator>*</operator> <name>order</name></expr></expr_stmt> <if_stmt><if>if the terms are UTF-8 bytes.  Each term in the
 * enumeration is greater than the one before it.&lt;/p&gt;
  *
  * &lt;p&gt;The TermsEnum is unpositioned when you first obtain it
  * and you must first successfully call <block>{<block_content><annotation>@<name>link</name></annotation> <expr><operator>#</operator><name>next</name></expr></block_content>}</block></if></if_stmt> <expr_stmt><expr><name>or</name> <name>one</name>
@@ <operator>-</operator><literal type="number">229</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">229</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>TermsEnum</name> implements <name>BytesRefIterator</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"this method should never be called"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
      
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"this method should never be called"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsHashPerField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsHashPerField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">723253999d8</literal><operator>..</operator><name>bb67d642c3b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsHashPerField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TermsHashPerField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>TermToBytesRefAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteBlockPool</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>final</name> <name>class</name> <name>TermsHashPerField</name> extends <name>InvertedDocConsumerPerField</name> <block>{
       <expr><name>nextPerField</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   }</block></expr></expr_stmt>
 
  <function><type><name>void</name></type> <name>shrinkHash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>targetSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Fully free the bytesHash on each flush but keep the pool untouched</comment>
    <comment type="line">// bytesHash.clear will clear the ByteStartArray and in turn the ParallelPostingsArray too</comment>
    <expr_stmt><expr><call><name><name>bytesHash</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>bytesHash</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>nextPerField</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>nextPerField</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>TermsHashPerField</name> extends <name>InvertedDocConsumerPerField</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/** Collapse the hash table &amp; sort in-place. */</comment>
  <specifier>public</specifier> <name><name>int</name><index>[]</index></name> <call><name>sortPostings</name><argument_list>(<argument><expr><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>termComp</name></expr></argument>)</argument_list></call> <block>{
   <return>return <expr><call><name><name>bytesHash</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>termComp</name></expr></argument>)</argument_list></call></expr>;</return>
  <specifier>public</specifier> <name><name>int</name><index>[]</index></name> <call><name>sortPostings</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><call><name><name>bytesHash</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block>
 
   <specifier>private</specifier> <name>boolean</name> <name>doCall</name></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>TermsHashPerField</name> extends <name>InvertedDocConsumerPerField</name> <block>{
 
   <comment type="line">// Secondary entry point (for 2nd &amp; subsequent TermsHash),</comment>
   <comment type="line">// because token text has already been "interned" into</comment>
  <comment type="line">// textStart, so we hash by textStart</comment>
  <comment type="line">// textStart, so we hash by textStart.  term vectors use</comment>
  <comment type="line">// this API.</comment>
   <expr><specifier>public</specifier> <name>void</name> <call><name>add</name><argument_list>(<argument><expr><name>int</name> <name>textStart</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>int</name> <name>termID</name> <operator>=</operator> <call><name><name>bytesHash</name><operator>.</operator><name>addByPoolOffset</name></name><argument_list>(<argument><expr><name>textStart</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>termID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>      <comment type="line">// New posting</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>TermsHashPerField</name> extends <name>InvertedDocConsumerPerField</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <comment type="line">// Primary entry point (for first TermsHash)</comment>
  <comment type="line">// Primary entry point (for first TermsHash); postings use</comment>
  <comment type="line">// this API.</comment>
   <function><annotation>@<name>Override</name></annotation>
   <type><name>void</name></type> <name>add</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreAutoRewrite</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreAutoRewrite</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d36b1a37c9c</name><operator>..</operator><literal type="number">3b8ebde94ff</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreAutoRewrite</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreAutoRewrite</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>ConstantScoreAutoRewrite</name> extends <name><name>TermCollectingRewrite</name><argument_list type="generic">&lt;<argument><name>BooleanQuery</name></argument>&gt;</argument_list></name> <block>{
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>BooleanQuery</name></type> <name>bq</name> <init>= <expr><call><name>getTopLevelQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRefHash</name></type> <name>pendingTerms</name> <init>= <expr><name><name>col</name><operator>.</operator><name>pendingTerms</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>sort</name><index>[]</index></name> <init>= <expr><call><name><name>pendingTerms</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>col</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>sort</name><index>[]</index></name> <init>= <expr><call><name><name>pendingTerms</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name><name>sort</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <comment type="line">// docFreq is not used for constant score here, we pass 1</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocTermOrdsRewriteMethod</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocTermOrdsRewriteMethod</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5e06af1f728</literal><operator>..</operator><literal type="number">79a1c13cf69</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocTermOrdsRewriteMethod</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocTermOrdsRewriteMethod</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedSetDocValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -90,11 +88,6 @@ public final class DocTermOrdsRewriteMethod extends MultiTermQuery.RewriteMethod
       final OpenBitSet termSet = new OpenBitSet(docTermOrds.getValueCount());
       TermsEnum termsEnum = query.getTermsEnum(new Terms() {
         
        @Override
        public Comparator&lt;BytesRef&gt; getComparator() {
          return BytesRef.getUTF8SortedAsUnicodeComparator();
        }
        
         @Override
         public TermsEnum iterator(TermsEnum reuse) {
           return docTermOrds.termsEnum();
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java b/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
index 825bd89410a..1e96781faf3 100644
-- a/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
++ b/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
@@ -18,7 +18,6 @@ package org.apache.lucene.search;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedDocValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -90,11 +88,6 @@ public final class FieldCacheRewriteMethod extends MultiTermQuery.RewriteMethod
       final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());
       TermsEnum termsEnum = query.getTermsEnum(new Terms() {
         
        @Override
        public Comparator&lt;BytesRef&gt; getComparator() {
          return BytesRef.getUTF8SortedAsUnicodeComparator();
        }
        
         @Override
         public TermsEnum iterator(TermsEnum reuse) {
           return fcsi.termsEnum();
diff --git a/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java b/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
index 85698fed538..8e2bf8bc4d1 100644
-- a/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
++ b/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
@@ -46,7 +46,7 @@ import org.apache.lucene.util.automaton.LevenshteinAutomata;
  * to the specified filter term.
  *
  * &lt;p&gt;Term enumerations are always ordered by
 * {@link #getComparator}.  Each term in the enumeration is
 * {@link BytesRef#compareTo}.  Each term in the enumeration is
  * greater than all that precede it.&lt;/p&gt;
  */</comment>
 <class><specifier>public</specifier> class <name>FuzzyTermsEnum</name> <super_list><extends>extends <super><name>TermsEnum</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">292</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">292</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FuzzyTermsEnum</name> extends <name>TermsEnum</name> <block>{
     <return>return <expr><call><name><name>actualEnum</name><operator>.</operator><name>termState</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
   
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>actualEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>long</name></type> <name>ord</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name><name>actualEnum</name><operator>.</operator><name>ord</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>NumericRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>NumericRangeQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2d7cbe402fd</literal><operator>..</operator><literal type="number">1ba70306f7f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>NumericRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>NumericRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>NumericTokenStream</name></name>;</import> <comment type="line">// for javadocs</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">392</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">391</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name><name>NumericRangeQuery</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name> extends <name>MultiTermQuery</name> <block>{
     <expr><specifier>private</specifier> <name>BytesRef</name> <name>currentLowerBound</name></expr>, <expr><name>currentUpperBound</name></expr>;
 
     <specifier>private</specifier> <name>final</name> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>rangeBounds</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>termComp</name></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name>NumericRangeTermsEnum</name><argument_list>(<argument><expr><name>final</name> <name>TermsEnum</name> <name>tenum</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><name>tenum</name></expr></argument>)</argument_list></call></expr>;
@@ <operator>-</operator><literal type="number">481</literal><operator>,</operator><literal type="number">15</literal> <operator>+</operator><literal type="number">479</literal><operator>,</operator><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name><name>NumericRangeQuery</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name> extends <name>MultiTermQuery</name> <block>{
           <comment type="line">// should never happen</comment>
           <throw>throw <argument_list>new <argument><expr><call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid NumericType"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
       }</block>

      <name>termComp</name> <operator>=</operator> <call><name>getComparator</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     </block_content>}</block></function>
     
     <function><type><specifier>private</specifier> <name>void</name></type> <name>nextRange</name><parameter_list>()</parameter_list> <block>{<block_content>
       <assert>assert <expr><call><name><name>rangeBounds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
 
       <expr_stmt><expr><name>currentLowerBound</name> <operator>=</operator> <call><name><name>rangeBounds</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <assert>assert <expr><name>currentUpperBound</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>currentUpperBound</name></expr></argument>, <argument><expr><name>currentLowerBound</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>:</operator></expr></assert>
      <assert>assert <expr><name>currentUpperBound</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>currentUpperBound</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>currentLowerBound</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>:</operator>
         <literal type="string">"The current upper bound must be &lt;= the new lower bound"</literal></expr>;</assert>
       
       <expr_stmt><expr><name>currentUpperBound</name> <operator>=</operator> <call><name><name>rangeBounds</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">501</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">497</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name><name>NumericRangeQuery</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name> extends <name>MultiTermQuery</name> <block>{
         <expr><call><name>nextRange</name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
         
         <comment type="line">// if the new upper bound is before the term parameter, the sub-range is never a hit</comment>
        <if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>currentUpperBound</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>currentUpperBound</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
           <continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
         <comment type="line">// never seek backwards, so use current term if lower bound is smaller</comment>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>term</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>currentLowerBound</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then/></ternary></expr></return>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>term</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>currentLowerBound</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
           <expr><name>term</name></expr> </then><else>: <expr><name>currentLowerBound</name></expr></else></ternary></expr>;</return>
       </block_content>}</block></function>
       
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">516</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">512</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name><name>NumericRangeQuery</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name> extends <name>MultiTermQuery</name> <block>{
     
     @<expr><name>Override</name>
     <specifier>protected</specifier> <name>final</name> <name>AcceptStatus</name> <call><name>accept</name><argument_list>(<argument><expr><name>BytesRef</name> <name>term</name></expr></argument>)</argument_list></call> <block>{
      <while>while <condition>(<expr><name>currentUpperBound</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>currentUpperBound</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>currentUpperBound</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>currentUpperBound</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>rangeBounds</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><name><name>AcceptStatus</name><operator>.</operator><name>END</name></name></expr>;</return></block_content></block></if></if_stmt>
         <comment type="line">// peek next sub-range, only seek if the current term is smaller than next lower bound</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><call><name><name>rangeBounds</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>rangeBounds</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><name><name>AcceptStatus</name><operator>.</operator><name>NO_AND_SEEK</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
         <comment type="line">// step forward to next range without seeking, as next lower range bound is less or equal current term</comment>
         <expr_stmt><expr><call><name>nextRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PrefixTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PrefixTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">96184b6611b</literal><operator>..</operator><name>c50233f3003</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PrefixTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PrefixTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>StringHelper</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Subclass</name> <name>of</name> <name>FilteredTermEnum</name></expr></expr_stmt> <for>for enumerating all terms that match the
  * specified prefix filter term.
  * &lt;p&gt;Term enumerations are always ordered by
 * <block>{<block_content><annotation>@<name>link</name></annotation> <expr_stmt><expr><operator>#</operator><name>getComparator</name></expr></expr_stmt></block_content></block></for></block_content></block></while></block_content></block></while></block></expr>}</block><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
 <operator>*</operator> <block>{@<expr><name>link</name> <name>BytesRef</name><operator>#</operator><name>compareTo</name></expr>}</block><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
  <operator>*</operator> <name>greater</name> <name>than</name> <name>all</name> <name>that</name> <name>precede</name> <name><name>it</name><operator>.</operator></name>&lt;<operator>/</operator><name>p</name><operator>&gt;</operator>
  <operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>PrefixTermsEnum</name> extends <name>FilteredTermsEnum</name> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ScoringRewrite</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ScoringRewrite</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">662e00f3542</literal><operator>..</operator><literal type="number">152c1f8039b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ScoringRewrite</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ScoringRewrite</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">109</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">109</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>ScoringRewrite</name><argument_list type="generic">&lt;<argument><name>Q</name> <extends>extends <name>Query</name></extends></argument>&gt;</argument_list></name> extends <name>TermCollectingRewr</name>
     
     <name>final</name> <name>int</name> <name>size</name> <operator>=</operator> <call><name><name>col</name><operator>.</operator><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>sort</name><index>[]</index></name> <init>= <expr><call><name><name>col</name><operator>.</operator><name>terms</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>col</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>sort</name><index>[]</index></name> <init>= <expr><call><name><name>col</name><operator>.</operator><name>terms</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>boost</name> <init>= <expr><name><name>col</name><operator>.</operator><name>array</name><operator>.</operator><name>boost</name></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name><name>TermContext</name><index>[]</index></name></type> <name>termStates</name> <init>= <expr><name><name>col</name><operator>.</operator><name>array</name><operator>.</operator><name>termState</name></name></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermCollectingRewrite</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermCollectingRewrite</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a0534111e9e</name><operator>..</operator><literal type="number">07d97278c24</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermCollectingRewrite</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermCollectingRewrite</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>abstract</specifier> <name>class</name> <name><name>TermCollectingRewrite</name><argument_list type="generic">&lt;<argument><name>Q</name> <extends>extends <name>Query</name></extends></argument>&gt;</argument_list></name> extends <name><name>MultiTermQuery</name><operator>.</operator><name>Rew</name></name>
   
   <name>final</name> <name>void</name> <call><name>collectTerms</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>MultiTermQuery</name> <name>query</name></expr></argument>, <argument><expr><name>TermCollector</name> <name>collector</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>IndexReaderContext</name> <name>topReaderContext</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>lastTermComp</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>AtomicReaderContext</name></type> <name>context</name> <range>: <expr><call><name><name>topReaderContext</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>Fields</name></type> <name>fields</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>abstract</specifier> <name>class</name> <name><name>TermCollectingRewrite</name><argument_list type="generic">&lt;<argument><name>Q</name> <extends>extends <name>Query</name></extends></argument>&gt;</argument_list></name> extends <name><name>MultiTermQuery</name><operator>.</operator><name>Rew</name></name></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>termsEnum</name> <operator>==</operator> <name><name>TermsEnum</name><operator>.</operator><name>EMPTY</name></name></expr>)</condition><block type="pseudo"><block_content>
         <continue>continue;</continue></block_content></block></if></if_stmt>
       
      <comment type="line">// Check comparator compatibility:</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>newTermComp</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastTermComp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newTermComp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newTermComp</name> <operator>!=</operator> <name>lastTermComp</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"term comparator should not change between segments: "</literal><operator>+</operator><name>lastTermComp</name><operator>+</operator><literal type="string">" != "</literal><operator>+</operator><name>newTermComp</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>lastTermComp</name> <operator>=</operator> <name>newTermComp</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>setReaderContext</name></name><argument_list>(<argument><expr><name>topReaderContext</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>setNextEnum</name></name><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>BytesRef</name></type> <name>bytes</name></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermRangeTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermRangeTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c6b0a202013</name><operator>..</operator><literal type="number">184413ff35d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermRangeTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermRangeTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilteredTermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Subclass of FilteredTermEnum for enumerating all terms that match the
 * specified range parameters.
 * &lt;p&gt;Term enumerations are always ordered by
 * {@link #getComparator}.  Each term in the enumeration is
 * specified range parameters.  Each term in the enumeration is
  * greater than all that precede it.&lt;/p&gt;
  */</comment>
 <class><specifier>public</specifier> class <name>TermRangeTermsEnum</name> <super_list><extends>extends <super><name>FilteredTermsEnum</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TermRangeTermsEnum</name> extends <name>FilteredTermsEnum</name> <block>{
   <expr><name>final</name> <specifier>private</specifier> <name>boolean</name> <name>includeUpper</name></expr>;
   <name>final</name> <specifier>private</specifier> <name>BytesRef</name> <name>lowerBytesRef</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>BytesRef</name></type> <name>upperBytesRef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>termComp</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
    * Enumerates all terms greater/equal than &lt;code&gt;lowerTerm&lt;/code&gt;
@@ -82,7 +76,6 @@ public class TermRangeTermsEnum extends FilteredTermsEnum {
     }
 
     setInitialSeekTerm(lowerBytesRef);
    termComp = getComparator();
   }
 
   @Override
@@ -92,7 +85,7 @@ public class TermRangeTermsEnum extends FilteredTermsEnum {
     
     // Use this field's default sort ordering
     if (upperBytesRef != null) {
      final int cmp = termComp.compare(upperBytesRef, term);
      final int cmp = upperBytesRef.compareTo(term);
       /*
        * if beyond the upper term, or is exclusive and this is equal to
        * the upper term, break out
diff --git a/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java b/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java
index b3c6ec4b09a..0bbf3f3d000 100644
-- a/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java
++ b/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java
@@ -70,20 +70,18 @@ public abstract class TopTermsRewrite&lt;Q extends Query&gt; extends TermCollectingRew
       private final Map&lt;BytesRef,ScoreTerm&gt; visitedTerms = new HashMap&lt;BytesRef,ScoreTerm&gt;();
       
       private TermsEnum termsEnum;
      private Comparator&lt;BytesRef&gt; termComp;
       private BoostAttribute boostAtt;        
       private ScoreTerm st;
       
       @Override
       public void setNextEnum(TermsEnum termsEnum) {
         this.termsEnum = termsEnum;
        this.termComp = termsEnum.getComparator();
         
         assert compareToLastTerm(null);
 
         // lazy init the initial ScoreTerm because comparator is not known on ctor:
         if (st == null)
          st = new ScoreTerm(this.termComp, new TermContext(topReaderContext));
          st = new ScoreTerm(new TermContext(topReaderContext));
         boostAtt = termsEnum.attributes().addAttribute(BoostAttribute.class);
       }
     
@@ -95,7 +93,7 @@ public abstract class TopTermsRewrite&lt;Q extends Query&gt; extends TermCollectingRew
         } else if (t == null) {
           lastTerm = null;
         } else {
          assert termsEnum.getComparator().compare(lastTerm, t) &lt; 0: "lastTerm=" + lastTerm + " t=" + t;
          assert lastTerm.compareTo(t) &lt; 0: "lastTerm=" + lastTerm + " t=" + t;
           lastTerm.copyBytes(t);
         }
         return true;
@@ -115,7 +113,7 @@ public abstract class TopTermsRewrite&lt;Q extends Query&gt; extends TermCollectingRew
           final ScoreTerm t = stQueue.peek();
           if (boost &lt; t.boost)
             return true;
          if (boost == t.boost &amp;&amp; termComp.compare(bytes, t.bytes) &gt; 0)
          if (boost == t.boost &amp;&amp; bytes.compareTo(t.bytes) &gt; 0)
             return true;
         }
         ScoreTerm t = visitedTerms.get(bytes);
@@ -139,7 +137,7 @@ public abstract class TopTermsRewrite&lt;Q extends Query&gt; extends TermCollectingRew
             visitedTerms.remove(st.bytes);
             st.termState.clear(); // reset the termstate! 
           } else {
            st = new ScoreTerm(termComp, new TermContext(topReaderContext));
            st = new ScoreTerm(new TermContext(topReaderContext));
           }
           assert stQueue.size() &lt;= maxSize : "the PQ size must be limited to maxSize";
           // set maxBoostAtt with values to help FuzzyTermsEnum to optimize
@@ -185,26 +183,22 @@ public abstract class TopTermsRewrite&lt;Q extends Query&gt; extends TermCollectingRew
     new Comparator&lt;ScoreTerm&gt;() {
       @Override
       public int compare(ScoreTerm st1, ScoreTerm st2) {
        assert st1.termComp == st2.termComp :
          "term comparator should not change between segments";
        return st1.termComp.compare(st1.bytes, st2.bytes);
        return st1.bytes.compareTo(st2.bytes);
       }
     };
 
   static final class ScoreTerm implements Comparable&lt;ScoreTerm&gt; {
    public final Comparator&lt;BytesRef&gt; termComp;
     public final BytesRef bytes = new BytesRef();
     public float boost;
     public final TermContext termState;
    public ScoreTerm(Comparator&lt;BytesRef&gt; termComp, TermContext termState) {
      this.termComp = termComp;
    public ScoreTerm(TermContext termState) {
       this.termState = termState;
     }
     
     @Override
     public int compareTo(ScoreTerm other) {
       if (this.boost == other.boost)
        return termComp.compare(other.bytes, this.bytes);
        return other.bytes.compareTo(this.bytes);
       else
         return Float.compare(this.boost, other.boost);
     }
diff --git a/lucene/core/src/java/org/apache/lucene/search/package.html b/lucene/core/src/java/org/apache/lucene/search/package.html
index 4be5eba1277..1a9e5773fb4 100644
-- a/lucene/core/src/java/org/apache/lucene/search/package.html
++ b/lucene/core/src/java/org/apache/lucene/search/package.html
@@ -173,7 +173,7 @@ section for more notes on the process.
     {@link org.apache.lucene.index.Term Term}
     and an upper
     {@link org.apache.lucene.index.Term Term}
    according to {@link org.apache.lucene.index.TermsEnum#getComparator TermsEnum.getComparator()}. It is not intended
    according to {@link org.apache.lucene.util.BytesRef#compareTo BytesRef.compareTo()}. It is not intended
     for numerical ranges; use {@link org.apache.lucene.search.NumericRangeQuery NumericRangeQuery} instead.
 
     For example, one could find all documents
diff --git a/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java b/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
index fe9877baca7..063cc34279d 100644
-- a/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
++ b/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
@@ -18,7 +18,6 @@ package org.apache.lucene.util;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A simple iterator interface for {@link BytesRef} iteration.
@@ -38,14 +37,6 @@ public interface BytesRefIterator {
    */</comment>
   <function_decl><type><specifier>public</specifier> <name>BytesRef</name></type> <name>next</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
   
  <comment type="block" format="javadoc">/**
   * Return the {@link BytesRef} Comparator used to sort terms provided by the
   * iterator. This may return null if there are no items or the iterator is not
   * sorted. Callers may invoke this method many times, so it's best to cache a
   * single instance &amp; reuse it.
   */</comment>
  <function_decl><type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>;</function_decl>

   <comment type="block" format="javadoc">/** Singleton BytesRefIterator that iterates over 0 BytesRefs. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BytesRefIterator</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <class><super><name>BytesRefIterator</name></super><argument_list>()</argument_list> <block>{
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <specifier>public</specifier> interface <name>BytesRefIterator</name> <block>{
     <expr><specifier>public</specifier> <name>BytesRef</name> <call><name>next</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     }</block>
    
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block>
   }</expr>;
 }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene41</name><operator>/</operator><name><name>TestBlockPostingsFormat3</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene41</name><operator>/</operator><name><name>TestBlockPostingsFormat3</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">22276c16d26</literal><operator>..</operator><name>fe683e3acf7</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene41</name><operator>/</operator><name><name>TestBlockPostingsFormat3</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene41</name><operator>/</operator><name><name>TestBlockPostingsFormat3</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBlockPostingsFormat3</name> extends <name>LuceneTestCase</name> <block>{
    <expr><operator>*</operator> <name>checks</name> <name>collection</name><operator>-</operator><name>level</name> <name>statistics</name> <name>on</name> <name>Terms</name> 
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>assertTermsStatistics</name><argument_list>(<argument><expr><name>Terms</name> <name>leftTerms</name></expr></argument>, <argument><expr><name>Terms</name> <name>rightTerms</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr>
    <assert>assert <expr><call><name><name>leftTerms</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rightTerms</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</assert></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>leftTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>rightTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>leftTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rightTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecs</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecs</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a446e4b13be</name><operator>..</operator><literal type="number">55a5f58ca8c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecs</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecs</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene40</name><operator>.</operator><name>Lucene40RWCodec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene41</name><operator>.</operator><name>Lucene41RWCodec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene42</name><operator>.</operator><name>Lucene42RWCodec</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>PhraseQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ScoreDoc</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>InfoStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>_TestUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">145</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCodecs</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>public</specifier> <name>int</name> <call><name>compareTo</name><argument_list>(<argument><expr><name>final</name> <name>FieldData</name> <name>other</name></expr></argument>)</argument_list></call> <block>{
       <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>name</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
     }</block>

    <specifier>public</specifier> <name>void</name> <call><name>write</name><argument_list>(<argument><expr><name>final</name> <name>FieldsConsumer</name> <name>consumer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Throwable</name> <block>{
      <expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
      <name>final</name> <name>TermsConsumer</name> <name>termsConsumer</name> <operator>=</operator> <call><name><name>consumer</name><operator>.</operator><name>addField</name></name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>sumTotalTermCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>sumDF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>OpenBitSet</name></type> <name>visitedDocs</name> <init>= <expr><operator>new</operator> <call><name>OpenBitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TermData</name></type> <name>term</name> <range>: <expr><name>terms</name></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term</name><operator>.</operator><name>docs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>visitedDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>term</name><operator>.</operator><name>docs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>sumDF</name> <operator>+=</operator> <name><name>term</name><operator>.</operator><name>docs</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sumTotalTermCount</name> <operator>+=</operator> <call><name><name>term</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>termsConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>omitTF</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>sumTotalTermCount</name></expr></else></ternary></expr></argument>, <argument><expr><name>sumDF</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>visitedDocs</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></class></expr></init></decl></decl_stmt>
   }</block></class>
 
   <class>class <name>PositionData</name> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCodecs</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>public</specifier> <name>int</name> <call><name>compareTo</name><argument_list>(<argument><expr><name>final</name> <name>TermData</name> <name>o</name></expr></argument>)</argument_list></call> <block>{
       <return>return <expr><call><name><name>text</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
     }</block>

    <specifier>public</specifier> <name>long</name> <call><name>write</name><argument_list>(<argument><expr><name>final</name> <name>TermsConsumer</name> <name>termsConsumer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Throwable</name> <block>{
      <expr><name>final</name> <name>PostingsConsumer</name> <name>postingsConsumer</name> <operator>=</operator> <call><name><name>termsConsumer</name><operator>.</operator><name>startTerm</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>totTF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>docs</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>termDocFreq</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>.</operator><name>omitTF</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>termDocFreq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>termDocFreq</name> <operator>=</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name><name>docs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>termDocFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>.</operator><name>omitTF</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>totTF</name> <operator>+=</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>PositionData</name></type> <name>pos</name> <init>= <expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finishTerm</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TermStats</name><argument_list>(<argument><expr><name><name>docs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>.</operator><name>omitTF</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>totTF</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>totTF</name></expr>;</return>
    }</block></class>
   </block_content>}</block></if></if_stmt>
 
   <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>SEGMENT</name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">588</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">544</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCodecs</name> extends <name>LuceneTestCase</name> <block>{
           <expr><name>term</name> <operator>=</operator> <name><name>field</name><operator>.</operator><name>terms</name><index>[<expr><name>upto</name></expr>]</index></name></expr>;</block></expr></expr_stmt>
           <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><specifier>final</specifier> <name>DocsEnum</name></type> <name>docs</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DocsEnum</name></type> <name>docsAndFreqs</name></decl>;</decl_stmt>
             <decl_stmt><decl><type><specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>postings</name></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>.</operator><name>omitTF</name></name></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><name>postings</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <if_stmt><if>if <condition>(<expr><name>postings</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>docs</name> <operator>=</operator> <name>docsAndFreqs</name> <operator>=</operator> <name>postings</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>docs</name> <operator>=</operator> <name>postings</name></expr>;</expr_stmt>
               </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>docs</name> <operator>=</operator> <name>docsAndFreqs</name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>termsEnum</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>termsEnum</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></else></if_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
               <expr_stmt><expr><name>postings</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>docsAndFreqs</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
               <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>termsEnum</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>DocsEnum</name><operator>.</operator><name>FLAG_NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
             <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>docs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">657</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">611</literal></expr><operator>,</operator><expr><literal type="number">250</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCodecs</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DataFields</name> <super_list><extends>extends <super><name>Fields</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>FieldData</name><index>[]</index></name></type> <name>fields</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DataFields</name><parameter_list>(<parameter><decl><type><name><name>FieldData</name><index>[]</index></name></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// already sorted:</comment>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <name>fields</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <class><super><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>upto</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><name>upto</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name>upto</name><operator>++</operator></expr>;</expr_stmt>
          <return>return <expr><name><name>fields</name><index>[<expr><name>upto</name></expr>]</index></name><operator>.</operator><name><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Terms</name></type> <name>terms</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Slow linear search:</comment>
      <for>for<control>(<init><decl><type><name>FieldData</name></type> <name>fieldData</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>fieldData</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>new</operator> <call><name>DataTerms</name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DataTerms</name> <super_list><extends>extends <super><name>Terms</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldData</name></type> <name>fieldData</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DataTerms</name><parameter_list>(<parameter><decl><type><name>FieldData</name></type> <name>fieldData</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fieldData</name></name> <operator>=</operator> <name>fieldData</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>DataTermsEnum</name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumTotalTermFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumDocFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getDocCount</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fieldData</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPositions</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fieldData</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPayloads</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fieldData</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>hasPayloads</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DataTermsEnum</name> <super_list><extends>extends <super><name>TermsEnum</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldData</name></type> <name>fieldData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>upto</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DataTermsEnum</name><parameter_list>(<parameter><decl><type><name>FieldData</name></type> <name>fieldData</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fieldData</name></name> <operator>=</operator> <name>fieldData</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>upto</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>upto</name> <operator>==</operator> <name><name>fieldData</name><operator>.</operator><name>terms</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><call><name>term</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>term</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>fieldData</name><operator>.</operator><name>terms</name><index>[<expr><name>upto</name></expr>]</index></name><operator>.</operator><name>text</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SeekStatus</name></type> <name>seekCeil</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Stupid linear impl:</comment>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>fieldData</name><operator>.</operator><name>terms</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><name><name>fieldData</name><operator>.</operator><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>text</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>upto</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>FOUND</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>upto</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>NOT_FOUND</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ord</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>ord</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>totalTermFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DocsEnum</name></type> <name>docs</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <assert>assert <expr><name>liveDocs</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
      <return>return <expr><operator>new</operator> <call><name>DataDocsAndPositionsEnum</name><argument_list>(<argument><expr><name><name>fieldData</name><operator>.</operator><name>terms</name><index>[<expr><name>upto</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DocsAndPositionsEnum</name></type> <name>docsAndPositions</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsAndPositionsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <assert>assert <expr><name>liveDocs</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
      <return>return <expr><operator>new</operator> <call><name>DataDocsAndPositionsEnum</name><argument_list>(<argument><expr><name><name>fieldData</name><operator>.</operator><name>terms</name><index>[<expr><name>upto</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DataDocsAndPositionsEnum</name> <super_list><extends>extends <super><name>DocsAndPositionsEnum</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>TermData</name></type> <name>termData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>docUpto</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>posUpto</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DataDocsAndPositionsEnum</name><parameter_list>(<parameter><decl><type><name>TermData</name></type> <name>termData</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termData</name></name> <operator>=</operator> <name>termData</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>cost</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>nextDoc</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>docUpto</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>docUpto</name> <operator>==</operator> <name><name>termData</name><operator>.</operator><name>docs</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NO_MORE_DOCS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>posUpto</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><call><name>docID</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>termData</name><operator>.</operator><name>docs</name><index>[<expr><name>docUpto</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Slow linear impl:</comment>
      <expr_stmt><expr><call><name>nextDoc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><call><name>docID</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>nextDoc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <return>return <expr><call><name>docID</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>termData</name><operator>.</operator><name>positions</name><index>[<expr><name>docUpto</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>nextPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>posUpto</name><operator>++</operator></expr>;</expr_stmt>
      <return>return <expr><name><name>termData</name><operator>.</operator><name>positions</name><index>[<expr><name>docUpto</name></expr>]</index><index>[<expr><name>posUpto</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>getPayload</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>termData</name><operator>.</operator><name>positions</name><index>[<expr><name>docUpto</name></expr>]</index><index>[<expr><name>posUpto</name></expr>]</index></name><operator>.</operator><name>payload</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>startOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>endOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  }</block></class>

   <function><type><specifier>private</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FieldInfos</name></type> <name>fieldInfos</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>FieldData</name><index>[]</index></name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>Codec</name></type> <name>codec</name> <init>= <expr><call><name><name>Codec</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>SegmentInfo</name></type> <name>si</name> <init>= <expr><operator>new</operator> <call><name>SegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LUCENE_MAIN_VERSION</name></name></expr></argument>, <argument><expr><name>SEGMENT</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>SegmentWriteState</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>SegmentWriteState</name><argument_list>(<argument><expr><call><name><name>InfoStream</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>fieldInfos</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldsConsumer</name></type> <name>consumer</name> <init>= <expr><call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>FieldData</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataFields</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testDocsOnlyFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestConcurrentMergeScheduler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestConcurrentMergeScheduler</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b24c53a83f0</name><operator>..</operator><name>eb77e4cd736</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestConcurrentMergeScheduler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestConcurrentMergeScheduler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestConcurrentMergeScheduler</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>IndexWriter</name> <name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>IndexWriter</name><argument_list>(
         <argument><expr><name>directory</name></expr></argument>,
         <argument><expr><call><name>newIndexWriterConfig</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
            <comment type="line">// Force excessive merging:</comment>
             <call><name>setMaxBufferedDocs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator>
             <call><name>setMergePolicy</name><argument_list>(<argument><expr><call><name>newLogMergePolicy</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
     )</argument_list></call></expr>;
@@ <operator>-</operator><literal type="number">249</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">250</literal><operator>,</operator><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestConcurrentMergeScheduler</name> extends <name>LuceneTestCase</name> <block>{
           <expr><name>directory</name></expr>,
           <expr><call><name>newIndexWriterConfig</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
               <call><name>setOpenMode</name><argument_list>(<argument><expr><name><name>OpenMode</name><operator>.</operator><name>APPEND</name></name></expr></argument>)</argument_list></call><operator>.</operator>
              <call><name>setMergePolicy</name><argument_list>(<argument><expr><call><name>newLogMergePolicy</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <call><name>setMergePolicy</name><argument_list>(<argument><expr><call><name>newLogMergePolicy</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
              <comment type="line">// Force excessive merging:</comment>
              <call><name>setMaxBufferedDocs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>
       )</block></block></expr>;</expr_stmt>
     </block_content>}</block></function>
     <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDirectoryReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDirectoryReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4f7ca8fbe6c</literal><operator>..</operator><literal type="number">9aeb5364361</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDirectoryReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDirectoryReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1094</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1094</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testFilesOpenClose</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>File</name> <name>tempDir</name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>getTempDir</name></name><argument_list>(<argument><expr><literal type="string">"testIndexExistsOnNonExistentDirectory"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>tempDir</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newFSDirectory</name><argument_list>(<argument><expr><name>tempDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"dir="</literal> <operator>+</operator> <name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>DirectoryReader</name><operator>.</operator><name>indexExists</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a177e564b0b</name><operator>..</operator><literal type="number">7f458da0b95</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>BinaryDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">537</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">538</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexWriterExceptions</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>public</specifier> <name>void</name> <call><name>eval</name><argument_list>(<argument><expr><name>MockDirectoryWrapper</name> <name>dir</name></expr></argument>)</argument_list></call>  <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <if_stmt><if>if <condition>(<expr><name>doFail</name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name><name>StackTraceElement</name><index>[]</index></name></type> <name>trace</name> <init>= <expr><operator>new</operator> <call><name>Exception</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStackTrace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>sawAppend</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>boolean</name></type> <name>sawFlush</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>trace</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>sawAppend</name> <operator>&amp;&amp;</operator> <name>sawFlush</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>FreqProxTermsWriterPerField</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>trace</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getClassName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"flush"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>trace</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getMethodName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sawAppend</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
           <if_stmt><if>if <condition>(<expr><literal type="string">"flush"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>trace</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getMethodName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>sawFlush</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
           </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
 
        <if_stmt><if>if <condition>(<expr><name>sawAppend</name> <operator>&amp;&amp;</operator> <name>sawFlush</name> <operator>&amp;&amp;</operator> <name>count</name><operator>++</operator> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sawFlush</name> <operator>&amp;&amp;</operator> <name>count</name><operator>++</operator> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>doFail</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
           <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"now failing during flush"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLongPostings</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLongPostings</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">34f0a590fa1</literal><operator>..</operator><literal type="number">38cef40276a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLongPostings</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLongPostings</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestLongPostings</name> extends <name>LuceneTestCase</name> <block>{
           }</block></expr></expr_stmt>
 
           <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"    check positions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
             <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>freq</name> <operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <for>for<control>(<init><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>pos</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>memory</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryIndex</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>memory</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryIndex</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3a0c6bbe62f</literal><operator>..</operator><literal type="number">99e8e1b61fb</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>memory</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryIndex</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>memory</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryIndex</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">803</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">803</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>MemoryIndex</name> <block>{
               <return>return <expr><operator>new</operator> <call><name>MemoryTermsEnum</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
             }</block></expr></expr_stmt>
 
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

             <function><annotation>@<name>Override</name></annotation>
             <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
               <return>return <expr><call><name><name>info</name><operator>.</operator><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">965</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">960</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>MemoryIndex</name> <block>{
         <return>return <expr><operator>(</operator><operator>(</operator><name>MemoryDocsAndPositionsEnum</name><operator>)</operator> <name>reuse</name><operator>)</operator><operator>.</operator><call><name>reset</name><argument_list>(<argument><expr><name>liveDocs</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>sliceArray</name><operator>.</operator><name>start</name><index>[<expr><name>ord</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>sliceArray</name><operator>.</operator><name>end</name><index>[<expr><name>ord</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>sliceArray</name><operator>.</operator><name>freq</name><index>[<expr><name>ord</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>TermState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <assert>assert <expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowCollatedTermRangeTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowCollatedTermRangeTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">91030c99569</literal><operator>..</operator><name>fbaf5477a83</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowCollatedTermRangeTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowCollatedTermRangeTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>sandbox</name><operator>.</operator><name>queries</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>Collator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Subclass</name> <name>of</name> <name>FilteredTermEnum</name></expr></expr_stmt> <for>for enumerating all terms that match the
  * specified range parameters.
  * &lt;p&gt;Term enumerations are always ordered by
 * <block>{<block_content><annotation>@<name>link</name></annotation> <expr><operator>#</operator><name>getComparator</name></expr></block_content>}</block></for><expr_stmt><expr><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
 <operator>*</operator> <block>{@<expr><name>link</name> <name>BytesRef</name><operator>#</operator><name>compareTo</name></expr>}</block><operator>.</operator>  <name>Each</name> <name>term</name> <name>in</name> <name>the</name> <name>enumeration</name> <name>is</name>
  <operator>*</operator> <name>greater</name> <name>than</name> <name>all</name> <name>that</name> <name>precede</name> <name><name>it</name><operator>.</operator></name>&lt;<operator>/</operator><name>p</name><operator>&gt;</operator>
  <operator>*</operator> @<name>deprecated</name> <name>Index</name> <name>collation</name> <name>keys</name> <name>with</name> <name>CollationKeyAnalyzer</name> <name>or</name> <name>ICUCollationKeyAnalyzer</name> <name><name>instead</name><operator>.</operator></name>
  *  <name>This</name> <name>class</name> <name>will</name> <name>be</name> <name>removed</name> <name>in</name> <name>Lucene</name> <literal type="number">5.0</literal>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowFuzzyTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowFuzzyTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f63c1a1503b</name><operator>..</operator><literal type="number">0bdc37deefc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowFuzzyTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>SlowFuzzyTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>UnicodeUtil</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>fuzzy</name> <name>terms</name> enum <name>method</name> <name>by</name> <name>calling</name> <name>FuzzyTermsEnum</name><literal type="char">'s getAutomatonEnum.
  * &lt;/p&gt;
  * &lt;p&gt;Term enumerations are always ordered by
 * {@link #getComparator}.  Each term in the enumeration is
 * {@link BytesRef#compareTo}.  Each term in the enumeration is
  * greater than all that precede it.&lt;/p&gt;
  * 
  * @deprecated Use {@link FuzzyTermsEnum} instead.
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.java b/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.java
index 444762e17a1..f950d737134 100644
-- a/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.java
++ b/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.java
@@ -17,7 +17,9 @@ package org.apache.lucene.spatial.prefix;
  * limitations under the License.
  */
 
import com.spatial4j.core.shape.Shape;
import java.io.IOException;
import java.util.Iterator;

 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.DocIdSet;
@@ -26,9 +28,7 @@ import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.StringHelper;

import java.io.IOException;
import java.util.Iterator;
import com.spatial4j.core.shape.Shape;
 
 /**
  * Traverses a {@link SpatialPrefixTree} indexed field, using the template &amp;
@@ -176,7 +176,7 @@ public abstract class AbstractVisitingPrefixTreeFilter extends AbstractPrefixTre
         //Seek to curVNode'</literal><name>s</name> <call><name>cell</name> <argument_list>(<argument><expr><name>or</name> <name>skip</name></expr></argument></argument_list></call></expr></expr_stmt> <if_stmt><if>if termsEnum has moved beyond</if></if_stmt>)</block_content>
         curVNodeTerm.bytes = curVNode.cell.getTokenBytes(</block></function>)</block_content></block>;</function>
         <expr_stmt><expr><name><name>curVNodeTerm</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>curVNodeTerm</name><operator>.</operator><name>bytes</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>compare</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><name>thisTerm</name></expr></argument>, <argument><expr><name>curVNodeTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>compare</name> <init>= <expr><call><name><name>thisTerm</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>curVNodeTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <comment type="line">// leap frog (termsEnum is beyond where we would otherwise seek)</comment>
           <assert>assert <expr><operator>!</operator> <call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>terms</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>seekExact</name><argument_list>(<argument><expr><name>curVNodeTerm</name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"should be absent"</literal></expr>;</assert>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>HighFrequencyDictionary</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>HighFrequencyDictionary</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c05f5831c9c</name><operator>..</operator><literal type="number">187e3271621</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>HighFrequencyDictionary</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>HighFrequencyDictionary</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <specifier>public</specifier> <name>class</name> <name>HighFrequencyDictionary</name> implements <name>Dictionary</name> <block>{
       }</block></expr></expr_stmt>
       <return>return  <expr><literal type="null">null</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>termsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name><name>termsEnum</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
   </block_content>}</block></for>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>PlainTextDictionary</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>PlainTextDictionary</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">27ec4d214a9</literal><operator>..</operator><literal type="number">7071ff7cb28</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>PlainTextDictionary</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>PlainTextDictionary</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRefIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <specifier>public</specifier> <name>class</name> <name>PlainTextDictionary</name> implements <name>Dictionary</name> <block>{
       }</block></expr></expr_stmt>
       <return>return <expr><name>result</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></if></if_stmt>

 }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>TermFreqIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>TermFreqIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2487a0b5779</literal><operator>..</operator><name>d7ce627b522</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>TermFreqIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spell</name><operator>/</operator><name><name>TermFreqIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRefIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <specifier>public</specifier> interface <name>TermFreqIterator</name> extends <name>BytesRefIterator</name> <block>{
     <expr><specifier>public</specifier> <name>BytesRef</name> <call><name>next</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></for>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BufferingTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BufferingTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f4eae438778</name><operator>..</operator><literal type="number">6228667285d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BufferingTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BufferingTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>TermFreqIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>BufferingTermFreqIteratorWrapper</name> implements <name>TermFreqIterator</name> <block>{
   <comment type="block" format="javadoc">/** buffered weights, parallel with {@link #entries} */</comment>
   <expr><specifier>protected</specifier> <name><name>long</name><index>[]</index></name> <name>freqs</name> <operator>=</operator> <operator>new</operator> <name><name>long</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;
   <specifier>private</specifier> <name>final</name> <name>BytesRef</name> <name>spare</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>comp</name></decl>;</decl_stmt>
   
   <comment type="block" format="javadoc">/** Creates a new iterator, buffering entries from the specified iterator */</comment>
   <constructor><specifier>public</specifier> <name>BufferingTermFreqIteratorWrapper</name><parameter_list>(<parameter><decl><type><name>TermFreqIterator</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comp</name></name> <operator>=</operator> <call><name><name>source</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>BytesRef</name></type> <name>spare</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>freqIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <while>while<condition>(<expr><operator>(</operator><name>spare</name> <operator>=</operator> <call><name><name>source</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>class</name> <name>BufferingTermFreqIteratorWrapper</name> implements <name>TermFreqIterator</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   </block_content>}</block></while>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>comp</name></expr>;</return>
  </block_content>}</block></function>

 
 </block_content>}</block></constructor>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BytesRefArray</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BytesRefArray</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9fa96bac55a</literal><operator>..</operator><name>e7a44fc37e0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BytesRefArray</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>BytesRefArray</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>BytesRefArray</name> <block>{
         }</block></expr></expr_stmt>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       }</block></class>
      
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>comp</name></expr>;</return>
      </block_content>}</block></function>
     </block_content>}</block></for><empty_stmt>;</empty_stmt>
   </block_content>}</block></else></if_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>FileDictionary</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>FileDictionary</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">26d4e42b830</literal><operator>..</operator><name>fa242ef89f7</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>FileDictionary</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>FileDictionary</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name></name>;</package>
 
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>Dictionary</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>TermFreqIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileDictionary</name> implements <name>Dictionary</name> <block>{
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       }</block></expr></expr_stmt>
     </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>SortedTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>SortedTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">409f4ff34c8</literal><operator>..</operator><literal type="number">53c4212ac44</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>SortedTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>SortedTermFreqIteratorWrapper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>SortedTermFreqIteratorWrapper</name> implements <name>TermFreqIterator</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <call><name>sort</name><argument_list>()</argument_list></call></expr>;
   }</block></expr></expr_stmt>
   
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>comparator</name></expr>;</return>
  </block_content>}</block></function>
  
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>BytesRef</name></type> <name>next</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>fst</name><operator>/</operator><name><name>ExternalRefSorter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>fst</name><operator>/</operator><name><name>ExternalRefSorter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0c464898306</literal><operator>..</operator><literal type="number">0a06b861e83</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>fst</name><operator>/</operator><name><name>ExternalRefSorter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>fst</name><operator>/</operator><name><name>ExternalRefSorter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExternalRefSorter</name> implements <name>BytesRefSorter</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
       <expr><name>input</name> <operator>=</operator> <literal type="null">null</literal></expr>;
     }</block></expr></expr_stmt>
     
    <return>return <expr><operator>new</operator> <call><name>ByteSequenceIterator</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Sort</name><operator>.</operator><name>ByteSequencesReader</name></name><argument_list>(<argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>sort</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>ByteSequenceIterator</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Sort</name><operator>.</operator><name>ByteSequencesReader</name></name><argument_list>(<argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
   <function><type><specifier>private</specifier> <name>void</name></type> <name>closeWriter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExternalRefSorter</name> implements <name>BytesRefSorter</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
   <expr><name>class</name> <name>ByteSequenceIterator</name> implements <name>BytesRefIterator</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name>ByteSequencesReader</name> <name>reader</name></expr>;
     <specifier>private</specifier> <name>BytesRef</name> <name>scratch</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></block></expr>;
    <specifier>private</specifier> <name>final</name> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>comparator</name></block></expr>;</expr_stmt>
     
    <constructor><specifier>public</specifier> <name>ByteSequenceIterator</name><parameter_list>(<parameter><decl><type><name>ByteSequencesReader</name></type> <name>reader</name></decl></parameter>,
        <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>ByteSequenceIterator</name><parameter_list>(<parameter><decl><type><name>ByteSequencesReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comparator</name></name> <operator>=</operator> <name>comparator</name></expr>;</expr_stmt>
     </block_content>}</block></constructor>
     
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExternalRefSorter</name> implements <name>BytesRefSorter</name></expr><operator>,</operator> <expr><name>Closeable</name> <block>{
         }</block></expr></expr_stmt>
       </block_content>}</block></constructor>
     </block_content>}</block></function>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>comparator</name></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></if></if_stmt>
 
   <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>jaspell</name><operator>/</operator><name><name>JaspellLookup</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>jaspell</name><operator>/</operator><name><name>JaspellLookup</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e44bbda9965</name><operator>..</operator><literal type="number">558e115440e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>jaspell</name><operator>/</operator><name><name>JaspellLookup</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>jaspell</name><operator>/</operator><name><name>JaspellLookup</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>TermFreqIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>TermFreqPayloadIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>Lookup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>UnsortedTermFreqIteratorWrapper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>jaspell</name><operator>.</operator><name>JaspellTernarySearchTrie</name><operator>.</operator><name>TSTNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CharsRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>JaspellLookup</name> extends <name>Lookup</name> <block>{
     <if_stmt><if>if <condition>(<expr><name>tfit</name> <operator>instanceof</operator> <name>TermFreqPayloadIterator</name></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"this suggester doesn't support payloads"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt></block></expr></expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>tfit</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// make sure it's unsorted</comment>
      <comment type="line">// WTF - this could result in yet another sorted iteration....</comment>
      <expr_stmt><expr><name>tfit</name> <operator>=</operator> <operator>new</operator> <call><name>UnsortedTermFreqIteratorWrapper</name><argument_list>(<argument><expr><name>tfit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
     <expr_stmt><expr><name>trie</name> <operator>=</operator> <operator>new</operator> <call><name>JaspellTernarySearchTrie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>trie</name><operator>.</operator><name>setMatchAlmostDiff</name></name><argument_list>(<argument><expr><name>editDistance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>BytesRef</name></type> <name>spare</name></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>tst</name><operator>/</operator><name><name>TSTLookup</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>tst</name><operator>/</operator><name><name>TSTLookup</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">98d1e5d3e42</literal><operator>..</operator><literal type="number">852ebb56c9a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>tst</name><operator>/</operator><name><name>TSTLookup</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>tst</name><operator>/</operator><name><name>TSTLookup</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TSTLookup</name> extends <name>Lookup</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"this suggester doesn't support payloads"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
     <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name>TernaryTreeNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// buffer first</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>tfit</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUTF16Comparator</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// make sure it's sorted and the comparator uses UTF16 sort order</comment>
      <expr_stmt><expr><name>tfit</name> <operator>=</operator> <operator>new</operator> <call><name>SortedTermFreqIteratorWrapper</name><argument_list>(<argument><expr><name>tfit</name></expr></argument>, <argument><expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUTF16Comparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// make sure it's sorted and the comparator uses UTF16 sort order</comment>
    <expr_stmt><expr><name>tfit</name> <operator>=</operator> <operator>new</operator> <call><name>SortedTermFreqIteratorWrapper</name><argument_list>(<argument><expr><name>tfit</name></expr></argument>, <argument><expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUTF16Comparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Number</name></argument>&gt;</argument_list></name></type> <name>vals</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Number</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqArrayIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqArrayIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8c6862fecec</literal><operator>..</operator><name>d77fa5cfca9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqArrayIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqArrayIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>TermFreqIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>TermFreqArrayIterator</name> implements <name>TermFreqIterator</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   </block_content>}</block></if></if_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqPayloadArrayIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqPayloadArrayIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">28cd0a4d5a6</literal><operator>..</operator><literal type="number">5bfb073251b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqPayloadArrayIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TermFreqPayloadArrayIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spell</name><operator>.</operator><name>TermFreqIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>TermFreqPayloadArrayIterator</name> implements <name>TermFreqPayloadIterat</name>
   <specifier>public</specifier> <name>BytesRef</name> <call><name>payload</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name><name>current</name><operator>.</operator><name>payload</name></name></expr>;</return>
   }</block></expr></expr_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestHighFrequencyDictionary</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestHighFrequencyDictionary</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b7ef1dfa6f3</name><operator>..</operator><literal type="number">576d2a55d55</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestHighFrequencyDictionary</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestHighFrequencyDictionary</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">36</literal><operator>,</operator><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestHighFrequencyDictionary</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>IndexReader</name> <name>ir</name> <operator>=</operator> <call><name><name>DirectoryReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;
     <name>Dictionary</name> <name>dictionary</name> <operator>=</operator> <operator>new</operator> <call><name>HighFrequencyDictionary</name><argument_list>(<argument><expr><name>ir</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></block></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>BytesRefIterator</name></type> <name>tf</name> <init>= <expr><call><name><name>dictionary</name><operator>.</operator><name>getWordsIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>tf</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>tf</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ea8240f3064</name><operator>..</operator><name>af227a9293d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingPostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene41</name><operator>.</operator><name>Lucene41PostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AssertingAtomicReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentReadState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>AssertingPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
   
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>FieldsConsumer</name> <call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>SegmentWriteState</name> <name>state</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <return>return <expr><operator>new</operator> <call><name>AssertingFieldsConsumer</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>fieldsConsumer</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <name>FieldsConsumer</name> <name>fieldsConsumer</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>fieldsConsumer</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fieldsConsumer</name> <operator>instanceof</operator> <name>PushFieldsConsumer</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>AssertingPushFieldsConsumer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name>PushFieldsConsumer</name><operator>)</operator> <name>fieldsConsumer</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>AssertingFieldsConsumer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>fieldsConsumer</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></if></if_stmt>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>AssertingPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <return>return <expr><call><name><name>in</name><operator>.</operator><name>ramBytesUsed</name></name><argument_list>()</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
   </block_content>}</block></for>
  
  <class><specifier>static</specifier> class <name>AssertingFieldsConsumer</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FieldsConsumer</name></type> <name>in</name></decl>;</decl_stmt>

  <class><specifier>static</specifier> class <name>AssertingPushFieldsConsumer</name> <super_list><extends>extends <super><name>PushFieldsConsumer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PushFieldsConsumer</name></type> <name>in</name></decl>;</decl_stmt>
     
    <constructor><name>AssertingFieldsConsumer</name><parameter_list>(<parameter><decl><type><name>FieldsConsumer</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>AssertingPushFieldsConsumer</name><argument_list>(<argument><expr><name>SegmentWriteState</name> <name>writeState</name></expr></argument>, <argument><expr><name>PushFieldsConsumer</name> <name>in</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><name>writeState</name></expr></argument>)</argument_list></call></expr>;
       <name><name>this</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></block></expr>;</expr_stmt>
     </block_content>}</block></constructor>
     
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">113</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>AssertingPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
     }</block></expr></expr_stmt>
   }</block></class>

  <class><specifier>static</specifier> class <name>AssertingFieldsConsumer</name> <super_list><extends>extends <super><name>FieldsConsumer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FieldsConsumer</name></type> <name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SegmentWriteState</name></type> <name>writeState</name></decl>;</decl_stmt>

    <constructor><name>AssertingFieldsConsumer</name><parameter_list>(<parameter><decl><type><name>SegmentWriteState</name></type> <name>writeState</name></decl></parameter>, <parameter><decl><type><name>FieldsConsumer</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeState</name></name> <operator>=</operator> <name>writeState</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// TODO: more asserts?  can we somehow run a</comment>
      <comment type="line">// "limited" CheckIndex here???  Or ... can we improve</comment>
      <comment type="line">// AssertingFieldsProducer and us it also to wrap the</comment>
      <comment type="line">// incoming Fields here?</comment>
 
      <decl_stmt><decl><type><name>String</name></type> <name>lastField</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <for>for<control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>

        <decl_stmt><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name> <init>= <expr><call><name><name>writeState</name><operator>.</operator><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>fieldInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><name>lastField</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>lastField</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</assert>
        <expr_stmt><expr><name>lastField</name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BytesRef</name></type> <name>lastTerm</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DocsEnum</name></type> <name>docsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DocsAndPositionsEnum</name></type> <name>posEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>hasFreqs</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasPositions</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasOffsets</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <assert>assert <expr><name>hasPositions</name> <operator>==</operator> <call><name><name>terms</name><operator>.</operator><name>hasPositions</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <assert>assert <expr><name>hasOffsets</name> <operator>==</operator> <call><name><name>terms</name><operator>.</operator><name>hasOffsets</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <assert>assert <expr><name>lastTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>lastTerm</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</assert>
          <if_stmt><if>if <condition>(<expr><name>lastTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>lastTerm</name> <operator>=</operator> <call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>lastTerm</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>hasPositions</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasFreqs</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docsEnum</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_PAYLOADS</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasOffsets</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_OFFSETS</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>posEnum</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>posEnum</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>docsEnum</name> <operator>=</operator> <name>posEnum</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <decl_stmt><decl><type><name>int</name></type> <name>lastDocID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

          <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>docID</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>docID</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <assert>assert <expr><name>docID</name> <operator>&gt;</operator> <name>lastDocID</name></expr>;</assert>
            <expr_stmt><expr><name>lastDocID</name> <operator>=</operator> <name>docID</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasFreqs</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>docsEnum</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <assert>assert <expr><name>freq</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>

              <if_stmt><if>if <condition>(<expr><name>hasPositions</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>lastPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>lastStartOffset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                  <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <assert>assert <expr><name>pos</name> <operator>&gt;</operator> <name>lastPos</name></expr>;</assert>
                  <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

                  <if_stmt><if>if <condition>(<expr><name>hasOffsets</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>startOffset</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>startOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>endOffset</name> <init>= <expr><call><name><name>posEnum</name><operator>.</operator><name>endOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <assert>assert <expr><name>endOffset</name> <operator>&gt;</operator> <name>startOffset</name></expr>;</assert>
                    <assert>assert <expr><name>startOffset</name> <operator>&gt;=</operator> <name>lastStartOffset</name></expr>;</assert>
                    <expr_stmt><expr><name>lastStartOffset</name> <operator>=</operator> <name>startOffset</name></expr>;</expr_stmt>
                  </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></while>
        </block_content>}</block></while>
      </block_content>}</block></for>
    </block_content>}</block></function>
  }</block></class>
   
   <enum><specifier>static</specifier> enum <name>TermsConsumerState</name> <block>{ <decl><name>INITIAL</name></decl>, <decl><name>START</name></decl>, <decl><name>FINISHED</name></decl> }</block></enum><empty_stmt>;</empty_stmt>
   <class><specifier>static</specifier> class <name>AssertingTermsConsumer</name> <super_list><extends>extends <super><name>TermsConsumer</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">241</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>AssertingPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     <expr><specifier>private</specifier> <name>long</name> <name>sumTotalTermFreq</name> <operator>=</operator> <literal type="number">0</literal></expr>;
     <specifier>private</specifier> <name>long</name> <name>sumDocFreq</name> <operator>=</operator> <literal type="number">0</literal></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>OpenBitSet</name></type> <name>visitedDocs</name> <init>= <expr><operator>new</operator> <call><name>OpenBitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>termComp</name> <init>= <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     
     <constructor><name>AssertingTermsConsumer</name><parameter_list>(<parameter><decl><type><name>TermsConsumer</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">252</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>AssertingPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     <expr><specifier>public</specifier> <name>PostingsConsumer</name> <call><name>startTerm</name><argument_list>(<argument><expr><name>BytesRef</name> <name>text</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <assert>assert <expr><name>state</name> <operator>==</operator> <name><name>TermsConsumerState</name><operator>.</operator><name>INITIAL</name></name> <operator>||</operator> <name>state</name> <operator>==</operator> <name><name>TermsConsumerState</name><operator>.</operator><name>START</name></name> <operator>&amp;&amp;</operator> <name><name>lastPostingsConsumer</name><operator>.</operator><name>docFreq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
       <name>state</name> <operator>=</operator> <name><name>TermsConsumerState</name><operator>.</operator><name>START</name></name></block></expr>;</expr_stmt>
      <assert>assert <expr><name>lastTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>in</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>lastTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
      <assert>assert <expr><name>lastTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>termComp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>lastTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
       <expr_stmt><expr><name>lastTerm</name> <operator>=</operator> <call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>lastPostingsConsumer</name> <operator>=</operator> <operator>new</operator> <call><name>AssertingPostingsConsumer</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>startTerm</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fieldInfo</name></expr></argument>, <argument><expr><name>visitedDocs</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></constructor>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">290</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>AssertingPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       }</block>
       <call><name><name>in</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>sumDocFreq</name></expr></argument>, <argument><expr><name>docCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>in</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   }</block></class>
   
   <enum><specifier>static</specifier> enum <name>PostingsConsumerState</name> <block>{ <decl><name>INITIAL</name></decl>, <decl><name>START</name></decl> }</block></enum><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingTermVectorsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingTermVectorsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b7bf21636e7</name><operator>..</operator><name>d6503f4d039</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingTermVectorsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>asserting</name><operator>/</operator><name><name>AssertingTermVectorsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>asserting</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermVectorsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermVectorsReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>AssertingTermVectorsFormat</name> extends <name>TermVectorsFormat</name> <block>{
       <expr><call><name><name>in</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>, <argument><expr><name>numDocs</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>in</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>ramonly</name><operator>/</operator><name><name>RAMOnlyPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>ramonly</name><operator>/</operator><name><name>RAMOnlyPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0dcc75e932a</literal><operator>..</operator><name>da17ba272a9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>ramonly</name><operator>/</operator><name><name>RAMOnlyPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>ramonly</name><operator>/</operator><name><name>RAMOnlyPostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>ramonly</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PushFieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>RamUsageEstimator</name></name>;</import>
 
 <class><specifier>public</specifier> <specifier>final</specifier> class <name>RAMOnlyPostingsFormat</name> <super_list><extends>extends <super><name>PostingsFormat</name></super></extends></super_list> <block>{
 
  <comment type="line">// For fun, test that we can override how terms are</comment>
  <comment type="line">// sorted, and basic things still work -- this comparator</comment>
  <comment type="line">// sorts in reversed unicode code point order:</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>reverseUnicodeComparator</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b1</name> <init>= <expr><name><name>t1</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b2</name> <init>= <expr><name><name>t2</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b1Stop</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b1Upto</name> <init>= <expr><name><name>t1</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b2Upto</name> <init>= <expr><name><name>t2</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>b1Stop</name> <operator>=</operator> <name><name>t1</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>t1</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>b1Stop</name> <operator>=</operator> <name><name>t1</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>t2</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <while>while<condition>(<expr><name>b1Upto</name> <operator>&lt;</operator> <name>b1Stop</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bb1</name> <init>= <expr><name><name>b1</name><index>[<expr><name>b1Upto</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bb2</name> <init>= <expr><name><name>b2</name><index>[<expr><name>b2Upto</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>bb1</name> <operator>!=</operator> <name>bb2</name></expr>)</condition> <block>{<block_content>
            <comment type="line">//System.out.println("cmp 1=" + t1 + " 2=" + t2 + " return " + (bb2-bb1));</comment>
            <return>return <expr><name>bb2</name> <operator>-</operator> <name>bb1</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="line">// One is prefix of another, or they are equal</comment>
        <return>return <expr><name><name>t2</name><operator>.</operator><name>length</name></name><operator>-</operator><name><name>t1</name><operator>.</operator><name>length</name></name></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>this</name> <operator>==</operator> <name>other</name></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

   <constructor><specifier>public</specifier> <name>RAMOnlyPostingsFormat</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"RAMOnly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RAMOnlyPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <return>return <expr><operator>new</operator> <call><name>RAMTermsEnum</name><argument_list>(<argument><expr><name><name>RAMOnlyPostingsFormat</name><operator>.</operator><name>RAMField</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>reverseUnicodeComparator</name></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>info</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">243</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RAMOnlyPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
   }</block>
 
   <comment type="line">// Classes for writing to the postings state</comment>
  <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>RAMFieldsConsumer</name> extends <name>FieldsConsumer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>RAMFieldsConsumer</name> extends <name>PushFieldsConsumer</name> <block>{
 
     <expr><specifier>private</specifier> <name>final</name> <name>RAMPostings</name> <name>postings</name></expr>;
     <specifier>private</specifier> <name>final</name> <name>RAMTermsConsumer</name> <name>termsConsumer</name> <operator>=</operator> <operator>new</operator> <call><name>RAMTermsConsumer</name><argument_list>()</argument_list></call></block></expr>;
 
    <specifier>public</specifier> <call><name>RAMFieldsConsumer</name><argument_list>(<argument><expr><name>RAMPostings</name> <name>postings</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <call><name>RAMFieldsConsumer</name><argument_list>(<argument><expr><name>SegmentWriteState</name> <name>writeState</name></expr></argument>, <argument><expr><name>RAMPostings</name> <name>postings</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><name>writeState</name></expr></argument>)</argument_list></call></expr>;
       <name><name>this</name><operator>.</operator><name>postings</name></name> <operator>=</operator> <name>postings</name></block></expr>;
     }</block>
 
@@ <operator>-</operator><literal type="number">286</literal><operator>,</operator><literal type="number">12</literal> <operator>+</operator><literal type="number">247</literal><operator>,</operator><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RAMOnlyPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <return>return <expr><name>postingsWriter</name></expr>;</return>
     }</block>
 
      
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block>

     @<name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>finishTerm</name><argument_list>(<argument><expr><name>BytesRef</name> <name>text</name></expr></argument>, <argument><expr><name>TermStats</name> <name>stats</name></expr></argument>)</argument_list></call> <block>{
       <assert>assert <expr><name><name>stats</name><operator>.</operator><name>docFreq</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
@@ <operator>-</operator><literal type="number">354</literal><operator>,</operator><literal type="number">11</literal> <operator>+</operator><literal type="number">309</literal><operator>,</operator><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RAMOnlyPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>ramField</name></name> <operator>=</operator> <name>field</name></expr>;
     }</block>
       
    @<name>Override</name>
    <specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <call><name>getComparator</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>getUTF8SortedAsUnicodeComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block>

     @<name>Override</name>
     <specifier>public</specifier> <name>BytesRef</name> <call><name>next</name><argument_list>()</argument_list></call> <block>{
       <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">586</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">536</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>RAMOnlyPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     }</block>
     
     <name>final</name> <name>RAMPostings</name> <name>postings</name> <operator>=</operator> <operator>new</operator> <call><name>RAMPostings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>RAMFieldsConsumer</name></type> <name>consumer</name> <init>= <expr><operator>new</operator> <call><name>RAMFieldsConsumer</name><argument_list>(<argument><expr><name>postings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>RAMFieldsConsumer</name></type> <name>consumer</name> <init>= <expr><operator>new</operator> <call><name>RAMFieldsConsumer</name><argument_list>(<argument><expr><name>writeState</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <synchronized>synchronized<init>(<expr><name>state</name></expr>)</init> <block>{<block_content>
       <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BasePostingsFormatTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BasePostingsFormatTestCase</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">70db465725e</literal><operator>..</operator><name>aa8ddd1b4fb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BasePostingsFormatTestCase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BasePostingsFormatTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>TermsConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene45</name><operator>.</operator><name>Lucene45Codec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>perfield</name><operator>.</operator><name>PerFieldPostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>DocValuesType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>FixedBitSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LineFileDocs</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>RamUsageEstimator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>_TestUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>AfterClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name>BytesRef</name> <name>payload</name></expr>;
     <specifier>private</specifier> <name>final</name> <name>IndexOptions</name> <name>options</name></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>doPositions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>allowPayloads</name></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>docID</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>freq</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">138</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">145</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>private</specifier> <name>int</name> <name>posSpacing</name></expr>;
     <specifier>private</specifier> <name>int</name> <name>posUpto</name></block></expr>;</expr_stmt>
 
    <constructor><specifier>public</specifier> <name>SeedPostings</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minDocFreq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDocFreq</name></decl></parameter>, <parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>SeedPostings</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minDocFreq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDocFreq</name></decl></parameter>, <parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowPayloads</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name>random</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>docRandom</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>docFreq</name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name>minDocFreq</name></expr></argument>, <argument><expr><name>maxDocFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>liveDocs</name></name> <operator>=</operator> <name>liveDocs</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowPayloads</name></name> <operator>=</operator> <name>allowPayloads</name></expr>;</expr_stmt>
 
       <comment type="line">// TODO: more realistic to inversely tie this to numDocs:</comment>
       <expr_stmt><expr><name>maxDocSpacing</name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">249</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">257</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
       }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
         <expr_stmt><expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowPayloads</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
       <expr_stmt><expr><name>startOffset</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>endOffset</name> <operator>=</operator> <name>startOffset</name> <operator>+</operator> <call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">295</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">306</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <comment type="line">// Holds all postings:</comment>
  <specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>fields</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fields</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>FieldInfos</name></type> <name>fieldInfos</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">307</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">318</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>long</name> <name>totalPostings</name></expr>;
   <specifier>private</specifier> <specifier>static</specifier> <name>long</name> <name>totalPayloadBytes</name></block></expr>;</expr_stmt>
 
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SeedPostings</name></type> <name>getSeedPostings</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withLiveDocs</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SeedPostings</name></type> <name>getSeedPostings</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withLiveDocs</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowPayloads</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>int</name></type> <name>minDocFreq</name></decl>, <decl><type ref="prev"/><name>maxDocFreq</name></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"big_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>minDocFreq</name> <operator>=</operator> <name>RANDOM_MULTIPLIER</name> <operator>*</operator> <literal type="number">50000</literal></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">323</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">334</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
       <expr><name>maxDocFreq</name> <operator>=</operator> <literal type="number">3</literal></expr>;
     }</block></expr></expr_stmt>
 
    <return>return <expr><operator>new</operator> <call><name>SeedPostings</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>minDocFreq</name></expr></argument>, <argument><expr><name>maxDocFreq</name></expr></argument>, <argument><expr><ternary><condition><expr><name>withLiveDocs</name></expr> ?</condition><then> <expr><name>globalLiveDocs</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>SeedPostings</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>minDocFreq</name></expr></argument>, <argument><expr><name>maxDocFreq</name></expr></argument>, <argument><expr><ternary><condition><expr><name>withLiveDocs</name></expr> ?</condition><then> <expr><name>globalLiveDocs</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
   <function><annotation>@<name>BeforeClass</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createPostings</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><name>totalPostings</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>totalPayloadBytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numFields</name> <init>= <expr><call><name><name>_TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">351</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">362</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
                                                 <expr><literal type="null">null</literal></expr>, <expr><name><name>DocValuesType</name><operator>.</operator><name>NUMERIC</name></name></expr>, <expr><literal type="null">null</literal></expr>)</block></expr>;</expr_stmt>
       <expr_stmt><expr><name>fieldUpto</name><operator>++</operator></expr>;</expr_stmt>
 
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>postings</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>postings</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>seenTerms</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">388</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">399</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
 
         <comment type="line">// NOTE: sort of silly: we enum all the docs just to</comment>
         <comment type="line">// get the maxDoc</comment>
        <expr><name>DocsEnum</name> <name>docsEnum</name> <operator>=</operator> <call><name>getSeedPostings</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>termSeed</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr></argument>)</argument_list></call></expr>;
        <name>DocsEnum</name> <name>docsEnum</name> <operator>=</operator> <call><name>getSeedPostings</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>termSeed</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>int</name></type> <name>doc</name></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>int</name></type> <name>lastDoc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
         <while>while<condition>(<expr><operator>(</operator><name>doc</name> <operator>=</operator> <call><name><name>docsEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">412</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">423</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
     }</block>
 
     <name>allTerms</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FieldAndTerm</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>fieldEnt</name> <range>: <expr><call><name><name>fields</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
    <for>for<control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>fieldEnt</name> <range>: <expr><call><name><name>fields</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>field</name> <init>= <expr><call><name><name>fieldEnt</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for<control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>termEnt</name> <range>: <expr><call><name><name>fieldEnt</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>allTerms</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FieldAndTerm</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>termEnt</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">432</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">443</literal></expr><operator>,</operator><expr><literal type="number">206</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>globalLiveDocs</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   }</block></expr></expr_stmt>
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SeedFields</name> <super_list><extends>extends <super><name>Fields</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldInfos</name></type> <name>fieldInfos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexOptions</name></type> <name>maxAllowed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowPayloads</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SeedFields</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fields</name></decl></parameter>, <parameter><decl><type><name>FieldInfos</name></type> <name>fieldInfos</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>maxAllowed</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowPayloads</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <name>fields</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fieldInfos</name></name> <operator>=</operator> <name>fieldInfos</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxAllowed</name></name> <operator>=</operator> <name>maxAllowed</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowPayloads</name></name> <operator>=</operator> <name>allowPayloads</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fields</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Terms</name></type> <name>terms</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SeedTerms</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><call><name><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SeedTerms</name> <super_list><extends>extends <super><name>Terms</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>terms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldInfo</name></type> <name>fieldInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexOptions</name></type> <name>maxAllowed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowPayloads</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SeedTerms</name><parameter_list>(<parameter><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>maxAllowed</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowPayloads</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fieldInfo</name></name> <operator>=</operator> <name>fieldInfo</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxAllowed</name></name> <operator>=</operator> <name>maxAllowed</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowPayloads</name></name> <operator>=</operator> <name>allowPayloads</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>SeedTermsEnum</name></type> <name>termsEnum</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>reuse</name> <operator>instanceof</operator> <name>SeedTermsEnum</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <operator>(</operator><name>SeedTermsEnum</name><operator>)</operator> <name>reuse</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>termsEnum</name><operator>.</operator><name>terms</name></name> <operator>!=</operator> <name>terms</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>SeedTermsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>termsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>SeedTermsEnum</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>termsEnum</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>termsEnum</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumTotalTermFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getSumDocFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getDocCount</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasOffsets</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
  
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPositions</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
  
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPayloads</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>fieldInfo</name><operator>.</operator><name>hasPayloads</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SeedTermsEnum</name> <super_list><extends>extends <super><name>TermsEnum</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>terms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexOptions</name></type> <name>maxAllowed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowPayloads</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>current</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SeedTermsEnum</name><parameter_list>(<parameter><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>IndexOptions</name></type> <name>maxAllowed</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowPayloads</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxAllowed</name></name> <operator>=</operator> <name>maxAllowed</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowPayloads</name></name> <operator>=</operator> <name>allowPayloads</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SeekStatus</name></type> <name>seekCeil</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>tailMap</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>tailMap</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>tailMap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>tailMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tailMap</name><operator>.</operator><name>firstKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>FOUND</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>NOT_FOUND</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>term</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>seekExact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ord</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>term</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>current</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>ord</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>docFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>totalTermFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>DocsEnum</name></type> <name>docs</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>liveDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"liveDocs must be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>maxAllowed</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>getSeedPostings</name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>utf8ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>docsAndPositions</name><parameter_list>(<parameter><decl><type><name>Bits</name></type> <name>liveDocs</name></decl></parameter>, <parameter><decl><type><name>DocsAndPositionsEnum</name></type> <name>reuse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>liveDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"liveDocs must be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>maxAllowed</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"no: max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_OFFSETS</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>maxAllowed</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"no: offsets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>DocsAndPositionsEnum</name><operator>.</operator><name>FLAG_PAYLOADS</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>allowPayloads</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"no: payloads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>getSeedPostings</name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>utf8ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

   <comment type="line">// TODO maybe instead of @BeforeClass just make a single test run: build postings &amp; index &amp; test it?</comment>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>FieldInfos</name></type> <name>currentFieldInfos</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">489</literal></expr><operator>,</operator><expr><literal type="number">79</literal> <operator>+</operator><literal type="number">700</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>SegmentWriteState</name> <name>writeState</name> <operator>=</operator> <operator>new</operator> <call><name>SegmentWriteState</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                                                          <argument><expr><name>segmentInfo</name></expr></argument>, <argument><expr><name>newFieldInfos</name></expr></argument>,
                                                          <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>IOContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FlushInfo</name><argument_list>(<argument><expr><name>maxDoc</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <name>FieldsConsumer</name> <name>fieldsConsumer</name> <operator>=</operator> <call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>writeState</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>fieldEnt</name> <range>: <expr><call><name><name>fields</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>field</name> <init>= <expr><call><name><name>fieldEnt</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>terms</name> <init>= <expr><call><name><name>fieldEnt</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>FieldInfo</name></type> <name>fieldInfo</name> <init>= <expr><call><name><name>newFieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>IndexOptions</name></type> <name>indexOptions</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"field="</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">" indexOtions="</literal> <operator>+</operator> <name>indexOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>doFreq</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>doPos</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>doPayloads</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>allowPayloads</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>doOffsets</name> <init>= <expr><call><name><name>indexOptions</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <decl_stmt><decl><type><name>TermsConsumer</name></type> <name>termsConsumer</name> <init>= <expr><call><name><name>fieldsConsumer</name><operator>.</operator><name>addField</name></name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>sumTotalTF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>sumDF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FixedBitSet</name></type> <name>seenDocs</name> <init>= <expr><operator>new</operator> <call><name>FixedBitSet</name><argument_list>(<argument><expr><name>maxDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>termEnt</name> <range>: <expr><call><name><name>terms</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termEnt</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SeedPostings</name></type> <name>postings</name> <init>= <expr><call><name>getSeedPostings</name><argument_list>(<argument><expr><call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>termEnt</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  term="</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" docFreq="</literal> <operator>+</operator> <name><name>postings</name><operator>.</operator><name>docFreq</name></name> <operator>+</operator> <literal type="string">" seed="</literal> <operator>+</operator> <call><name><name>termEnt</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <decl_stmt><decl><type><name>PostingsConsumer</name></type> <name>postingsConsumer</name> <init>= <expr><call><name><name>termsConsumer</name><operator>.</operator><name>startTerm</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalTF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>docID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>docID</name> <operator>=</operator> <call><name><name>postings</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>freq</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"    "</literal> <operator>+</operator> <name><name>postings</name><operator>.</operator><name>upto</name></name> <operator>+</operator> <literal type="string">": docID="</literal> <operator>+</operator> <name>docID</name> <operator>+</operator> <literal type="string">" freq="</literal> <operator>+</operator> <name><name>postings</name><operator>.</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>startDoc</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>, <argument><expr><ternary><condition><expr><name>doFreq</name></expr> ?</condition><then> <expr><name><name>postings</name><operator>.</operator><name>freq</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>seenDocs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>doPos</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>totalTF</name> <operator>+=</operator> <name><name>postings</name><operator>.</operator><name>freq</name></name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>posUpto</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>posUpto</name><operator>&lt;</operator><name>freq</name></expr>;</condition><incr><expr><name>posUpto</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>BytesRef</name></type> <name>payload</name> <init>= <expr><call><name><name>postings</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
              <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>doPayloads</name></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"      pos="</literal> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="string">" payload="</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>payload</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name><name>payload</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="string">" bytes"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                  <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"      pos="</literal> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><ternary><condition><expr><name>doPayloads</name></expr> ?</condition><then> <expr><name>payload</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><name>doOffsets</name></expr> ?</condition><then> <expr><call><name><name>postings</name><operator>.</operator><name>startOffset</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><name>doOffsets</name></expr> ?</condition><then> <expr><call><name><name>postings</name><operator>.</operator><name>endOffset</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>doFreq</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>totalTF</name> <operator>+=</operator> <name>freq</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>totalTF</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name><name>postingsConsumer</name><operator>.</operator><name>finishDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finishTerm</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TermStats</name><argument_list>(<argument><expr><name><name>postings</name><operator>.</operator><name>docFreq</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>doFreq</name></expr> ?</condition><then> <expr><name>totalTF</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sumTotalTF</name> <operator>+=</operator> <name>totalTF</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sumDF</name> <operator>+=</operator> <name><name>postings</name><operator>.</operator><name>docFreq</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>termsConsumer</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>doFreq</name></expr> ?</condition><then> <expr><name>sumTotalTF</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sumDF</name></expr></argument>, <argument><expr><call><name><name>seenDocs</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>Fields</name></type> <name>seedFields</name> <init>= <expr><operator>new</operator> <call><name>SeedFields</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>newFieldInfos</name></expr></argument>, <argument><expr><name>maxAllowed</name></expr></argument>, <argument><expr><name>allowPayloads</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <expr_stmt><expr><call><name><name>fieldsConsumer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldsConsumer</name><argument_list>(<argument><expr><name>writeState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>seedFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>VERBOSE</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"TEST: after indexing: files="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">625</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">767</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>SeedPostings</name> <name>expected</name> <operator>=</operator> <call><name>getSeedPostings</name><argument_list>(<argument><expr><call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call></expr></argument>, 
                                             <argument><expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>useLiveDocs</name></expr></argument>,
                                            <argument><expr><name>maxIndexOptions</name></expr></argument>)</argument_list></call></expr>;
                                            <name>maxIndexOptions</name><operator>,</operator>
                                            <literal type="boolean">true</literal>)</block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expected</name><operator>.</operator><name>docFreq</name></name></expr></argument>, <argument><expr><call><name><name>termsEnum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>boolean</name></type> <name>allowFreqs</name> <init>= <expr><call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
@@ <operator>-</operator><literal type="number">1224</literal></expr></init></decl>,4 +1367,197 @@ public abstract <decl><type ref="prev"/><name>class</name> <name>BasePostingsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{<block_content>
     <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></decl></decl_stmt>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TermFreqs</name> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>totalTermFreq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>docFreq</name></decl>;</decl_stmt>
  }</block></class><empty_stmt>;</empty_stmt>

  <comment type="line">// LUCENE-5123: make sure we can visit postings twice</comment>
  <comment type="line">// during flush/merge</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvertedWrite</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexWriterConfig</name></type> <name>iwc</name> <init>= <expr><call><name>newIndexWriterConfig</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>TermFreqs</name></argument>&gt;</argument_list></name></type> <name>termFreqs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>TermFreqs</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicLong</name></type> <name>sumDocFreq</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicLong</name></type> <name>sumTotalTermFreq</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// TODO: would be better to use / delegate to the current</comment>
    <comment type="line">// Codec returned by getCodec()</comment>

    <expr_stmt><expr><call><name><name>iwc</name><operator>.</operator><name>setCodec</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Lucene45Codec</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>PostingsFormat</name></type> <name>getPostingsFormatForField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>

          <decl_stmt><decl><type><name>PostingsFormat</name></type> <name>p</name> <init>= <expr><call><name>getCodec</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postingsFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>p</name> <operator>instanceof</operator> <name>PerFieldPostingsFormat</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PerFieldPostingsFormat</name><operator>)</operator> <name>p</name><operator>)</operator><operator>.</operator><call><name>getPostingsFormatForField</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsFormat</name></type> <name>defaultPostingsFormat</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

            <comment type="line">// A PF that counts up some stats and then in</comment>
            <comment type="line">// the end we verify the stats match what the</comment>
            <comment type="line">// final IndexReader says, just to exercise the</comment>
            <comment type="line">// new freedom of iterating the postings more</comment>
            <comment type="line">// than once at flush/merge:</comment>

            <return>return <expr><operator>new</operator> <class><super><name>PostingsFormat</name></super><argument_list>(<argument><expr><call><name><name>defaultPostingsFormat</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{

              <function><annotation>@<name>Override</name></annotation>
              <type><specifier>public</specifier> <name>FieldsConsumer</name></type> <name>fieldsConsumer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SegmentWriteState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

                <decl_stmt><decl><type><specifier>final</specifier> <name>FieldsConsumer</name></type> <name>fieldsConsumer</name> <init>= <expr><call><name><name>defaultPostingsFormat</name><operator>.</operator><name>fieldsConsumer</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return>return <expr><operator>new</operator> <class><super><name>FieldsConsumer</name></super><argument_list>()</argument_list> <block>{
                  <function><annotation>@<name>Override</name></annotation>
                  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Fields</name></type> <name>fields</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>fieldsConsumer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>boolean</name></type> <name>isMerge</name> <init>= <expr><name><name>state</name><operator>.</operator><name>context</name><operator>.</operator><name>context</name></name> <operator>==</operator> <name><name>IOContext</name><operator>.</operator><name>Context</name><operator>.</operator><name>MERGE</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>boolean</name></type> <name>addOnSecondPass</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">//System.out.println("write isMerge=" + isMerge + " 2ndPass=" + addOnSecondPass);</comment>

                    <comment type="line">// Gather our own stats:</comment>
                    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <assert>assert <expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

                    <decl_stmt><decl><type><name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>DocsEnum</name></type> <name>docs</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <while>while<condition>(<expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                      <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docs</name></expr></argument>, <argument><expr><name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>docs</name> <operator>instanceof</operator> <name>DocsAndPositionsEnum</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>DocsAndPositionsEnum</name><operator>)</operator> <name>docs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></else></if_stmt>
                      <decl_stmt><decl><type><name>int</name></type> <name>docFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                      <decl_stmt><decl><type><name>long</name></type> <name>totalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                      <while>while <condition>(<expr><call><name><name>docs</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>docFreq</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>totalTermFreq</name> <operator>+=</operator> <call><name><name>docs</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>docs</name> <operator>instanceof</operator> <name>DocsAndPositionsEnum</name></expr>)</condition> <block>{<block_content>
                          <decl_stmt><decl><type><name>DocsAndPositionsEnum</name></type> <name>posEnum</name> <init>= <expr><operator>(</operator><name>DocsAndPositionsEnum</name><operator>)</operator> <name>docs</name></expr></init></decl>;</decl_stmt>
                          <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name><name>_TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>docs</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                          <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>limit</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                          </block_content>}</block></for>
                        </block_content>}</block></if></if_stmt>
                      </block_content>}</block></while>

                      <decl_stmt><decl><type><name>String</name></type> <name>termString</name> <init>= <expr><call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                      <comment type="line">// During merge we should only see terms</comment>
                      <comment type="line">// we had already seen during flush:</comment>
                      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>isMerge</name><operator>==</operator><literal type="boolean">false</literal> <operator>||</operator> <call><name><name>termFreqs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>termString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                      <if_stmt><if>if <condition>(<expr><name>isMerge</name> <operator>==</operator> <literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <name>addOnSecondPass</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>TermFreqs</name></type> <name>tf</name> <init>= <expr><call><name><name>termFreqs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>termString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>tf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                          <expr_stmt><expr><name>tf</name> <operator>=</operator> <operator>new</operator> <call><name>TermFreqs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                          <expr_stmt><expr><call><name><name>termFreqs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>termString</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>tf</name><operator>.</operator><name>docFreq</name></name> <operator>+=</operator> <name>docFreq</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>tf</name><operator>.</operator><name>totalTermFreq</name></name> <operator>+=</operator> <name>totalTermFreq</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>sumDocFreq</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>docFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>sumTotalTermFreq</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>totalTermFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>termFreqs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>termString</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>termFreqs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>termString</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TermFreqs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt>
                    </block_content>}</block></while>

                    <comment type="line">// Also test seeking the TermsEnum:</comment>
                    <for>for<control>(<init><decl><type><name>String</name></type> <name>term</name> <range>: <expr><call><name><name>termFreqs</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                      <if_stmt><if>if <condition>(<expr><call><name><name>termsEnum</name><operator>.</operator><name>seekExact</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                          <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>docs</name></expr></argument>, <argument><expr><name><name>DocsEnum</name><operator>.</operator><name>FLAG_FREQS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>docs</name> <operator>instanceof</operator> <name>DocsAndPositionsEnum</name></expr>)</condition> <block>{<block_content>
                          <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>DocsAndPositionsEnum</name><operator>)</operator> <name>docs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                          <expr_stmt><expr><name>docs</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>docsAndPositions</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <decl_stmt><decl><type><name>int</name></type> <name>docFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>totalTermFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <while>while <condition>(<expr><call><name><name>docs</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
                          <expr_stmt><expr><name>docFreq</name><operator>++</operator></expr>;</expr_stmt>
                          <expr_stmt><expr><name>totalTermFreq</name> <operator>+=</operator> <call><name><name>docs</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                          <if_stmt><if>if <condition>(<expr><name>docs</name> <operator>instanceof</operator> <name>DocsAndPositionsEnum</name></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>DocsAndPositionsEnum</name></type> <name>posEnum</name> <init>= <expr><operator>(</operator><name>DocsAndPositionsEnum</name><operator>)</operator> <name>docs</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name><name>_TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>docs</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>limit</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                              <expr_stmt><expr><call><name><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                          </block_content>}</block></if></if_stmt>
                        </block_content>}</block></while>

                        <if_stmt><if>if <condition>(<expr><name>isMerge</name> <operator>==</operator> <literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <name>addOnSecondPass</name></expr>)</condition> <block>{<block_content>
                          <decl_stmt><decl><type><name>TermFreqs</name></type> <name>tf</name> <init>= <expr><call><name><name>termFreqs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                          <if_stmt><if>if <condition>(<expr><name>tf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>tf</name> <operator>=</operator> <operator>new</operator> <call><name>TermFreqs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>termFreqs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                          </block_content>}</block></if></if_stmt>
                          <expr_stmt><expr><name><name>tf</name><operator>.</operator><name>docFreq</name></name> <operator>+=</operator> <name>docFreq</name></expr>;</expr_stmt>
                          <expr_stmt><expr><name><name>tf</name><operator>.</operator><name>totalTermFreq</name></name> <operator>+=</operator> <name>totalTermFreq</name></expr>;</expr_stmt>
                          <expr_stmt><expr><call><name><name>sumDocFreq</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>docFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                          <expr_stmt><expr><call><name><name>sumTotalTermFreq</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>totalTermFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">//System.out.println("  term=" + term + " docFreq=" + docFreq + " ttDF=" + termToDocFreq.get(term));</comment>
                        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>docFreq</name> <operator>&lt;=</operator> <call><name><name>termFreqs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call><operator>.</operator><name>docFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>totalTermFreq</name> <operator>&lt;=</operator> <call><name><name>termFreqs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call><operator>.</operator><name>totalTermFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                  </block_content>}</block></function>
                }</block></class></expr>;</return>
              </block_content>}</block></function>

              <function><annotation>@<name>Override</name></annotation>
              <type><specifier>public</specifier> <name>FieldsProducer</name></type> <name>fieldsProducer</name><parameter_list>(<parameter><decl><type><name>SegmentReadState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
                <return>return <expr><call><name><name>defaultPostingsFormat</name><operator>.</operator><name>fieldsProducer</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></function>
            }</block></class></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>defaultPostingsFormat</name></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>iwc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>LineFileDocs</name></type> <name>docs</name> <init>= <expr><operator>new</operator> <call><name>LineFileDocs</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bytesToIndex</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bytesIndexed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>bytesIndexed</name> <operator>&lt;</operator> <name>bytesToIndex</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><call><name><name>docs</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bytesIndexed</name> <operator>+=</operator> <call><name><name>RamUsageEstimator</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>sumDocFreq</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getSumDocFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>sumTotalTermFreq</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getSumTotalTermFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>termCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>termCount</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>termFreqs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>docFreq</name></expr></argument>, <argument><expr><call><name><name>termsEnum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>termFreqs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>totalTermFreq</name></expr></argument>, <argument><expr><call><name><name>termsEnum</name><operator>.</operator><name>totalTermFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>termFreqs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>termCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseTermVectorsFormatTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseTermVectorsFormatTestCase</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">150922b4ef6</literal><operator>..</operator><name>d170a0e976c</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseTermVectorsFormatTestCase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseTermVectorsFormatTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">406</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">406</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>BaseTermVectorsFormatTestCase</name> extends <name>LuceneTestCase</name> <block>{
       <expr><call><name><name>uniqueTerms</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name><name>BytesRef</name><index>[]</index></name></type> <name>sortedTerms</name> <init>= <expr><call><name><name>uniqueTerms</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>BytesRef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>sortedTerms</name></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>sortedTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>termsEnum</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sortedTerms</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LuceneTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LuceneTestCase</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e644a2e7d90</name><operator>..</operator><literal type="number">48546cb148c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LuceneTestCase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LuceneTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1486</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1486</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>LuceneTestCase</name> extends <name>Assert</name> <block>{
    <expr><operator>*</operator> <name>checks</name> <name>collection</name><operator>-</operator><name>level</name> <name>statistics</name> <name>on</name> <name>Terms</name> 
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>assertTermsStatisticsEquals</name><argument_list>(<argument><expr><name>String</name> <name>info</name></expr></argument>, <argument><expr><name>Terms</name> <name>leftTerms</name></expr></argument>, <argument><expr><name>Terms</name> <name>rightTerms</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <assert>assert <expr><call><name><name>leftTerms</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rightTerms</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</assert></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>leftTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>rightTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name><name>leftTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rightTerms</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></while></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></constructor></block_content></block></constructor></block_content></block></synchronized></block_content></block></if></if_stmt></block></block></block></expr></expr_stmt></block_content></block></function></block></class></block_content></block></function></block_content></block></function></block_content></block></function></block></class></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></constructor></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></constructor></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block></class></block_content></block></function></block></class></block_content></block></function></block></class></block_content></block></function></block_content></block></function></block></class></block></class></block_content></block></function>

</unit>
