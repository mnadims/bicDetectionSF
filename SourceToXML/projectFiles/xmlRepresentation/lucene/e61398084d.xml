<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/e61398084d.java"><expr_stmt><expr><name>From</name> <name>e61398084d3f1ca0f28c5c35d3318645d7a401ec</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Adrien</name> <name><name>Grand</name> <argument_list type="generic">&lt;<argument><name>jpountz</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">16</literal> <name>Feb</name> <literal type="number">2013</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">20</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">3855</literal><operator>:</operator> <name>Doc</name> <name>values</name> <name><name>support</name><operator>.</operator>

<name>git</name></name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1446922 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>IntFieldSource</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>LongFieldSource</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SchemaCodecFactory</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">14</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>FieldFacetStats</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">122</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsComponent</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">82</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValues</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValuesFactory</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">94</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>NumericFacets</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">328</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">99</literal> <operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>UnInvertedField</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>AbstractSpatialFieldType</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">28</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CurrencyField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DateField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldProperties</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">70</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">50</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>PointType</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableDoubleField</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableFloatField</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableIntField</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableLongField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>StrField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">45</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieDateField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">22</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">69</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>UUIDField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DocumentBuilder</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">47</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><name>hema</name><operator>-</operator><name>docValues</name><operator>-</operator><name>not</name><operator>-</operator><name>required</name><operator>-</operator><name>no</name><operator>-</operator>default<operator>.</operator><name>xml</name> <operator>|</operator>  <literal type="number">33</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>conf</name><operator>/</operator><name>bad</name><operator>-</operator><name>schema</name><operator>-</operator><name>unsupported</name><operator>-</operator><name><name>docValues</name><operator>.</operator><name>xml</name></name> <operator>|</operator>  <literal type="number">30</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>docValues</name><operator>.</operator><name>xml</name></name>     <operator>|</operator>  <literal type="number">74</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema</name><operator>.</operator><name>xml</name></name>          <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema_codec</name><operator>.</operator><name>xml</name></name>    <operator>|</operator>  <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestCodecSupport</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsComponentTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>BadIndexSchemaTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CurrencyFieldTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">230</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>PolyFieldTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <name>solr</name><operator>/</operator><name>example</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema</name><operator>.</operator><name>xml</name></name> <operator>|</operator>  <literal type="number">28</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">41</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">1321</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">391</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>NumericFacets</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>bad</name><operator>-</operator><name>schema</name><operator>-</operator><name>docValues</name><operator>-</operator><name>not</name><operator>-</operator><name>required</name><operator>-</operator><name>no</name><operator>-</operator>default<operator>.</operator><name>xml</name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>bad</name><operator>-</operator><name>schema</name><operator>-</operator><name>unsupported</name><operator>-</operator><name><name>docValues</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>docValues</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>IntFieldSource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>IntFieldSource</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c8a9a9af82c</name><operator>..</operator><literal type="number">296432d6f9a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>IntFieldSource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>IntFieldSource</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>IntFieldSource</name> extends <name>FieldCacheSource</name> <block>{
 
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>String</name> <call><name>strVal</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
        <return>return <expr><call><name><name>Float</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>LongFieldSource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>LongFieldSource</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1a8a9ad666d</literal><operator>..</operator><literal type="number">597efe89e97</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>LongFieldSource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name>valuesource</name><operator>/</operator><name><name>LongFieldSource</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>LongFieldSource</name> extends <name>FieldCacheSource</name> <block>{
     <return>return <expr><name>val</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>String</name></type> <name>longToString</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>longToObject</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>FunctionValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AtomicReaderContext</name></type> <name>readerContext</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name><name>FieldCache</name><operator>.</operator><name>Longs</name></name></type> <name>arr</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>getLongs</name></name><argument_list>(<argument><expr><call><name><name>readerContext</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>LongFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         <return>return <expr><call><name><name>valid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>?</operator> <call><name>longToObject</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="null">null</literal></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>strVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>valid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>longToString</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>ValueSourceScorer</name></type> <name>getRangeScorer</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lowerVal</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>upperVal</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeLower</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeUpper</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>long</name></type> <name>lower</name></decl>,<decl><type ref="prev"/><name>upper</name></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">40f546f080b</literal><operator>..</operator><name>d908578cd01</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>New</name> <name>Features</name>
   <name>under</name> <name>the</name> <name>covers</name> <operator>--</operator> <name>allowing</name> <name>many</name> <name>HTTP</name> <name>connection</name> <name>related</name> <name>properties</name> <name>to</name> <name>be</name>
   <name>controlled</name> <name>via</name> <literal type="char">'standard'</literal> <name>java</name> <name>system</name> <name><name>properties</name><operator>.</operator></name>  (<name>hossman</name></expr></expr_stmt>)</block_content>
 
* SOLR-3855: Doc values support. (Adrien Grand</block></function>)</block_content>

 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java b/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java
index 5e5a81d4e4b..e075913066a 100644
-- a/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java
++ b/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java
@@ -1</block><operator>,</operator>6 +1<operator>,</operator>7 @@
 package org.apache.solr.core;</function>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>DocValuesFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene42</name><operator>.</operator><name>Lucene42Codec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaCodecFactory</name> extends <name>CodecFactory</name> implements <name>SchemaAware</name> <block>{
         }</block></expr></expr_stmt>
         <return>return <expr><call><name><name>super</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
       }
      <comment type="line">// TODO: when dv support is added to solr, add it here too</comment>
      @<function><type><name>Override</name>
      <specifier>public</specifier> <name>DocValuesFormat</name></type> <name>getDocValuesFormatForField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>fieldOrNull</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getFieldOrNull</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fieldOrNull</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"no such field "</literal> <operator>+</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>docValuesFormatName</name> <init>= <expr><call><name><name>fieldOrNull</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDocValuesFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>docValuesFormatName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>DocValuesFormat</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>docValuesFormatName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getDocValuesFormatForField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
     };
   }
 
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a3dd8f9af9a</name><operator>..</operator><literal type="number">4abdb6855c5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SolrCore</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">834</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">834</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SolrCore</name> implements <name>SolrInfoMBean</name> <block>{
           <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
           <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
         }</block></expr></expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>ft</name><operator>.</operator><name>getDocValuesFormat</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"FieldType '"</literal> <operator>+</operator> <call><name><name>ft</name><operator>.</operator><name>getTypeName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' is configured with a docValues format, but the codec does not support it: "</literal> <operator>+</operator> <call><name><name>factory</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
       }
     }
     <return>return <expr><call><name><name>factory</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>FieldFacetStats</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>FieldFacetStats</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>adce22e90d2</name><operator>..</operator><literal type="number">6cd9a190573</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>FieldFacetStats</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>FieldFacetStats</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>FunctionValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexSearcher</name></name>;</import>
 
 
 <comment type="block" format="javadoc">/**
@@ -40,101 +46,76 @@ import org.apache.solr.schema.SchemaField;
 
 public class FieldFacetStats {
   public final String name;
  final SortedDocValues si;
   final SchemaField facet_sf;
   final SchemaField field_sf;
 
  final int startTermIndex;
  final int endTermIndex;
  final int nTerms;
  public final Map&lt;String, StatsValues&gt; facetStatsValues;
 
  final int numStatsTerms;
  List&lt;HashMap&lt;String, Integer&gt;&gt; facetStatsTerms;
 
  public final Map&lt;String, StatsValues&gt; facetStatsValues;
  final AtomicReader topLevelReader;
  AtomicReaderContext leave;
  final ValueSource valueSource;
  AtomicReaderContext context;
  FunctionValues values;
 
  final List&lt;HashMap&lt;String, Integer&gt;&gt; facetStatsTerms;
  SortedDocValues topLevelSortedValues = null;
 
   private final BytesRef tempBR = new BytesRef();
 
  public FieldFacetStats(String name, SortedDocValues si, SchemaField field_sf, SchemaField facet_sf, int numStatsTerms) {
  public FieldFacetStats(SolrIndexSearcher searcher, String name, SchemaField field_sf, SchemaField facet_sf) {
     this.name = name;
    this.si = si;
     this.field_sf = field_sf;
     this.facet_sf = facet_sf;
    this.numStatsTerms = numStatsTerms;
 
    startTermIndex = 0;
    endTermIndex = si.getValueCount();
    nTerms = endTermIndex - startTermIndex;
    topLevelReader = searcher.getAtomicReader();
    valueSource = facet_sf.getType().getValueSource(facet_sf, null);
 
     facetStatsValues = new HashMap&lt;String, StatsValues&gt;();

    // for mv stats field, we'll want to keep track of terms
     facetStatsTerms = new ArrayList&lt;HashMap&lt;String, Integer&gt;&gt;();
    if (numStatsTerms == 0) return;
    int i = 0;
    for (; i &lt; numStatsTerms; i++) {
      facetStatsTerms.add(new HashMap&lt;String, Integer&gt;());
    }
   }
 
  BytesRef getTermText(int docID, BytesRef ret) {
    final int ord = si.getOrd(docID);
    if (ord == -1) {
      return null;
    } else {
      si.lookupOrd(ord, ret);
      return ret;
  private StatsValues getStatsValues(String key) throws IOException {
    StatsValues stats = facetStatsValues.get(key);
    if (stats == null) {
      stats = StatsValuesFactory.createStatsValues(field_sf);
      facetStatsValues.put(key, stats);
      stats.setNextReader(context);
     }
    return stats;
   }
 
  public boolean facet(int docID, BytesRef v) {
    int term = si.getOrd(docID);
    int arrIdx = term - startTermIndex;
    if (arrIdx &gt;= 0 &amp;&amp; arrIdx &lt; nTerms) {
      
      final BytesRef br;
      if (term == -1) {
        br = null;
      } else {
        br = tempBR;
        si.lookupOrd(term, tempBR);
      }
      String key = (br == null)?null:facet_sf.getType().indexedToReadable(br.utf8ToString());
      StatsValues stats = facetStatsValues.get(key);
      if (stats == null) {
        stats = StatsValuesFactory.createStatsValues(field_sf);
        facetStatsValues.put(key, stats);
      }

      if (v != null &amp;&amp; v.length&gt;0) {
        stats.accumulate(v);
      } else {
        stats.missing();
        return false;
      }
      return true;
    }
    return false;
  // docID is relative to the context
  public void facet(int docID) throws IOException {
    final String key = values.exists(docID)
        ? values.strVal(docID)
        : null;
    final StatsValues stats = getStatsValues(key);
    stats.accumulate(docID);
   }
 

   // Function to keep track of facet counts for term number.
   // Currently only used by UnInvertedField stats
  public boolean facetTermNum(int docID, int statsTermNum) {

    int term = si.getOrd(docID);
    int arrIdx = term - startTermIndex;
    if (arrIdx &gt;= 0 &amp;&amp; arrIdx &lt; nTerms) {
  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {
    if (topLevelSortedValues == null) {
      topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);
    }
    
    int term = topLevelSortedValues.getOrd(docID);
    int arrIdx = term;
    if (arrIdx &gt;= 0 &amp;&amp; arrIdx &lt; topLevelSortedValues.getValueCount()) {
       final BytesRef br;
       if (term == -1) {
         br = null;
       } else {
         br = tempBR;
        si.lookupOrd(term, tempBR);
        topLevelSortedValues.lookupOrd(term, tempBR);
       }
       String key = br == null ? null : br.utf8ToString();
      HashMap&lt;String, Integer&gt; statsTermCounts = facetStatsTerms.get(statsTermNum);
      while (facetStatsTerms.size() &lt;= statsTermNum) {
        facetStatsTerms.add(new HashMap&lt;String, Integer&gt;());
      }
      final Map&lt;String, Integer&gt; statsTermCounts = facetStatsTerms.get(statsTermNum);
       Integer statsTermCount = statsTermCounts.get(key);
       if (statsTermCount == null) {
         statsTermCounts.put(key, 1);
@@ -148,8 +129,11 @@ public class FieldFacetStats {
 
 
   //function to accumulate counts for statsTermNum to specified value
  public boolean accumulateTermNum(int statsTermNum, BytesRef value) {
  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {
     if (value == null) return false;
    while (facetStatsTerms.size() &lt;= statsTermNum) {
      facetStatsTerms.add(new HashMap&lt;String, Integer&gt;());
    }
     for (Map.Entry&lt;String, Integer&gt; stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {
       Map.Entry pairs = (Map.Entry) stringIntegerEntry;
       String key = (String) pairs.getKey();
@@ -166,6 +150,14 @@ public class FieldFacetStats {
     return true;
   }
 
  public void setNextReader(AtomicReaderContext ctx) throws IOException {
    this.context = ctx;
    values = valueSource.getValues(Collections.emptyMap(), ctx);
    for (StatsValues stats : facetStatsValues.values()) {
      stats.setNextReader(ctx);
    }
  }

 }
 
 
diff --git a/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java b/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
index 521dc832b5e..dc433b42783 100644
-- a/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
++ b/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
@@ -20,12 +20,11 @@ package org.apache.solr.handler.component;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
import org.apache.lucene.index.SortedDocValues;
import org.apache.lucene.search.FieldCache;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.ShardParams;
 import org.apache.solr.common.params.SolrParams;
@@ -43,14 +42,12 @@ import org.apache.solr.search.SolrIndexSearcher;
 
 /**
  * Stats component calculates simple statistics on numeric field values
 * 
 *
  * @since solr 1.4
  */</comment>
 <class><specifier>public</specifier> class <name>StatsComponent</name> <super_list><extends>extends <super><name>SearchComponent</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPONENT_NAME</name> <init>= <expr><literal type="string">"stats"</literal></expr></init></decl>;</decl_stmt>
  

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>ResponseBuilder</name></type> <name>rb</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><call><name><name>rb</name><operator>.</operator><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBool</name><argument_list>(<argument><expr><name><name>StatsParams</name><operator>.</operator><name>STATS</name></name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">236</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">233</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>class</name> <name>SimpleStats</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><name>res</name></expr>;</return>
   </block_content>}</block></if></if_stmt>
  
  <comment type="line">// why does this use a top-level field cache?</comment>
  <function><type><specifier>public</specifier> <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getFieldCacheStats</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>facet</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SchemaField</name></type> <name>sf</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getField</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>SortedDocValues</name></type> <name>si</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>si</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getAtomicReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> 
    <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>( <argument><expr><literal type="string">"failed to open field cache for: "</literal><operator>+</operator><name>fieldName</name></expr></argument>, <argument><expr><name>e</name></expr></argument> )</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <decl_stmt><decl><type><name>StatsValues</name></type> <name>allstats</name> <init>= <expr><call><name><name>StatsValuesFactory</name><operator>.</operator><name>createStatsValues</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nTerms</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getValueCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>( <expr><name>nTerms</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>docs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>allstats</name><operator>.</operator><name>getStatsValues</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
 
    <comment type="line">// don't worry about faceting if no documents match...</comment>
  <function><type><specifier>public</specifier> <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getFieldCacheStats</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>facet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>sf</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getField</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>StatsValues</name></type> <name>allstats</name> <init>= <expr><call><name><name>StatsValuesFactory</name><operator>.</operator><name>createStatsValues</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FieldFacetStats</name></argument>&gt;</argument_list></name></type> <name>facetStats</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FieldFacetStats</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SortedDocValues</name></type> <name>facetTermsIndex</name></decl>;</decl_stmt>
     <for>for<control>( <init><decl><type><name>String</name></type> <name>facetField</name> <range>: <expr><name>facet</name></expr></range></decl></init> )</control> <block>{<block_content>
       <decl_stmt><decl><type><name>SchemaField</name></type> <name>fsf</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getField</name><argument_list>(<argument><expr><name>facetField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">262</literal></expr><operator>,</operator><expr><literal type="number">40</literal> <operator>+</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@ <name>class</name> <name>SimpleStats</name> <block>{
         <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>,
           <argument><expr><literal type="string">"Stats can only facet on single-valued fields, not: "</literal> <operator>+</operator> <name>facetField</name></expr></argument> )</argument_list></call></expr></argument></argument_list></throw>;
       }</block></expr></expr_stmt>
      
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>facetTermsIndex</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getAtomicReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>facetField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>( <argument><expr><literal type="string">"failed to open field cache for: "</literal>
          <operator>+</operator> <name>facetField</name></expr></argument>, <argument><expr><name>e</name></expr></argument> )</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name><name>facetStats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FieldFacetStats</name><argument_list>(<argument><expr><name>facetField</name></expr></argument>, <argument><expr><name>facetTermsIndex</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>fsf</name></expr></argument>, <argument><expr><name>nTerms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>facetStats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FieldFacetStats</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>facetField</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>fsf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
    
    <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>tempBR</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DocIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>docs</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>docID</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>docOrd</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BytesRef</name></type> <name>raw</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>docOrd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>allstats</name><operator>.</operator><name>missing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tempBR</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>raw</name> <operator>=</operator> <name>tempBR</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>raw</name> <operator>=</operator> <name>tempBR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>lookupOrd</name></name><argument_list>(<argument><expr><name>docOrd</name></expr></argument>, <argument><expr><name>tempBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>tempBR</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>allstats</name><operator>.</operator><name>accumulate</name></name><argument_list>(<argument><expr><name>tempBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>allstats</name><operator>.</operator><name>missing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>AtomicReaderContext</name></argument>&gt;</argument_list></name></type> <name>ctxIt</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AtomicReaderContext</name></type> <name>ctx</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>DocIterator</name></type> <name>docsIt</name> <init>= <expr><call><name><name>docs</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>docsIt</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>docsIt</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>doc</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name> <operator>+</operator> <call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// advance</comment>
        <do>do <block>{<block_content>
          <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name><name>ctxIt</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>doc</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name> <operator>+</operator> <call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <assert>assert <expr><name>doc</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name></expr>;</assert>

        <comment type="line">// propagate the context among accumulators.</comment>
        <expr_stmt><expr><call><name><name>allstats</name><operator>.</operator><name>setNextReader</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>FieldFacetStats</name></type> <name>f</name> <range>: <expr><name>facetStats</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setNextReader</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
       </block_content>}</block></if></if_stmt>
 
      <comment type="line">// now update the facets</comment>
      <comment type="line">// accumulate</comment>
      <expr_stmt><expr><call><name><name>allstats</name><operator>.</operator><name>accumulate</name></name><argument_list>(<argument><expr><name>doc</name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name>FieldFacetStats</name></type> <name>f</name> <range>: <expr><name>facetStats</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>facet</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>facet</name></name><argument_list>(<argument><expr><name>doc</name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
     </block_content>}</block></for>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">305</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">282</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <name>class</name> <name>SimpleStats</name> <block>{
     <return>return <expr><call><name><name>allstats</name><operator>.</operator><name>getStatsValues</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 

 </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValues</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValues</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">492ef0148b6</literal><operator>..</operator><name>cbcde045ea1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValues</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValues</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name></name>;</package>
 
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>FunctionValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * StatsValue defines the interface for the collection of statistical values about fields and facets.
  */</comment>
<comment type="line">// TODO: should implement Collector?</comment>
 <interface><specifier>public</specifier> interface <name>StatsValues</name> <block>{
 
   <comment type="block" format="javadoc">/**
@@ -36,12 +41,9 @@ public interface StatsValues {
    */</comment>
   <decl_stmt><decl><type><name>void</name></type> <name>accumulate</name><argument_list>(<argument><expr><name>NamedList</name> <name>stv</name></expr></argument>)</argument_list></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**
   * Accumulate the values based on the given value
   *
   * @param value Value to use to accumulate the current values
   */</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>accumulate</name><argument_list>(<argument><expr><name>BytesRef</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Accumulate the value associated with &lt;code&gt;docID&lt;/code&gt;.
   *  @see #setNextReader(AtomicReaderContext) */</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>accumulate</name><argument_list>(<argument><expr><name>int</name> <name>docID</name></expr></argument>)</argument_list></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
    * Accumulate the values based on the given value
@@ -77,4 +79,7 @@ public interface StatsValues {
    * @return NamedList representation of the current values
    */</comment>
   <function_decl><type><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getStatsValues</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/** Set the context for {@link #accumulate(int)}. */</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>setNextReader</name><argument_list>(<argument><expr><name>AtomicReaderContext</name> <name>ctx</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 }</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValuesFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValuesFactory</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d4ef1c5831e</name><operator>..</operator><name>c350dd5d936</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValuesFactory</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>StatsValuesFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>FunctionValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>StatsValuesFactory</name> <block>{
    <expr><operator>*</operator> @</expr><return>return <expr><name>Instance</name> <name>of</name> <name>StatsValues</name> <name>that</name> <name>will</name> <name>create</name> <name>statistics</name> <name>from</name> <name>values</name> <name>from</name> <name>a</name> <name>field</name> <name>of</name> <name>the</name> <name>given</name> <name>type</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>StatsValues</name> <call><name>createStatsValues</name><argument_list>(<argument><expr><name>SchemaField</name> <name>sf</name></expr></argument>)</argument_list></call> <block>{
    <comment type="line">// TODO: allow for custom field types</comment>
     <expr><name>FieldType</name> <name>fieldType</name> <operator>=</operator> <call><name><name>sf</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</block></expr></return>
     <if_stmt><if>if <condition>(<expr><call><name><name>DoubleField</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isInstance</name></name></name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name><name>IntField</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isInstance</name></name></name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call> <operator>||</operator>
@@ <operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>abstract</specifier> <name>class</name> <name><name>AbstractStatsValues</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>StatsValues</name></expr></condition> <block>{<block_content>
   <decl_stmt><decl><type><specifier>protected</specifier> <name>T</name></type> <name>min</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>missing</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>ValueSource</name></type> <name>valueSource</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>FunctionValues</name></type> <name>values</name></decl>;</decl_stmt>
   
   <comment type="line">// facetField   facetValue</comment>
   <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>StatsValues</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>facets</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>StatsValues</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>abstract</specifier> <name>class</name> <name><name>AbstractStatsValues</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>StatsValues</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>
   }</block></expr></expr_stmt>
  

   <comment type="block" format="javadoc">/**
    * {@inheritDoc}
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>T</name></type> <name>typedValue</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator><call><name><name>ft</name><operator>.</operator><name>toObject</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMinMax</name><argument_list>(<argument><expr><name>typedValue</name></expr></argument>, <argument><expr><name>typedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTypeSpecificStats</name><argument_list>(<argument><expr><name>typedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>accumulate</name><argument_list>(<argument><expr><name>typedValue</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>count</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>T</name></type> <name>typedValue</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator><call><name><name>ft</name><operator>.</operator><name>toObject</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMinMax</name><argument_list>(<argument><expr><name>typedValue</name></expr></argument>, <argument><expr><name>typedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTypeSpecificStats</name><argument_list>(<argument><expr><name>typedValue</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateMinMax</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTypeSpecificStats</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * {@inheritDoc}
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">195</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>abstract</specifier> <name>class</name> <name><name>AbstractStatsValues</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> implements <name>StatsValues</name> <block>{
     <return>return <expr><name>res</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setNextReader</name><parameter_list>(<parameter><decl><type><name>AtomicReaderContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>valueSource</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>valueSource</name> <operator>=</operator> <call><name><name>ft</name><operator>.</operator><name>getValueSource</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name><name>valueSource</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Updates the minimum and maximum statistics based on the given values
    *
@@ -202,13 +210,6 @@ abstract class AbstractStatsValues&lt;T&gt; implements StatsValues {
    */</comment>
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>updateMinMax</name><argument_list>(<argument><expr><name>T</name> <name>min</name></expr></argument>, <argument><expr><name>T</name> <name>max</name></expr></argument>)</argument_list></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**
   * Updates the type specific statistics based on the given value
   *
   * @param value Value the statistics should be updated against
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><argument_list>(<argument><expr><name>T</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/**
    * Updates the type specific statistics based on the given value
    *
@@ -246,23 +247,22 @@ class NumericStatsValues extends AbstractStatsValues&lt;Number&gt; {
     max = Double.NEGATIVE_INFINITY;
   }
 
  /**
   * {@inheritDoc}
   */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>stv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sumOfSquares</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sumOfSquares"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>accumulate</name><argument_list>(<argument><expr><operator>(</operator><name>Number</name><operator>)</operator> <call><name><name>values</name><operator>.</operator><name>objectVal</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>missing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * {@inheritDoc}
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>Number</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sumOfSquares</name> <operator>+=</operator> <operator>(</operator><name>value</name> <operator>*</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt> <comment type="line">// for std deviation</comment>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>stv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sumOfSquares</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sumOfSquares"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -323,23 +323,22 @@ class DateStatsValues extends AbstractStatsValues&lt;Date&gt; {
     super(sf);
   }
 
  /**
   * {@inheritDoc}
   */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>stv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sumOfSquares</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sumOfSquares"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>accumulate</name><argument_list>(<argument><expr><operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>values</name><operator>.</operator><name>objectVal</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>missing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * {@inheritDoc}
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sumOfSquares</name> <operator>+=</operator> <operator>(</operator><name>value</name> <operator>*</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt> <comment type="line">// for std deviation</comment>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>stv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sumOfSquares</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><call><name><name>stv</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sumOfSquares"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -407,19 +406,20 @@ class StringStatsValues extends AbstractStatsValues&lt;String&gt; {
     super(sf);
   }
 
  /**
   * {@inheritDoc}
   */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>stv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// No type specific stats</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>accumulate</name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>missing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * {@inheritDoc}
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateTypeSpecificStats</name><parameter_list>(<parameter><decl><type><name>NamedList</name></type> <name>stv</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <comment type="line">// No type specific stats</comment>
   </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>NumericFacets</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>NumericFacets</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..7a6ec4c9861</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>NumericFacets</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">328</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayDeque</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Deque</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>NumericType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>ReaderUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>FunctionValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CharsRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>FacetParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>DocSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexSearcher</name></name>;</import>

<comment type="block" format="javadoc">/** Utility class to compute facets on numeric fields. */</comment>
<class><specifier>final</specifier> class <name>NumericFacets</name> <block>{

  <constructor><name>NumericFacets</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

  <class><specifier>static</specifier> class <name>HashTable</name> <block>{

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>LOAD_FACTOR</name> <init>= <expr><literal type="number">0.7f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>bits</name></decl>;</decl_stmt> <comment type="line">// bits identifying a value</comment>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>counts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>docIDs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>threshold</name></decl>;</decl_stmt>

    <constructor><name>HashTable</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>capacity</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt> <comment type="line">// must be a power of 2</comment>
      <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>new</operator> <name><name>long</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>counts</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>docIDs</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>capacity</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>threshold</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>capacity</name> <operator>*</operator> <name>LOAD_FACTOR</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>^</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>*</operator> <name>h</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt> <comment type="line">// * 31 to try to use the whole table, even if values are dense</comment>
      <return>return <expr><name>h</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rehash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>h</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><name>h</name></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>slot</name> <operator>=</operator> <operator>(</operator><name>slot</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>bits</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>docIDs</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>docID</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bits</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>!=</operator> <name>value</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>counts</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>rehash</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>long</name><index>[]</index></name></type> <name>oldBits</name> <init>= <expr><name>bits</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>oldCounts</name> <init>= <expr><name>counts</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>oldDocIDs</name> <init>= <expr><name>docIDs</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>newCapacity</name> <init>= <expr><name><name>bits</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>new</operator> <name><name>long</name><index>[<expr><name>newCapacity</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>counts</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>newCapacity</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>docIDs</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>newCapacity</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>newCapacity</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>threshold</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>LOAD_FACTOR</name> <operator>*</operator> <name>newCapacity</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oldBits</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>oldCounts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>oldDocIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>oldBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>oldCounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>Entry</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>docID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>bits</name></decl>;</decl_stmt>
  }</block></class>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getCounts</name><parameter_list>(<parameter><decl><type><name>SolrIndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>DocSet</name></type> <name>docs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mincount</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>missing</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sort</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>zeros</name> <init>= <expr><name>mincount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>mincount</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>mincount</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>sf</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getField</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>sf</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>NumericType</name></type> <name>numericType</name> <init>= <expr><call><name><name>ft</name><operator>.</operator><name>getNumericType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numericType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AtomicReaderContext</name></argument>&gt;</argument_list></name></type> <name>leaves</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 1. accumulate</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HashTable</name></type> <name>hashTable</name> <init>= <expr><operator>new</operator> <call><name>HashTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>AtomicReaderContext</name></argument>&gt;</argument_list></name></type> <name>ctxIt</name> <init>= <expr><call><name><name>leaves</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AtomicReaderContext</name></type> <name>ctx</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>FieldCache</name><operator>.</operator><name>Longs</name></name></type> <name>longs</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bits</name></type> <name>docsWithField</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>missingCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>DocIterator</name></type> <name>docsIt</name> <init>= <expr><call><name><name>docs</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>docsIt</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>docsIt</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>doc</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name> <operator>+</operator> <call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <do>do <block>{<block_content>
          <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name><name>ctxIt</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>doc</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name> <operator>+</operator> <call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <assert>assert <expr><name>doc</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name></expr>;</assert>
        <switch>switch <condition>(<expr><name>numericType</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>LONG</name></expr>:</case>
            <expr_stmt><expr><name>longs</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getLongs</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>INT</name></expr>:</case>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>FieldCache</name><operator>.</operator><name>Ints</name></name></type> <name>ints</name> <init>= <expr><call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getInts</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>longs</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>FieldCache</name><operator>.</operator><name>Longs</name></name></super><argument_list>()</argument_list> <block>{
              <function><annotation>@<name>Override</name></annotation>
              <type><specifier>public</specifier> <name>long</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>ints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></function>
            }</block></class></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>FLOAT</name></expr>:</case>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>FieldCache</name><operator>.</operator><name>Floats</name></name></type> <name>floats</name> <init>= <expr><call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getFloats</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>longs</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>FieldCache</name><operator>.</operator><name>Longs</name></name></super><argument_list>()</argument_list> <block>{
              <function><annotation>@<name>Override</name></annotation>
              <type><specifier>public</specifier> <name>long</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><call><name><name>floats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></function>
            }</block></class></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>DOUBLE</name></expr>:</case>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>FieldCache</name><operator>.</operator><name>Doubles</name></name></type> <name>doubles</name> <init>= <expr><call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getDoubles</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>longs</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>FieldCache</name><operator>.</operator><name>Longs</name></name></super><argument_list>()</argument_list> <block>{
              <function><annotation>@<name>Override</name></annotation>
              <type><specifier>public</specifier> <name>long</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>docID</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>Double</name><operator>.</operator><name>doubleToLongBits</name></name><argument_list>(<argument><expr><call><name><name>doubles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>docID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></function>
            }</block></class></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>docsWithField</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getDocsWithField</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>docsWithField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hashTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><call><name><name>longs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>docBase</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>missingCount</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// 2. select top-k facet values</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pqSize</name> <init>= <expr><ternary><condition><expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>hashTable</name><operator>.</operator><name>size</name></name></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>limit</name></expr></argument>, <argument><expr><name><name>hashTable</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>FacetParams</name><operator>.</operator><name>FACET_SORT_COUNT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>FacetParams</name><operator>.</operator><name>FACET_SORT_COUNT_LEGACY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pq</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>pqSize</name></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>boolean</name></type> <name>lessThan</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Entry</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>count</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>count</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>count</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>bits</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>bits</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
      }</block></class></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pq</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>pqSize</name></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>boolean</name></type> <name>lessThan</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Entry</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><name><name>a</name><operator>.</operator><name>bits</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>bits</name></name></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>Entry</name></type> <name>e</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hashTable</name><operator>.</operator><name>bits</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hashTable</name><operator>.</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>mincount</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>new</operator> <call><name>Entry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>e</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <name><name>hashTable</name><operator>.</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>e</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>hashTable</name><operator>.</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>e</name><operator>.</operator><name>docID</name></name> <operator>=</operator> <name><name>hashTable</name><operator>.</operator><name>docIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>pq</name><operator>.</operator><name>insertWithOverflow</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// 4. build the NamedList</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ValueSource</name></type> <name>vs</name> <init>= <expr><call><name><name>ft</name><operator>.</operator><name>getValueSource</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>NamedList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// This stuff is complicated because if facet.mincount=0, the counts needs</comment>
    <comment type="line">// to be merged with terms from the terms dict</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>zeros</name> <operator>||</operator> <call><name><name>FacetParams</name><operator>.</operator><name>FACET_SORT_COUNT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>FacetParams</name><operator>.</operator><name>FACET_SORT_COUNT_LEGACY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Only keep items we're interested in</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Deque</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>counts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>counts</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      
      <comment type="line">// Entries from the PQ first, then using the terms dictionary</comment>
      <for>for <control>(<init><decl><type><name>Entry</name></type> <name>entry</name> <range>: <expr><name>counts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>readerIdx</name> <init>= <expr><call><name><name>ReaderUtil</name><operator>.</operator><name>subIndex</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>docID</name></name></expr></argument>, <argument><expr><name>leaves</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FunctionValues</name></type> <name>values</name> <init>= <expr><call><name><name>vs</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>leaves</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>readerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>docID</name></name> <operator>-</operator> <call><name><name>leaves</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>readerIdx</name></expr></argument>)</argument_list></call><operator>.</operator><name>docBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>zeros</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>limit</name><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// need to merge with the term dict</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sf</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot use "</literal> <operator>+</operator> <name><name>FacetParams</name><operator>.</operator><name>FACET_MINCOUNT</name></name> <operator>+</operator> <literal type="string">"=0 on a field which is not indexed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Add zeros until there are limit results</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>alreadySeen</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>readerIdx</name> <init>= <expr><call><name><name>ReaderUtil</name><operator>.</operator><name>subIndex</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>docID</name></name></expr></argument>, <argument><expr><name>leaves</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>FunctionValues</name></type> <name>values</name> <init>= <expr><call><name><name>vs</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>leaves</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>readerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>alreadySeen</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>docID</name></name> <operator>-</operator> <call><name><name>leaves</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>readerIdx</name></expr></argument>)</argument_list></call><operator>.</operator><name>docBase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>alreadySeen</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getAtomicReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>terms</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>CharsRef</name></type> <name>spare</name> <init>= <expr><operator>new</operator> <call><name>CharsRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><name><name>hashTable</name><operator>.</operator><name>size</name></name></expr></init></decl>;</init> <condition><expr><name>skipped</name> <operator>&lt;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>term</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ft</name><operator>.</operator><name>indexedToReadable</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>termStr</name> <init>= <expr><call><name><name>spare</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>alreadySeen</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>termStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>++</operator><name>skipped</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <for>for <control>( <init>;</init> <condition><expr><name>term</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>limit</name><operator>)</operator></expr>;</condition> <incr><expr><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ft</name><operator>.</operator><name>indexedToReadable</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>termStr</name> <init>= <expr><call><name><name>spare</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>alreadySeen</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>termStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>termStr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// sort=index, mincount=0 and we have less than limit items</comment>
      <comment type="line">// =&gt; Merge the PQ and the terms dictionary on the fly</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sf</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot use "</literal> <operator>+</operator> <name><name>FacetParams</name><operator>.</operator><name>FACET_SORT</name></name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <name><name>FacetParams</name><operator>.</operator><name>FACET_SORT_INDEX</name></name> <operator>+</operator> <literal type="string">" on a field which is not indexed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>counts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Entry</name></type> <name>entry</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>readerIdx</name> <init>= <expr><call><name><name>ReaderUtil</name><operator>.</operator><name>subIndex</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>docID</name></name></expr></argument>, <argument><expr><name>leaves</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FunctionValues</name></type> <name>values</name> <init>= <expr><call><name><name>vs</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>leaves</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>readerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>counts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>docID</name></name> <operator>-</operator> <call><name><name>leaves</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>readerIdx</name></expr></argument>)</argument_list></call><operator>.</operator><name>docBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getAtomicReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>terms</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>terms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CharsRef</name></type> <name>spare</name> <init>= <expr><operator>new</operator> <call><name>CharsRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>term</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>( <init>;</init> <condition><expr><name>term</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>limit</name><operator>)</operator></expr>;</condition> <incr><expr><name>term</name> <operator>=</operator> <call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>ft</name><operator>.</operator><name>indexedToReadable</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>termStr</name> <init>= <expr><call><name><name>spare</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Integer</name></type> <name>count</name> <init>= <expr><call><name><name>counts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>termStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>termStr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>missing</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>missingCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5dbd054a7a7</literal><operator>..</operator><name>f0f48787b14</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">37</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">83</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>IdentityHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SynchronousQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiDocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>MatchAllDocsQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>grouping</name><operator>.</operator><name>AbstractAllGroupHeadsCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>grouping</name><operator>.</operator><name>term</name><operator>.</operator><name>TermGroupFacetCollector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>grouping</name><operator>.</operator><name>term</name><operator>.</operator><name>TermAllGroupsCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>packed</name><operator>.</operator><name>PackedInts</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>grouping</name><operator>.</operator><name>term</name><operator>.</operator><name>TermGroupFacetCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CharsRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>FixedBitSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>StringHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>UnicodeUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>FacetParams</name><operator>.</operator><name>FacetRangeOther</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>CommonParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>FacetParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>FacetParams</name><operator>.</operator><name>FacetRangeInclude</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>FacetParams</name><operator>.</operator><name>FacetRangeOther</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>GroupParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>RequiredSolrParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>SolrParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>NamedList</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>SimpleOrderedMap</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>StrUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>ResponseBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>BoolField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>DateField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SortableDoubleField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SortableFloatField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SortableIntField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>SortableLongField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>TrieField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>BitDocSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>DocSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>Grouping</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>HashDocSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QueryParsing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexSearcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SortedIntDocSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SyntaxError</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>grouping</name><operator>.</operator><name>GroupingSpecification</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>BoundedTreeSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>DateMathParser</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>DefaultSolrThreadFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name><operator>.</operator><name>ResponseBuilder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>LongPriorityQueue</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SynchronousQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * A class that generates simple Facet information for a request.
  *
@@ -300,7 +346,8 @@ public class SimpleFacets {
     boolean enumMethod = FacetParams.FACET_METHOD_enum.equals(method);
 
     // TODO: default to per-segment or not?
    boolean per_segment = FacetParams.FACET_METHOD_fcs.equals(method);
    boolean per_segment = FacetParams.FACET_METHOD_fcs.equals(method) // explicit
        || (ft.getNumericType() != null &amp;&amp; sf.hasDocValues()); // numeric doc values are per-segment by default
 
     if (method == null &amp;&amp; ft instanceof BoolField) {
       // Always use filters for booleans... we know the number of values is very small.
@@ -329,10 +376,18 @@ public class SimpleFacets {
           // TODO: future logic could use filters instead of the fieldcache if
           // the number of terms in the field is small enough.
           if (per_segment) {
            PerSegmentSingleValuedFaceting ps = new PerSegmentSingleValuedFaceting(searcher, docs, field, offset,limit, mincount, missing, sort, prefix);
            Executor executor = threads == 0 ? directExecutor : facetExecutor;
            ps.setNumThreads(threads);
            counts = ps.getFacetCounts(executor);
            if (ft.getNumericType() != null &amp;&amp; !sf.multiValued()) {
              // force numeric faceting
              if (prefix != null &amp;&amp; !prefix.isEmpty()) {
                throw new SolrException(ErrorCode.BAD_REQUEST, FacetParams.FACET_PREFIX + " is not supported on numeric types");
              }
              counts = NumericFacets.getCounts(searcher, docs, field, offset, limit, mincount, missing, sort);
            } else {
              PerSegmentSingleValuedFaceting ps = new PerSegmentSingleValuedFaceting(searcher, docs, field, offset,limit, mincount, missing, sort, prefix);
              Executor executor = threads == 0 ? directExecutor : facetExecutor;
              ps.setNumThreads(threads);
              counts = ps.getFacetCounts(executor);
            }
           } else {
             counts = getFieldCacheCounts(searcher, docs, field, offset,limit, mincount, missing, sort, prefix);
           }
diff --git a/solr/core/src/java/org/apache/solr/request/UnInvertedField.java b/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
index 7407e790e43..0a106bb4aeb 100755
-- a/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
++ b/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
@@ -483,13 +483,7 @@ public class UnInvertedField extends DocTermOrds {
     SortedDocValues si;
     for (String f : facet) {
       SchemaField facet_sf = searcher.getSchema().getField(f);
      try {
        si = FieldCache.DEFAULT.getTermsIndex(searcher.getAtomicReader(), f);
      }
      catch (IOException e) {
        throw new RuntimeException("failed to open field cache for: " + f, e);
      }
      finfo[i] = new FieldFacetStats(f, si, sf, facet_sf, numTermsInField);
      finfo[i] = new FieldFacetStats(searcher, f, sf, facet_sf);
       i++;
     }
 
diff --git a/solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType.java b/solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType.java
index 4721e9e0800..c48ddf40fac 100644
-- a/solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType.java
++ b/solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType.java
@@ -51,6 +51,10 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
@@ -103,7 +107,7 @@ public abstract class AbstractSpatialFieldType&lt;T extends SpatialStrategy&gt; extend
   }
 
   @Override
  public Field[] createFields(SchemaField field, Object val, float boost) {
  public List&lt;StorableField&gt; createFields(SchemaField field, Object val, float boost) {
     String shapeStr = null;
     Shape shape = null;
     if (val instanceof Shape) {
@@ -114,34 +118,22 @@ public abstract class AbstractSpatialFieldType&lt;T extends SpatialStrategy&gt; extend
     }
     if (shape == null) {
       log.debug("Field {}: null shape for input: {}", field, val);
      return null;
      return Collections.emptyList();
     }
 
    Field[] indexableFields = null;
    List&lt;StorableField&gt; result = new ArrayList&lt;StorableField&gt;();
     if (field.indexed()) {
       T strategy = getStrategy(field.getName());
      indexableFields = strategy.createIndexableFields(shape);
      result.addAll(Arrays.asList(strategy.createIndexableFields(shape)));
     }
 
    StoredField storedField = null;
     if (field.stored()) {
       if (shapeStr == null)
         shapeStr = shapeToString(shape);
      storedField = new StoredField(field.getName(), shapeStr);
      result.add(new StoredField(field.getName(), shapeStr));
     }
 
    if (indexableFields == null) {
      if (storedField == null)
        return null;
      return new Field[]{storedField};
    } else {
      if (storedField == null)
        return indexableFields;
      Field[] result = new Field[indexableFields.length+1];
      System.arraycopy(indexableFields,0,result,0,indexableFields.length);
      result[result.length-1] = storedField;
      return result;
    }
    return result;
   }
 
   protected Shape parseShape(String shapeStr) {
diff --git a/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index 0575a3d9670..32b7ce7e5b9 100644
-- a/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
++ b/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -46,9 +46,11 @@ import javax.xml.xpath.XPathExpressionException;
 import javax.xml.xpath.XPathFactory;
 import java.io.IOException;
 import java.io.InputStream;
import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
 import java.util.HashSet;
import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -145,14 +147,14 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
   }
 
   @Override
  public StorableField[] createFields(SchemaField field, Object externalVal, float boost) {
  public List&lt;StorableField&gt; createFields(SchemaField field, Object externalVal, float boost) {
     CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);
 
    StorableField[] f = new StorableField[field.stored() ? 3 : 2];
    List&lt;StorableField&gt; f = new ArrayList&lt;StorableField&gt;();
     SchemaField amountField = getAmountField(field);
    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() &amp;&amp; !amountField.omitNorms() ? boost : 1F);
    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() &amp;&amp; !amountField.omitNorms() ? boost : 1F));
     SchemaField currencyField = getCurrencyField(field);
    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() &amp;&amp; !currencyField.omitNorms() ? boost : 1F);
    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() &amp;&amp; !currencyField.omitNorms() ? boost : 1F));
 
     if (field.stored()) {
       org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();
@@ -162,7 +164,7 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
       if (storedValue.indexOf(",") &lt; 0) {
         storedValue += "," + defaultCurrency;
       }
      f[2] = createField(field.getName(), storedValue, customType, 1F);
      f.add(createField(field.getName(), storedValue, customType, 1F));
     }
 
     return f;
diff --git a/solr/core/src/java/org/apache/solr/schema/DateField.java b/solr/core/src/java/org/apache/solr/schema/DateField.java
index ac934cf7d36..f047e1a0650 100644
-- a/solr/core/src/java/org/apache/solr/schema/DateField.java
++ b/solr/core/src/java/org/apache/solr/schema/DateField.java
@@ -435,7 +435,7 @@ public class DateField extends PrimitiveFieldType {
   @Override
   public ValueSource getValueSource(SchemaField field, QParser parser) {
     field.checkFieldCacheSource(parser);
    return new DateFieldSource(field.getName(), field.getType());
    return new DateFieldSource(field.getName(), field);
   }
 
   /** DateField specific range query */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">453</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">453</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>DateField</name> extends <name>PrimitiveFieldType</name> <block>{
 
 <expr><name>class</name> <name>DateFieldSource</name> extends <name>FieldCacheSource</name> <block>{
   <comment type="line">// NOTE: this is bad for serialization... but we currently need the fieldType for toInternal()</comment>
  <expr><name>SchemaField</name> <name>sf</name></expr>;
   <name>FieldType</name> <name>ft</name></block></expr>;
 
  <specifier>public</specifier> <call><name>DateFieldSource</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>FieldType</name> <name>ft</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <call><name>DateFieldSource</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>sf</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
    <name><name>this</name><operator>.</operator><name>ft</name></name> <operator>=</operator> <name>ft</name></block></expr>;
    <name><name>this</name><operator>.</operator><name>sf</name></name> <operator>=</operator> <name>sf</name></block></block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ft</name></name> <operator>=</operator> <call><name><name>sf</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">474</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">476</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>DateFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         <return>return <expr><call><name><name>ft</name><operator>.</operator><name>toInternal</name></name><argument_list>(<argument><expr><name>readableValue</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>intVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">514</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">521</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>DateFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
           <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>br</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>termsIndex</name><operator>.</operator><name>lookupOrd</name></name><argument_list>(<argument><expr><name>ord</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>ft</name><operator>.</operator><name>toObject</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</return>
          <return>return <expr><call><name><name>ft</name><operator>.</operator><name>toObject</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block></else></if_stmt>
       </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldProperties</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldProperties</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">137d86c2016</literal><operator>..</operator><literal type="number">3a2b987b72c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldProperties</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldProperties</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldProperties</name> <block>{
   <expr><specifier>protected</specifier> <name>final</name> <specifier>static</specifier> <name>int</name> <name>OMIT_POSITIONS</name>      <operator>=</operator> <literal type="number">0x00002000</literal></expr>;
 
   <specifier>protected</specifier> <name>final</name> <specifier>static</specifier> <name>int</name> <name>STORE_OFFSETS</name>       <operator>=</operator> <literal type="number">0x00004000</literal></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DOC_VALUES</name>          <init>= <expr><literal type="number">0x00008000</literal></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>propertyNames</name> <init>= <expr><block>{
           <expr><literal type="string">"indexed"</literal></expr>, <expr><literal type="string">"tokenized"</literal></expr>, <expr><literal type="string">"stored"</literal></expr>,
@@ <expr><operator>-</operator><literal type="number">57</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">58</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldProperties</name> <block>{
           <expr><literal type="string">"termVectors"</literal></expr>, <expr><literal type="string">"termPositions"</literal></expr>, <expr><literal type="string">"termOffsets"</literal></expr>,
           <expr><literal type="string">"multiValued"</literal></expr>,
           <expr><literal type="string">"sortMissingFirst"</literal></expr>,<expr><literal type="string">"sortMissingLast"</literal></expr>,<expr><literal type="string">"required"</literal></expr>, <expr><literal type="string">"omitPositions"</literal></expr>,
          <expr><literal type="string">"storeOffsetsWithPositions"</literal>
          <literal type="string">"storeOffsetsWithPositions"</literal></expr>, <expr><literal type="string">"docValues"</literal></expr>
   }</block></expr>;
 
   <specifier>static</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name> <name>propertyMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9ba293c4a21</literal><operator>..</operator><literal type="number">3bf13f17b51</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>DocValuesType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>IndexOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>GeneralField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>Sorting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * Base class for all field types used by an index schema.
  *
@@ -120,14 +121,6 @@ public abstract class FieldType extends FieldProperties {
 
   }
 
  protected String getArg(String n, Map&lt;String,String&gt; args) {
    String s = args.remove(n);
    if (s == null) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Missing parameter '"+n+"' for FieldType=" + typeName +args);
    }
    return s;
  }

   // Handle additional arguments...
   void setArgs(IndexSchema schema, Map&lt;String,String&gt; args) {
     // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version
@@ -169,11 +162,8 @@ public abstract class FieldType extends FieldProperties {
       initArgs.remove("positionIncrementGap");
     }
 
    final String postingsFormat = initArgs.get("postingsFormat");
    if (postingsFormat != null) {
      this.postingsFormat = postingsFormat;
      initArgs.remove("postingsFormat");
    }
    this.postingsFormat = initArgs.remove("postingsFormat");
    this.docValuesFormat = initArgs.remove("docValuesFormat");
 
     if (initArgs.size() &gt; 0) {
       throw new RuntimeException("schema fieldtype " + typeName
@@ -261,7 +251,7 @@ public abstract class FieldType extends FieldProperties {
     newType.setStoreTermVectors(field.storeTermVector());
     newType.setStoreTermVectorOffsets(field.storeTermOffsets());
     newType.setStoreTermVectorPositions(field.storeTermPositions());
    

     return createField(field.getName(), val, newType, boost);
   }
 
@@ -290,9 +280,15 @@ public abstract class FieldType extends FieldProperties {
    * @see #createField(SchemaField, Object, float)
    * @see #isPolyField()
    */</comment>
  <function><type><specifier>public</specifier> <name><name>StorableField</name><index>[]</index></name></type> <name>createFields</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>createFields</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>StorableField</name></type> <name>f</name> <init>= <expr><call><name>createField</name><argument_list>( <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>f</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <name><name>StorableField</name><index>[]</index></name><block>{}</block></expr> </then><else>: <expr><operator>new</operator> <name><name>StorableField</name><index>[]</index></name><block>{<expr><name>f</name></expr>}</block></expr></else></ternary></expr>;</return>
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>f</name><operator>.</operator><name>fieldType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>docValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// field types that support doc values should either override createField</comment>
      <comment type="line">// to return a field with doc values or extend createFields if this can't</comment>
      <comment type="line">// be done in a single field instance (see StrField for example)</comment>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"This field type does not support doc values: "</literal> <operator>+</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><name>f</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>StorableField</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>protected</specifier> <name>IndexOptions</name></type> <name>getIndexOptions</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>internalVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">513</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">509</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldType</name> extends <name>FieldProperties</name> <block>{
   <expr><specifier>public</specifier> <name>Similarity</name> <call><name>getSimilarity</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>similarity</name></expr>;</return></block></expr>
   }</block>
  

  <comment type="block" format="javadoc">/** Return the numeric type of this field, or null if this field is not a
   *  numeric field. */</comment>
  <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>NumericType</name></name> <call><name>getNumericType</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></expr></expr_stmt>

   <comment type="block" format="javadoc">/**
    * Sets the Similarity used when scoring fields of this type
    * @lucene.internal
@@ -530,7 +532,16 @@ public abstract class FieldType extends FieldProperties {
   public String getPostingsFormat() {
     return postingsFormat;
   }
  

  /**
   * The docvalues format used for this field type
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>docValuesFormat</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getDocValuesFormat</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>docValuesFormat</name></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * calls back to TextResponseWriter to write the field value
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">562</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldType</name> extends <name>FieldProperties</name> <block>{
     <return>return <expr><operator>new</operator> <call><name>StrFieldSource</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 

   <comment type="block" format="javadoc">/**
    * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}
    * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true
@@ -615,7 +625,11 @@ public abstract class FieldType extends FieldProperties {
    * if invariants are violated by the &lt;code&gt;SchemaField.&lt;/code&gt;
    * &lt;/p&gt;
    */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>checkSchemaField</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SolrException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// :NOOP:</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>checkSchemaField</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// override if your field type supports doc values</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"Field type "</literal> <operator>+</operator> <name>this</name> <operator>+</operator> <literal type="string">" does not support doc values"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d9fe7393677</name><operator>..</operator><literal type="number">04ecd4356db</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">42</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>FunctionValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>VectorValueSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>io</name><operator>.</operator><name>ParseUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>context</name><operator>.</operator><name>SpatialContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>distance</name><operator>.</operator><name>DistanceUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidShapeException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>shape</name><operator>.</operator><name>Rectangle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ComplexExplanation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Explanation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Weight</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>TextResponseWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name><operator>.</operator><name>distance</name><operator>.</operator><name>HaversineConstFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>DelegatingCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>ExtendedQueryBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>PostFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SpatialOptions</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>context</name><operator>.</operator><name>SpatialContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>distance</name><operator>.</operator><name>DistanceUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidShapeException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>io</name><operator>.</operator><name>ParseUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>spatial4j</name><operator>.</operator><name>core</name><operator>.</operator><name>shape</name><operator>.</operator><name>Rectangle</name></name>;</import>
 
 
 <comment type="block" format="javadoc">/**
@@ -57,10 +69,10 @@ public class LatLonType extends AbstractSubTypeFieldType implements SpatialQuery
   }
 
   @Override
  public StorableField[] createFields(SchemaField field, Object value, float boost) {
  public List&lt;StorableField&gt; createFields(SchemaField field, Object value, float boost) {
     String externalVal = value.toString();
     //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)
    StorableField[] f = new StorableField[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];
    List&lt;StorableField&gt; f = new ArrayList&lt;StorableField&gt;(3);
     if (field.indexed()) {
       int i = 0;
       double[] latLon;
@@ -71,18 +83,18 @@ public class LatLonType extends AbstractSubTypeFieldType implements SpatialQuery
       }
       //latitude
       SchemaField lat = subField(field, i);
      f[i] = lat.createField(String.valueOf(latLon[LAT]), lat.indexed() &amp;&amp; !lat.omitNorms() ? boost : 1f);
      f.add(lat.createField(String.valueOf(latLon[LAT]), lat.indexed() &amp;&amp; !lat.omitNorms() ? boost : 1f));
       i++;
       //longitude
       SchemaField lon = subField(field, i);
      f[i] = lon.createField(String.valueOf(latLon[LON]), lon.indexed() &amp;&amp; !lon.omitNorms() ? boost : 1f);
      f.add(lon.createField(String.valueOf(latLon[LON]), lon.indexed() &amp;&amp; !lon.omitNorms() ? boost : 1f));
 
     }
 
     if (field.stored()) {
       FieldType customType = new FieldType();
       customType.setStored(true);
      f[f.length - 1] = createField(field.getName(), externalVal, customType, 1f);
      f.add(createField(field.getName(), externalVal, customType, 1f));
     }
     return f;
   }
diff --git a/solr/core/src/java/org/apache/solr/schema/PointType.java b/solr/core/src/java/org/apache/solr/schema/PointType.java
index 0697db7dfb9..d70c66194e4 100644
-- a/solr/core/src/java/org/apache/solr/schema/PointType.java
++ b/solr/core/src/java/org/apache/solr/schema/PointType.java
@@ -69,7 +69,7 @@ public class PointType extends CoordinateFieldType implements SpatialQueryable {
   }
 
   @Override
  public StorableField[] createFields(SchemaField field, Object value, float boost) {
  public List&lt;StorableField&gt; createFields(SchemaField field, Object value, float boost) {
     String externalVal = value.toString();
     String[] point = new String[0];
     try {
@@ -79,12 +79,12 @@ public class PointType extends CoordinateFieldType implements SpatialQueryable {
     }
 
     // TODO: this doesn't currently support polyFields as sub-field types
    StorableField[] f = new StorableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];
    List&lt;StorableField&gt; f = new ArrayList&lt;StorableField&gt;(dimension+1);
 
     if (field.indexed()) {
       for (int i=0; i&lt;dimension; i++) {
         SchemaField sf = subField(field, i);
        f[i] = sf.createField(point[i], sf.indexed() &amp;&amp; !sf.omitNorms() ? boost : 1f);
        f.add(sf.createField(point[i], sf.indexed() &amp;&amp; !sf.omitNorms() ? boost : 1f));
       }
     }
 
@@ -92,7 +92,7 @@ public class PointType extends CoordinateFieldType implements SpatialQueryable {
       String storedVal = externalVal;  // normalize or not?
       FieldType customType = new FieldType();
       customType.setStored(true);
      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);
      f.add(createField(field.getName(), storedVal, customType, 1f));
     }
     
     return f;
diff --git a/solr/core/src/java/org/apache/solr/schema/SchemaField.java b/solr/core/src/java/org/apache/solr/schema/SchemaField.java
index 54335b3cf25..793374c0dd7 100644
-- a/solr/core/src/java/org/apache/solr/schema/SchemaField.java
++ b/solr/core/src/java/org/apache/solr/schema/SchemaField.java
@@ -18,13 +18,13 @@
 package org.apache.solr.schema;
 
 import org.apache.solr.common.SolrException;
import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.search.SortField;
 import org.apache.solr.search.QParser;
 
 import org.apache.solr.response.TextResponseWriter;
 
import java.util.List;
 import java.util.Map;
 import java.io.IOException;
 
@@ -79,6 +79,7 @@ public final class SchemaField extends FieldProperties {
 
   public boolean indexed() { return (properties &amp; INDEXED)!=0; }
   public boolean stored() { return (properties &amp; STORED)!=0; }
  public boolean hasDocValues() { return (properties &amp; DOC_VALUES) != 0; }
   public boolean storeTermVector() { return (properties &amp; STORE_TERMVECTORS)!=0; }
   public boolean storeTermPositions() { return (properties &amp; STORE_TERMPOSITIONS)!=0; }
   public boolean storeTermOffsets() { return (properties &amp; STORE_TERMOFFSETS)!=0; }
@@ -104,8 +105,8 @@ public final class SchemaField extends FieldProperties {
   public StorableField createField(Object val, float boost) {
     return type.createField(this,val,boost);
   }
  
  public StorableField[] createFields(Object val, float boost) {

  public List&lt;StorableField&gt; createFields(Object val, float boost) {
     return type.createFields(this,val,boost);
   }
 
@@ -148,9 +149,9 @@ public final class SchemaField extends FieldProperties {
    * @see FieldType#getSortField
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>checkSortability</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SolrException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>indexed</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><call><name>indexed</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>hasDocValues</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, 
                              <argument><expr><literal type="string">"can not sort on unindexed field: "</literal> 
                              <literal type="string">"can not sort on a field which is neither indexed nor has doc values: "</literal> 
                               <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>( <expr><call><name>multiValued</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">170</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SchemaField</name> extends <name>FieldProperties</name> <block>{
    <expr><operator>*</operator> @<name>see</name> <name>FieldType</name><operator>#</operator><name>getValueSource</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>checkFieldCacheSource</name><argument_list>(<argument><expr><name>QParser</name> <name>parser</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>SolrException</name> <block>{</block></expr></argument></throws></expr>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>indexed</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><call><name>indexed</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>hasDocValues</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, 
                              <argument><expr><literal type="string">"can not use FieldCache on unindexed field: "</literal> 
                              <literal type="string">"can not use FieldCache on a field which is neither indexed nor has doc values: "</literal> 
                               <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>( <expr><call><name>multiValued</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableDoubleField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableDoubleField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">10c1140e4a1</literal><operator>..</operator><literal type="number">65436f4bd6f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableDoubleField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableDoubleField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>SortableDoubleFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>double2sortableStr</name></name><argument_list>(<argument><expr><name>readableValue</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>doubleVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>SortableDoubleFieldSource</name> extends <name>FieldCacheSource</name> <block>{
 
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>Object</name> <call><name>objectVal</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>int</name> <name>ord</name><operator>=</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</block></expr>
        <if_stmt><if>if <condition>(<expr><name>ord</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>termsIndex</name><operator>.</operator><name>lookupOrd</name></name><argument_list>(<argument><expr><name>ord</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>SortableStr2double</name></name><argument_list>(<argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt></block></expr></expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name>exists</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>doubleVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
       </block_content>}</block></function>
 
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableFloatField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableFloatField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9635e6f1bd5</literal><operator>..</operator><literal type="number">69db7616b2f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableFloatField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableFloatField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>SortableFloatFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>float2sortableStr</name></name><argument_list>(<argument><expr><name>readableValue</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>ord</name><init>=<expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">178</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>SortableFloatFieldSource</name> extends <name>FieldCacheSource</name> <block>{
 
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>Object</name> <call><name>objectVal</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>int</name> <name>ord</name><operator>=</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</block></expr>
        <if_stmt><if>if <condition>(<expr><name>ord</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>termsIndex</name><operator>.</operator><name>lookupOrd</name></name><argument_list>(<argument><expr><name>ord</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>SortableStr2float</name></name><argument_list>(<argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt></block></expr></expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name>exists</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>floatVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
       </block_content>}</block></function>
 
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableIntField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableIntField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1a850aa0c08</literal><operator>..</operator><name>cbcb913ea84</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableIntField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableIntField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">142</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">142</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>SortableIntFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>intVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>int</name></type> <name>intVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>ord</name><init>=<expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>SortableIntFieldSource</name> extends <name>FieldCacheSource</name> <block>{
 
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>Object</name> <call><name>objectVal</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>int</name> <name>ord</name><operator>=</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</block></expr>
        <if_stmt><if>if <condition>(<expr><name>ord</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>termsIndex</name><operator>.</operator><name>lookupOrd</name></name><argument_list>(<argument><expr><name>ord</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>SortableStr2int</name></name><argument_list>(<argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt></block></expr></expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name>exists</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>intVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
       </block_content>}</block></function>
 
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableLongField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableLongField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8ce95ce5dcc</literal><operator>..</operator><literal type="number">0e61eef6f91</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableLongField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SortableLongField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>SortableLongFieldSource</name> extends <name>FieldCacheSource</name> <block>{
         <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>long2sortableStr</name></name><argument_list>(<argument><expr><name>readableValue</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
 
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>longVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>SortableLongFieldSource</name> extends <name>FieldCacheSource</name> <block>{
 
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>Object</name> <call><name>objectVal</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>int</name> <name>ord</name><operator>=</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</block></expr>
        <if_stmt><if>if <condition>(<expr><name>ord</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>termsIndex</name><operator>.</operator><name>lookupOrd</name></name><argument_list>(<argument><expr><name>ord</name></expr></argument>, <argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>NumberUtils</name><operator>.</operator><name>SortableStr2long</name></name><argument_list>(<argument><expr><name>spare</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt></block></expr></expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name>exists</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>longVal</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
       </block_content>}</block></function>
 
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>StrField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>StrField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a6e81650e77</name><operator>..</operator><literal type="number">4f370cd3f3b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>StrField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>StrField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">43</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>GeneralField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>TextResponseWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QParser</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<comment type="block" format="javadoc">/**
 *
 */</comment>
 <class><specifier>public</specifier> class <name>StrField</name> <super_list><extends>extends <super><name>PrimitiveFieldType</name></super></extends></super_list> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>IndexSchema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>createFields</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>,
      <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createField</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Field</name></type> <name>docValuesField</name> <init>= <expr><operator>new</operator> <call><name>SortedDocValuesField</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>docValuesField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name>createField</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>SortField</name></type> <name>getSortField</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>,<parameter><decl><type><name>boolean</name></type> <name>reverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name>getStringSort</name><argument_list>(<argument><expr><name>field</name></expr></argument>,<argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>StrField</name> extends <name>PrimitiveFieldType</name> <block>{
   <expr><specifier>public</specifier> <name>Object</name> <call><name>toObject</name><argument_list>(<argument><expr><name>SchemaField</name> <name>sf</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>term</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><call><name><name>term</name><operator>.</operator><name>utf8ToString</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>void</name> <call><name>checkSchemaField</name><argument_list>(<argument><expr><name>SchemaField</name> <name>field</name></expr></argument>)</argument_list></call> <block>{
    <comment type="line">// change me when multi-valued doc values are supported</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name><name>field</name><operator>.</operator><name>isRequired</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>field</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>this</name> <operator>+</operator> <literal type="string">" has doc values enabled, but has no default value and is not required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  }</block></expr></expr_stmt>
 </block_content>}</block></function>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieDateField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieDateField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fddcdbba897</name><operator>..</operator><literal type="number">3ac0c78e5f0</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieDateField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieDateField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>FunctionValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>TextResponseWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>GeneralField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>NumericType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>NumericRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CharsRef</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieDateField</name> extends <name>DateField</name> <block>{
     <return>return <expr><call><name><name>wrappedField</name><operator>.</operator><name>getPrecisionStep</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>NumericType</name></type> <name>getNumericType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>wrappedField</name><operator>.</operator><name>getNumericType</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>TextResponseWriter</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>StorableField</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieDateField</name> extends <name>DateField</name> <block>{
     <return>return <expr><call><name><name>wrappedField</name><operator>.</operator><name>createField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>createFields</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>wrappedField</name><operator>.</operator><name>createFields</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>Query</name></type> <name>getRangeQuery</name><parameter_list>(<parameter><decl><type><name>QParser</name></type> <name>parser</name></decl></parameter>, <parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>minInclusive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>maxInclusive</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>wrappedField</name><operator>.</operator><name>getRangeQuery</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieDateField</name> extends <name>DateField</name> <block>{
               <expr><name>max</name> <operator>==</operator> <literal type="null">null</literal> <operator>?</operator> <literal type="null">null</literal> <operator>:</operator> <call><name><name>max</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>,
               <expr><name>minInclusive</name></expr>, <expr><name>maxInclusive</name></expr>)</block></expr>;</expr_stmt>
   </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>checkSchemaField</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>wrappedField</name><operator>.</operator><name>checkSchemaField</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>afe4da286b0</name><operator>..</operator><literal type="number">59c20236d1f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>NumericType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FloatField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>IntField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>LongField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>NumericDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>DoubleFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>FloatFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>IntFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>LongFieldSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>NumericRangeQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>CharsRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>NumericUtils</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
                 <expr><literal type="string">"Invalid type specified in schema.xml for field: "</literal> <operator>+</operator> <call><name><name>args</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>e</name></expr>)</block></expr>;</expr_stmt>
       }</block></class>
     </block_content>}</block></if></if_stmt>
  
    

     <decl_stmt><decl><type><name><name>CharFilterFactory</name><index>[]</index></name></type> <name>filterFactories</name> <init>= <expr><operator>new</operator> <name><name>CharFilterFactory</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>TokenFilterFactory</name><index>[]</index></name></type> <name>tokenFilterFactories</name> <init>= <expr><operator>new</operator> <name><name>TokenFilterFactory</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <call><name>TokenizerChain</name><argument_list>(<argument><expr><name>filterFactories</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TrieTokenizerFactory</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>precisionStep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tokenFilterFactories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">236</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
     <return>return <expr><name>type</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>NumericType</name></type> <name>getNumericType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>INTEGER</name></expr>:</case>
        <return>return <expr><name><name>NumericType</name><operator>.</operator><name>INT</name></name></expr>;</return>
      <case>case <expr><name>LONG</name></expr>:</case>
      <case>case <expr><name>DATE</name></expr>:</case>
        <return>return <expr><name><name>NumericType</name><operator>.</operator><name>LONG</name></name></expr>;</return>
      <case>case <expr><name>FLOAT</name></expr>:</case>
        <return>return <expr><name><name>NumericType</name><operator>.</operator><name>FLOAT</name></name></expr>;</return>
      <case>case <expr><name>DOUBLE</name></expr>:</case>
        <return>return <expr><name><name>NumericType</name><operator>.</operator><name>DOUBLE</name></name></expr>;</return>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>Query</name></type> <name>getRangeQuery</name><parameter_list>(<parameter><decl><type><name>QParser</name></type> <name>parser</name></decl></parameter>, <parameter><decl><type><name>SchemaField</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>minInclusive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>maxInclusive</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>int</name></type> <name>ps</name> <init>= <expr><name>precisionStep</name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">473</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">496</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
   <expr><specifier>public</specifier> <name>StorableField</name> <call><name>createField</name><argument_list>(<argument><expr><name>SchemaField</name> <name>field</name></expr></argument>, <argument><expr><name>Object</name> <name>value</name></expr></argument>, <argument><expr><name>float</name> <name>boost</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>boolean</name> <name>indexed</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call></expr>;
     <name>boolean</name> <name>stored</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>stored</name></name><argument_list>()</argument_list></call></block></expr>;
    <name>boolean</name> <name>docValues</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
 
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>indexed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>stored</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>indexed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>stored</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>docValues</name></expr>)</condition> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>log</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring unindexed/unstored field: "</literal> <operator>+</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">549</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
     <return>return <expr><name>f</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>createFields</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sf</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>StorableField</name></type> <name>field</name> <init>= <expr><call><name>createField</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>bits</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Integer</name> <operator>||</operator> <call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Long</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Float</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>floatValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <assert>assert <expr><call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Double</name></expr>;</assert>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name><name>Double</name><operator>.</operator><name>doubleToLongBits</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>numericValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NumericDocValuesField</name><argument_list>(<argument><expr><call><name><name>sf</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name>createField</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

   <enum><specifier>public</specifier> enum <name>TrieTypes</name> <block>{
     <decl><name>INTEGER</name></decl>,
     <decl><name>LONG</name></decl>,
@@ -586,6 +632,13 @@ public <decl><name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
     }</block></decl>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   }</block></enum>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>checkSchemaField</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name><name>field</name><operator>.</operator><name>isRequired</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>field</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>this</name> <operator>+</operator> <literal type="string">" has doc values enabled, but has no default value and is not required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
 
 <class>class <name>TrieDateFieldSource</name> <super_list><extends>extends <super><name>LongFieldSource</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">605</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">658</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <name>class</name> <name>TrieDateFieldSource</name> extends <name>LongFieldSource</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>Object</name> <call><name>longToObject</name><argument_list>(<argument><expr><name>long</name> <name>val</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>Date</name> <call><name>longToObject</name><argument_list>(<argument><expr><name>long</name> <name>val</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name>String</name> <call><name>longToString</name><argument_list>(<argument><expr><name>long</name> <name>val</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name><name>TrieField</name><operator>.</operator><name>dateField</name><operator>.</operator><name>toExternal</name></name><argument_list>(<argument><expr><call><name>longToObject</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>long</name></type> <name>externalToLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>extVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>TrieField</name><operator>.</operator><name>dateField</name><operator>.</operator><name>parseMath</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>

 }</block></class>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>UUIDField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>UUIDField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>df45a705944</name><operator>..</operator><literal type="number">33c95b72c51</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>UUIDField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>UUIDField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>GeneralField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DocumentBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DocumentBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1729951020b</literal><operator>..</operator><literal type="number">6ce5c9ede38</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DocumentBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DocumentBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>StoredField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>StorableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrDocument</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrInputDocument</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrInputField</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocumentBuilder</name> <block>{
     <comment type="line">// we don't check for a null val ourselves because a solr.FieldType</comment>
     <comment type="line">// might actually want to map it to something.  If createField()</comment>
     <comment type="line">// returns null, then we don't store the field.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>sfield</name><operator>.</operator><name>isPolyField</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>StorableField</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>sfield</name><operator>.</operator><name>createFields</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sfield</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>oldValue</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>sfield</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"ERROR: multiple values encountered for non multiValued field "</literal> <operator>+</operator> <call><name><name>sfield</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call>
                    <operator>+</operator> <literal type="string">": first='"</literal> <operator>+</operator> <name>oldValue</name> <operator>+</operator> <literal type="string">"' second='"</literal> <operator>+</operator> <name>val</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Add each field</comment>
        <for>for <control>(<init><decl><type><name>StorableField</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Field</name><operator>)</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>StorableField</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><call><name><name>sfield</name><operator>.</operator><name>createFields</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fields</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sfield</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>oldValue</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>sfield</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"ERROR: multiple values encountered for non multiValued field "</literal> <operator>+</operator> <call><name><name>sfield</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call>
                  <operator>+</operator> <literal type="string">": first='"</literal> <operator>+</operator> <name>oldValue</name> <operator>+</operator> <literal type="string">"' second='"</literal> <operator>+</operator> <name>val</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
       </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>StorableField</name></type> <name>field</name> <init>= <expr><call><name><name>sfield</name><operator>.</operator><name>createField</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>field</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sfield</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>oldValue</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>sfield</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>( <argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>,<argument><expr><literal type="string">"ERROR: multiple values encountered for non multiValued field "</literal> <operator>+</operator> <call><name><name>sfield</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call>
                    <operator>+</operator> <literal type="string">": first='"</literal> <operator>+</operator> <name>oldValue</name> <operator>+</operator> <literal type="string">"' second='"</literal> <operator>+</operator> <name>val</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      <comment type="line">// Add each field</comment>
      <for>for <control>(<init><decl><type><name>StorableField</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Field</name><operator>)</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Field</name><operator>)</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
   </block_content>}</block></else></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocumentBuilder</name> <block>{
 
 
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>void</name> <call><name>addField</name><argument_list>(<argument><expr><name>Document</name> <name>doc</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>field</name></expr></argument>, <argument><expr><name>Object</name> <name>val</name></expr></argument>, <argument><expr><name>float</name> <name>boost</name></expr></argument>)</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>isPolyField</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>StorableField</name><index>[]</index></name></type> <name>farr</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createFields</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>StorableField</name></type> <name>f</name> <range>: <expr><name>farr</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Field</name><operator>)</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// null fields are not added</comment>
      <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt></block></expr>}</block></expr></expr_stmt>
    </block_content>}</block></for> <if_stmt><else>else <block>{<block_content>
      <decl_stmt><decl><type><name>StorableField</name></type> <name>f</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>createField</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Field</name><operator>)</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line">// null fields are not added</comment>
    <for>for <control>(<init><decl><type><name>StorableField</name></type> <name>f</name> <range>: <expr><call><name><name>field</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createFields</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Field</name><operator>)</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// null fields are not added</comment>
     </block_content>}</block></for>
   </block_content>}</block></else></if_stmt>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>bad</name><operator>-</operator><name>schema</name><operator>-</operator><name>docValues</name><operator>-</operator><name>not</name><operator>-</operator><name>required</name><operator>-</operator><name>no</name><operator>-</operator>default<operator>.</operator><name>xml</name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>bad</name><operator>-</operator><name>schema</name><operator>-</operator><name>docValues</name><operator>-</operator><name>not</name><operator>-</operator><name>required</name><operator>-</operator><name>no</name><operator>-</operator>default<operator>.</operator><name>xml</name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..deadd9ac68b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>bad</name><operator>-</operator><name>schema</name><operator>-</operator><name>docValues</name><operator>-</operator><name>not</name><operator>-</operator><name>required</name><operator>-</operator><name>no</name><operator>-</operator>default<operator>.</operator><name>xml</name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">33</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><ternary><condition><expr><literal type="string">"1.0"</literal></expr> ?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
 <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name> <name>or</name> <name>more</name>
 <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name> <name>distributed</name> <name>with</name>
 <name>this</name> <name>work</name></expr></then></ternary></expr></then></ternary></expr></expr_stmt> <for>for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal>
 <operator>(</operator><name>the</name> <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name> <name>with</name>
 <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

     <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

 <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
 <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
 <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
 <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
 limitations under the License.
--&gt;

&lt;schema name="bad-schema-docValues-not-required-no-default" version="1.0"&gt;
  &lt;types&gt;
    &lt;fieldType name="string" class="solr.StrField" /&gt;
 &lt;/types&gt;


 &lt;fields&gt;
   &lt;!-- docValues must be required or have a default value --&gt;
   &lt;field name="id" type="string" docValues="true" multiValued="false"/&gt;
 &lt;/fields&gt;

 &lt;defaultSearchField&gt;id&lt;/defaultSearchField&gt;
 &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;

&lt;/schema&gt;
diff --git a/solr/core/src/test-files/solr/collection1/conf/bad-schema-unsupported-docValues.xml b/solr/core/src/test-files/solr/collection1/conf/bad-schema-unsupported-docValues.xml
new file mode 100644
index 00000000000..5f4d69a31a7
-- /dev/null
++ b/solr/core/src/test-files/solr/collection1/conf/bad-schema-unsupported-docValues.xml
@@ -0<operator>,</operator><expr_stmt><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">30</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><ternary><condition><expr><literal type="string">"1.0"</literal></expr> ?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
 <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name> <name>or</name> <name>more</name>
 <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name> <name>distributed</name> <name>with</name>
 <name>this</name> <name>work</name></expr></then></ternary></expr></then></ternary></expr></expr_stmt></for> <for>for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal>
 <operator>(</operator><name>the</name> <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name> <name>with</name>
 <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

     <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

 <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
 <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
 <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
 <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
 limitations under the License.
--&gt;

&lt;schema name="bad-schema-docValues-unsupported" version="1.5"&gt;
  &lt;types&gt;
    &lt;fieldType name="binary" class="solr.BinaryField" /&gt;
 &lt;/types&gt;


 &lt;fields&gt;
   &lt;!-- change the type if BinaryField gets doc values --&gt;
   &lt;field name="id" type="binary" docValues="true"/&gt;
 &lt;/fields&gt;

&lt;/schema&gt;
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml b/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml
new file mode 100644
index 00000000000..63d87997402
-- /dev/null
++ b/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml
@@ -0<operator>,</operator><expr_stmt><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">74</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><ternary><condition><expr><literal type="string">"1.0"</literal></expr> ?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
 <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name> <name>or</name> <name>more</name>
 <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name> <name>distributed</name> <name>with</name>
 <name>this</name> <name>work</name></expr></then></ternary></expr></then></ternary></expr></expr_stmt></for> <for>for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal>
 <operator>(</operator><name>the</name> <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name> <name>with</name>
 <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

     <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

 <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
 <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
 <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
 <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
 limitations under the License.
--&gt;

&lt;!-- The Solr schema file. This file should be named "schema.xml" and
     should be located where the classloader for the Solr webapp can find it.

     This schema is used for testing<operator>,</operator> <expr_stmt><expr><name>and</name> <name>as</name> <name>such</name> <name>has</name> <name>everything</name> <name>and</name> <name>the</name>
     <name>kitchen</name> <name>sink</name> <name>thrown</name> <name><name>in</name><operator>.</operator> <name>See</name></name> <name>example</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema</name><operator>.</operator><name>xml</name></name></expr></expr_stmt></for> <for>for a
     more concise example.

  --&gt;

&lt;schema name="schema-docValues" version="1.5"&gt;
  &lt;types&gt;

    &lt;!-- field type definitions... note that the "name" attribute is
         just a label to be used by field definitions.  The "class"
         attribute and any other attributes determine the real type and
         behavior of the fieldtype.
      --&gt;

    &lt;!-- numeric field types that store and index the text
         value verbatim <control>(<init><expr><name>and</name> <name>hence</name> <name>don</name><literal type="char">'t sort correctly or support range queries.)
         These are provided more for backward compatability, allowing one
         to create a schema that matches an existing lucene index.
    --&gt;
    &lt;fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;
    &lt;fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;
    &lt;fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;
    &lt;fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;
    &lt;!-- format for date is 1995-12-31T23:59:59.999Z and only the fractional
         seconds part (.999) is optional.
      --&gt;
    &lt;fieldtype name="date" class="solr.TrieDateField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;

    &lt;fieldtype name="boolean" class="solr.BoolField" /&gt;
    &lt;fieldtype name="string" class="solr.StrField" /&gt;

    &lt;fieldType name="uuid" class="solr.UUIDField" /&gt;

  &lt;/types&gt;


  &lt;fields&gt;

    &lt;field name="id" type="string" required="true" /&gt;

    &lt;field name="floatdv" type="float" indexed="false" stored="false" docValues="true" default="1" /&gt;
    &lt;field name="intdv" type="int" indexed="false" stored="false" docValues="true" default="2" /&gt;
    &lt;field name="doubledv" type="double" indexed="false" stored="false" docValues="true" default="3" /&gt;
    &lt;field name="longdv" type="long" indexed="false" stored="false" docValues="true" default="4" /&gt;
    &lt;field name="datedv" type="date" indexed="false" stored="false" docValues="true" default="1995-12-31T23:59:59.999Z" /&gt;

    &lt;field name="stringdv" type="string" indexed="false" stored="false" docValues="true" default="solr" /&gt;
  &lt;/fields&gt;

  &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;

&lt;/schema&gt;
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema.xml b/solr/core/src/test-files/solr/collection1/conf/schema.xml
index 417d7dbf5ca..cfa31d1f1d2 100644
-- a/solr/core/src/test-files/solr/collection1/conf/schema.xml
++ b/solr/core/src/test-files/solr/collection1/conf/schema.xml
@@ -567,7 +567,7 @@
 
    &lt;field name="textgap" type="textgap" indexed="true" stored="true"/&gt;
 
   &lt;field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/&gt;
   &lt;field name="timestamp" type="date" indexed="true" stored="true" docValues="true" default="NOW" multiValued="false"/&gt;
    &lt;field name="multiDefault" type="string" indexed="true" stored="true" default="muLti-Default" multiValued="true"/&gt;
    &lt;field name="intDefault" type="int" indexed="true" stored="true" default="42" multiValued="false"/&gt;
 
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema_codec.xml b/solr/core/src/test-files/solr/collection1/conf/schema_codec.xml
index e28cec73722..15074809892 100644
-- a/solr/core/src/test-files/solr/collection1/conf/schema_codec.xml
++ b/solr/core/src/test-files/solr/collection1/conf/schema_codec.xml
@@ -20,18 +20,29 @@
   &lt;fieldType name="string_pulsing" class="solr.StrField" postingsFormat="Pulsing41"/&gt;
   &lt;fieldType name="string_simpletext" class="solr.StrField" postingsFormat="SimpleText"/&gt;
   &lt;fieldType name="string_standard" class="solr.StrField" postingsFormat="Lucene41"/&gt;
    &lt;fieldType name="string" class="solr.StrField" /&gt;
  

  &lt;fieldType name="string_disk" class="solr.StrField" docValuesFormat="Disk" /&gt;
  &lt;fieldType name="string_memory" class="solr.StrField" docValuesFormat="Lucene42" /&gt;

  &lt;fieldType name="string" class="solr.StrField" /&gt;

  &lt;/types&gt;
  &lt;fields&gt;
    &lt;field name="string_pulsing_f" type="string_pulsing" indexed="true" stored="true" /&gt;
    &lt;field name="string_simpletext_f" type="string_simpletext" indexed="true" stored="true" /&gt;
    &lt;field name="string_standard_f" type="string_standard" indexed="true" stored="true" /&gt;
   &lt;field name="string_f" type="string" indexed="true" stored="true" /&gt;

   &lt;field name="string_disk_f" type="string_disk" indexed="false" stored="false" docValues="true" default="" /&gt;
   &lt;field name="string_memory_f" type="string_memory" indexed="false" stored="false" docValues="true" default="" /&gt;

   &lt;field name="string_f" type="string" indexed="true" stored="true" docValues="true" required="true"/&gt;

    &lt;dynamicField name="*_simple" type="string_simpletext"  indexed="true" stored="true"/&gt;
    &lt;dynamicField name="*_pulsing" type="string_pulsing"  indexed="true" stored="true"/&gt;
    &lt;dynamicField name="*_standard" type="string_standard"  indexed="true" stored="true"/&gt;
   

   &lt;dynamicField name="*_disk" type="string_disk" indexed="false" stored="false" docValues="true" default="" /&gt;
   &lt;dynamicField name="*_memory" type="string_memory" indexed="false" stored="false" docValues="true" default="" /&gt;
  &lt;/fields&gt;
   &lt;defaultSearchField&gt;string_f&lt;/defaultSearchField&gt;
  &lt;uniqueKey&gt;string_f&lt;/uniqueKey&gt;
diff --git a/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java b/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java
index a49fbf98397..049723fb739 100644
-- a/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java
++ b/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java
@@ -20,6 +20,7 @@ package org.apache.solr.core;
 import java.util.Map;
 
 import org.apache.lucene.codecs.Codec;
import org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat;
 import org.apache.lucene.codecs.perfield.PerFieldPostingsFormat;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.schema.SchemaField;
@@ -47,7 +48,21 @@ public class TestCodecSupport extends SolrTestCaseJ4 {
     assertEquals("Lucene41", format.getPostingsFormatForField(schemaField.getName()).getName());
   }
 
  public void testDynamicFields() {
  public void testDocValuesFormats() {
    Codec codec = h.getCore().getCodec();
    Map&lt;String, SchemaField&gt; fields = h.getCore().getSchema().getFields();
    SchemaField schemaField = fields.get("string_disk_f");
    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();
    assertEquals("Disk", format.getDocValuesFormatForField(schemaField.getName()).getName());
    schemaField = fields.get("string_memory_f");
    assertEquals("Lucene42",
        format.getDocValuesFormatForField(schemaField.getName()).getName());
    schemaField = fields.get("string_f");
    assertEquals("Lucene42",
        format.getDocValuesFormatForField(schemaField.getName()).getName());
  }

  public void testDynamicFieldsPostingsFormats() {
     Codec codec = h.getCore().getCodec();
     PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();
 
@@ -59,6 +74,16 @@ public class TestCodecSupport extends SolrTestCaseJ4 {
     assertEquals("Lucene41", format.getPostingsFormatForField("bar_standard").getName());
   }
 
  public void testDynamicFieldsDocValuesFormats() {
    Codec codec = h.getCore().getCodec();
    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();

    assertEquals("Disk", format.getDocValuesFormatForField("foo_disk").getName());
    assertEquals("Disk", format.getDocValuesFormatForField("bar_disk").getName());
    assertEquals("Lucene42", format.getDocValuesFormatForField("foo_memory").getName());
    assertEquals("Lucene42", format.getDocValuesFormatForField("bar_memory").getName());
  }

   public void testUnknownField() {
     Codec codec = h.getCore().getCodec();
     PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();
diff --git a/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
index 78cf362bdc3..0fa83fea53e 100644
-- a/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
++ b/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
@@ -75,6 +75,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
   public void doTestFieldStatisticsResult(String f) throws Exception {
     assertU(adoc("id", "1", f, "-10"));
     assertU(adoc("id", "2", f, "-20"));
    assertU(commit());
     assertU(adoc("id", "3", f, "-30"));
     assertU(adoc("id", "4", f, "-40"));
     assertU(commit());
@@ -205,6 +206,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
   public void doTestFieldStatisticsMissingResult(String f) throws Exception {
     assertU(adoc("id", "1", f, "-10"));
     assertU(adoc("id", "2", f, "-20"));
    assertU(commit());
     assertU(adoc("id", "3"));
     assertU(adoc("id", "4", f, "-40"));
     assertU(commit());
@@ -224,6 +226,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
   public void doTestFacetStatisticsResult(String f) throws Exception {
     assertU(adoc("id", "1", f, "10", "active_s", "true",  "other_s", "foo"));
     assertU(adoc("id", "2", f, "20", "active_s", "true",  "other_s", "bar"));
    assertU(commit());
     assertU(adoc("id", "3", f, "30", "active_s", "false", "other_s", "foo"));
     assertU(adoc("id", "4", f, "40", "active_s", "false", "other_s", "foo"));
     assertU(commit());
@@ -257,6 +260,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
   public void doTestFacetStatisticsMissingResult(String f) throws Exception {
       assertU(adoc("id", "1", f, "10", "active_s", "true"));
       assertU(adoc("id", "2", f, "20", "active_s", "true"));
      assertU(commit());
       assertU(adoc("id", "3", "active_s", "false"));
       assertU(adoc("id", "4", f, "40", "active_s", "false"));
       assertU(commit());
@@ -288,6 +292,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     SolrCore core = h.getCore();
     assertU(adoc("id", "1"));
     assertU(adoc("id", "2"));
    assertU(commit());
     assertU(adoc("id", "3"));
     assertU(adoc("id", "4"));
     assertU(commit());
@@ -307,6 +312,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     SolrCore core = h.getCore();
     assertU(adoc("id", "1"));
     assertU(adoc("id", "2"));
    assertU(commit());
     assertU(adoc("id", "3"));
     assertU(adoc("id", "4"));
     assertU(commit());
@@ -328,6 +334,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
 
     assertU(adoc("id", "1"));
     assertU(adoc("id", "2"));
    assertU(commit());
     assertU(adoc("id", "3"));
     assertU(commit());
 
@@ -347,6 +354,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     SchemaField foo_ss = core.getSchema().getField("foo_ss");
 
     assertU(adoc("id", "1", "active_i", "1", "foo_ss", "aa" ));
    assertU(commit());
     assertU(adoc("id", "2", "active_i", "1", "foo_ss", "bb" ));
     assertU(adoc("id", "3", "active_i", "5", "foo_ss", "aa" ));
     assertU(commit());
diff --git a/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java b/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
index 6c9e6fbf18a..746fd48f1b1 100644
-- a/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
++ b/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
@@ -19,8 +19,6 @@ package org.apache.solr.schema;
 
 import org.apache.solr.core.AbstractBadConfigTestBase;
 
import java.util.regex.Pattern;

 public class BadIndexSchemaTest extends AbstractBadConfigTestBase {
 
   private void doTest(final String schema, final String errString) 
@@ -83,5 +81,12 @@ public class BadIndexSchemaTest extends AbstractBadConfigTestBase {
     doTest("bad-schema-codec-global-vs-ft-mismatch.xml", "codec does not support");
   }
 
  public void testDocValuesNotRequiredNoDefault() throws Exception {
    doTest("bad-schema-docValues-not-required-no-default.xml", "has no default value and is not required");
  }

  public void testDocValuesUnsupported() throws Exception {
    doTest("bad-schema-unsupported-docValues.xml", "does not support doc values");
  }
 
 }
diff --git a/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java b/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java
index 04f363730ba..4c3af76a9cc 100644
-- a/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java
++ b/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java
@@ -23,6 +23,7 @@ import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 
import java.util.List;
 import java.util.Random;
 import java.util.Set;
 
@@ -71,18 +72,18 @@ public class CurrencyFieldTest extends SolrTestCaseJ4 {
     FieldType tmp = amount.getType();
     assertTrue(tmp instanceof CurrencyField);
     String currencyValue = "1.50,EUR";
    StorableField[] fields = amount.createFields(currencyValue, 2);
    assertEquals(fields.length, 3);
    List&lt;StorableField&gt; fields = amount.createFields(currencyValue, 2);
    assertEquals(fields.size(), 3);
 
     // First field is currency code, second is value, third is stored.
     for (int i = 0; i &lt; 3; i++) {
      boolean hasValue = fields[i].readerValue() != null
              || fields[i].numericValue() != null
              || fields[i].stringValue() != null;
      assertTrue("Doesn'</literal><name>t</name> <name>have</name> <name>a</name> <name>value</name><operator>:</operator> <literal type="string">" + fields[i], hasValue);
      boolean hasValue = fields.get(i).readerValue() != null
              || fields.get(i).numericValue() != null
              || fields.get(i).stringValue() != null;
      assertTrue("</literal><name>Doesn</name><literal type="char">'t have a value: " + fields.get(i), hasValue);
     }
 
    assertEquals(schema.getFieldTypeByName("string").toExternal(fields[2]), "1.50,EUR");
    assertEquals(schema.getFieldTypeByName("string").toExternal(fields.get(2)), "1.50,EUR");
     
     // A few tests on the provider directly
     ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();
diff --git a/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java b/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
new file mode 100644
index 00000000000..374abf903b5
-- /dev/null
++ b/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
@@ -0,0 +1,230 @@
package org.apache.solr.schema;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.IOException;

import org.apache.lucene.index.AtomicReader;
import org.apache.lucene.index.FieldInfo.DocValuesType;
import org.apache.lucene.index.FieldInfos;
import org.apache.lucene.queries.function.FunctionValues;
import org.apache.solr.SolrTestCaseJ4;
import org.apache.solr.core.SolrCore;
import org.apache.solr.search.SolrIndexSearcher;
import org.apache.solr.util.RefCounted;
import org.junit.BeforeClass;

public class DocValuesTest extends SolrTestCaseJ4 {

  @BeforeClass
  public static void beforeTests() throws Exception {
    initCore("solrconfig-basic.xml", "schema-docValues.xml");
  }

  public void setUp() throws Exception {
    super.setUp();
    assertU(delQ("*:*"));
  }

  public void testDocValues() throws IOException {
    assertU(adoc("id", "1"));
    commit();
    SolrCore core = h.getCoreInc();
    try {
      final RefCounted&lt;SolrIndexSearcher&gt; searcherRef = core.openNewSearcher(true, true);
      final SolrIndexSearcher searcher = searcherRef.get();
      try {
        final AtomicReader reader = searcher.getAtomicReader();
        assertEquals(1, reader.numDocs());
        final FieldInfos infos = reader.getFieldInfos();
        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo("floatdv").getDocValuesType());
        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo("intdv").getDocValuesType());
        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo("doubledv").getDocValuesType());
        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo("longdv").getDocValuesType());
        assertEquals(DocValuesType.SORTED, infos.fieldInfo("stringdv").getDocValuesType());

        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues("floatdv").get(0));
        assertEquals(2L, reader.getNumericDocValues("intdv").get(0));
        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues("doubledv").get(0));
        assertEquals(4L, reader.getNumericDocValues("longdv").get(0));

        final IndexSchema schema = core.getSchema();
        final SchemaField floatDv = schema.getField("floatdv");
        final SchemaField intDv = schema.getField("intdv");
        final SchemaField doubleDv = schema.getField("doubledv");
        final SchemaField longDv = schema.getField("longdv");

        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));
        assertEquals(1f, values.floatVal(0), 0f);
        assertEquals(1f, values.objectVal(0));
        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));
        assertEquals(2, values.intVal(0));
        assertEquals(2, values.objectVal(0));
        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));
        assertEquals(3d, values.doubleVal(0), 0d);
        assertEquals(3d, values.objectVal(0));
        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));
        assertEquals(4L, values.longVal(0));
        assertEquals(4L, values.objectVal(0));
      } finally {
        searcherRef.decref();
      }
    } finally {
      core.close();
    }
  }

  public void testDocValuesSorting() {
    assertU(adoc("id", "1", "floatdv", "2", "intdv", "3", "doubledv", "4", "longdv", "5", "datedv", "1995-12-31T23:59:59.999Z", "stringdv", "b"));
    assertU(adoc("id", "2", "floatdv", "5", "intdv", "4", "doubledv", "3", "longdv", "2", "datedv", "1997-12-31T23:59:59.999Z", "stringdv", "a"));
    assertU(adoc("id", "3", "floatdv", "3", "intdv", "1", "doubledv", "2", "longdv", "1", "datedv", "1996-12-31T23:59:59.999Z", "stringdv", "c"));
    assertU(adoc("id", "4"));
    assertU(commit());
    assertQ(req("q", "*:*", "sort", "floatdv desc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">2</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "intdv desc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">2</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "doubledv desc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "longdv desc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "datedv desc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">2</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "stringdv desc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">4</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "floatdv asc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">4</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "intdv asc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">3</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "doubledv asc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">3</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "longdv asc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">3</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "datedv asc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "sort", "stringdv asc", "rows", "1", "fl", "id"),
        "//str[@name='</literal><name>id</name><literal type="char">'][.='</literal><literal type="number">2</literal><literal type="char">']");
  }

  public void testDocValuesFaceting() {
    for (int i = 0; i &lt; 50; ++i) {
      assertU(adoc("id", "" + i));
    }
    for (int i = 0; i &lt; 50; ++i) {
      if (rarely()) {
        commit(); // to have several segments
      }
      assertU(adoc("id", "1000" + i, "floatdv", "" + i, "intdv", "" + i, "doubledv", "" + i, "longdv", "" + i, "datedv", (1900+i) + "-12-31T23:59:59.999Z", "stringdv", "abc" + i));
    }
    assertU(commit());
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "longdv", "facet.sort", "count", "facet.limit", "1"),
        "//lst[@name='</literal><name>longdv</name><literal type="char">']/int[@name='</literal><literal type="number">4</literal><literal type="char">'][.='</literal><literal type="number">51</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "longdv", "facet.sort", "count", "facet.offset", "1", "facet.limit", "1"),
        "//lst[@name='</literal><name>longdv</name><literal type="char">']/int[@name='</literal><literal type="number">0</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "longdv", "facet.sort", "index", "facet.offset", "33", "facet.limit", "1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>longdv</name><literal type="char">']/int[@name='</literal><literal type="number">33</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");

    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "floatdv", "facet.sort", "count", "facet.limit", "1"),
        "//lst[@name='</literal><name>floatdv</name><literal type="char">']/int[@name='</literal><literal type="number">1.0</literal><literal type="char">'][.='</literal><literal type="number">51</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "floatdv", "facet.sort", "count", "facet.offset", "1", "facet.limit", "-1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>floatdv</name><literal type="char">']/int[@name='</literal><literal type="number">0.0</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "floatdv", "facet.sort", "index", "facet.offset", "33", "facet.limit", "1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>floatdv</name><literal type="char">']/int[@name='</literal><literal type="number">33.0</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");

    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "doubledv", "facet.sort", "count", "facet.limit", "1"),
        "//lst[@name='</literal><name>doubledv</name><literal type="char">']/int[@name='</literal><literal type="number">3.0</literal><literal type="char">'][.='</literal><literal type="number">51</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "doubledv", "facet.sort", "count", "facet.offset", "1", "facet.limit", "-1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>doubledv</name><literal type="char">']/int[@name='</literal><literal type="number">0.0</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "doubledv", "facet.sort", "index", "facet.offset", "33", "facet.limit", "1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>doubledv</name><literal type="char">']/int[@name='</literal><literal type="number">33.0</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");

    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "intdv", "facet.sort", "count", "facet.limit", "1"),
        "//lst[@name='</literal><name>intdv</name><literal type="char">']/int[@name='</literal><literal type="number">2</literal><literal type="char">'][.='</literal><literal type="number">51</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "intdv", "facet.sort", "count", "facet.offset", "1", "facet.limit", "-1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>intdv</name><literal type="char">']/int[@name='</literal><literal type="number">0</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "intdv", "facet.sort", "index", "facet.offset", "33", "facet.limit", "1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>intdv</name><literal type="char">']/int[@name='</literal><literal type="number">33</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");

    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "datedv", "facet.sort", "count", "facet.limit", "1"),
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/int[@name='</literal><literal type="number">1995</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "datedv", "facet.sort", "count", "facet.offset", "1", "facet.limit", "-1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/int[@name='</literal><literal type="number">1900</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
    assertQ(req("q", "*:*", "facet", "true", "rows", "0", "facet.field", "datedv", "facet.sort", "index", "facet.offset", "33", "facet.limit", "1", "facet.mincount", "1"),
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/int[@name='</literal><literal type="number">1933</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">'][.='</literal><literal type="number">1</literal><literal type="char">']");
  }

  public void testDocValuesStats() {
    for (int i = 0; i &lt; 50; ++i) {
      assertU(adoc("id", "1000" + i, "floatdv", "" + i%2, "intdv", "" + i%3, "doubledv", "" + i%4, "longdv", "" + i%5, "datedv", (1900+i%6) + "-12-31T23:59:59.999Z", "stringdv", "abc" + i%7));
      if (rarely()) {
        commit(); // to have several segments
      }
    }
    assertU(commit());

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "stringdv"),
        "//str[@name='</literal><name>min</name><literal type="char">'][.='</literal><name>abc0</name><literal type="char">']",
        "//str[@name='</literal><name>max</name><literal type="char">'][.='</literal><name>abc6</name><literal type="char">']",
        "//long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "floatdv"),
        "//double[@name='</literal><name>min</name><literal type="char">'][.='</literal><literal type="number">0.0</literal><literal type="char">']",
        "//double[@name='</literal><name>max</name><literal type="char">'][.='</literal><literal type="number">1.0</literal><literal type="char">']",
        "//long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']",
        "//double[@name='</literal><name>sum</name><literal type="char">'][.='</literal><literal type="number">25.0</literal><literal type="char">']",
        "//double[@name='</literal><name>mean</name><literal type="char">'][.='</literal><literal type="number">0.5</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "intdv"),
        "//double[@name='</literal><name>min</name><literal type="char">'][.='</literal><literal type="number">0.0</literal><literal type="char">']",
        "//double[@name='</literal><name>max</name><literal type="char">'][.='</literal><literal type="number">2.0</literal><literal type="char">']",
        "//long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']",
        "//double[@name='</literal><name>sum</name><literal type="char">'][.='</literal><literal type="number">49.0</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "doubledv"),
        "//double[@name='</literal><name>min</name><literal type="char">'][.='</literal><literal type="number">0.0</literal><literal type="char">']",
        "//double[@name='</literal><name>max</name><literal type="char">'][.='</literal><literal type="number">3.0</literal><literal type="char">']",
        "//long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']",
        "//double[@name='</literal><name>sum</name><literal type="char">'][.='</literal><literal type="number">73.0</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "longdv"),
        "//double[@name='</literal><name>min</name><literal type="char">'][.='</literal><literal type="number">0.0</literal><literal type="char">']",
        "//double[@name='</literal><name>max</name><literal type="char">'][.='</literal><literal type="number">4.0</literal><literal type="char">']",
        "//long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']",
        "//double[@name='</literal><name>sum</name><literal type="char">'][.='</literal><literal type="number">100.0</literal><literal type="char">']",
        "//double[@name='</literal><name>mean</name><literal type="char">'][.='</literal><literal type="number">2.0</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "datedv"),
        "//date[@name='</literal><name>min</name><literal type="char">'][.='</literal><literal type="number">1900</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']",
        "//date[@name='</literal><name>max</name><literal type="char">'][.='</literal><literal type="number">1905</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']",
        "//long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">50</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "floatdv", "stats.facet", "intdv"),
        "//lst[@name='</literal><name>intdv</name><literal type="char">']/lst[@name='</literal><literal type="number">0</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">17</literal><literal type="char">']",
        "//lst[@name='</literal><name>intdv</name><literal type="char">']/lst[@name='</literal><literal type="number">1</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">17</literal><literal type="char">']",
        "//lst[@name='</literal><name>intdv</name><literal type="char">']/lst[@name='</literal><literal type="number">2</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">16</literal><literal type="char">']");

    assertQ(req("q", "*:*", "stats", "true", "rows", "0", "stats.field", "floatdv", "stats.facet", "datedv"),
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/lst[@name='</literal><literal type="number">1900</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">9</literal><literal type="char">']",
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/lst[@name='</literal><literal type="number">1901</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">9</literal><literal type="char">']",
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/lst[@name='</literal><literal type="number">1902</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">8</literal><literal type="char">']",
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/lst[@name='</literal><literal type="number">1903</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">8</literal><literal type="char">']",
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/lst[@name='</literal><literal type="number">1904</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">8</literal><literal type="char">']",
        "//lst[@name='</literal><name>datedv</name><literal type="char">']/lst[@name='</literal><literal type="number">1905</literal><operator>-</operator><literal type="number">12</literal><operator>-</operator><literal type="number">31T23</literal><operator>:</operator><literal type="number">59</literal><operator>:</operator><literal type="number">59.999Z</literal><literal type="char">']/long[@name='</literal><name>count</name><literal type="char">'][.='</literal><literal type="number">8</literal><literal type="char">']");
  }

}
diff --git a/solr/core/src/test/org/apache/solr/schema/PolyFieldTest.java b/solr/core/src/test/org/apache/solr/schema/PolyFieldTest.java
index 87973e36293..d92487a71f8 100644
-- a/solr/core/src/test/org/apache/solr/schema/PolyFieldTest.java
++ b/solr/core/src/test/org/apache/solr/schema/PolyFieldTest.java
@@ -16,8 +16,9 @@ package org.apache.solr.schema;
  * limitations under the License.
  */
 
import java.util.List;

 import org.apache.lucene.queries.function.ValueSource;
import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
@@ -84,14 +85,14 @@ public class PolyFieldTest extends SolrTestCaseJ4 {
     assertEquals(pt.getDimension(), 2);
     double[] xy = new double[]{35.0, -79.34};
     String point = xy[0] + "," + xy[1];
    StorableField[] fields = home.createFields(point, 2);
    assertEquals(fields.length, 3);//should be 3, we have a stored field
    List&lt;StorableField&gt; fields = home.createFields(point, 2);
    assertEquals(fields.size(), 3);//should be 3, we have a stored field
     //first two fields contain the values, third is just stored and contains the original
     for (int i = 0; i &lt; 3; i++) {
      boolean hasValue = fields[i].binaryValue() != null
          || fields[i].stringValue() != null
          || fields[i].numericValue() != null;
      assertTrue("Doesn'</literal><name>t</name> <name>have</name> <name>a</name> <name>value</name><operator>:</operator> <literal type="string">" + fields[i], hasValue);
      boolean hasValue = fields.get(i).binaryValue() != null
          || fields.get(i).stringValue() != null
          || fields.get(i).numericValue() != null;
      assertTrue("</literal><name>Doesn</name><literal type="char">'t have a value: " + fields.get(i), hasValue);
     }
     /*assertTrue("first field " + fields[0].tokenStreamValue() +  " is not 35.0", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));
     assertTrue("second field is not -79.34", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));
@@ -101,7 +102,7 @@ public class PolyFieldTest extends SolrTestCaseJ4 {
     home = schema.getField("home_ns");
     assertNotNull(home);
     fields = home.createFields(point, 2);
    assertEquals(fields.length, 2);//should be 2, since we aren'</literal><name>t</name> <name>storing</name>
    <call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</init><comment type="line">//should be 2, since we aren't storing</comment>
 
     <condition><expr><name>home</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"home_ns"</literal></expr></argument>)</argument_list></call></expr>;</condition>
     <incr><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</incr>
diff --git a/solr/example/solr/collection1/conf/schema.xml b/solr/example/solr/collection1/conf/schema.xml
index caaf5036dce..cc87d86bd24 100755
-- a/solr/example/solr/collection1/conf/schema.xml
++ b/solr/example/solr/collection1/conf/schema.xml
@@ -70<operator>,</operator>6 +70<operator>,</operator>15 @@
        &lt;types&gt; fieldType section
      indexed: true if this field should be indexed (searchable or sortable)</control>
      <label><name>stored</name>:</label> <expr_stmt><expr><literal type="boolean">true</literal></expr></expr_stmt></for> <if_stmt><if>if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting<operator>,</operator> <expr_stmt><expr><name>grouping</name></expr><operator>,</operator> <expr><name>sorting</name> <name>and</name> <name>function</name> <name><name>queries</name><operator>.</operator> <name>Although</name></name> <name>not</name>
       <name>required</name></expr><operator>,</operator> <expr><name>doc</name> <name>values</name> <name>will</name> <name>make</name> <name>the</name> <name>index</name> <name>faster</name> <name>to</name> <name>load</name></expr><operator>,</operator> <expr><name>more</name>
       <name>NRT</name><operator>-</operator><name>friendly</name> <name>and</name> <name>more</name> <name>memory</name><operator>-</operator><name><name>efficient</name><operator>.</operator> <name>They</name></name> <name>however</name> <name>come</name> <name>with</name> <name>some</name>
       <name>limitations</name><operator>:</operator> <name>they</name> <name>are</name> <name>currently</name> <name>only</name> <name>supported</name> <name>by</name> <name>StrField</name></expr><operator>,</operator> <expr><name>UUIDField</name>
       <name>and</name> <name>all</name> <name>Trie</name><operator>*</operator><name>Fields</name></expr><operator>,</operator> <expr><name>and</name> <name>depending</name> <name>on</name> <name>the</name> <name>field</name> <name>type</name></expr><operator>,</operator> <expr><name>they</name> <name>might</name>
       <name>require</name> <name>the</name> <name>field</name> <name>to</name> <name>be</name> <name>single</name><operator>-</operator><name>valued</name></expr><operator>,</operator> <expr><name>be</name> <name>required</name> <name>or</name> <name>have</name> <name>a</name> default
       <call><name>value</name> <argument_list>(<argument><expr><name>check</name> <name>the</name> <name>documentation</name> <name>of</name> <name>the</name> <name>field</name> <name>type</name> <name>you</name><literal type="char">'</literal></expr></argument></argument_list></call></expr></expr_stmt></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></else></if_stmt></block_content></block></while></block_content></block></function></block_content></block></function></block_content></block></function></block></class>re interested in
       for more information)
      multiValued: true if this field may contain multiple values per document
      omitNorms: (expert) set to true to omit the norms associated with
        this field (this disables length normalization and index-time
@@ -156,6 +165,17 @@
 
    &lt;field name="_version_" type="long" indexed="true" stored="true"/&gt;
 
   &lt;!--
     Some fields such as popularity and manu_exact could be modified to
     leverage doc values:
     &lt;field name="popularity" type="int" indexed="true" stored="true" docValues="true" default="0" /&gt;
     &lt;field name="manu_exact" type="string" indexed="false" stored="false" docValues="true" default="" /&gt;

     Although it would make indexing slightly slower and the index bigger, it
     would also make the index faster to load, more memory-efficient and more
     NRT-friendly.
     --&gt;

    &lt;!-- Uncommenting the following will create a "timestamp" field using
         a default value of "NOW" to indicate when each document was indexed.
      --&gt;
@@ -282,7 +302,10 @@
        standard package such as org.apache.solr.analysis
     --&gt;
 
    &lt;!-- The StrField type is not analyzed, but indexed/stored verbatim. --&gt;
    &lt;!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      --&gt;
     &lt;fieldType name="string" class="solr.StrField" sortMissingLast="true" /&gt;
 
     &lt;!-- boolean type: "true" or "false" --&gt;
@@ -306,6 +329,9 @@
 
     &lt;!--
       Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
     --&gt;
     &lt;fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/&gt;
     &lt;fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/&gt;
- 
2.19.1.windows.1

</unit>
