<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/936aa1dcfc.java"><expr_stmt><expr><name>From</name> <literal type="number">936aa1dcfc914043e90c4a0ef157374f7e3616cb</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Shalin</name> <name>Shekhar</name> <name><name>Mangar</name> <argument_list type="generic">&lt;<argument><name>shalin</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">26</literal> <name>Feb</name> <literal type="number">2015</literal> <literal type="number">06</literal><operator>:</operator><literal type="number">47</literal><operator>:</operator><literal type="number">52</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">7128</literal><operator>:</operator> <name>Two</name> <name>phase</name> <name>distributed</name> <name>search</name> <name>is</name> <name>fetching</name> <name>extra</name>
 <name>fields</name> <name>in</name> <name>GET_TOP_IDS</name> <name>phase</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1662366 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>QueryComponent</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><name><name>ributedQueryComponentOptimizationTest</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">222</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">184</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">51</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">865f5772c70</literal><operator>..</operator><literal type="number">7e40b273e18</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Bug</name> <name>Fixes</name>
 <operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">7113</literal><operator>:</operator> <name>Multiple</name> <name>calls</name> <name>to</name> <name>UpdateLog</name><operator>#</operator><name>init</name> <name>is</name> <name>not</name> <name>thread</name> <name>safe</name> <name>with</name> <name>respect</name> <name>to</name> <name>the</name>
   <name>HDFS</name> <name>FileSystem</name> <name>client</name> <name>object</name> <name><name>usage</name><operator>.</operator></name> (<name>Mark</name> <name>Miller</name></expr><operator>,</operator> <expr><name>Vamsee</name> <name>Yarlagadda</name></expr></expr_stmt>)
 
<expr_stmt><expr><operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">7128</literal><operator>:</operator> <name>Two</name> <name>phase</name> <name>distributed</name> <name>search</name> <name>is</name> <name>fetching</name> <name>extra</name> <name>fields</name> <name>in</name> <name>GET_TOP_IDS</name> <name><name>phase</name><operator>.</operator></name>
  (<name>Pablo</name> <name>Queixalos</name></expr><operator>,</operator> <expr><name>shalin</name></expr></expr_stmt>)

 <expr_stmt><expr><name>Optimizations</name>
 <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>QueryComponent</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>QueryComponent</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a260ca70303</name><operator>..</operator><name>b2f9a84e3d5</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>QueryComponent</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>QueryComponent</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">883</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">883</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryComponent</name> extends <name>SearchComponent</name>
     <call><name><name>sreq</name><operator>.</operator><name>params</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>ResponseBuilder</name><operator>.</operator><name>FIELD_SORT_VALUES</name></name></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// TODO: should this really sendGlobalDfs if just includeScore?</comment>
    <if_stmt><if>if <condition>( <expr><operator>(</operator><call><name><name>rb</name><operator>.</operator><name>getFieldFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>SolrIndexSearcher</name><operator>.</operator><name>GET_SCORES</name></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <call><name><name>rb</name><operator>.</operator><name>getSortSpec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>includesScore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>boolean</name></type> <name>shardQueryIncludeScore</name> <init>= <expr><operator>(</operator><call><name><name>rb</name><operator>.</operator><name>getFieldFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>SolrIndexSearcher</name><operator>.</operator><name>GET_SCORES</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>rb</name><operator>.</operator><name>getSortSpec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>includesScore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>shardQueryIncludeScore</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>sreq</name><operator>.</operator><name>params</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><call><name><name>rb</name><operator>.</operator><name>req</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUniqueKeyField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">",score"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>StatsCache</name></type> <name>statsCache</name> <init>= <expr><call><name><name>rb</name><operator>.</operator><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStatsCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>statsCache</name><operator>.</operator><name>sendGlobalStats</name></name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>sreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else  <block>{<block_content>
      <comment type="line">// reset so that only unique key is requested in shard requests</comment>
      <expr_stmt><expr><call><name><name>sreq</name><operator>.</operator><name>params</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><call><name><name>rb</name><operator>.</operator><name>req</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUniqueKeyField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>shardQueryIncludeScore</name> <init>= <expr><operator>(</operator><call><name><name>rb</name><operator>.</operator><name>getFieldFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>SolrIndexSearcher</name><operator>.</operator><name>GET_SCORES</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>rb</name><operator>.</operator><name>getSortSpec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>includesScore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

     <if_stmt><if>if <condition>(<expr><name>distribSinglePass</name></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>fls</name> <init>= <expr><call><name><name>rb</name><operator>.</operator><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParams</name><argument_list>(<argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>fls</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>fls</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fls</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>fls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">902</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">906</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryComponent</name> extends <name>SearchComponent</name></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>StringBuilder</name></type> <name>additionalFL</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>boolean</name></type> <name>additionalAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>distribSinglePass</name> <operator>||</operator> <operator>!</operator><call><name><name>fields</name><operator>.</operator><name>wantsField</name></name><argument_list>(<argument><expr><name>keyFieldName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>distribSinglePass</name> <operator>||</operator> <operator>!</operator><call><name><name>fields</name><operator>.</operator><name>wantsField</name></name><argument_list>(<argument><expr><name>keyFieldName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><name>additionalAdded</name> <operator>=</operator> <call><name>addFL</name><argument_list>(<argument><expr><name>additionalFL</name></expr></argument>, <argument><expr><name>keyFieldName</name></expr></argument>, <argument><expr><name>additionalAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>distribSinglePass</name> <operator>||</operator> <operator>!</operator><call><name><name>fields</name><operator>.</operator><name>wantsScore</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>shardQueryIncludeScore</name></expr>)</condition><block type="pseudo"><block_content> 
       <expr_stmt><expr><name>additionalAdded</name> <operator>=</operator> <call><name>addFL</name><argument_list>(<argument><expr><name>additionalFL</name></expr></argument>, <argument><expr><literal type="string">"score"</literal></expr></argument>, <argument><expr><name>additionalAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>DistributedQueryComponentOptimizationTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>DistributedQueryComponentOptimizationTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ed328fb75e8</name><operator>..</operator><literal type="number">57733e38aa1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>DistributedQueryComponentOptimizationTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>component</name><operator>/</operator><name><name>DistributedQueryComponentOptimizationTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>component</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>BaseDistributedSearchTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>SolrServerException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>response</name><operator>.</operator><name>QueryResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>ModifiableSolrParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>AbstractFullDistribZkTestBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>CommonParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>params</name><operator>.</operator><name>ShardParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>SimpleOrderedMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>StrUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * Test for QueryComponent's distributed querying optimization.
  * If the "fl" param is just "id" or just "id,score", all document data to return is already fetched by STAGE_EXECUTE_QUERY.
@@ -37,37 +39,39 @@ import java.util.Map;
  *
  * @see QueryComponent
  */</comment>
<class><specifier>public</specifier> class <name>DistributedQueryComponentOptimizationTest</name> <super_list><extends>extends <super><name>BaseDistributedSearchTestCase</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> class <name>DistributedQueryComponentOptimizationTest</name> <super_list><extends>extends <super><name>AbstractFullDistribZkTestBase</name></super></extends></super_list> <block>{
 
   <constructor><specifier>public</specifier> <name>DistributedQueryComponentOptimizationTest</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name>stress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaString</name> <operator>=</operator> <literal type="string">"schema-custom-field.xml"</literal></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUpBeforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig.xml"</literal></expr></argument>, <argument><expr><literal type="string">"schema-custom-field.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>String</name></type> <name>getSolrXml</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"solr-trackingshardhandler.xml"</literal></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Test</name></annotation>
   <annotation>@<name>ShardsFixed</name><argument_list>(<argument><expr><name>num</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>waitForThingsToLevelOut</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><literal type="string">"*:*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x15</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>,                     <comment type="line">//  2</comment>
          <comment type="line">// quick check to prove "*" dynamicField hasn't been broken by somebody mucking with schema</comment>
          <argument><expr><literal type="string">"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"22"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x16</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  5</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"23"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x58</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  8</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"24"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x15</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  4</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"25"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line">//  9</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"6"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"26"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//  3</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"7"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"27"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x73</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  1</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"28"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x4d</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// 11</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"29"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// 10</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"30"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x7c</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line">//  6</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"31"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xff</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xaf</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x9c</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 13</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"32"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x34</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x4d</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">//  7</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"33"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x33</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 12</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x15</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>,                     <comment type="line">//  2</comment>
        <comment type="line">// quick check to prove "*" dynamicField hasn't been broken by somebody mucking with schema</comment>
        <argument><expr><literal type="string">"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"22"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x16</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  5</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"23"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x58</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  8</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"24"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x15</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  4</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"25"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line">//  9</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"6"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"26"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//  3</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"7"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"27"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x73</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//  1</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"28"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x4d</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// 11</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"29"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// 10</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"30"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x7c</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line">//  6</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"31"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xff</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xaf</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x9c</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 13</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"32"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0x34</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x4d</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">//  7</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"test_sS"</literal></expr></argument>, <argument><expr><literal type="string">"33"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x80</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x33</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 12</comment>
     <expr_stmt><expr><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>QueryResponse</name></type> <name>rsp</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueryComponentOptimizationTest</name> extends <name>BaseDistributedSe</name>
     <call><name>compareResponses</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><name>nonDistribRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// make sure distrib and distrib.singlePass return the same thing</comment>
 
     <comment type="line">// verify that the optimization actually works</comment>
    <expr_stmt><expr><call><name>verifySinglePass</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// id only is optimized by default</comment>
    <expr_stmt><expr><call><name>verifySinglePass</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,score"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// id,score only is optimized by default</comment>
    <expr_stmt><expr><call><name>verifySinglePass</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"score"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// id only is optimized by default</comment>
    <expr_stmt><expr><call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,score"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// id,score only is optimized by default</comment>
    <expr_stmt><expr><call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"score"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// SOLR-6545, wild card field list</comment>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"19"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"cat_a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument> ,<argument><expr><literal type="string">"dynamic"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x33</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"19"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"cat_a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"dynamic"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x80</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x34</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>nonDistribRsp</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,*a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,*a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nonDistribRsp</name> <operator>=</operator> <call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,*a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,*a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>assertFieldValues</name><argument_list>(<argument><expr><call><name><name>nonDistribRsp</name><operator>.</operator><name>getResults</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFieldValues</name><argument_list>(<argument><expr><call><name><name>rsp</name><operator>.</operator><name>getResults</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>nonDistribRsp</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,dynamic,cat*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,dynamic,cat*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nonDistribRsp</name> <operator>=</operator> <call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,dynamic,cat*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,dynamic,cat*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFieldValues</name><argument_list>(<argument><expr><call><name><name>nonDistribRsp</name><operator>.</operator><name>getResults</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFieldValues</name><argument_list>(<argument><expr><call><name><name>rsp</name><operator>.</operator><name>getResults</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>verifySinglePass</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,*a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>verifySinglePass</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,dynamic,cat*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,*a_sS"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"id:19"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,dynamic,cat*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload asc"</literal></expr></argument>, <argument><expr><literal type="string">"distrib.singlePass"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// see SOLR-6795, distrib.singlePass=true would return score even when not asked for</comment>
     <expr_stmt><expr><call><name><name>handle</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">127</literal></expr><operator>,</operator><expr><literal type="number">146</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueryComponentOptimizationTest</name> extends <name>BaseDistributedSe</name>
     <call><name><name>handle</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"_version_"</literal></expr></argument>, <argument><expr><name>SKIPVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)</comment>
     <expr_stmt><expr><call><name><name>handle</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"maxScore"</literal></expr></argument>, <argument><expr><name>SKIPVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// this trips the queryWithAsserts function because it uses a custom parser, so just query directly</comment>
     <expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"{!func}id"</literal></expr></argument>, <argument><expr><name><name>ShardParams</name><operator>.</operator><name>DISTRIB_SINGLE_PASS</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796</comment>
    <expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>,<argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>,<argument><expr><literal type="string">"dynamic"</literal></expr></argument>,<argument><expr><literal type="string">"sort"</literal></expr></argument>,<argument><expr><literal type="string">"payload desc"</literal></expr></argument>, <argument><expr><name><name>ShardParams</name><operator>.</operator><name>DISTRIB_SINGLE_PASS</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryWithAsserts</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"dynamic"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"payload desc"</literal></expr></argument>, <argument><expr><name><name>ShardParams</name><operator>.</operator><name>DISTRIB_SINGLE_PASS</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>verifySinglePass</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>q</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SolrServerException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>QueryResponse</name></type> <name>rsp</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ModifiableSolrParams</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>ModifiableSolrParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * This test now asserts that every distrib.singlePass query:
   * &lt;ol&gt;
   * &lt;li&gt;Makes exactly 'numSlices' number of shard requests&lt;/li&gt;
   * &lt;li&gt;Makes no GET_FIELDS requests&lt;/li&gt;
   * &lt;li&gt;Must request the unique key field from shards&lt;/li&gt;
   * &lt;li&gt;Must request the score if 'fl' has score or sort by score is requested&lt;/li&gt;
   * &lt;li&gt;Requests all fields that are present in 'fl' param&lt;/li&gt;
   * &lt;/ol&gt;
   * &lt;p&gt;
   * It also asserts that every regular two phase distribtued search:
   * &lt;ol&gt;
   * &lt;li&gt;Makes at most 2 * 'numSlices' number of shard requests&lt;/li&gt;
   * &lt;li&gt;Must request the unique key field from shards&lt;/li&gt;
   * &lt;li&gt;Must request the score if 'fl' has score or sort by score is requested&lt;/li&gt;
   * &lt;li&gt;Requests no fields other than id and score in GET_TOP_IDS request&lt;/li&gt;
   * &lt;li&gt;Requests exactly the fields that are present in 'fl' param in GET_FIELDS request and no others&lt;/li&gt;
   * &lt;/ol&gt;
   * &lt;p&gt;
   * and also asserts that each query which requests id or score or both behaves exactly like a single pass query
   */</comment>
  <function><type><specifier>private</specifier> <name>QueryResponse</name></type> <name>queryWithAsserts</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>q</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>RequestTrackingQueue</name></name></type> <name>trackingQueue</name> <init>= <expr><operator>new</operator> <call><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>RequestTrackingQueue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// the jettys doesn't include the control jetty which is exactly what we need here</comment>
    <expr_stmt><expr><call><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>setTrackingQueue</name></name><argument_list>(<argument><expr><name>jettys</name></expr></argument>, <argument><expr><name>trackingQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// let's add debug=track to such requests so we can use DebugComponent responses for assertions</comment>
    <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>qq</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[<expr><name><name>q</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qq</name><index>[<expr><name><name>qq</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"debug"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qq</name><index>[<expr><name><name>qq</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"track"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>handle</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><name>SKIPVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QueryResponse</name></type> <name>response</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>qq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>ShardRequestAndParams</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>requests</name> <init>= <expr><call><name><name>trackingQueue</name><operator>.</operator><name>getAllRequests</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numRequests</name> <init>= <expr><call><name>getNumRequests</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>distribSinglePass</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fls</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sortFields</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>ShardParams</name><operator>.</operator><name>DISTRIB_SINGLE_PASS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"distrib.singlePass=true made more requests than number of shards"</literal></expr></argument>,
            <argument><expr><name>numRequests</name> <operator>==</operator> <name>sliceCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>distribSinglePass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>CommonParams</name><operator>.</operator><name>FL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fls</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>StrUtils</name><operator>.</operator><name>splitSmart</name></name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>CommonParams</name><operator>.</operator><name>SORT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><name><name>q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// take care of asc/desc decorators</comment>
        <expr_stmt><expr><call><name><name>sortFields</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>StrUtils</name><operator>.</operator><name>splitSmart</name></name><argument_list>(<argument><expr><call><name><name>StrUtils</name><operator>.</operator><name>splitSmart</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>idScoreFields</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>idScoreFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// id is always requested in GET_TOP_IDS phase</comment>
    <comment type="line">// score is optional, requested only if sorted by score</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>fls</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>sortFields</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>idScoreFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>idScoreFields</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>fls</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// if id and/or score are the only fields being requested then we implicitly turn on distribSinglePass=true</comment>
      <expr_stmt><expr><name>distribSinglePass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>distribSinglePass</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>debugMap</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>getDebugMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>track</name> <init>= <expr><operator>(</operator><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>debugMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"track"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>track</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"EXECUTE_QUERY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"A single pass request should not have a GET_FIELDS phase"</literal></expr></argument>, <argument><expr><call><name><name>track</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"GET_FIELDS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// all fields should be requested in one go but even if 'id' is not requested by user</comment>
      <comment type="line">// it must still be fetched in this phase to merge correctly</comment>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reqAndIdScoreFields</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>fls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>reqAndIdScoreFields</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>idScoreFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>trackingQueue</name></expr></argument>, <argument><expr><name>DEFAULT_COLLECTION</name></expr></argument>, <argument><expr><name>SHARD1</name></expr></argument>,
          <argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><name><name>ShardRequest</name><operator>.</operator><name>PURPOSE_GET_TOP_IDS</name></name></expr></argument>, <argument><expr><call><name><name>reqAndIdScoreFields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>reqAndIdScoreFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>trackingQueue</name></expr></argument>, <argument><expr><name>DEFAULT_COLLECTION</name></expr></argument>, <argument><expr><name>SHARD2</name></expr></argument>,
          <argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><name><name>ShardRequest</name><operator>.</operator><name>PURPOSE_GET_TOP_IDS</name></name></expr></argument>, <argument><expr><call><name><name>reqAndIdScoreFields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>reqAndIdScoreFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// we are assuming there are facet refinement or distributed idf requests here</comment>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"distrib.singlePass=false made more requests than 2 * number of shards."</literal> <operator>+</operator>
              <literal type="string">" Actual: "</literal> <operator>+</operator> <name>numRequests</name> <operator>+</operator> <literal type="string">" but expected &lt;= "</literal> <operator>+</operator> <name>sliceCount</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
          <argument><expr><name>numRequests</name> <operator>&lt;=</operator> <name>sliceCount</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// only id and/or score should be requested</comment>
      <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>trackingQueue</name></expr></argument>, <argument><expr><name>DEFAULT_COLLECTION</name></expr></argument>, <argument><expr><name>SHARD1</name></expr></argument>,
          <argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><name><name>ShardRequest</name><operator>.</operator><name>PURPOSE_GET_TOP_IDS</name></name></expr></argument>, <argument><expr><call><name><name>idScoreFields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>idScoreFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>trackingQueue</name></expr></argument>, <argument><expr><name>DEFAULT_COLLECTION</name></expr></argument>, <argument><expr><name>SHARD2</name></expr></argument>,
          <argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><name><name>ShardRequest</name><operator>.</operator><name>PURPOSE_GET_TOP_IDS</name></name></expr></argument>, <argument><expr><call><name><name>idScoreFields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>idScoreFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// only originally requested fields must be requested in GET_FIELDS request</comment>
      <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>trackingQueue</name></expr></argument>, <argument><expr><name>DEFAULT_COLLECTION</name></expr></argument>, <argument><expr><name>SHARD1</name></expr></argument>,
          <argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><name><name>ShardRequest</name><operator>.</operator><name>PURPOSE_GET_FIELDS</name></name></expr></argument>, <argument><expr><call><name><name>fls</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>fls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>trackingQueue</name></expr></argument>, <argument><expr><name>DEFAULT_COLLECTION</name></expr></argument>, <argument><expr><name>SHARD2</name></expr></argument>,
          <argument><expr><name><name>CommonParams</name><operator>.</operator><name>FL</name></name></expr></argument>, <argument><expr><name><name>ShardRequest</name><operator>.</operator><name>PURPOSE_GET_FIELDS</name></name></expr></argument>, <argument><expr><call><name><name>fls</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>fls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>response</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>getNumRequests</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>ShardRequestAndParams</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>requests</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>beforeNumRequests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>ShardRequestAndParams</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>requests</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>beforeNumRequests</name> <operator>+=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>beforeNumRequests</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertParamsEquals</name><parameter_list>(<parameter><decl><type><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>RequestTrackingQueue</name></name></type> <name>trackingQueue</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>collection</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shard</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>paramName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>purpose</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>ShardRequestAndParams</name></name></type> <name>getByIdRequest</name> <init>= <expr><call><name><name>trackingQueue</name><operator>.</operator><name>getShardRequestByPurpose</name></name><argument_list>(<argument><expr><call><name><name>cloudClient</name><operator>.</operator><name>getZkStateReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>, <argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertParamsEquals</name><argument_list>(<argument><expr><name>getByIdRequest</name></expr></argument>, <argument><expr><name>paramName</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertParamsEquals</name><parameter_list>(<parameter><decl><type><name><name>TrackingShardHandlerFactory</name><operator>.</operator><name>ShardRequestAndParams</name></name></type> <name>requestAndParams</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>paramName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>requestAndParams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>expectedCount</name> <init>= <expr><name><name>values</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>params</name> <init>= <expr><call><name><name>requestAndParams</name><operator>.</operator><name>params</name><operator>.</operator><name>getParams</name></name><argument_list>(<argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>expectedCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>params</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>params</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Expected non-zero number of '"</literal> <operator>+</operator> <name>paramName</name> <operator>+</operator> <literal type="string">"' parameters in request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>requestedFields</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>p</name> <range>: <expr><name>params</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>requestedFields</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>StrUtils</name><operator>.</operator><name>splitSmart</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Number of requested fields do not match with expectations"</literal></expr></argument>, <argument><expr><name>expectedCount</name></expr></argument>, <argument><expr><call><name><name>requestedFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>requestedFields</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">" not found in param: "</literal> <operator>+</operator> <name>paramName</name> <operator>+</operator> <literal type="string">" request had "</literal> <operator>+</operator> <name>paramName</name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <name>requestedFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
     </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"shards"</literal></expr></argument>, <argument><expr><call><name>getShardsString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="string">"track"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>queryServer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ModifiableSolrParams</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>debugMap</name> <init>= <expr><call><name><name>rsp</name><operator>.</operator><name>getDebugMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>track</name> <init>= <expr><operator>(</operator><name><name>SimpleOrderedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>debugMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"track"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>track</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"EXECUTE_QUERY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"A single pass request should not have a GET_FIELDS phase"</literal></expr></argument>, <argument><expr><call><name><name>track</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"GET_FIELDS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block></class></block></class></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</unit>
