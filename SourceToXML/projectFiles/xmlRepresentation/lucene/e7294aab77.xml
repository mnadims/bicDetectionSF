<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/e7294aab77.java"><expr_stmt><expr><name>From</name> <name>e7294aab77dcd0501576c0639bc644ca7a0015c2</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Noble</name> <name><name>Paul</name> <argument_list type="generic">&lt;<argument><name>noble</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">14</literal> <name>Nov</name> <literal type="number">2011</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">27</literal><operator>:</operator><literal type="number">51</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">2382</literal> <name>Support</name> <name>pluggable</name> <name>caching</name> <name>implementations</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1201659 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachePropertyUtil</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">32</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">56</literal> <operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCache</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">91</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCacheSupport</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">251</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriterBase</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">28</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DataConfig</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">38</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>EntityProcessorBase</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">225</literal> <operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SortedMapBackedCache</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">198</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>ThreadedContext</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name>cache</name><operator>-</operator><name><name>ephemeral</name><operator>.</operator><name>xml</name></name>  <operator>|</operator>  <literal type="number">32</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name><name>schema</name><operator>.</operator><name>xml</name></name>       <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>AbstractDIHCacheTestCase</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">217</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>TestCachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestEphemeralCache</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">68</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestSortedMapBackedCache</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">142</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <literal type="number">18</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">1177</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">246</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachePropertyUtil</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCache</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCacheSupport</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriterBase</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SortedMapBackedCache</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name>cache</name><operator>-</operator><name><name>ephemeral</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>AbstractDIHCacheTestCase</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestEphemeralCache</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestSortedMapBackedCache</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachePropertyUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachePropertyUtil</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..bae10757b2d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachePropertyUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<class><specifier>public</specifier> class <name>CachePropertyUtil</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getAttributeValueAsString</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSessionAttribute</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>SCOPE_ENTITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResolvedEntityAttribute</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>context</name><operator>.</operator><name>getRequestParameters</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getRequestParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>o</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>getAttributeValue</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSessionAttribute</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>SCOPE_ENTITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResolvedEntityAttribute</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>context</name><operator>.</operator><name>getRequestParameters</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getRequestParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  </block_content>}</block></function>
  
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a2ef3b97dd7</name><operator>..</operator><name>b67a68c40cb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>CachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">66</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * This class enables caching of data obtained from the DB to avoid too many sql
  * queries
  * &lt;p/&gt;
  * &lt;p&gt;
  * Refer to &lt;a
 * href="http://wiki.apache.org/solr/DataImportHandler"&gt;http://wiki.apache.org/solr/DataImportHandler&lt;/a&gt;
 * for more details.
 * href="http://wiki.apache.org/solr/DataImportHandler"&gt;http://wiki.apache
 * .org/solr/DataImportHandler&lt;/a&gt; for more details.
  * &lt;/p&gt;
  * &lt;p/&gt;
  * &lt;b&gt;This API is experimental and subject to change&lt;/b&gt;
 *
 * 
  * @since solr 1.3
 * @deprecated - Use SqlEntityProcessor with cacheImpl parameter.
  */</comment>
<class><annotation>@<name>Deprecated</name></annotation>
 <specifier>public</specifier> class <name>CachedSqlEntityProcessor</name> <super_list><extends>extends <super><name>SqlEntityProcessor</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isFirst</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>cacheInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isFirst</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>nextRow</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>dataSourceRowCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFirst</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>replaceTokens</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"query"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>isFirst</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>simpleCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getSimpleCacheData</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>getIdCacheData</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>initCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>cacheSupport</name> <operator>=</operator> <operator>new</operator> <call><name>DIHCacheSupport</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"SortedMapBackedCache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
  </block_content>}</block></else></if_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAllNonCachedRows</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>q</name> <init>= <expr><call><name>getQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>initQuery</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>replaceTokens</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rowIterator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>rows</name></expr>;</return></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><call><name><name>rowIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>arow</name> <init>= <expr><call><name><name>rowIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>arow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>arow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>rows</name></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCache</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..049e503330c</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">91</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;p&gt;
 * A cache that allows a DIH entity's data to persist locally prior being joined
 * to other data and/or indexed.
 * &lt;/p&gt;
 * 
 * @solr.experimental
 */</comment>
<interface><specifier>public</specifier> interface <name>DIHCache</name> <super_list><extends>extends <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Opens the cache using the specified properties. The {@link Context}
   * includes any parameters needed by the cache impl. This must be called
   * before any read/write operations are permitted.
   * &lt;p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Releases resources used by this cache, if possible. The cache is flushed
   * but not destroyed.
   * &lt;/p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Persists any pending data to the cache
   * &lt;/p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Closes the cache, if open. Then removes all data, possibly removing the
   * cache entirely from persistent storage.
   * &lt;/p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Adds a document. If a document already exists with the same key, both
   * documents will exist in the cache, as the cache allows duplicate keys. To
   * update a key's documents, first call delete(Object key).
   * &lt;/p&gt;
   * 
   * @param rec
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Returns an iterator, allowing callers to iterate through the entire cache
   * in key, then insertion, order.
   * &lt;/p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Returns an iterator, allowing callers to iterate through all documents that
   * match the given key in insertion order.
   * &lt;/p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Delete all documents associated with the given key
   * &lt;/p&gt;
   * 
   * @param key
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Delete all data from the cache,leaving the empty cache intact.
   * &lt;/p&gt;
   */</comment>
  <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>deleteAll</name><parameter_list>()</parameter_list>;</function_decl>
  
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCacheSupport</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCacheSupport</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..c042bfa86ac</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHCacheSupport</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">251</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name><operator>.</operator><name>DataImportHandlerException</name><operator>.</operator><name>wrapAndThrow</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>DIHCacheSupport</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name>
      <operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>cacheVariableName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>cacheImplName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>DIHCache</name></argument>&gt;</argument_list></name></type> <name>queryVsCache</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>DIHCache</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queryVsCacheIterator</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dataSourceRowCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cacheDoKeyLookup</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>DIHCacheSupport</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cacheImplName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cacheImplName</name></name> <operator>=</operator> <name>cacheImplName</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>String</name></type> <name>where</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"where"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>cacheKey</name> <init>= <expr><call><name><name>context</name>
        <operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_PRIMARY_KEY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>lookupKey</name> <init>= <expr><call><name><name>context</name>
        <operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_FOREIGN_KEY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cacheKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>lookupKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>,
          <argument><expr><literal type="string">"'cacheKey' is specified for the entity "</literal>
              <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call>
              <operator>+</operator> <literal type="string">" but 'cacheLookup' is missing"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>cacheKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cacheDoKeyLookup</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>where</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>splits</name> <init>= <expr><call><name><name>where</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cacheVariableName</name> <operator>=</operator> <name><name>splits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cacheVariableName</name> <operator>=</operator> <name>lookupKey</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>cacheDoKeyLookup</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>setSessionAttribute</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_PRIMARY_KEY</name></name></expr></argument>, <argument><expr><name>cacheKey</name></expr></argument>,
        <argument><expr><name><name>Context</name><operator>.</operator><name>SCOPE_ENTITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>setSessionAttribute</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_FOREIGN_KEY</name></name></expr></argument>, <argument><expr><name>lookupKey</name></expr></argument>,
        <argument><expr><name><name>Context</name><operator>.</operator><name>SCOPE_ENTITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>setSessionAttribute</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_DELETE_PRIOR_DATA</name></name></expr></argument>,
        <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>SCOPE_ENTITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>setSessionAttribute</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_READ_ONLY</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>,
        <argument><expr><name><name>Context</name><operator>.</operator><name>SCOPE_ENTITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>private</specifier> <name>DIHCache</name></type> <name>instantiateCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
      <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>DIHCache</name></argument>&gt;</argument_list></name></type> <name>cacheClass</name> <init>= <expr><call><name><name>DocBuilder</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>cacheImplName</name></expr></argument>, <argument><expr><call><name><name>context</name>
          <operator>.</operator><name>getSolrCore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>DIHCache</name></argument>&gt;</argument_list></name></type> <name>constr</name> <init>= <expr><call><name><name>cacheClass</name><operator>.</operator><name>getConstructor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name><name>constr</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>,
          <argument><expr><literal type="string">"Unable to load Cache implementation:"</literal> <operator>+</operator> <name>cacheImplName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>cache</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>initNewParent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>queryVsCacheIterator</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>DIHCache</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>queryVsCache</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>queryVsCacheIterator</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>destroyAll</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>queryVsCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>DIHCache</name></type> <name>cache</name> <range>: <expr><call><name><name>queryVsCache</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>queryVsCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cacheVariableName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Get all the rows from the datasource for the given query and cache them
   * &lt;/p&gt;
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>populateCache</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>,
      <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowIterator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>aRow</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><call><name><name>queryVsCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>aRow</name> <operator>=</operator> <call><name>getNextFromCache</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIterator</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>aRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getNextFromCache</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>,
      <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowIterator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rowIterator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>rowIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>rowIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"getNextFromCache() failed for query '"</literal> <operator>+</operator> <name>query</name>
          <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wrapAndThrow</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getCacheData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>,
      <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowIterator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cacheDoKeyLookup</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getIdCacheData</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIterator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>getSimpleCacheData</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIterator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * If the where clause is present the cache is sql Vs Map of key Vs List of
   * Rows.
   * 
   * @param query
   *          the query string for which cached data is to be returned
   * 
   * @return the cached row corresponding to the given query after all variables
   *         have been resolved
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getIdCacheData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>,
      <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowIterator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>resolve</name></name><argument_list>(<argument><expr><name>cacheVariableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>WARN</name></name></expr></argument>,
          <argument><expr><literal type="string">"The cache lookup value : "</literal> <operator>+</operator> <name>cacheVariableName</name>
              <operator>+</operator> <literal type="string">" is resolved to be null in the entity :"</literal>
              <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
      
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><call><name><name>queryVsCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>instantiateCache</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>queryVsCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>populateCache</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataSourceRowCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <call><name><name>cache</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataSourceRowCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * If where clause is not present the cache is a Map of query vs List of Rows.
   * 
   * @param query
   *          string for which cached row is to be returned
   * 
   * @return the cached row corresponding to the given query
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getSimpleCacheData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowIterator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><call><name><name>queryVsCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>instantiateCache</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>queryVsCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>populateCache</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>queryVsCacheIterator</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name><name>cache</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataSourceRowCache</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>dataSourceRowCache</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cacheIter</name> <init>= <expr><call><name><name>queryVsCacheIterator</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>cacheIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dsrcl</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dsrcl</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cacheIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <call><name><name>dsrcl</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataSourceRowCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getFromRowCacheTransformed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>dataSourceRowCache</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>dataSourceRowCache</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>r</name> <init>= <expr><call><name><name>dataSourceRowCache</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Specify the class for the cache implementation
   * &lt;/p&gt;
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_IMPL</name> <init>= <expr><literal type="string">"cacheImpl"</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * If the cache supports persistent data, set to "true" to delete any prior
   * persisted data before running the entity.
   * &lt;/p&gt;
   */</comment>
  
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_DELETE_PRIOR_DATA</name> <init>= <expr><literal type="string">"cacheDeletePriorData"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Specify the Foreign Key from the parent entity to join on. Use if the cache
   * is on a child entity.
   * &lt;/p&gt;
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_FOREIGN_KEY</name> <init>= <expr><literal type="string">"cacheLookup"</literal></expr></init></decl>;</decl_stmt>



  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * Specify the Primary Key field from this Entity to map the input records
   * with
   * &lt;/p&gt;
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_PRIMARY_KEY</name> <init>= <expr><literal type="string">"cachePk"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * &lt;p&gt;
   * If true, a pre-existing cache is re-opened for read-only access.
   * &lt;/p&gt;
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_READ_ONLY</name> <init>= <expr><literal type="string">"cacheReadOnly"</literal></expr></init></decl>;</decl_stmt>



  
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">563c07be66e</literal><operator>..</operator><literal type="number">9140730aaef</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">15</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">15</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>See</name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
  * limitations under the License.
  */
import java.util.Map<empty_stmt>;</empty_stmt></for>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrInputDocument</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -90,4 +93,13 @@ public interface DIHWriter {
 	 */</comment>
 	<function_decl><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> ;</function_decl>
 
	
	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Specify the keys to be modified by a delta update (required by writers that can store duplicate keys)
	 * &lt;/p&gt;
	 * @param deltaKeys
	 */</comment>
	<function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setDeltaKeys</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>deltaKeys</name></decl></parameter>)</parameter_list> ;</function_decl>

 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriterBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriterBase</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..a11df0d6feb</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriterBase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DIHWriterBase</name> <super_list><implements>implements <super><name>DIHWriter</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>keyFieldName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>deltaKeys</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setDeltaKeys</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>passedInDeltaKeys</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>deltaKeys</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>aMap</name> <range>: <expr><name>passedInDeltaKeys</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>aMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyFieldName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name><name>aMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>keyFieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name><name>aMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>deltaKeys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DataConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DataConfig</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ab958860acb</name><operator>..</operator><literal type="number">2b0e7bade33</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DataConfig</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DataConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>DataConfig</name> <block>{
     <expr><specifier>public</specifier> <name>DataSource</name> <name>dataSrc</name></expr>;
 
     <expr><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>colNameVsField</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    
    <expr><specifier>public</specifier> <name>boolean</name> <name>initalized</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
 
     <expr><specifier>public</specifier> <call><name>Entity</name><argument_list>()</argument_list></call> <block>{
     }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">77f41c850e6</literal><operator>..</operator><literal type="number">1badb6ba4c4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">336</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">336</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
       <comment type="line">// Make sure that documents are not re-created</comment>
     }</block>
     <name>deletedKeys</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <expr><call><name><name>writer</name><operator>.</operator><name>setDeltaKeys</name></name><argument_list>(<argument><expr><name>allPks</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Total Changed Documents"</literal></expr></argument>, <argument><expr><call><name><name>allPks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name>VariableResolverImpl</name> <name>vri</name> <operator>=</operator> <call><name>getVariableResolver</name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">428</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">429</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>entityProcessorWrapper</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThreadedEntityProcessorWrapper</name><argument_list>(<argument><expr><name>entityProcessor</name></expr></argument>, <argument><expr><name><name>DocBuilder</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getVariableResolver</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></for>}</block>
      <name>context</name> <operator>=</operator> <operator>new</operator> <call><name>ThreadedContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>DocBuilder</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;
      <expr><name>context</name> <operator>=</operator> <operator>new</operator> <call><name>ThreadedContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>DocBuilder</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><call><name>getVariableResolver</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
 
@@ <operator>-</operator><literal type="number">557</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">558</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
           }</block></expr></expr_stmt>
         }
       } <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>epw</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>currentEntityProcWrapper</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>Context</name><operator>.</operator><name>CURRENT_CONTEXT</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></finally>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">590</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">590</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
     }</block></expr></expr_stmt>
   }
 
  private <function><type><name>void</name></type> <name>resetEntity</name><parameter_list>(<parameter><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>entity</name><operator>.</operator><name>initalized</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>.</operator><name>entities</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>child</name> <range>: <expr><name><name>entity</name><operator>.</operator><name>entities</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>resetEntity</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>buildDocument</name><parameter_list>(<parameter><decl><type><name>VariableResolverImpl</name></type> <name>vr</name></decl></parameter>, <parameter><decl><type><name>DocWrapper</name></type> <name>doc</name></decl></parameter>,
      <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>pk</name></decl></parameter>, <parameter><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>entity</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isRoot</name></decl></parameter>,
      <parameter><decl><type><name>ContextImpl</name></type> <name>parentCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>EntityProcessorWrapper</name></argument>&gt;</argument_list></name></type> <name>entitiesToDestroy</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>EntityProcessorWrapper</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>buildDocument</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>entity</name></expr></argument>, <argument><expr><name>isRoot</name></expr></argument>, <argument><expr><name>parentCtx</name></expr></argument>, <argument><expr><name>entitiesToDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <for>for <control>(<init><decl><type><name>EntityProcessorWrapper</name></type> <name>entityWrapper</name> <range>: <expr><name>entitiesToDestroy</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>entityWrapper</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>resetEntity</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

   <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>private</specifier> <name>void</name></type> <name>buildDocument</name><parameter_list>(<parameter><decl><type><name>VariableResolverImpl</name></type> <name>vr</name></decl></parameter>, <parameter><decl><type><name>DocWrapper</name></type> <name>doc</name></decl></parameter>,
                              <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>pk</name></decl></parameter>, <parameter><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>entity</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isRoot</name></decl></parameter>,
                             <parameter><decl><type><name>ContextImpl</name></type> <name>parentCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
                             <decl_stmt><decl><type><name>ContextImpl</name></type> <name>parentCtx</name></decl>, <decl><type ref="prev"/><name><name>List</name><argument_list type="generic">&lt;<argument><name>EntityProcessorWrapper</name></argument>&gt;</argument_list></name> <name>entitiesToDestroy</name></decl>) <block>{<block_content>
 
     <decl_stmt><decl><type><name>EntityProcessorWrapper</name></type> <name>entityProcessor</name> <init>= <expr><call><name>getEntityProcessor</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">602</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">627</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
             <expr><name>session</name></expr>, <expr><name>parentCtx</name></expr>, <expr><name>this</name></expr>)</block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>entityProcessor</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Context</name><operator>.</operator><name>CURRENT_CONTEXT</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entity</name><operator>.</operator><name>initalized</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>entitiesToDestroy</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entityProcessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entity</name><operator>.</operator><name>initalized</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
     
     <if_stmt><if>if <condition>(<expr><name><name>requestParameters</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>getDebugLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>DISABLE_LOGGING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">666</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">695</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
             <expr><call><name><name>vr</name><operator>.</operator><name>addNamespace</name></name><argument_list>(<argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>arow</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
             <for>for <control>(<init><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>child</name> <range>: <expr><name><name>entity</name><operator>.</operator><name>entities</name></name></expr></range></decl></init>)</control> <block>{<block_content>
               <expr_stmt><expr><call><name>buildDocument</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>,
                  <argument><expr><ternary><condition><expr><name><name>child</name><operator>.</operator><name>isDocRoot</name></name></expr> ?</condition><then> <expr><name>pk</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><ternary><condition><expr><name><name>child</name><operator>.</operator><name>isDocRoot</name></name></expr> ?</condition><then> <expr><name>pk</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr><operator>,</operator> <expr><name>child</name></expr><operator>,</operator> <expr><literal type="boolean">false</literal></expr><operator>,</operator> <expr><name>ctx</name></expr><operator>,</operator> <expr><name>entitiesToDestroy</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for>
             </block_content>}</block></if></if_stmt>
             <expr_stmt><expr><call><name><name>vr</name><operator>.</operator><name>removeNamespace</name></name><argument_list>(<argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">729</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">758</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
       <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>getDebugLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>END_ENTITY</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt>}</block>
      <call><name><name>entityProcessor</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
   }
 
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>EntityProcessorBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>EntityProcessorBase</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9aaa5374841</literal><operator>..</operator><literal type="number">46cfe57c276</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>EntityProcessorBase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>EntityProcessorBase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>

 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name><operator>.</operator><name>DataImportHandlerException</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>EntityProcessorBase</name> extends <name>EntityProcessor</name> <block>{
 
   <expr><specifier>protected</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>rowIterator</name></expr>;
 
  <expr><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Transformer</name></argument>&gt;</argument_list></name> <name>transformers</name></expr>;

  <expr><specifier>protected</specifier> <name>String</name> <name>query</name></expr>;

  <expr><specifier>protected</specifier> <name>String</name> <name>onError</name> <operator>=</operator> <name>ABORT</name></expr>;
  <expr><specifier>protected</specifier> <name>String</name> <name>query</name></expr>;  
  
  <expr><specifier>protected</specifier> <name>String</name> <name>onError</name> <operator>=</operator> <name>ABORT</name></expr>;  
  
  <expr><specifier>protected</specifier> <name>DIHCacheSupport</name> <name>cacheSupport</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
 
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>void</name> <call><name>init</name><argument_list>(<argument><expr><name>Context</name> <name>context</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>rowIterator</name> <operator>=</operator> <literal type="null">null</literal></expr>;
     <expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;
     <if_stmt><if>if <condition>(<expr><name>isFirstInit</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>firstInit</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block>
    <name>query</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <if_stmt><if>if<condition>(<expr><name>cacheSupport</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rowIterator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cacheSupport</name><operator>.</operator><name>initNewParent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>   
    
   }
 
   <comment type="block" format="javadoc">/**first time init call. do one-time operations here
@@ -65,29 +70,20 @@ public class EntityProcessorBase extends EntityProcessor {
     entityName = context.getEntityAttribute("name");
     String s = context.getEntityAttribute(ON_ERROR);
     if (s != null) onError = s;
    initCache(context);
     isFirstInit = false;
   }
 
    protected void initCache(Context context) {
        String cacheImplName = context
            .getResolvedEntityAttribute(DIHCacheSupport.CACHE_IMPL);
 
  protected Map&lt;String, Object&gt; getNext() {
    try {
      if (rowIterator == null)
        return null;
      if (rowIterator.hasNext())
        return rowIterator.next();
      query = null;
      rowIterator = null;
      return null;
    } catch (Exception e) {
      SolrException.log(log, "getNext() failed for query '" + query + "'", e);
      query = null;
      rowIterator = null;
      wrapAndThrow(DataImportHandlerException.WARN, e);
      return null;
        if (cacheImplName != null ) {
          cacheSupport = new DIHCacheSupport(context, cacheImplName);
        }
     }
  }
 
  @Override
    @Override
   public Map&lt;String, Object&gt; nextModifiedRowKey() {
     return null;
   }
@@ -113,165 +109,40 @@ public class EntityProcessorBase extends EntityProcessor {
   public Map&lt;String, Object&gt; nextRow() {
     return null;// do not do anything
   }


  @Override
  public void destroy() {
    /*no op*/</comment>
  }

  <comment type="block" format="javadoc">/**
   * Only used by cache implementations
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>cachePk</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Only used by cache implementations
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>cacheVariableName</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Only used by cache implementations
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>simpleCache</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Only used by cache implementations
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cacheWithWhereClause</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dataSourceRowCache</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Only used by cache implementations
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>cacheInit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>simpleCache</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>cacheWithWhereClause</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>where</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"where"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>cacheKey</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><name>CACHE_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>lookupKey</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><name>CACHE_LOOKUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>cacheKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>lookupKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>,
              <argument><expr><literal type="string">"'cacheKey' is specified for the entity "</literal><operator>+</operator> <name>entityName</name><operator>+</operator><literal type="string">" but 'cacheLookup' is missing"</literal></expr></argument> )</argument_list></call></expr>;</throw>

    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>cacheKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>simpleCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>where</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>splits</name> <init>= <expr><call><name><name>where</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cachePk</name> <operator>=</operator> <name><name>splits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheVariableName</name> <operator>=</operator> <name><name>splits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cachePk</name> <operator>=</operator> <name>cacheKey</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheVariableName</name> <operator>=</operator> <name>lookupKey</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>cacheWithWhereClause</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.
   *
   * @param query the query string for which cached data is to be returned
   *
   * @return the cached row corresponding to the given query after all variables have been resolved
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getIdCacheData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowIdVsRows</name> <init>= <expr><call><name><name>cacheWithWhereClause</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>resolve</name></name><argument_list>(<argument><expr><name>cacheVariableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>WARN</name></name></expr></argument>,
              <argument><expr><literal type="string">"The cache lookup value : "</literal> <operator>+</operator> <name>cacheVariableName</name> <operator>+</operator> <literal type="string">" is resolved to be null in the entity :"</literal> <operator>+</operator>
                      <call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rowIdVsRows</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name><name>rowIdVsRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
  
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getNext</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>cacheSupport</name><operator>==</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rowIterator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>rowIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><call><name><name>rowIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowIterator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
      <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></try> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>getAllNonCachedRows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SolrException</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"getNext() failed for query '"</literal> <operator>+</operator> <name>query</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowIterator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wrapAndThrow</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></catch> <if_stmt><else>else <block>{<block_content>
        <expr_stmt><expr><name>rowIdVsRows</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>Object</name></type> <name>k</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>cachePk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>WARN</name></name></expr></argument>,
                    <argument><expr><literal type="string">"No value available for the cache key : "</literal> <operator>+</operator> <name>cachePk</name> <operator>+</operator> <literal type="string">" in the entity : "</literal> <operator>+</operator>
                            <call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>k</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>WARN</name></name></expr></argument>,
                    <argument><expr><literal type="string">"The key in the cache type : "</literal> <operator>+</operator> <call><name><name>k</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator>
                            <literal type="string">"is not same as the lookup value type "</literal> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" in the entity "</literal> <operator>+</operator>
                            <call><name><name>context</name><operator>.</operator><name>getEntityAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>rowIdVsRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>rowIdVsRows</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name><name>rowIdVsRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>cacheWithWhereClause</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIdVsRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rowIdVsRows</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>rowIdVsRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>dataSourceRowCache</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else  <block>{<block_content>
      <return>return <expr><call><name><name>cacheSupport</name><operator>.</operator><name>getCacheData</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>rowIterator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>      
   </block_content>}</block></function></block_content></block></if></if_stmt>
 
  <comment type="block" format="javadoc">/**
   * &lt;p&gt; Get all the rows from the the datasource for the given query. Only used by cache implementations. &lt;/p&gt; This
   * &lt;b&gt;must&lt;/b&gt; be implemented by sub-classes which intend to provide a cached implementation
   *
   * @return the list of all rows fetched from the datasource.
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAllNonCachedRows</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>Collections</name><operator>.</operator><name>EMPTY_LIST</name></name></expr>;</return>
  </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * If where clause is not present the cache is a Map of query vs List of Rows. Only used by cache implementations.
   *
   * @param query string for which cached row is to be returned
   *
   * @return the cached row corresponding to the given query
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getSimpleCacheData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><call><name><name>simpleCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>getAllNonCachedRows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>simpleCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getFromRowCacheTransformed</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <block>{<block_content>
  	<expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  	<if_stmt><if>if<condition>(<expr><name>cacheSupport</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><block>{<block_content>
  	  <expr_stmt><expr><call><name><name>cacheSupport</name><operator>.</operator><name>destroyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  	</block_content>}</block></if></if_stmt>
  	<expr_stmt><expr><name>cacheSupport</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getFromRowCacheTransformed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>r</name> <init>= <expr><call><name><name>dataSourceRowCache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>dataSourceRowCache</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>dataSourceRowCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></function>
  
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRANSFORMER</name> <init>= <expr><literal type="string">"transformer"</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>class</name> <name>EntityProcessorBase</name> extends <name>EntityProcessor</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>SKIP_DOC</name> <operator>=</operator> <literal type="string">"$skipDoc"</literal></expr>;
 
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CACHE_KEY</name> <operator>=</operator> <literal type="string">"cacheKey"</literal></block></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_LOOKUP</name> <init>= <expr><literal type="string">"cacheLookup"</literal></expr></init></decl>;</decl_stmt>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8944a4cd988</literal><operator>..</operator><name>a37de1780b8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>
  <operator>*</operator> @<name>since</name> <name>solr</name> <literal type="number">1.3</literal>
  <operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>class</name> <name>SolrWriter</name> implements <name>DIHWriter</name> <block>{
<expr><specifier>public</specifier> <name>class</name> <name>SolrWriter</name> extends <name>DIHWriterBase</name> implements <name>DIHWriter</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
   <specifier>static</specifier> <name>final</name> <name>String</name> <name>LAST_INDEX_KEY</name> <operator>=</operator> <literal type="string">"last_index_time"</literal></block></expr>;
@@ <operator>-</operator><literal type="number">159</literal><operator>,</operator><literal type="number">5</literal> <operator>+</operator><literal type="number">159</literal><operator>,</operator><literal type="number">5</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> implements <name>DIHWriter</name> <block>{
 	@<expr><name>Override</name>
 	<specifier>public</specifier> <name>void</name> <call><name>init</name><argument_list>(<argument><expr><name>Context</name> <name>context</name></expr></argument>)</argument_list></call> <block>{
 		<comment type="block">/* NO-OP */</comment>		
	}</block></expr>
	}</block></block></expr></expr_stmt>	
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SortedMapBackedCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SortedMapBackedCache</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..be66208c233</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SortedMapBackedCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">198</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<class><specifier>public</specifier> class <name>SortedMapBackedCache</name> <super_list><implements>implements <super><name>DIHCache</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>theMap</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isOpen</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isReadOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>primaryKeyName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>rec</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkOpen</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkReadOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>rec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>primaryKeyName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>primaryKeyName</name> <operator>=</operator> <call><name><name>rec</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><name>Object</name></type> <name>pk</name> <init>= <expr><call><name><name>rec</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>primaryKeyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pk</name> <operator>instanceof</operator> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><operator>(</operator><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><operator>)</operator> <name>pk</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
            <argument><expr><literal type="string">"The primary key must have exactly 1 element."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>thisKeysRecs</name> <init>= <expr><call><name><name>theMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>thisKeysRecs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>thisKeysRecs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>theMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>thisKeysRecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>thisKeysRecs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOpen</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shouldItBe</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isOpen</name> <operator>&amp;&amp;</operator> <name>shouldItBe</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(
          <argument><expr><literal type="string">"Must call open() before using this cache."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>isOpen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>shouldItBe</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"The cache is already open."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>checkReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isReadOnly</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cache is read-only."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>isOpen</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkOpen</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkReadOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>theMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>deleteAll</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>deleteAll</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>deleteAll</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>readOnlyOk</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnlyOk</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>checkReadOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>theMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>theMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>deleteAll</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>theMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>isOpen</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkOpen</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkReadOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkOpen</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>val</name> <init>= <expr><call><name><name>theMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>val</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>theMapIter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>currentKeyResult</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>currentKeyResultIter</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <block>{<block_content>
            <expr_stmt><expr><name>theMapIter</name> <operator>=</operator> <call><name><name>theMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>currentKeyResultIter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>currentKeyResultIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>currentKeyResult</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>currentKeyResultIter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>

          <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>next</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>theMapIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name><name>theMapIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKeyResult</name> <operator>=</operator> <call><name><name>next</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKeyResultIter</name> <operator>=</operator> <call><name><name>currentKeyResult</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>currentKeyResultIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>currentKeyResultIter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>currentKeyResultIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><call><name><name>currentKeyResultIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>currentKeyResult</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>currentKeyResultIter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>

          <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>next</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>theMapIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name><name>theMapIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKeyResult</name> <operator>=</operator> <call><name><name>next</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKeyResultIter</name> <operator>=</operator> <call><name><name>currentKeyResult</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>currentKeyResultIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><call><name><name>currentKeyResultIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkOpen</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isOpen</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>theMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>theMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><name>String</name></type> <name>pkName</name> <init>= <expr><call><name><name>CachePropertyUtil</name><operator>.</operator><name>getAttributeValueAsString</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
        <argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_PRIMARY_KEY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pkName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>primaryKeyName</name> <operator>=</operator> <name>pkName</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>isReadOnly</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>readOnlyStr</name> <init>= <expr><call><name><name>CachePropertyUtil</name><operator>.</operator><name>getAttributeValueAsString</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
        <argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_READ_ONLY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="string">"true"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>readOnlyStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isReadOnly</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>ThreadedContext</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>ThreadedContext</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0386e76f1a6</literal><operator>..</operator><literal type="number">2d4fe703a38</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>ThreadedContext</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>ThreadedContext</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>ThreadedContext</name> extends <name>ContextImpl</name><block>{
   <expr><specifier>private</specifier> <name><name>DocBuilder</name><operator>.</operator><name>EntityRunner</name></name> <name>entityRunner</name></expr>;
  <expr><specifier>private</specifier> <name>VariableResolverImpl</name> <name>resolver</name></expr>;
   <expr><specifier>private</specifier> <name>boolean</name> <name>limitedContext</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
 
  <expr><specifier>public</specifier> <call><name>ThreadedContext</name><argument_list>(<argument><expr><name><name>DocBuilder</name><operator>.</operator><name>EntityRunner</name></name> <name>entityRunner</name></expr></argument>, <argument><expr><name>DocBuilder</name> <name>docBuilder</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <call><name>ThreadedContext</name><argument_list>(<argument><expr><name><name>DocBuilder</name><operator>.</operator><name>EntityRunner</name></name> <name>entityRunner</name></expr></argument>, <argument><expr><name>DocBuilder</name> <name>docBuilder</name></expr></argument>, <argument><expr><name>VariableResolverImpl</name> <name>resolver</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name><name>entityRunner</name><operator>.</operator><name>entity</name></name></expr></argument>,
            <argument><expr><literal type="null">null</literal></expr></argument>,<comment type="line">//to be fetched realtime</comment>
    				<argument><expr><name>resolver</name></expr></argument>,
             <argument><expr><literal type="null">null</literal></expr></argument>,
             <argument><expr><literal type="null">null</literal></expr></argument>,
             <argument><expr><name><name>docBuilder</name><operator>.</operator><name>session</name></name></expr></argument>,
             <argument><expr><literal type="null">null</literal></expr></argument>,
             <argument><expr><name>docBuilder</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>entityRunner</name></name> <operator>=</operator> <name>entityRunner</name></expr>;
    <expr><name><name>this</name><operator>.</operator><name>resolver</name></name> <operator>=</operator> <name>resolver</name></expr>;
   }</block>
 
   @<name>Override</name>
@@ <operator>-</operator><literal type="number">45</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">47</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThreadedContext</name> extends <name>ContextImpl</name><block>{
 
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>Context</name> <call><name>getParentContext</name><argument_list>()</argument_list></call> <block>{
    <expr><name>ThreadedContext</name> <name>ctx</name> <operator>=</operator> <operator>new</operator> <call><name>ThreadedContext</name><argument_list>(<argument><expr><name><name>entityRunner</name><operator>.</operator><name>parent</name></name></expr></argument>, <argument><expr><name>docBuilder</name></expr></argument>)</argument_list></call></expr>;
  	<expr><name>ThreadedContext</name> <name>ctx</name> <operator>=</operator> <operator>new</operator> <call><name>ThreadedContext</name><argument_list>(<argument><expr><name><name>entityRunner</name><operator>.</operator><name>parent</name></name></expr></argument>, <argument><expr><name>docBuilder</name></expr></argument>, <argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>ctx</name><operator>.</operator><name>limitedContext</name></name> <operator>=</operator>  <literal type="boolean">true</literal></expr>;
     <return>return <expr><name>ctx</name></expr>;</return></block></expr>
   }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name>cache</name><operator>-</operator><name><name>ephemeral</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name>cache</name><operator>-</operator><name><name>ephemeral</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..a8ef928959f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name>cache</name><operator>-</operator><name><name>ephemeral</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal> @@
<operator>&lt;</operator><name>dataConfig</name><operator>&gt;</operator>
	<operator>&lt;</operator><name>dataSource</name> <name>type</name><operator>=</operator><literal type="string">"MockDataSource"</literal> <operator>/</operator><operator>&gt;</operator>
	<operator>&lt;</operator><name>document</name><operator>&gt;</operator>
		<operator>&lt;</operator><name>entity</name> 
			<name>name</name><operator>=</operator><literal type="string">"PARENT"</literal>
			<name>processor</name><operator>=</operator><literal type="string">"SqlEntityProcessor"</literal>
			<name>cacheName</name><operator>=</operator><literal type="string">"PARENT"</literal>
			<name>cachePk</name><operator>=</operator><literal type="string">"id"</literal>			
			<name>query</name><operator>=</operator><literal type="string">"SELECT * FROM PARENT"</literal>				
		<operator>&gt;</operator>
			<operator>&lt;</operator><name>entity</name>
				<name>name</name><operator>=</operator><literal type="string">"CHILD_1"</literal>
				<name>processor</name><operator>=</operator><literal type="string">"SqlEntityProcessor"</literal>
				<name>cacheImpl</name><operator>=</operator><literal type="string">"SortedMapBackedCache"</literal>
				<name>cacheName</name><operator>=</operator><literal type="string">"CHILD"</literal>
				<name>cachePk</name><operator>=</operator><literal type="string">"id"</literal>
				<name>cacheLookup</name><operator>=</operator><literal type="string">"PARENT.id"</literal>
				<name>fieldNames</name><operator>=</operator><literal type="string">"id,         child1a_mult_s, child1b_s"</literal>
				<name>fieldTypes</name><operator>=</operator><literal type="string">"BIGDECIMAL, STRING,         STRING"</literal>
				<name>query</name><operator>=</operator><literal type="string">"SELECT * FROM CHILD_1"</literal>				
			<operator>/</operator><operator>&gt;</operator>
			<operator>&lt;</operator><name>entity</name>
				<name>name</name><operator>=</operator><literal type="string">"CHILD_2"</literal>
				<name>processor</name><operator>=</operator><literal type="string">"SqlEntityProcessor"</literal>
				<name>cacheImpl</name><operator>=</operator><literal type="string">"SortedMapBackedCache"</literal>
				<name>cachePk</name><operator>=</operator><literal type="string">"id"</literal>
				<name>cacheLookup</name><operator>=</operator><literal type="string">"PARENT.id"</literal>
				<name>query</name><operator>=</operator><literal type="string">"SELECT * FROM CHILD_2"</literal>				
			<operator>/</operator><operator>&gt;</operator>
		<operator>&lt;</operator><operator>/</operator><name>entity</name><operator>&gt;</operator>
	<operator>&lt;</operator><operator>/</operator><name>document</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>dataConfig</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name><name>schema</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name><name>schema</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">65a855f9c4f</literal><operator>..</operator><name>f71dd3ddcd9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name><name>schema</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>dih</name><operator>/</operator><name>solr</name><operator>/</operator><name>conf</name><operator>/</operator><name>dataimport</name><operator>-</operator><name><name>schema</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">274</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">274</literal></expr>,<expr><literal type="number">15</literal> @@
         <name>EXAMPLE</name><operator>:</operator>  <name>name</name><operator>=</operator><literal type="string">"*_i"</literal> <name>will</name> <name>match</name> <name>any</name> <name>field</name> <name>ending</name> <name>in</name> <call><name>_i</name> <argument_list>(<argument><expr><name>like</name> <name>myid_i</name></expr></argument>, <argument><expr><name>z_i</name></expr></argument>)</argument_list></call>
         <name>Longer</name> <name>patterns</name> <name>will</name> <name>be</name> <name>matched</name> <name><name>first</name><operator>.</operator></name>  if <name>equal</name> <name>size</name> <name>patterns</name>
         <name>both</name> <name>match</name></expr>, <expr><name>the</name> <name>first</name> <name>appearing</name> <name>in</name> <name>the</name> <name>schema</name> <name>will</name> <name>be</name> <name><name>used</name><operator>.</operator></name>  --<operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_i"</literal>  <name>type</name><operator>=</operator><literal type="string">"sint"</literal>    <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_s"</literal>  <name>type</name><operator>=</operator><literal type="string">"string"</literal>  <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_l"</literal>  <name>type</name><operator>=</operator><literal type="string">"slong"</literal>   <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_t"</literal>  <name>type</name><operator>=</operator><literal type="string">"text"</literal>    <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_b"</literal>  <name>type</name><operator>=</operator><literal type="string">"boolean"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_f"</literal>  <name>type</name><operator>=</operator><literal type="string">"sfloat"</literal>  <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_d"</literal>  <name>type</name><operator>=</operator><literal type="string">"sdouble"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_dt"</literal> <name>type</name><operator>=</operator><literal type="string">"date"</literal>    <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_i"</literal>       <name>type</name><operator>=</operator><literal type="string">"sint"</literal>    <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_s"</literal>       <name>type</name><operator>=</operator><literal type="string">"string"</literal>  <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_mult_s"</literal>  <name>type</name><operator>=</operator><literal type="string">"string"</literal>  <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal>   <name>multiValued</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_l"</literal>       <name>type</name><operator>=</operator><literal type="string">"slong"</literal>   <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_t"</literal>       <name>type</name><operator>=</operator><literal type="string">"text"</literal>    <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_b"</literal>       <name>type</name><operator>=</operator><literal type="string">"boolean"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_f"</literal>       <name>type</name><operator>=</operator><literal type="string">"sfloat"</literal>  <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_d"</literal>       <name>type</name><operator>=</operator><literal type="string">"sdouble"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_dt"</literal>      <name>type</name><operator>=</operator><literal type="string">"date"</literal>    <name>indexed</name><operator>=</operator><literal type="string">"true"</literal>  <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
 
    <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"random*"</literal> <name>type</name><operator>=</operator><literal type="string">"random"</literal> <operator>/</operator><operator>&gt;</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>AbstractDIHCacheTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>AbstractDIHCacheTestCase</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..9a1cf997dae</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>AbstractDIHCacheTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">217</literal> @@</expr>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package></block></expr>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Clob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>sql</name><operator>.</operator><name>rowset</name><operator>.</operator><name>serial</name><operator>.</operator><name>SerialClob</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name><operator>.</operator><name>AbstractDataImportHandlerTestCase</name><operator>.</operator><name>TestContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>

<class><specifier>public</specifier> class <name>AbstractDIHCacheTestCase</name> <block>{	
	<decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>Feb21_2011</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">1298268000000l</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>fieldTypes</name> <init>= <expr><block>{ <expr><literal type="string">"INTEGER"</literal></expr>, <expr><literal type="string">"BIGDECIMAL"</literal></expr>, <expr><literal type="string">"STRING"</literal></expr>, <expr><literal type="string">"STRING"</literal></expr>,   <expr><literal type="string">"FLOAT"</literal></expr>,   <expr><literal type="string">"DATE"</literal></expr>,   <expr><literal type="string">"CLOB"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>fieldNames</name> <init>= <expr><block>{ <expr><literal type="string">"a_id"</literal></expr>,    <expr><literal type="string">"PI"</literal></expr>,         <expr><literal type="string">"letter"</literal></expr>, <expr><literal type="string">"examples"</literal></expr>, <expr><literal type="string">"a_float"</literal></expr>, <expr><literal type="string">"a_date"</literal></expr>, <expr><literal type="string">"DESCRIPTION"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>Clob</name></type> <name>APPLE</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Before</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>APPLE</name> <operator>=</operator> <operator>new</operator> <call><name>SerialClob</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><literal type="string">"Apples grow on trees and they are good to eat."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>sqe</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="string">"Could not Set up Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>

		<comment type="line">// The first row needs to have all non-null fields,</comment>
		<comment type="line">// otherwise we would have to always send the fieldTypes &amp; fieldNames as CacheProperties when building.</comment>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"Apple"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">1.11</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><name>APPLE</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"Ball"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">2.22</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"Dog"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">4.44</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"Cookie"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">3.33</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"Daisy"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">4.44</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"Drawing"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">4.44</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"E"</literal></expr>,
				<expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Eggplant"</literal></expr>, <expr><literal type="string">"Ear"</literal></expr>, <expr><literal type="string">"Elephant"</literal></expr>, <expr><literal type="string">"Engine"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">5.55</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>After</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>teardown</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>APPLE</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<comment type="line">//A limitation of this test class is that the primary key needs to be the first one in the list.</comment>
	<comment type="line">//DIHCaches, however, can handle any field being the primary key.</comment>
	<class>class <name>ControlData</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></super>, <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
		<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>data</name></decl>;</decl_stmt>

		<constructor><name>ControlData</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
		<type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>ControlData</name></type> <name>cd</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>Comparable</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>Comparable</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Comparable</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>Comparable</name><operator>)</operator> <name><name>cd</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name><name>c1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></function>

		<function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
			<return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></function>
	}</block></class>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>loadData</name><parameter_list>(<parameter><decl><type><name>DIHCache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>theData</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>theFieldNames</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepOrdered</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>ControlData</name></type> <name>cd</name> <range>: <expr><name>theData</name></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>controlDataToMap</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>theFieldNames</name></expr></argument>, <argument><expr><name>keepOrdered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>extractDataInKeyOrder</name><parameter_list>(<parameter><decl><type><name>DIHCache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>theFieldNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Object</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Object</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cacheIter</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>cacheIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>mapToObjectArray</name><argument_list>(<argument><expr><call><name><name>cacheIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>theFieldNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return>return <expr><call><name>listToControlData</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="line">//This method assumes that the Primary Keys are integers and that the first id=1.  </comment>
	<comment type="line">//It will look for id's sequentially until one is skipped, then will stop.</comment>
	<function><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>extractDataByKeyLookup</name><parameter_list>(<parameter><decl><type><name>DIHCache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>theFieldNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>recId</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Object</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Object</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>listORecs</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>recId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>listORecs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<while>while<condition>(<expr><call><name><name>listORecs</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>mapToObjectArray</name><argument_list>(<argument><expr><call><name><name>listORecs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>theFieldNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>recId</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return>return <expr><call><name>listToControlData</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>listToControlData</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Object</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>returnData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name><name>returnData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>returnData</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name><name>Object</name><index>[]</index></name></type> <name>mapToObjectArray</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>theFieldNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>oos</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[<expr><name><name>theFieldNames</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>theFieldNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>oos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>rec</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>theFieldNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>oos</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>void</name></type> <name>compareData</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>theControl</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// The test data should come back primarily in Key order and secondarily in insertion order.</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>control</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>theControl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>errors</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>control</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-Returned data has "</literal> <operator>+</operator> <call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" records.  expected: "</literal> <operator>+</operator> <call><name><name>control</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>control</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>controlRec</name> <init>= <expr><call><name><name>control</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>testRec</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>testRec</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>controlRec</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-Record indexAt="</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" has "</literal> <operator>+</operator> <name><name>testRec</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="string">" data elements.  extpected: "</literal> <operator>+</operator> <name><name>controlRec</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>controlRec</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>testRec</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>Object</name></type> <name>controlObj</name> <init>= <expr><name><name>controlRec</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Object</name></type> <name>testObj</name> <init>= <expr><name><name>testRec</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>controlObj</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>testObj</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-Record indexAt="</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">", Data Element indexAt="</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" is not NULL as expected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>controlObj</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>testObj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-Record indexAt="</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">", Data Element indexAt="</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" is NULL.  Expected: "</literal> <operator>+</operator> <name>controlObj</name> <operator>+</operator> <literal type="string">" (class="</literal>
							<operator>+</operator> <call><name><name>controlObj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>controlObj</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>testObj</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>controlObj</name> <operator>instanceof</operator> <name>Clob</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>String</name></type> <name>controlString</name> <init>= <expr><call><name>clobToString</name><argument_list>(<argument><expr><operator>(</operator><name>Clob</name><operator>)</operator> <name>controlObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>testString</name> <init>= <expr><call><name>clobToString</name><argument_list>(<argument><expr><operator>(</operator><name>Clob</name><operator>)</operator> <name>testObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>controlString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>testString</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-Record indexAt="</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">", Data Element indexAt="</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" has: "</literal> <operator>+</operator> <name>testString</name> <operator>+</operator> <literal type="string">" (class=Clob) ... Expected: "</literal> <operator>+</operator> <name>controlString</name>
								<operator>+</operator> <literal type="string">" (class=Clob)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>controlObj</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>controlObj</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>testObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-Record indexAt="</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">", Data Element indexAt="</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">" has: "</literal> <operator>+</operator> <name>testObj</name> <operator>+</operator> <literal type="string">" (class="</literal> <operator>+</operator> <call><name><name>testObj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
							<operator>+</operator> <literal type="string">") ... Expected: "</literal> <operator>+</operator> <name>controlObj</name> <operator>+</operator> <literal type="string">" (class="</literal> <operator>+</operator> <call><name><name>controlObj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><call><name><name>errors</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><call><name><name>errors</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>controlDataToMap</name><parameter_list>(<parameter><decl><type><name>ControlData</name></type> <name>cd</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>theFieldNames</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepOrdered</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>rec</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>keepOrdered</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cd</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><name><name>theFieldNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Object</name></type> <name>data</name> <init>= <expr><name><name>cd</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>rec</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>rec</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>String</name></type> <name>stringArrayToCommaDelimitedList</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>strs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>String</name></type> <name>a</name> <range>: <expr><name>strs</name></expr></range></decl></init>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>String</name></type> <name>clobToString</name><parameter_list>(<parameter><decl><type><name>Clob</name></type> <name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<decl_stmt><decl><type><name>Reader</name></type> <name>in</name> <init>= <expr><call><name><name>cl</name><operator>.</operator><name>getCharacterStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>cbuf</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>numGot</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><operator>(</operator><name>numGot</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numGot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
		<return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Context</name></type> <name>getContext</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entityAttrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>VariableResolverImpl</name></type> <name>resolver</name> <init>= <expr><operator>new</operator> <call><name>VariableResolverImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>delegate</name> <init>= <expr><operator>new</operator> <call><name>ContextImpl</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>resolver</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>TestContext</name><argument_list>(<argument><expr><name>entityAttrs</name></expr></argument>, <argument><expr><name>delegate</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
	
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestCachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestCachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">89c79a64a5a</literal><operator>..</operator><name>e945a15eb32</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestCachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestCachedSqlEntityProcessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCachedSqlEntityProcessor</name> extends <name>AbstractDataImportHandlerTestC</name>
     <call><name><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"column"</literal></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>q</name> <init>= <expr><literal type="string">"select * from x"</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entityAttrs</name> <init>= <expr><call><name>createMap</name><argument_list>(
            <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>EntityProcessorBase</name><operator>.</operator><name>CACHE_KEY</name></name></expr></argument>,<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>EntityProcessorBase</name><operator>.</operator><name>CACHE_LOOKUP</name></name></expr></argument> ,<argument><expr><literal type="string">"x.id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><literal type="string">"query"</literal></expr><operator>,</operator> <expr><name>q</name></expr><operator>,</operator> <expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_PRIMARY_KEY</name></name></expr><operator>,</operator><expr><literal type="string">"id"</literal></expr><operator>,</operator> <expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_FOREIGN_KEY</name></name></expr> <operator>,</operator><expr><literal type="string">"x.id"</literal></expr></expr_stmt>)</block_content></block>;</function>
     <decl_stmt><decl><type><name>MockDataSource</name></type> <name>ds</name> <init>= <expr><operator>new</operator> <call><name>MockDataSource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>VariableResolverImpl</name></type> <name>vr</name> <init>= <expr><operator>new</operator> <call><name>VariableResolverImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Map</name></type> <name>xNamespace</name> <init>= <expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestEphemeralCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestEphemeralCache</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..9645236e338</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestEphemeralCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">68</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>

<class><specifier>public</specifier> class <name>TestEphemeralCache</name> <super_list><extends>extends <super><name>AbstractDataImportHandlerTestCase</name></super></extends></super_list> <block>{

	<function><annotation>@<name>BeforeClass</name></annotation>
	<type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"dataimport-solrconfig.xml"</literal></expr></argument>, <argument><expr><literal type="string">"dataimport-schema.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>testEphemeralCache</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>List</name></type> <name>parentRows</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>parentRows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parent_s"</literal></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parentRows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parent_s"</literal></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parentRows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parent_s"</literal></expr></argument>, <argument><expr><literal type="string">"three"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parentRows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parent_s"</literal></expr></argument>, <argument><expr><literal type="string">"four"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parentRows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parent_s"</literal></expr></argument>, <argument><expr><literal type="string">"five"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>List</name></type> <name>child1Rows</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"this is the number six."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"this is the number five."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"let's sing a song of six."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"three"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"III"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"|||"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"uno"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child1Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child1b_s"</literal></expr></argument>, <argument><expr><literal type="string">"CHILD1B"</literal></expr></argument>, <argument><expr><literal type="string">"child1a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"this is the number two."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>List</name></type> <name>child2Rows</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'this is the number six.'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'this is the number five.'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'let's sing a song of six.'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'three'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'III'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2b_s"</literal></expr></argument>, <argument><expr><literal type="string">"CHILD2B"</literal></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, '3'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, '|||'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'one'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'uno'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>child2Rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createMap</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"child2a_mult_s"</literal></expr></argument>, <argument><expr><literal type="string">"Child 2 says, 'this is the number two.'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>MockDataSource</name><operator>.</operator><name>setIterator</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM PARENT"</literal></expr></argument>, <argument><expr><call><name><name>parentRows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MockDataSource</name><operator>.</operator><name>setIterator</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM CHILD_1"</literal></expr></argument>, <argument><expr><call><name><name>child1Rows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MockDataSource</name><operator>.</operator><name>setIterator</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM CHILD_2"</literal></expr></argument>, <argument><expr><call><name><name>child2Rows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>runFullImport</name><argument_list>(<argument><expr><call><name>loadDataConfig</name><argument_list>(<argument><expr><literal type="string">"dataimport-cache-ephemeral.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"*:*"</literal></expr></argument>)</argument_list></call></expr></argument>,                                       <argument><expr><literal type="string">"//*[@numFound='5']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"id:1"</literal></expr></argument>)</argument_list></call></expr></argument>,                                      <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"id:6"</literal></expr></argument>)</argument_list></call></expr></argument>,                                      <argument><expr><literal type="string">"//*[@numFound='0']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"parent_s:four"</literal></expr></argument>)</argument_list></call></expr></argument>,                             <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child1a_mult_s:this\\ is\\ the\\ numbe*"</literal></expr></argument>)</argument_list></call></expr></argument>,   <argument><expr><literal type="string">"//*[@numFound='2']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child2a_mult_s:Child\\ 2\\ say*"</literal></expr></argument>)</argument_list></call></expr></argument>,           <argument><expr><literal type="string">"//*[@numFound='4']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child1b_s:CHILD1B"</literal></expr></argument>)</argument_list></call></expr></argument>,                         <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child2b_s:CHILD2B"</literal></expr></argument>)</argument_list></call></expr></argument>,                         <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child1a_mult_s:one"</literal></expr></argument>)</argument_list></call></expr></argument>,                        <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child1a_mult_s:uno"</literal></expr></argument>)</argument_list></call></expr></argument>,                        <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"child1a_mult_s:(uno OR one)"</literal></expr></argument>)</argument_list></call></expr></argument>,               <argument><expr><literal type="string">"//*[@numFound='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestSortedMapBackedCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestSortedMapBackedCache</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..5f21663bf42</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestSortedMapBackedCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">142</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>TestSortedMapBackedCache</name> <super_list><extends>extends <super><name>AbstractDIHCacheTestCase</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>TestSortedMapBackedCache</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testCacheWithKeyLookup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>new</operator> <call><name>SortedMapBackedCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>loadData</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>testData</name> <init>= <expr><call><name>extractDataByKeyLookup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>compareData</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Exception thrown: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch> <finally>finally <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
			</block_content>}</block></catch></try>
		</block_content>}</block></finally></try>
	</block_content>}</block></function>

	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testCacheWithOrderedLookup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>new</operator> <call><name>SortedMapBackedCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>loadData</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>testData</name> <init>= <expr><call><name>extractDataInKeyOrder</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>compareData</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Exception thrown: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch> <finally>finally <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
			</block_content>}</block></catch></try>
		</block_content>}</block></finally></try>
	</block_content>}</block></function>

	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testCacheReopensWithUpdate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>DIHCache</name></type> <name>cache</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>			
			<decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cacheProps</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>cacheProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DIHCacheSupport</name><operator>.</operator><name>CACHE_PRIMARY_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"a_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>new</operator> <call><name>SortedMapBackedCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>(<argument><expr><name>cacheProps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// We can let the data hit the cache with the fields out of order because</comment>
			<comment type="line">// we've identified the pk up-front.</comment>
			<expr_stmt><expr><call><name>loadData</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Close the cache.</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>newControlData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>newIdEqualsThree</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<comment type="line">// We'll be deleting a_id=1 so remove it from the control data.</comment>
				<if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<comment type="line">// We'll be changing "Cookie" to "Carrot" in a_id=3 so change it in the control data.</comment>
				<if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>newIdEqualsThree</name> <operator>=</operator> <operator>new</operator> <name><name>Object</name><index>[<expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newIdEqualsThree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newIdEqualsThree</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>newIdEqualsThree</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Carrot"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>newControlData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><name>newIdEqualsThree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<comment type="line">// Everything else can just be copied over.</comment>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name><name>newControlData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="line">// These new rows of data will get added to the cache, so add them to the control data too.</comment>
			<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>newDataRow1</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Z"</literal></expr>, <expr><literal type="string">"Zebra"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">99.99</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>newDataRow2</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"Ballerina"</literal></expr>, <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><literal type="number">2.22</literal></expr></argument>)</argument_list></call></expr>, <expr><name>Feb21_2011</name></expr>, <expr><literal type="null">null</literal></expr> }</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>newControlData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><name>newDataRow1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>newControlData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><name>newDataRow2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Re-open the cache</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Delete a_id=1 from the cache.</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Because the cache allows duplicates, the only way to update is to</comment>
			<comment type="line">// delete first then add.</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>controlDataToMap</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><name>newIdEqualsThree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Add this row with a new Primary key.</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>controlDataToMap</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><name>newDataRow1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Add this row, creating two records in the cache with a_id=2.</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>controlDataToMap</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControlData</name><argument_list>(<argument><expr><name>newDataRow2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Read the cache back and compare to the newControlData</comment>
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ControlData</name></argument>&gt;</argument_list></name></type> <name>testData</name> <init>= <expr><call><name>extractDataInKeyOrder</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>compareData</name><argument_list>(<argument><expr><name>newControlData</name></expr></argument>, <argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Now try reading the cache read-only.</comment>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>testData</name> <operator>=</operator> <call><name>extractDataInKeyOrder</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>compareData</name><argument_list>(<argument><expr><name>newControlData</name></expr></argument>, <argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Exception thrown: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch> <finally>finally <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
			</block_content>}</block></catch></try>
		</block_content>}</block></finally></try>
	</block_content>}</block></function>
}</block></class>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
