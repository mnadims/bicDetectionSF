<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/5a2d0bc654.java"><expr_stmt><expr><name>From</name> <literal type="number">5a2d0bc654ba52c8499b7de2db88ecdbaaa98d74</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Robert</name> <name><name>Muir</name> <argument_list type="generic">&lt;<argument><name>rmuir</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Jul</name> <literal type="number">2012</literal> <literal type="number">21</literal><operator>:</operator><literal type="number">04</literal><operator>:</operator><literal type="number">18</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">2686</literal></expr><operator>,</operator> <expr><name>LUCENE</name><operator>-</operator><literal type="number">3505</literal><operator>:</operator> <name>Fix</name> <name>various</name> <name>bugs</name> <name>in</name> <name>BooleanQuery</name></expr><operator>,</operator>
 <expr><name>clean</name> <name>up</name> <name>scorer</name> <name>navigation</name> <name>API</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1363115 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">44</literal> <operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer2</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionScorer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">15</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionTermScorer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">35</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxScorer</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">102</literal> <operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionScorer</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">108</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionSumScorer</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">208</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FilteredQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchAllDocsQuery</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>MatchOnlyConjunctionTermsScorer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">35</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyTermScorer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ReqExclScorer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ReqOptSumScorer</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">18</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>ScoreCachingWrappingScorer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>Scorer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermScorer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ScorerDocQueue</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">219</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>TestBooleanQueryVisitSubscorers</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">184</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanScorer</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestCachingCollector</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestConjunctions</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">142</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name><name>TestPositiveScoresOnlyCollector</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>TestScoreCachingWrappingScorer</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSubScorerFreqs</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>grouping</name><operator>/</operator><name><name>BlockGroupingCollector</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>TermsIncludingScoreQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToChildBlockJoinQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinCollector</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>FunctionQuery</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceScorer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JoinQParserPlugin</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <literal type="number">42</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">810</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">554</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionScorer</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyConjunctionTermsScorer</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100755</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ScorerDocQueue</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanQueryVisitSubscorers</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestConjunctions</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>c9fdf4e1ada</name><operator>..</operator><literal type="number">63546c6ac6c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>Bug</name> <name>Fixes</name>
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">4222</literal><operator>:</operator> <name><name>TieredMergePolicy</name><operator>.</operator><name>getFloorSegmentMB</name></name> <name>was</name> <name>returning</name> <name>the</name>
   <name>size</name> <name>in</name> <name>bytes</name> <name>not</name> <call><name>MB</name> <argument_list>(<argument><expr><name>Chris</name> <name>Fuller</name> <name>via</name> <name>Mike</name> <name>McCandless</name></expr></argument>)</argument_list></call>
 
<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3505</literal><operator>:</operator> <name>Fix</name> <call><name>bug</name> <argument_list>(<argument><expr><name>Lucene</name> <literal type="number">4.0alpha</literal> <name>only</name></expr></argument>)</argument_list></call> <name>where</name> <name>boolean</name> <name>conjunctions</name>
  <name>were</name> <name>sometimes</name> <name>scored</name> <name><name>incorrectly</name><operator>.</operator> <name>Conjunctions</name></name> <name>of</name> <name>only</name> <name>termqueries</name> <name>where</name>
  <name>at</name> <name>least</name> <name>one</name> <name>term</name> <name>omitted</name> <name>term</name> <call><name>frequencies</name> <argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name></expr></argument>)</argument_list></call> <name>would</name> 
  <name>be</name> <name>scored</name> <name>as</name></expr></expr_stmt> <if_stmt><if>if all terms omitted term frequencies.  <condition>(<expr><name>Robert</name> <name>Muir</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2686</literal></expr><operator>,</operator> <expr><name>LUCENE</name><operator>-</operator><literal type="number">3505</literal><operator>:</operator> <name>Fixed</name> <name>BooleanQuery</name> <name>scorers</name> <name>to</name></expr></expr_stmt></block_content></block></if></if_stmt> <return>return <expr><name>correct</name> 
  <call><name>freq</name><argument_list>()</argument_list></call><operator>.</operator>  <name>Added</name> <name>support</name></expr></return> <for>for scorer navigation API <control>(<init><expr><name><name>Scorer</name><operator>.</operator><name>getChildren</name></name></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>to</name> 
  <name>all</name> <name><name>queries</name><operator>.</operator>  <name>Made</name></name> <call><name><name>Scorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call> <specifier>abstract</specifier><operator>.</operator> 
  <operator>(</operator><name>Koji</name> <name>Sekiguchi</name><operator>,</operator> <name>Mike</name> <name>McCandless</name><operator>,</operator> <name>Robert</name> <name>Muir</name><operator>)</operator>

 <name>Build</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">4094</literal><operator>:</operator> <name>Support</name> <name>overriding</name> <name><name>file</name><operator>.</operator><name>encoding</name></name> <name>on</name> <name>forked</name> <name>test</name> <name>JVMs</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7ea93939383</literal><operator>..</operator><literal type="number">421cc6cfa27</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">358</literal></expr><operator>,</operator><expr><literal type="number">51</literal> <operator>+</operator><literal type="number">358</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>BooleanQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <block>{
       <expr><name>final</name> <name><name>DocsAndFreqs</name><index>[]</index></name> <name>docsAndFreqs</name> <operator>=</operator> <operator>new</operator> <name><name>DocsAndFreqs</name><index>[<expr><call><name><name>weights</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>TermWeight</name></type> <name>weight</name> <init>= <expr><operator>(</operator><name>TermWeight</name><operator>)</operator> <call><name><name>weights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>getTermsEnum</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>termsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>acceptDocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <return>return <expr><literal type="null">null</literal></expr>;</return>
         <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block>
        <name>final</name> <name>ExactSimScorer</name> <name>docScorer</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>createDocScorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DocsEnum</name></type> <name>docsAndFreqsEnum</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><name>acceptDocs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>docsAndFreqsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// TODO: we could carry over TermState from the</comment>
          <comment type="line">// terms we already seek'd to, to save re-seeking</comment>
          <comment type="line">// to make the match-only scorer, but it's likely</comment>
          <comment type="line">// rare that BQ mixes terms from omitTf and</comment>
          <comment type="line">// non-omitTF fields:</comment>

          <comment type="line">// At least one sub cannot provide freqs; abort</comment>
          <comment type="line">// and fallback to full match-only scorer:</comment>
          <return>return <expr><call><name>createMatchOnlyConjunctionTermScorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>acceptDocs</name></expr></argument>)</argument_list></call></expr>;</return>
        <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>instanceof</operator> <name>TermScorer</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>docsAndFreqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DocsAndFreqs</name><argument_list>(<argument><expr><operator>(</operator><name>TermScorer</name><operator>)</operator> <name>scorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>docsAndFreqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DocsAndFreqs</name><argument_list>(<argument><expr><operator>(</operator><name>MatchOnlyTermScorer</name><operator>)</operator> <name>scorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>docsAndFreqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DocsAndFreqs</name><argument_list>(<argument><expr><name>docsAndFreqsEnum</name></expr></argument>,
                                           <argument><expr><name>docsAndFreqsEnum</name></expr></argument>,
                                           <argument><expr><call><name><name>termsEnum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>docScorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <return>return <expr><operator>new</operator> <call><name>ConjunctionTermScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><ternary><condition><expr><name>disableCoord</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><call><name>coord</name><argument_list>(
           <argument><expr><name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>docsAndFreqs</name></expr></argument>)</argument_list></call></expr>;</return>
     }

    private <function><type><name>Scorer</name></type> <name>createMatchOnlyConjunctionTermScorer</name><parameter_list>(<parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Bits</name></type> <name>acceptDocs</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>DocsAndFreqs</name><index>[]</index></name></type> <name>docsAndFreqs</name> <init>= <expr><operator>new</operator> <name><name>DocsAndFreqs</name><index>[<expr><call><name><name>weights</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermWeight</name></type> <name>weight</name> <init>= <expr><operator>(</operator><name>TermWeight</name><operator>)</operator> <call><name><name>weights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TermsEnum</name></type> <name>termsEnum</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>getTermsEnum</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>termsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ExactSimScorer</name></type> <name>docScorer</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>createDocScorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>docsAndFreqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DocsAndFreqs</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                           <argument><expr><call><name><name>termsEnum</name><operator>.</operator><name>docs</name></name><argument_list>(<argument><expr><name>acceptDocs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>termsEnum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>docScorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <return>return <expr><operator>new</operator> <call><name>MatchOnlyConjunctionTermScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><ternary><condition><expr><name>disableCoord</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><call><name>coord</name><argument_list>(
          <argument><expr><name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>docsAndFreqs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
     
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>boolean</name></type> <name>scoresDocsOutOfOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">94796f66427</literal><operator>..</operator><literal type="number">9ea088f7ed0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">317</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">317</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>final</name> <name>class</name> <name>BooleanScorer</name> extends <name>Scorer</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
    <return>return <expr><name><name>current</name><operator>.</operator><name>coord</name></name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>score</name><parameter_list>(<parameter><decl><type><name>Collector</name></type> <name>collector</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>score</name><argument_list>(<argument><expr><name>collector</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">338</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">343</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>BooleanScorer</name> extends <name>Scorer</name> <block>{
   <expr><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name> <call><name>getChildren</name><argument_list>()</argument_list></call> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name> <name>children</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name>SubScorer</name></type> <name>sub</name> <init>= <expr><name>scorers</name></expr></init></decl>;</init> <condition><expr><name>sub</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>sub</name> <operator>=</operator> <name><name>sub</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>scorer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sub</name><operator>.</operator><name>prohibited</name></name></expr> ?</condition><then> <expr><call><name><name>Occur</name><operator>.</operator><name>MUST_NOT</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Occur</name><operator>.</operator><name>SHOULD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// TODO: fix this if BQ ever sends us required clauses</comment>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>scorer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sub</name><operator>.</operator><name>prohibited</name></name></expr> ?</condition><then> <expr><literal type="string">"MUST_NOT"</literal></expr> </then><else>: <expr><literal type="string">"SHOULD"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr>
     <return>return <expr><name>children</name></expr>;</return>
   }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer2</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer2</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d019e12b24c</name><operator>..</operator><literal type="number">4a86f075891</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer2</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanScorer2</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>BooleanScorer2</name> extends <name>Scorer</name> <block>{
       <return>return <expr><name>lastDocScore</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">310</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">315</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>BooleanScorer2</name> extends <name>Scorer</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name><name>coordinator</name><operator>.</operator><name>nrMatchers</name></name></expr>;</return>
  <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></block></expr></expr_stmt>
    <return>return <expr><call><name><name>countingSumScorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">323</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">328</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>class</name> <name>BooleanScorer2</name> extends <name>Scorer</name> <block>{
   <expr><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name> <call><name>getChildren</name><argument_list>()</argument_list></call> <block>{
     <expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name> <name>children</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name>Scorer</name></type> <name>s</name> <range>: <expr><name>optionalScorers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>Occur</name><operator>.</operator><name>SHOULD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"SHOULD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr>
     <for>for <control>(<init><decl><type><name>Scorer</name></type> <name>s</name> <range>: <expr><name>prohibitedScorers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>Occur</name><operator>.</operator><name>MUST_NOT</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"MUST_NOT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
     <for>for <control>(<init><decl><type><name>Scorer</name></type> <name>s</name> <range>: <expr><name>requiredScorers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>Occur</name><operator>.</operator><name>MUST</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"MUST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     <return>return <expr><name>children</name></expr>;</return>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8d56f59d3b2</literal><operator>..</operator><literal type="number">99bf5d4b48c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <name>class</name> <name>ConjunctionScorer</name> extends <name>Scorer</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><name>sum</name> <operator>*</operator> <name>coord</name></expr>;</return>
   }

  @<function><type><name>Override</name>
  <specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><name><name>scorers</name><operator>.</operator><name>length</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>scorers</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Scorer</name></type> <name>scorer</name> <range>: <expr><name>scorers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>, <argument><expr><literal type="string">"MUST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>children</name></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionTermScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionTermScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3832661d696</literal><operator>..</operator><name>cd71e5d3048</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionTermScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConjunctionTermScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayUtil</name></name>;</import>
 
 <comment type="block" format="javadoc">/** Scorer for conjunctions, sets of terms, all of which are required. */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">43</literal> @@ <name>class</name> <name>ConjunctionTermScorer</name> extends <name>Scorer</name> <block>{
   <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>float</name> <name>sum</name> <operator>=</operator> <literal type="number">0.0f</literal></expr></block></expr></argument></throws></expr>;
     <for>for <control>(<init><decl><type><name>DocsAndFreqs</name></type> <name>docs</name> <range>: <expr><name>docsAndFreqs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>docs</name><operator>.</operator><name>docScorer</name><operator>.</operator><name>score</name></name><argument_list>(<argument><expr><name>lastDoc</name></expr></argument>, <argument><expr><call><name><name>docs</name><operator>.</operator><name>docs</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>docs</name><operator>.</operator><name>scorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
     <return>return <expr><name>sum</name> <operator>*</operator> <name>coord</name></expr>;</return>
   }
  
  @<function><type><name>Override</name>
  <specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>docsAndFreqs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>DocsAndFreqs</name></type> <name>docs</name> <range>: <expr><name>docsAndFreqs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name><name>docs</name><operator>.</operator><name>scorer</name></name></expr></argument>, <argument><expr><literal type="string">"MUST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>children</name></expr>;</return>
  </block_content>}</block></function>
 
   <class><specifier>static</specifier> <specifier>final</specifier> class <name>DocsAndFreqs</name> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocsEnum</name></type> <name>docsAndFreqs</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>DocsEnum</name></type> <name>docs</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>docFreq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ExactSimScorer</name></type> <name>docScorer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>scorer</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 
    <constructor><name>DocsAndFreqs</name><parameter_list>(<parameter><decl><type><name>DocsEnum</name></type> <name>docsAndFreqs</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>docs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docFreq</name></decl></parameter>, <parameter><decl><type><name>ExactSimScorer</name></type> <name>docScorer</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docsAndFreqs</name></name> <operator>=</operator> <name>docsAndFreqs</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DocsAndFreqs</name><argument_list>(<argument><expr><name>TermScorer</name> <name>termScorer</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>this</name><argument_list>(<argument><expr><name>termScorer</name></expr></argument>, <argument><expr><call><name><name>termScorer</name><operator>.</operator><name>getDocsEnum</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>termScorer</name><operator>.</operator><name>getDocFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>
    
    <call><name>DocsAndFreqs</name><argument_list>(<argument><expr><name>MatchOnlyTermScorer</name> <name>termScorer</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>this</name><argument_list>(<argument><expr><name>termScorer</name></expr></argument>, <argument><expr><call><name><name>termScorer</name><operator>.</operator><name>getDocsEnum</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>termScorer</name><operator>.</operator><name>getDocFreq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>
    
    <call><name>DocsAndFreqs</name><argument_list>(<argument><expr><name>Scorer</name> <name>scorer</name></expr></argument>, <argument><expr><name>DocsEnum</name> <name>docs</name></expr></argument>, <argument><expr><name>int</name> <name>docFreq</name></expr></argument>)</argument_list></call> <block>{
       <expr><name><name>this</name><operator>.</operator><name>docs</name></name> <operator>=</operator> <name>docs</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>docFreq</name></name> <operator>=</operator> <name>docFreq</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>docScorer</name></name> <operator>=</operator> <name>docScorer</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>scorer</name></name> <operator>=</operator> <name>scorer</name></expr>;
     }</block></expr></expr_stmt>
   </block_content>}</block></constructor>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">31be3523f3c</literal><operator>..</operator><literal type="number">93ecefea8f3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConstantScoreQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><name>theScore</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <return>return <expr><call><name><name>docIdSetIterator</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">87c7ae833d2</literal><operator>..</operator><literal type="number">2c28ee09271</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DisjunctionMaxQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Query</name></argument>&gt;</argument_list></name> <block>{
       <for>for <control>(<init><decl><type><name>Weight</name></type> <name>w</name> <range>: <expr><name>weights</name></expr></range></decl></init>)</control> <block>{<block_content>
         <comment type="line">// we will advance() subscorers</comment>
         <decl_stmt><decl><type><name>Scorer</name></type> <name>subScorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>acceptDocs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subScorer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>subScorer</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>subScorer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>scorers</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subScorer</name></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
       </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">88eec00dc27</literal><operator>..</operator><name>c5c73277960</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * The Scorer for DisjunctionMaxQuery.  The union of all documents generated by the the subquery scorers
@@ -27,11 +24,7 @@ import java.util.Collections;
  * by the subquery scorers that generate that document, plus tieBreakerMultiplier times the sum of the scores
  * for the other subqueries that generate the document.
  */</comment>
<class>class <name>DisjunctionMaxScorer</name> <super_list><extends>extends <super><name>Scorer</name></super></extends></super_list> <block>{

  <comment type="block">/* The scorers for subqueries that have remaining docs, kept as a min heap by number of next doc. */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Scorer</name><index>[]</index></name></type> <name>subScorers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numScorers</name></decl>;</decl_stmt>
<class>class <name>DisjunctionMaxScorer</name> <super_list><extends>extends <super><name>DisjunctionScorer</name></super></extends></super_list> <block>{
   <comment type="block">/* Multiplier applied to non-maximum-scoring subqueries for a document as they are summed into the result. */</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>tieBreakerMultiplier</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>DisjunctionMaxScorer</name> extends <name>Scorer</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <call><name>DisjunctionMaxScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name>float</name> <name>tieBreakerMultiplier</name></expr></argument>,
       <argument><expr><name><name>Scorer</name><index>[]</index></name> <name>subScorers</name></expr></argument>, <argument><expr><name>int</name> <name>numScorers</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>subScorers</name></expr></argument>, <argument><expr><name>numScorers</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>tieBreakerMultiplier</name></name> <operator>=</operator> <name>tieBreakerMultiplier</name></expr>;
    <comment type="line">// The passed subScorers array includes only scorers which have documents</comment>
    <comment type="line">// (DisjunctionMaxQuery takes care of that), and their nextDoc() was already</comment>
    <comment type="line">// called.</comment>
    <expr><name><name>this</name><operator>.</operator><name>subScorers</name></name> <operator>=</operator> <name>subScorers</name></expr>;
    <expr><name><name>this</name><operator>.</operator><name>numScorers</name></name> <operator>=</operator> <name>numScorers</name></expr>;
    
    <expr><call><name>heapify</name><argument_list>()</argument_list></call></expr>;
   }</block>
 
   @<name>Override</name>
@@ <operator>-</operator><literal type="number">113</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">99</literal></expr>,<expr><literal type="number">24</literal> @@ <name>class</name> <name>DisjunctionMaxScorer</name> extends <name>Scorer</name> <block>{
     }</block></expr>
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>int</name> <name>doc</name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>docID</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>numScorers</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>freq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>freq</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></class>
  
  <comment type="line">// Recursively iterate all subScorers that generated last doc computing sum and max</comment>
  <function><type><specifier>private</specifier> <name>int</name></type> <name>freq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name><name>subScorers</name><index>[<expr><name>root</name></expr>]</index></name><operator>.</operator><call><name>docID</name><argument_list>()</argument_list></call> <operator>==</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>freq</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>freq</name> <operator>+=</operator> <call><name>freq</name><argument_list>(<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>freq</name> <operator>+=</operator> <call><name>freq</name><argument_list>(<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>freq</name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>doc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</return></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">70</literal> <operator>+</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <name>class</name> <name>DisjunctionMaxScorer</name> extends <name>Scorer</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><name>doc</name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>docID</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>

  <comment type="line">// Organize subScorers into a min heap with scorers generating the earliest document on top.</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>heapify</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>numScorers</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>heapAdjust</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block">/* The subtree of subScorers at root is a min heap except possibly for its root element.
   * Bubble the root down as required to make the subtree a heap.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>heapAdjust</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><name><name>subScorers</name><index>[<expr><name>root</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>numScorers</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>lchild</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>lscorer</name> <init>= <expr><name><name>subScorers</name><index>[<expr><name>lchild</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>ldoc</name> <init>= <expr><call><name><name>lscorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rdoc</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>, <decl><type ref="prev"/><name>rchild</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>rscorer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rchild</name> <operator>&lt;</operator> <name>numScorers</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rscorer</name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><name>rchild</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rdoc</name> <operator>=</operator> <call><name><name>rscorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>ldoc</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rdoc</name> <operator>&lt;</operator> <name>ldoc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rscorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>rchild</name></expr>]</index></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>rchild</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lscorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>lchild</name></expr>]</index></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>lchild</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdoc</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rscorer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>rchild</name></expr>]</index></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>rchild</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <comment type="line">// Remove the root Scorer from subScorers and re-establish it as a heap</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>heapRemoveRoot</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numScorers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><name>numScorers</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>numScorers</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>numScorers</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>heapAdjust</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ChildScorer</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>new</operator> <name><name>ChildScorer</name><index>[<expr><name>numScorers</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>numScorers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableCollection</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionScorer</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..84bf866b6c9</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">108</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for Scorers that score disjunctions.
 * Currently this just provides helper methods to manage the heap.
 */</comment>
<class><specifier>abstract</specifier> class <name>DisjunctionScorer</name> <super_list><extends>extends <super><name>Scorer</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Scorer</name></type> <name><name>subScorers</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>numScorers</name></decl>;</decl_stmt>
  
  <constructor><specifier>protected</specifier> <name>DisjunctionScorer</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>Scorer</name></type> <name><name>subScorers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numScorers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subScorers</name></name> <operator>=</operator> <name>subScorers</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numScorers</name></name> <operator>=</operator> <name>numScorers</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heapify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <comment type="block" format="javadoc">/** 
   * Organize subScorers into a min heap with scorers generating the earliest document on top.
   */</comment>
  <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>heapify</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>numScorers</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>heapAdjust</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/** 
   * The subtree of subScorers at root is a min heap except possibly for its root element.
   * Bubble the root down as required to make the subtree a heap.
   */</comment>
  <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>heapAdjust</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><name><name>subScorers</name><index>[<expr><name>root</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>numScorers</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>lchild</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>lscorer</name> <init>= <expr><name><name>subScorers</name><index>[<expr><name>lchild</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>ldoc</name> <init>= <expr><call><name><name>lscorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rdoc</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>, <decl><type ref="prev"/><name>rchild</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>rscorer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rchild</name> <operator>&lt;</operator> <name>numScorers</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rscorer</name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><name>rchild</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rdoc</name> <operator>=</operator> <call><name><name>rscorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>ldoc</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rdoc</name> <operator>&lt;</operator> <name>ldoc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rscorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>rchild</name></expr>]</index></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>rchild</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lscorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>lchild</name></expr>]</index></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>lchild</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdoc</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rscorer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>rchild</name></expr>]</index></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>rchild</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** 
   * Remove the root Scorer from subScorers and re-establish it as a heap
   */</comment>
  <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>heapRemoveRoot</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numScorers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><name>numScorers</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subScorers</name><index>[<expr><name>numScorers</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>numScorers</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>heapAdjust</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>numScorers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numScorers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name><name>subScorers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"SHOULD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>children</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionSumScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionSumScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c328e0fd2d8</name><operator>..</operator><literal type="number">148fd153d02</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionSumScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionSumScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">42</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ScorerDocQueue</name></name>;</import>

 <comment type="block" format="javadoc">/** A Scorer for OR like queries, counterpart of &lt;code&gt;ConjunctionScorer&lt;/code&gt;.
  * This Scorer implements {@link Scorer#advance(int)} and uses advance() on the given Scorers. 
  */</comment>
<class>class <name>DisjunctionSumScorer</name> <super_list><extends>extends <super><name>Scorer</name></super></extends></super_list> <block>{
  <comment type="block" format="javadoc">/** The number of subscorers. */</comment> 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>nrScorers</name></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** The subscorers. */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name></type> <name>subScorers</name></decl>;</decl_stmt>
  
<class>class <name>DisjunctionSumScorer</name> <super_list><extends>extends <super><name>DisjunctionScorer</name></super></extends></super_list> <block>{ 
   <comment type="block" format="javadoc">/** The minimum number of scorers that should match. */</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>minimumNrMatchers</name></decl>;</decl_stmt>
   
  <comment type="block" format="javadoc">/** The scorerDocQueue contains all subscorers ordered by their current doc(),
   * with the minimum at the top.
   * &lt;br&gt;The scorerDocQueue is initialized the first time nextDoc() or advance() is called.
   * &lt;br&gt;An exhausted scorer is immediately removed from the scorerDocQueue.
   * &lt;br&gt;If less than the minimumNrMatchers scorers
   * remain in the scorerDocQueue nextDoc() and advance() return false.
   * &lt;p&gt;
   * After each to call to nextDoc() or advance()
   * &lt;code&gt;currentSumScore&lt;/code&gt; is the total score of the current matching doc,
   * &lt;code&gt;nrMatchers&lt;/code&gt; is the number of matching scorers,
   * and all scorers are after the matching doc, or are exhausted.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ScorerDocQueue</name></type> <name>scorerDocQueue</name></decl>;</decl_stmt>
  
   <comment type="block" format="javadoc">/** The document number of the current match. */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentDoc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/** The number of subscorers that provide the current match. */</comment>
   <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>nrMatchers</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>currentScore</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NaN</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>score</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NaN</name></name></expr></init></decl>;</decl_stmt>
   
   <comment type="block" format="javadoc">/** Construct a &lt;code&gt;DisjunctionScorer&lt;/code&gt;.
    * @param weight The weight to be used.
@@ -69,21 +47,16 @@ class DisjunctionSumScorer extends Scorer {
    * it more efficient to use &lt;code&gt;ConjunctionScorer&lt;/code&gt;.
    */</comment>
   <constructor><specifier>public</specifier> <name>DisjunctionSumScorer</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name></type> <name>subScorers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minimumNrMatchers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>nrScorers</name> <operator>=</operator> <call><name><name>subScorers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><call><name><name>subScorers</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Scorer</name><index>[<expr><call><name><name>subScorers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>subScorers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>minimumNrMatchers</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Minimum nr of matchers must be positive"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nrScorers</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"There must be at least 2 subScorers"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
 
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minimumNrMatchers</name></name> <operator>=</operator> <name>minimumNrMatchers</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subScorers</name></name> <operator>=</operator> <name>subScorers</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>scorerDocQueue</name>  <operator>=</operator> <call><name>initScorerDocQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
   
   <comment type="block" format="javadoc">/** Construct a &lt;code&gt;DisjunctionScorer&lt;/code&gt;, using one as the minimum number
@@ -93,119 +66,66 @@ class DisjunctionSumScorer extends Scorer {
     this(weight, subScorers, 1);
   }
 
  /** Called the first time nextDoc() or advance() is called to
   * initialize &lt;code&gt;scorerDocQueue&lt;/code&gt;.
   * @return 
   */</comment>
  <function><type><specifier>private</specifier> <name>ScorerDocQueue</name></type> <name>initScorerDocQueue</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ScorerDocQueue</name></type> <name>docQueue</name> <init>= <expr><operator>new</operator> <call><name>ScorerDocQueue</name><argument_list>(<argument><expr><name>nrScorers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>se</name> <range>: <expr><name>subScorers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>se</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>docQueue</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>docQueue</name></expr>;</return> 
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Scores and collects all matching documents.
   * @param collector The collector to which all matching documents are passed through.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>score</name><parameter_list>(<parameter><decl><type><name>Collector</name></type> <name>collector</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>setScorer</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>nextDoc</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>currentDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Expert: Collects matching documents in a range.  Hook for optimization.
   * Note that {@link #nextDoc()} must be called once before this method is called
   * for the first time.
   * @param collector The collector to which all matching documents are passed through.
   * @param max Do not score documents past this.
   * @return true if more matching documents may remain.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>score</name><parameter_list>(<parameter><decl><type><name>Collector</name></type> <name>collector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstDocID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// firstDocID is ignored since nextDoc() sets 'currentDoc'</comment>
    <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>setScorer</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>currentDoc</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>currentDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>nextDoc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>int</name></type> <name>nextDoc</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    
    <if_stmt><if>if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>minimumNrMatchers</name> <operator>||</operator> <operator>!</operator><call><name>advanceAfterCurrent</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>currentDoc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>currentDoc</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Advance all subscorers after the current document determined by the
   * top of the &lt;code&gt;scorerDocQueue&lt;/code&gt;.
   * Repeat until at least the minimum number of subscorers match on the same
   * document and all subscorers are after that document or are exhausted.
   * &lt;br&gt;On entry the &lt;code&gt;scorerDocQueue&lt;/code&gt; has at least &lt;code&gt;minimumNrMatchers&lt;/code&gt;
   * available. At least the scorer with the minimum document number will be advanced.
   * @return true iff there is a match.
   * &lt;br&gt;In case there is a match, &lt;/code&gt;currentDoc&lt;/code&gt;, &lt;/code&gt;currentSumScore&lt;/code&gt;,
   * and &lt;/code&gt;nrMatchers&lt;/code&gt; describe the match.
   *
   * TODO: Investigate whether it is possible to use advance() when
   * the minimum number of matchers is bigger than one, ie. try and use the
   * character of ConjunctionScorer for the minimum number of matchers.
   * Also delay calling score() on the sub scorers until the minimum number of
   * matchers is reached.
   * &lt;br&gt;For this, a Scorer array with minimumNrMatchers elements might
   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>advanceAfterCurrent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <do>do <block>{<block_content> <comment type="line">// repeat until minimum nr of matchers</comment>
      <expr_stmt><expr><name>currentDoc</name> <operator>=</operator> <call><name><name>scorerDocQueue</name><operator>.</operator><name>topDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>currentScore</name> <operator>=</operator> <call><name><name>scorerDocQueue</name><operator>.</operator><name>topScore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nrMatchers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <do>do <block>{<block_content> <comment type="line">// Until all subscorers are after currentDoc</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scorerDocQueue</name><operator>.</operator><name>topNextAndAdjustElsePop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break> <comment type="line">// nothing more to advance, check for last match.</comment>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>docID</name><argument_list>()</argument_list></call> <operator>==</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>nextDoc</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>heapAdjust</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>heapRemoveRoot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>&lt;</operator> <name>minimumNrMatchers</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>doc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</return>
           </block_content>}</block></if></if_stmt>
         </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>topDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>currentDoc</name></expr>)</condition> <block>{<block_content>
          <break>break;</break> <comment type="line">// All remaining subscorers are after currentDoc.</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>currentScore</name> <operator>+=</operator> <call><name><name>scorerDocQueue</name><operator>.</operator><name>topScore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nrMatchers</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while> <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
      
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>afterNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>nrMatchers</name> <operator>&gt;=</operator> <name>minimumNrMatchers</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>minimumNrMatchers</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <break>break;</break>
       </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt> <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>doc</name></expr>;</return>
  </block_content>}</block>
  
  private void afterNext(</do>)</block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>final</name> <name>Scorer</name> <name>sub</name> <operator>=</operator> <name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></block></expr></argument></throws></block><empty_stmt>;</empty_stmt>
    doc = sub.docID(</do>)</block_content></block>;</function>
    <expr_stmt><expr><name>score</name> <operator>=</operator> <call><name><name>sub</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nrMatchers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>countMatches</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>countMatches</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <comment type="line">// TODO: this currently scores, but so did the previous impl</comment>
  <comment type="line">// TODO: remove recursion.</comment>
  <comment type="line">// TODO: if we separate scoring, out of here, modify this</comment>
  <comment type="line">// and afterNext() to terminate when nrMatchers == minimumNrMatchers</comment>
  <comment type="line">// then also change freq() to just always compute it from scratch</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>countMatches</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>&lt;</operator> <name>numScorers</name> <operator>&amp;&amp;</operator> <name><name>subScorers</name><index>[<expr><name>root</name></expr>]</index></name><operator>.</operator><call><name>docID</name><argument_list>()</argument_list></call> <operator>==</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nrMatchers</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>subScorers</name><index>[<expr><name>root</name></expr>]</index></name><operator>.</operator><call><name>score</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>countMatches</name><argument_list>(<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>countMatches</name><argument_list>(<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** Returns the score of the current document matching the query.
    * Initially invalid, until {@link #nextDoc()} is called the first time.
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content> <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>currentScore</name></expr>;</return> </block_content>}</block></function>
  <function><type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content> 
    <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>score</name></expr>;</return> 
  </block_content>}</block></function>
    
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>currentDoc</name></expr>;</return>
    <return>return <expr><name>doc</name></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/** Returns the number of subscorers matching the current document.
   * Initially invalid, until {@link #nextDoc()} is called the first time.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>nrMatchers</name><parameter_list>()</parameter_list> <block>{<block_content>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><name>nrMatchers</name></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">221</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <name>class</name> <name>DisjunctionSumScorer</name> extends <name>Scorer</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   @<name>Override</name>
   <specifier>public</specifier> <name>int</name> <call><name>advance</name><argument_list>(<argument><expr><name>int</name> <name>target</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <if_stmt><if>if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>minimumNrMatchers</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>currentDoc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</return>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;=</operator> <name>currentDoc</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>currentDoc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>topDoc</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>target</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name>advanceAfterCurrent</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>currentDoc</name></expr> </then><else>: <expr><operator>(</operator><name>currentDoc</name> <operator>=</operator> <name>NO_MORE_DOCS</name><operator>)</operator></expr></else></ternary></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>scorerDocQueue</name><operator>.</operator><name>topSkipToAndAdjustElsePop</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>scorerDocQueue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>minimumNrMatchers</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>currentDoc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</return>
    <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>doc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</return></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>docID</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>subScorers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>advance</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NO_MORE_DOCS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>heapAdjust</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>heapRemoveRoot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>numScorers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>doc</name> <operator>=</operator> <name>NO_MORE_DOCS</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
       </block_content>}</block></else></if_stmt>
    </block_content>}</block></while> <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>afterNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nrMatchers</name> <operator>&gt;=</operator> <name>minimumNrMatchers</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>doc</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>nextDoc</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></if></if_stmt>
 </block_content>}</block>
diff --git a/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java b/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
index 9cfd3373eea..e2302f974f3 100644
-- a/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
++ b/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
@@ -24<operator>,</operator>6 +24<operator>,</operator>8 @@ import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.ToStringUtils;
 
 import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
 import java.util.Set;
 
 
@@ -221<operator>,</operator>6 +223<operator>,</operator>14 @@ public class FilteredQuery extends Query <block>{<block_content>
             <function><type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
               <return>return <expr><call><name><name>scorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr>;</return>
             </block_content>}</block></function>
            
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content> <return>return <expr><call><name><name>scorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
            
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>, <argument><expr><literal type="string">"FILTERED"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
           </block_content>}</block>;
         }</do>
       </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchAllDocsQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchAllDocsQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dc3dbd3b726</name><operator>..</operator><literal type="number">5844c93ff60</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchAllDocsQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchAllDocsQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>MatchAllDocsQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><name>score</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><name>doc</name> <operator>=</operator> <name>target</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyConjunctionTermsScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyConjunctionTermsScorer</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>a8336f26461</name><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyConjunctionTermsScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block" format="javadoc">/** Scorer for conjunctions, sets of terms, all of which are required. */</comment>
<class><specifier>final</specifier> class <name>MatchOnlyConjunctionTermScorer</name> <super_list><extends>extends <super><name>ConjunctionTermScorer</name></super></extends></super_list> <block>{
  <constructor><name>MatchOnlyConjunctionTermScorer</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>coord</name></decl></parameter>,
      <parameter><decl><type><name><name>DocsAndFreqs</name><index>[]</index></name></type> <name>docsAndFreqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>, <argument><expr><name>docsAndFreqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>DocsAndFreqs</name></type> <name>docs</name> <range>: <expr><name>docsAndFreqs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>docs</name><operator>.</operator><name>docScorer</name><operator>.</operator><name>score</name></name><argument_list>(<argument><expr><name>lastDoc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>sum</name> <operator>*</operator> <name>coord</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyTermScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyTermScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>faad389b775</name><operator>..</operator><literal type="number">742f0be5147</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyTermScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchOnlyTermScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>Similarity</name></name>;</import>
 <class><specifier>final</specifier> class <name>MatchOnlyTermScorer</name> <super_list><extends>extends <super><name>Scorer</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DocsEnum</name></type> <name>docsEnum</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name></type> <name>docScorer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>docFreq</name></decl>;</decl_stmt>
   
   <comment type="block" format="javadoc">/**
    * Construct a &lt;code&gt;TermScorer&lt;/code&gt;.
@@ -41,11 +42,14 @@ final class MatchOnlyTermScorer extends Scorer {
    * @param docScorer
    *          The &lt;/code&gt;Similarity.ExactSimScorer&lt;/code&gt; implementation 
    *          to be used for score computations.
   * @param docFreq
   *          per-segment docFreq of this term
    */</comment>
  <constructor><name>MatchOnlyTermScorer</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>td</name></decl></parameter>, <parameter><decl><type><name><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name></type> <name>docScorer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>MatchOnlyTermScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name>DocsEnum</name> <name>td</name></expr></argument>, <argument><expr><name><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name> <name>docScorer</name></expr></argument>, <argument><expr><name>int</name> <name>docFreq</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>docScorer</name></name> <operator>=</operator> <name>docScorer</name></expr>;
     <expr><name><name>this</name><operator>.</operator><name>docsEnum</name></name> <operator>=</operator> <name>td</name></expr>;
    <expr><name><name>this</name><operator>.</operator><name>docFreq</name></name> <operator>=</operator> <name>docFreq</name></expr>;
   }</block>
 
   @<name>Override</name>
@@ <operator>-</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <name>final</name> <name>class</name> <name>MatchOnlyTermScorer</name> extends <name>Scorer</name> <block>{
   <comment type="block" format="javadoc">/** Returns a string representation of this &lt;code&gt;TermScorer&lt;/code&gt;. */</comment>
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>String</name> <call><name>toString</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><literal type="string">"scorer("</literal> <operator>+</operator> <name>weight</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return></block></expr> }</block>
  
  <comment type="line">// TODO: benchmark if the specialized conjunction really benefits</comment>
  <comment type="line">// from these, or if instead its from sorting by docFreq, or both</comment>

  <name>DocsEnum</name> <call><name>getDocsEnum</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>docsEnum</name></expr>;</return>
  }</block></expr></expr_stmt>
  
  <comment type="line">// TODO: generalize something like this for scorers?</comment>
  <comment type="line">// even this is just an estimation...</comment>
  
  <function><type><name>int</name></type> <name>getDocFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>docFreq</name></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></constructor>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ReqExclScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ReqExclScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">64962ebd6e4</literal><operator>..</operator><name>bf7defebae2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ReqExclScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ReqExclScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 
 <comment type="block" format="javadoc">/** A Scorer for queries with a required subscorer
  * and an excluding (prohibited) sub DocIdSetIterator.
@@ -103,6 +104,16 @@ class ReqExclScorer extends Scorer {
     return reqScorer.score(); // reqScorer may be null when next() or skipTo() already return false
   }
   
  @Override
  public float freq() throws IOException {
    return reqScorer.freq();
  }

  @Override
  public Collection&lt;ChildScorer&gt; getChildren() {
    return Collections.singleton(new ChildScorer(reqScorer, "FILTERED"));
  }

   @Override
   public int advance(int target) throws IOException {
     if (reqScorer == null) {
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
index 1861b34a52c..d9839634911 100644
-- a/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
++ b/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
@@ -17,6 +17,8 @@ package org.apache.lucene.search;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 
 <comment type="block" format="javadoc">/** A Scorer for queries with a required part and an optional part.
  * Delays skipTo() on the optional part until a score() is needed.
@@ -39,6 +41,8 @@ class ReqOptSumScorer extends Scorer {
       Scorer optScorer)
   {
     super(reqScorer.weight);
    assert reqScorer != null;
    assert optScorer != null;
     this.reqScorer = reqScorer;
     this.optScorer = optScorer;
   }
@@ -80,5 +84,19 @@ class ReqOptSumScorer extends Scorer {
     return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;
   }
 
  @Override
  public float freq() throws IOException {
    // we might have deferred advance()
    score();
    return (optScorer != null &amp;&amp; optScorer.docID() == reqScorer.docID()) ? 2 : 1;
  }

  @Override
  public Collection&lt;ChildScorer&gt; getChildren() {
    ArrayList&lt;ChildScorer&gt; children = new ArrayList&lt;ChildScorer&gt;(2);
    children.add(new ChildScorer(reqScorer, "MUST"));
    children.add(new ChildScorer(optScorer, "SHOULD"));
    return children;
  }
 }
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java b/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
index 1a005dc358c..cabadf507b3 100644
-- a/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
++ b/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
@@ -18,6 +18,8 @@ package org.apache.lucene.search;
  */</comment>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A {@link Scorer} which wraps another scorer and caches the score of the
@@ -58,6 +60,11 @@ public class ScoreCachingWrappingScorer extends Scorer {
     return curScore;
   }
 
  @Override
  public float freq() throws IOException {
    return scorer.freq();
  }

   @Override
   public int docID() {
     return scorer.docID();
@@ -77,5 +84,9 @@ public class ScoreCachingWrappingScorer extends Scorer {
   public int advance(int target) throws IOException {
     return scorer.advance(target);
   }
  

  @Override
  public Collection&lt;ChildScorer&gt; getChildren() {
    return Collections.singleton(new ChildScorer(scorer, "CACHED"));
  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/Scorer.java b/lucene/core/src/java/org/apache/lucene/search/Scorer.java
index f1c67e1c8ef..f654d74e5fb 100644
-- a/lucene/core/src/java/org/apache/lucene/search/Scorer.java
++ b/lucene/core/src/java/org/apache/lucene/search/Scorer.java
@@ -98,9 +98,7 @@ public abstract class Scorer extends DocIdSetIterator {
    *  "sloppy" the match was.
    *
    * @lucene.experimental */</comment>
  <function><type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="string">" does not implement freq()"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
   
   <comment type="block" format="javadoc">/** returns parent Weight
    * @lucene.experimental
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
index 7d781f2eb29..a9a55bc1424 100644
-- a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
++ b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
@@ -85,27 +85,20 @@ public class TermQuery extends Query {
       }
       DocsEnum docs = termsEnum.docs(acceptDocs, null, true);
       if (docs != null) {
        return new TermScorer(this, docs, createDocScorer(context));
        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());
       } else {
         // Index does not store freq info
         docs = termsEnum.docs(acceptDocs, null, false);
         assert docs != null;
        return new MatchOnlyTermScorer(this, docs, createDocScorer(context));
        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());
       }
     }
     
    /**
     * Creates an {@link ExactSimScorer} for this {@link TermWeight}*/</comment>
    <function><type><name>ExactSimScorer</name></type> <name>createDocScorer</name><parameter_list>(<parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>similarity</name><operator>.</operator><name>exactSimScorer</name></name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
     <comment type="block" format="javadoc">/**
      * Returns a {@link TermsEnum} positioned at this weights Term or null if
      * the term does not exist in the given context
      */</comment>
    <function><type><name>TermsEnum</name></type> <name>getTermsEnum</name><parameter_list>(<parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <name>TermsEnum</name></type> <name>getTermsEnum</name><parameter_list>(<parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>TermState</name></type> <name>state</name> <init>= <expr><call><name><name>termStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <comment type="line">// term is not present in that reader</comment>
         <assert>assert <expr><call><name>termNotInReader</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>term</name><operator>.</operator><name>field</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>term</name><operator>.</operator><name>bytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"no termstate found but term exists in reader term="</literal> <operator>+</operator> <name>term</name></expr>;</assert>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ebdee4b9600</name><operator>..</operator><literal type="number">3aff7f15895</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>Similarity</name></name>;</import>
 <class><specifier>final</specifier> class <name>TermScorer</name> <super_list><extends>extends <super><name>Scorer</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DocsEnum</name></type> <name>docsEnum</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name></type> <name>docScorer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>docFreq</name></decl>;</decl_stmt>
   
   <comment type="block" format="javadoc">/**
    * Construct a &lt;code&gt;TermScorer&lt;/code&gt;.
@@ -38,11 +39,14 @@ final class TermScorer extends Scorer {
    * @param docScorer
    *          The &lt;/code&gt;Similarity.ExactSimScorer&lt;/code&gt; implementation 
    *          to be used for score computations.
   * @param docFreq
   *          per-segment docFreq of this term
    */</comment>
  <constructor><name>TermScorer</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>DocsEnum</name></type> <name>td</name></decl></parameter>, <parameter><decl><type><name><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name></type> <name>docScorer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TermScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name>DocsEnum</name> <name>td</name></expr></argument>, <argument><expr><name><name>Similarity</name><operator>.</operator><name>ExactSimScorer</name></name> <name>docScorer</name></expr></argument>, <argument><expr><name>int</name> <name>docFreq</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;
     <name><name>this</name><operator>.</operator><name>docScorer</name></name> <operator>=</operator> <name>docScorer</name></block></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docsEnum</name></name> <operator>=</operator> <name>td</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docFreq</name></name> <operator>=</operator> <name>docFreq</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">93</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>final</name> <name>class</name> <name>TermScorer</name> extends <name>Scorer</name> <block>{
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>String</name> <call><name>toString</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><literal type="string">"scorer("</literal> <operator>+</operator> <name>weight</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return></block></expr> }</block>
 
  <comment type="line">// TODO: benchmark if the specialized conjunction really benefits</comment>
  <comment type="line">// from this, or if instead its from sorting by docFreq, or both</comment>

  <name>DocsEnum</name> <call><name>getDocsEnum</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>docsEnum</name></expr>;</return>
  }</block></expr></expr_stmt>
  
  <comment type="line">// TODO: generalize something like this for scorers?</comment>
  <comment type="line">// even this is just an estimation...</comment>
  
  <function><type><name>int</name></type> <name>getDocFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>docFreq</name></expr>;</return>
  </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ScorerDocQueue</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ScorerDocQueue</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100755</literal>
<name>index</name> <name>c53aa0b828c</name><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ScorerDocQueue</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">219</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/* Derived from org.apache.lucene.util.PriorityQueue of March 2005 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name></name>;</import>

<comment type="block" format="javadoc">/** A ScorerDocQueue maintains a partial ordering of its Scorers such that the
  least Scorer can always be found in constant time.  Put()'s and pop()'s
  require log(size) time. The ordering is by Scorer.doc().
 *
 * @lucene.internal
 */</comment>
<class><specifier>public</specifier> class <name>ScorerDocQueue</name> <block>{  <comment type="line">// later: SpansQueue for spans with doc and term positions</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HeapedScorerDoc</name><index>[]</index></name></type> <name>heap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
  
  <class><specifier>private</specifier> class <name>HeapedScorerDoc</name> <block>{
    <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doc</name></decl>;</decl_stmt>
    
    <constructor><name>HeapedScorerDoc</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></constructor>
    
    <constructor><name>HeapedScorerDoc</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scorer</name></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>doc</name></name> <operator>=</operator> <name>doc</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><name>void</name></type> <name>adjust</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  }</block></class>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>HeapedScorerDoc</name></type> <name>topHSD</name></decl>;</decl_stmt> <comment type="line">// same as heap[1], only for speed</comment>

  <comment type="block" format="javadoc">/** Create a ScorerDocQueue with a maximum size. */</comment>
  <constructor><specifier>public</specifier> <name>ScorerDocQueue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// assert maxSize &gt;= 0;</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>heapSize</name> <init>= <expr><name>maxSize</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>heap</name> <operator>=</operator> <operator>new</operator> <name><name>HeapedScorerDoc</name><index>[<expr><name>heapSize</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxSize</name></name> <operator>=</operator> <name>maxSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>topHSD</name> <operator>=</operator> <name><name>heap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="line">// initially null</comment>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Adds a Scorer to a ScorerDocQueue in log(size) time.
   * If one tries to add more Scorers than maxSize
   * a RuntimeException (ArrayIndexOutOfBound) is thrown.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>HeapedScorerDoc</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>upHeap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Adds a Scorer to the ScorerDocQueue in log(size) time if either
   * the ScorerDocQueue is not full, or not lessThan(scorer, top()).
   * @param scorer
   * @return true if scorer is added, false otherwise.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>)</parameter_list><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>maxSize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>docNr</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator> <operator>(</operator><name>docNr</name> <operator>&lt;</operator> <name><name>topHSD</name><operator>.</operator><name>doc</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// heap[1] is top()</comment>
        <expr_stmt><expr><name><name>heap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>HeapedScorerDoc</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>, <argument><expr><name>docNr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>downHeap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns the least Scorer of the ScorerDocQueue in constant time.
   * Should not be used when the queue is empty.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Scorer</name></type> <name>top</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// assert size &gt; 0;</comment>
    <return>return <expr><name><name>topHSD</name><operator>.</operator><name>scorer</name></name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns document number of the least Scorer of the ScorerDocQueue
   * in constant time.
   * Should not be used when the queue is empty.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>topDoc</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// assert size &gt; 0;</comment>
    <return>return <expr><name><name>topHSD</name><operator>.</operator><name>doc</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>topScore</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// assert size &gt; 0;</comment>
    <return>return <expr><call><name><name>topHSD</name><operator>.</operator><name>scorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>topNextAndAdjustElsePop</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>checkAdjustElsePop</name><argument_list>(<argument><expr><call><name><name>topHSD</name><operator>.</operator><name>scorer</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>topSkipToAndAdjustElsePop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>checkAdjustElsePop</name><argument_list>(<argument><expr><call><name><name>topHSD</name><operator>.</operator><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkAdjustElsePop</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content> <comment type="line">// see also adjustTop</comment>
      <expr_stmt><expr><name><name>topHSD</name><operator>.</operator><name>doc</name></name> <operator>=</operator> <call><name><name>topHSD</name><operator>.</operator><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// see also popNoResult</comment>
      <expr_stmt><expr><name><name>heap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>heap</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt> <comment type="line">// move last to first</comment>
      <expr_stmt><expr><name><name>heap</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>downHeap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cond</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Removes and returns the least scorer of the ScorerDocQueue in log(size)
   * time.
   * Should not be used when the queue is empty.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Scorer</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// assert size &gt; 0;</comment>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>result</name> <init>= <expr><name><name>topHSD</name><operator>.</operator><name>scorer</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>popNoResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/** Removes the least scorer of the ScorerDocQueue in log(size) time.
   * Should not be used when the queue is empty.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>popNoResult</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>heap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>heap</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt> <comment type="line">// move last to first</comment>
    <expr_stmt><expr><name><name>heap</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>downHeap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">// adjust heap</comment>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Should be called when the scorer at top changes doc() value.
   * Still log(n) worst case, but it's at least twice as fast to &lt;pre&gt;
   *  { pq.top().change(); pq.adjustTop(); }
   * &lt;/pre&gt; instead of &lt;pre&gt;
   *  { o = pq.pop(); o.change(); pq.push(o); }
   * &lt;/pre&gt;
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>adjustTop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// assert size &gt; 0;</comment>
    <expr_stmt><expr><call><name><name>topHSD</name><operator>.</operator><name>adjust</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>downHeap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns the number of scorers currently stored in the ScorerDocQueue. */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>size</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Removes all entries from the ScorerDocQueue. */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>upHeap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapedScorerDoc</name></type> <name>node</name> <init>= <expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>		  <comment type="line">// save bottom node</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>.</operator><name>doc</name></name> <operator>&lt;</operator> <name><name>heap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>doc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>			  <comment type="line">// shift parents down</comment>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>				  <comment type="line">// install saved node</comment>
    <expr_stmt><expr><name>topHSD</name> <operator>=</operator> <name><name>heap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>downHeap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapedScorerDoc</name></type> <name>node</name> <init>= <expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>	          <comment type="line">// save top node</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>				  <comment type="line">// find smaller child</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&lt;=</operator> <name>size</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>doc</name> <operator>&lt;</operator> <name><name>heap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>doc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;=</operator> <name>size</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>doc</name> <operator>&lt;</operator> <name><name>node</name><operator>.</operator><name>doc</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>			  <comment type="line">// shift up child</comment>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>doc</name> <operator>&lt;</operator> <name><name>heap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>doc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>heap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>				  <comment type="line">// install saved node</comment>
    <expr_stmt><expr><name>topHSD</name> <operator>=</operator> <name><name>heap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d631892d34e</name><operator>..</operator><name>b90790b4274</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>final</name> <name>class</name> <name>JustCompileSearch</name> <block>{
     <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><name>UNSUPPORTED_MSG</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;</block></expr>
     }</block>
    
    @<name>Override</name>
    <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <block>{
      <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><name>UNSUPPORTED_MSG</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
    }</block></expr></expr_stmt>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanQueryVisitSubscorers</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanQueryVisitSubscorers</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..18680633032</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanQueryVisitSubscorers</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">184</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name><operator>.</operator><name>ChildScorer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>

<comment type="line">// TODO: refactor to a base class, that collects freqs from the scorer tree</comment>
<comment type="line">// and test all queries with it</comment>
<class><specifier>public</specifier> class <name>TestBooleanQueryVisitSubscorers</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexReader</name></type> <name>reader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>F1</name> <init>= <expr><literal type="string">"title"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>F2</name> <init>= <expr><literal type="string">"body"</literal></expr></init></decl>;</decl_stmt>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexWriterConfig</name></type> <name>config</name> <init>= <expr><call><name>newIndexWriterConfig</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setMergePolicy</name></name><argument_list>(<argument><expr><call><name>newLogMergePolicy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we will use docids to validate</comment>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><call><name>doc</name><argument_list>(<argument><expr><literal type="string">"lucene"</literal></expr></argument>, <argument><expr><literal type="string">"lucene is a very popular search engine library"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><call><name>doc</name><argument_list>(<argument><expr><literal type="string">"solr"</literal></expr></argument>, <argument><expr><literal type="string">"solr is a very popular search server and is using lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><call><name>doc</name><argument_list>(<argument><expr><literal type="string">"nutch"</literal></expr></argument>, <argument><expr><literal type="string">"nutch is an internet search engine with web crawler and is using lucene and hadoop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>writer</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>searcher</name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDisjunctions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>bq</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><literal type="string">"lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tfs</name> <init>= <expr><call><name>getDocCounts</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>bq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 3 documents</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f1:lucene + f2:lucene + f2:search</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:search + f2:lucene</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:search + f2:lucene</comment>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedDisjunctions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>bq</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><literal type="string">"lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>bq2</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bq2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bq2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>bq2</name></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tfs</name> <init>= <expr><call><name>getDocCounts</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>bq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 3 documents</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f1:lucene + f2:lucene + f2:search</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:search + f2:lucene</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:search + f2:lucene</comment>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testConjunctions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>bq</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"is"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tfs</name> <init>= <expr><call><name>getDocCounts</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>bq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 3 documents</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:lucene + f2:is</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:is + f2:is + f2:lucene</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>tfs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f2:is + f2:is + f2:lucene</comment>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <name>Document</name></type> <name>doc</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextField</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextField</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>doc</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getDocCounts</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>query</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>MyCollector</name></type> <name>collector</name> <init>= <expr><operator>new</operator> <call><name>MyCollector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>collector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>collector</name><operator>.</operator><name>docCounts</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <class><specifier>static</specifier> class <name>MyCollector</name> <super_list><extends>extends <super><name>Collector</name></super></extends></super_list> <block>{
    
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>TopDocsCollector</name><argument_list type="generic">&lt;<argument><name>ScoreDoc</name></argument>&gt;</argument_list></name></type> <name>collector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>docBase</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>docCounts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name></type> <name>tqsSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <constructor><name>MyCollector</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>collector</name> <operator>=</operator> <call><name><name>TopScoreDocCollector</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>acceptsDocsOutOfOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>collect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>Scorer</name></type> <name>scorer</name> <range>: <expr><name>tqsSet</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>freq</name> <operator>+=</operator> <call><name><name>scorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>docCounts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>docBase</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setNextReader</name><parameter_list>(<parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docBase</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>docBase</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>setNextReader</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setScorer</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>collector</name><operator>.</operator><name>setScorer</name></name><argument_list>(<argument><expr><name>scorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tqsSet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fillLeaves</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>, <argument><expr><name>tqsSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>fillLeaves</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>scorer</name><operator>.</operator><name>getWeight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuery</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>TermQuery</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>scorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><decl><type><name>ChildScorer</name></type> <name>child</name> <range>: <expr><call><name><name>scorer</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>fillLeaves</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>child</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>TopDocs</name></type> <name>topDocs</name><parameter_list>()</parameter_list><block>{<block_content>
      <return>return <expr><call><name><name>collector</name><operator>.</operator><name>topDocs</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>int</name></type> <name>freq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>docCounts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1278cd79e0f</literal><operator>..</operator><literal type="number">4bc0fc7ee2c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestBooleanScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBooleanScorer</name> extends <name>LuceneTestCase</name>
     <name><name>Scorer</name><index>[]</index></name> <name>scorers</name> <operator>=</operator> <operator>new</operator> <name><name>Scorer</name><index>[]</index></name> <block>{<expr><operator>new</operator> <class><super><name>Scorer</name></super><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list> <block>{
       <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
       <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> <expr_stmt/></block_content></block></function></block></class></expr>}</block>
      @<name>Override</name> <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call>  <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
       <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>doc</name></expr>;</return> </block_content>}</block></function>
       
       <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>int</name></type> <name>nextDoc</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestCachingCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestCachingCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bbe2bc3da2b</name><operator>..</operator><literal type="number">298698b1a82</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestCachingCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestCachingCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCachingCollector</name> extends <name>LuceneTestCase</name> <block>{
     
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestConjunctions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestConjunctions</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..698d0cde240</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestConjunctions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">142</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>StringField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInvertState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Norm</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>similarities</name><operator>.</operator><name>Similarity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>TestConjunctions</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexReader</name></type> <name>reader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>F1</name> <init>= <expr><literal type="string">"title"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>F2</name> <init>= <expr><literal type="string">"body"</literal></expr></init></decl>;</decl_stmt>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexWriterConfig</name></type> <name>config</name> <init>= <expr><call><name>newIndexWriterConfig</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setMergePolicy</name></name><argument_list>(<argument><expr><call><name>newLogMergePolicy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we will use docids to validate</comment>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><call><name>doc</name><argument_list>(<argument><expr><literal type="string">"lucene"</literal></expr></argument>, <argument><expr><literal type="string">"lucene is a very popular search engine library"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><call><name>doc</name><argument_list>(<argument><expr><literal type="string">"solr"</literal></expr></argument>, <argument><expr><literal type="string">"solr is a very popular search server and is using lucene"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><call><name>doc</name><argument_list>(<argument><expr><literal type="string">"nutch"</literal></expr></argument>, <argument><expr><literal type="string">"nutch is an internet search engine with web crawler and is using lucene and hadoop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>writer</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>searcher</name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>searcher</name><operator>.</operator><name>setSimilarity</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TFSimilarity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <name>Document</name></type> <name>doc</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringField</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextField</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>doc</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testTermConjunctionsWithOmitTF</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>bq</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><literal type="string">"nutch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="string">"is"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TopDocs</name></type> <name>td</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>bq</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>td</name><operator>.</operator><name>totalHits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3F</literal></expr></argument>, <argument><expr><name><name>td</name><operator>.</operator><name>scoreDocs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>score</name></expr></argument>, <argument><expr><literal type="number">0.001F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// f1:nutch + f2:is + f2:is</comment>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <comment type="line">// Similarity that returns the TF as score</comment>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TFSimilarity</name> <super_list><extends>extends <super><name>Similarity</name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>computeNorm</name><parameter_list>(<parameter><decl><type><name>FieldInvertState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Norm</name></type> <name>norm</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>norm</name><operator>.</operator><name>setByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we dont care</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SimWeight</name></type> <name>computeWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>queryBoost</name></decl></parameter>,
        <parameter><decl><type><name>CollectionStatistics</name></type> <name>collectionStats</name></decl></parameter>, <parameter><decl><type><name>TermStatistics</name><modifier>...</modifier></type> <name>termStats</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <class><super><name>SimWeight</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>float</name></type> <name>getValueForNormalization</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="line">// we don't care</comment>
        </block_content>}</block></function>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>normalize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>queryNorm</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>topLevelBoost</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// we don't care</comment>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ExactSimScorer</name></type> <name>exactSimScorer</name><parameter_list>(<parameter><decl><type><name>SimWeight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <class><super><name>ExactSimScorer</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><name>freq</name></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SloppySimScorer</name></type> <name>sloppySimScorer</name><parameter_list>(<parameter><decl><type><name>SimWeight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>AtomicReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <class><super><name>SloppySimScorer</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>freq</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><name>freq</name></expr>;</return>
        </block_content>}</block></function>
        
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>float</name></type> <name>computeSlopFactor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="number">1F</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>float</name></type> <name>computePayloadFactor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>payload</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="number">1F</literal></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositiveScoresOnlyCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositiveScoresOnlyCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">988b671d42b</literal><operator>..</operator><name>ed9334f28e1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositiveScoresOnlyCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositiveScoresOnlyCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPositiveScoresOnlyCollector</name> extends <name>LuceneTestCase</name> <block>{
     @<expr><name>Override</name> <specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><name>idx</name> <operator>==</operator> <name><name>scores</name><operator>.</operator><name>length</name></name> <operator>?</operator> <name><name>Float</name><operator>.</operator><name>NaN</name></name> <operator>:</operator> <name><name>scores</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return></block></expr>
     }</block>
    
    @<name>Override</name> <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></expr></expr_stmt>
 
     <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>idx</name></expr>;</return> </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScoreCachingWrappingScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScoreCachingWrappingScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">52c68d99abc</literal><operator>..</operator><name>dc52313923f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScoreCachingWrappingScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScoreCachingWrappingScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestScoreCachingWrappingScorer</name> extends <name>LuceneTestCase</name> <block>{
       <comment type="line">// once per document.</comment>
       <return>return <expr><name>idx</name> <operator>==</operator> <name><name>scores</name><operator>.</operator><name>length</name></name> <operator>?</operator> <name><name>Float</name><operator>.</operator><name>NaN</name></name> <operator>:</operator> <name><name>scores</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</return>
     }</block></expr></expr_stmt>
    
    <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>doc</name></expr>;</return> </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSubScorerFreqs</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSubScorerFreqs</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f3b368e16e8</name><operator>..</operator><literal type="number">3a593b4e38c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSubScorerFreqs</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSubScorerFreqs</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSubScorerFreqs</name> extends <name>LuceneTestCase</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>relationships</name></expr>;
 
     <specifier>public</specifier> <call><name>CountingCollector</name><argument_list>(<argument><expr><name>Collector</name> <name>other</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>this</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>Occur</name><operator>.</operator><name>MUST</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Occur</name><operator>.</operator><name>SHOULD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Occur</name><operator>.</operator><name>MUST_NOT</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <call><name>this</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"MUST"</literal></expr></argument>, <argument><expr><literal type="string">"SHOULD"</literal></expr></argument>, <argument><expr><literal type="string">"MUST_NOT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></block></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <constructor><specifier>public</specifier> <name>CountingCollector</name><parameter_list>(<parameter><decl><type><name>Collector</name></type> <name>other</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>relationships</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSubScorerFreqs</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>query</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>inner</name></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>query</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>aQuery</name></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dQuery</name></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"rawtypes"</literal></expr>,<argument><expr><literal type="string">"unchecked"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <type><name><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>occurList</name> <init>= <expr><operator>new</operator> <name><name>Set</name><index>[]</index></name> <block>{
        <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><call><name><name>Occur</name><operator>.</operator><name>MUST</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, 
        <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>Occur</name><operator>.</operator><name>MUST</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Occur</name><operator>.</operator><name>SHOULD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <name><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><index>[]</index></name> <name>occurList</name> <operator>=</operator> <operator>new</operator> <name><name>Set</name><index>[]</index></name> <block>{
        <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><literal type="string">"MUST"</literal></expr></argument>)</argument_list></call></expr>, 
        <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"MUST"</literal></expr></argument>, <argument><expr><literal type="string">"SHOULD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
     }</block></expr>;</block></expr></init></decl></decl_stmt>
     <for>for <control>(<init><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>occur</name> <range>: <expr><name>occurList</name></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>CountingCollector</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CountingCollector</name><argument_list>(<argument><expr><call><name><name>TopScoreDocCollector</name><operator>.</operator><name>create</name></name><argument_list>(
<argument>@@ <expr><operator>-</operator><literal type="number">171</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">171</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestSubScorerFreqs</name> extends <name>LuceneTestCase</name> <block>{
       <expr><call><name><name>s</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;
       <name>final</name> <name>int</name> <name>maxDocs</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></block></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></init></decl></decl_stmt>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>maxDocs</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>docCounts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>includeOptional</name> <init>= <expr><call><name><name>occur</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>Occur</name><operator>.</operator><name>SHOULD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>includeOptional</name> <init>= <expr><call><name><name>occur</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"SHOULD"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxDocs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Query</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>doc0</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>docCounts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><ternary><condition><expr><name>includeOptional</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>doc0</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>grouping</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>grouping</name><operator>/</operator><name><name>BlockGroupingCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>grouping</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>grouping</name><operator>/</operator><name><name>BlockGroupingCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">36787689aad</literal><operator>..</operator><literal type="number">22e0b540e31</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>grouping</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>grouping</name><operator>/</operator><name><name>BlockGroupingCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>grouping</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>grouping</name><operator>/</operator><name><name>BlockGroupingCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockGroupingCollector</name> extends <name>Collector</name> <block>{
     <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><name>score</name></expr>;</return></block></expr>
     }</block>
    
    @<name>Override</name>
    <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <block>{
      <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>; <comment type="line">// TODO: wtf does this class do?</comment>
    }</block></expr></expr_stmt>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>TermsIncludingScoreQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>TermsIncludingScoreQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dd0ea9dde81</name><operator>..</operator><literal type="number">4f01d1df3b6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>TermsIncludingScoreQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>TermsIncludingScoreQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>TermsIncludingScoreQuery</name> extends <name>Query</name> <block>{
       }</block></expr></expr_stmt> <while>while <condition>(<expr><name>docId</name> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
       <return>return <expr><name>docId</name></expr>;</return>
     </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></for>
 
   <comment type="line">// This impl that tracks whether a docid has already been emitted. This check makes sure that docs aren't emitted</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToChildBlockJoinQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToChildBlockJoinQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3d2e56ed5d2</literal><operator>..</operator><literal type="number">55a609e0d01</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToChildBlockJoinQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToChildBlockJoinQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToChildBlockJoinQuery</name> extends <name>Query</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name>Bits</name> <name>acceptDocs</name></expr>;
 
     <specifier>private</specifier> <name>float</name> <name>parentScore</name></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>parentFreq</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>childDoc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>parentDoc</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">176</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToChildBlockJoinQuery</name> extends <name>Query</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name> <call><name>getChildren</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>parentScorer</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_JOIN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>parentScorer</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_JOIN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToChildBlockJoinQuery</name> extends <name>Query</name> <block>{
             <if_stmt><if>if <condition>(<expr><name>childDoc</name> <operator>&lt;</operator> <name>parentDoc</name></expr>)</condition> <block>{<block_content>
               <if_stmt><if>if <condition>(<expr><name>doScores</name></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>parentScore</name> <operator>=</operator> <call><name><name>parentScorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>parentFreq</name> <operator>=</operator> <call><name><name>parentScorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
               <comment type="line">//System.out.println("  " + childDoc);</comment>
               <return>return <expr><name>childDoc</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">249</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToChildBlockJoinQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><name>parentScore</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><name>parentFreq</name></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>childTarget</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <assert>assert <expr><name>childTarget</name> <operator>&gt;=</operator> <call><name><name>parentBits</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>parentBits</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>childTarget</name></expr></argument>)</argument_list></call></expr>;</assert>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">269</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">276</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToChildBlockJoinQuery</name> extends <name>Query</name> <block>{
         }</block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>doScores</name></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>parentScore</name> <operator>=</operator> <call><name><name>parentScorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>parentFreq</name> <operator>=</operator> <call><name><name>parentScorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>firstChild</name> <init>= <expr><call><name><name>parentBits</name><operator>.</operator><name>prevSetBit</name></name><argument_list>(<argument><expr><name>parentDoc</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <comment type="line">//System.out.println("  firstChild=" + firstChild);</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">054e8bdf889</literal><operator>..</operator><name>a166376ebfd</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">327</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">327</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinCollector</name> extends <name>Collector</name> <block>{
     <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><name>score</name></expr>;</return></block></expr>
     }</block>
    
    @<name>Override</name>
    <specifier>public</specifier> <name>float</name> <call><name>freq</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="line">// TODO: does anything else make sense?... duplicate of grouping's FakeScorer btw?</comment>
    }</block></expr></expr_stmt>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7e4c0f13dbf</literal><operator>..</operator><name>f113aea67a2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>join</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>join</name><operator>/</operator><name><name>ToParentBlockJoinQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinQuery</name> extends <name>Query</name> <block>{
     <expr><specifier>private</specifier> <name>int</name> <name>parentDoc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;
     <specifier>private</specifier> <name>int</name> <name>prevParentDoc</name></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>parentScore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>parentFreq</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nextChildDoc</name></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>pendingChildDocs</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">239</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">240</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinQuery</name> extends <name>Query</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name> <call><name>getChildren</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>childScorer</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_JOIN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>childScorer</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_JOIN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
     <function><type><name>int</name></type> <name>getChildCount</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">300</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinQuery</name> extends <name>Query</name> <block>{
         }</block>
 
         <name>float</name> <name>totalScore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>totalFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>float</name></type> <name>maxScore</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>maxFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
         <expr_stmt><expr><name>childDocUpto</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
         <do>do <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">315</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">318</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinQuery</name> extends <name>Query</name> <block>{
           <if_stmt><if>if <condition>(<expr><name>scoreMode</name> <operator>!=</operator> <name><name>ScoreMode</name><operator>.</operator><name>None</name></name></expr>)</condition> <block>{<block_content>
             <comment type="line">// TODO: specialize this into dedicated classes per-scoreMode</comment>
             <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>childScore</name> <init>= <expr><call><name><name>childScorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>childFreq</name> <init>= <expr><call><name><name>childScorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><name><name>pendingChildScores</name><index>[<expr><name>childDocUpto</name></expr>]</index></name> <operator>=</operator> <name>childScore</name></expr>;</expr_stmt>
             <expr_stmt><expr><name>maxScore</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>childScore</name></expr></argument>, <argument><expr><name>maxScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxFreq</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>childFreq</name></expr></argument>, <argument><expr><name>maxFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>totalScore</name> <operator>+=</operator> <name>childScore</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalFreq</name> <operator>+=</operator> <name>childFreq</name></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           <name>childDocUpto</name><operator>++</operator></block></expr>;</expr_stmt>
           <expr_stmt><expr><name>nextChildDoc</name> <operator>=</operator> <call><name><name>childScorer</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">329</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">335</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinQuery</name> extends <name>Query</name> <block>{
         <switch>switch<condition>(<expr><name>scoreMode</name></expr>)</condition> <block>{<block_content>
         <case>case <expr><name>Avg</name></expr>:</case>
           <expr_stmt><expr><name>parentScore</name> <operator>=</operator> <name>totalScore</name> <operator>/</operator> <name>childDocUpto</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>parentFreq</name> <operator>=</operator> <name>totalFreq</name> <operator>/</operator> <name>childDocUpto</name></expr>;</expr_stmt>
           <break>break;</break>
         <case>case <expr><name>Max</name></expr>:</case>
           <expr_stmt><expr><name>parentScore</name> <operator>=</operator> <name>maxScore</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>parentFreq</name> <operator>=</operator> <name>maxFreq</name></expr>;</expr_stmt>
           <break>break;</break>
         <case>case <expr><name>Total</name></expr>:</case>
           <expr_stmt><expr><name>parentScore</name> <operator>=</operator> <name>totalScore</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>parentFreq</name> <operator>=</operator> <name>totalFreq</name></expr>;</expr_stmt>
           <break>break;</break>
         <case>case <expr><name>None</name></expr>:</case>
           <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">363</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ToParentBlockJoinQuery</name> extends <name>Query</name> <block>{
     <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <return>return <expr><name>parentScore</name></expr>;</return>
     }</block></expr></expr_stmt>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>parentFreq</name></expr>;</return>
    </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>parentTarget</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">230b5577f93</literal><operator>..</operator><literal type="number">7e7a250bef8</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">324</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">326</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>CustomScoreQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><name>qWeight</name> <operator>*</operator> <call><name><name>provider</name><operator>.</operator><name>customScore</name></name><argument_list>(<argument><expr><call><name><name>subQueryScorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>subQueryScorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vScores</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>subQueryScorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>subQueryScorer</name></expr></argument>, <argument><expr><literal type="string">"CUSTOM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>subQueryScorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f2b22caeaa1</name><operator>..</operator><name>b1759126d82</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>BoostedQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><name>score</name><operator>&gt;</operator><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name> <operator>?</operator> <name>score</name> <operator>:</operator> <operator>-</operator><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>scorer</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ChildScorer</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChildScorer</name><argument_list>(<argument><expr><name>scorer</name></expr></argument>, <argument><expr><literal type="string">"CUSTOM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <decl_stmt><decl><type><name>Explanation</name></type> <name>subQueryExpl</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>qWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>readerContext</name></expr></argument> ,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subQueryExpl</name><operator>.</operator><name>isMatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>FunctionQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>FunctionQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bba3219dc25</name><operator>..</operator><literal type="number">558f8b838d0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>FunctionQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>FunctionQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>FunctionQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><name>score</name><operator>&gt;</operator><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name> <operator>?</operator> <name>score</name> <operator>:</operator> <operator>-</operator><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <decl_stmt><decl><type><name>float</name></type> <name>sc</name> <init>= <expr><name>qWeight</name> <operator>*</operator> <call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0401a950c79</literal><operator>..</operator><literal type="number">677ecfb65d3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queries</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>ValueSourceScorer</name> extends <name>Scorer</name> <block>{
   <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
     <return>return <expr><call><name><name>values</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">87588cd3eef</literal><operator>..</operator><literal type="number">32eb48e1701</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">485</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">485</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>SpatialDistanceQuery</name> extends <name>ExtendedQueryBase</name> implements <name>PostFilter</name> <block>{
       <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>dist</name> <operator>*</operator> <name>qWeight</name><operator>)</operator></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name>advance</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>boolean</name></type> <name>matched</name> <init>= <expr><name><name>this</name><operator>.</operator><name>doc</name></name> <operator>==</operator> <name>doc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JoinQParserPlugin</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JoinQParserPlugin</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">110bf026879</literal><operator>..</operator><literal type="number">53a39db5cb4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JoinQParserPlugin</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JoinQParserPlugin</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">532</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">532</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>JoinQuery</name> extends <name>Query</name> <block>{
     <expr><specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <return>return <expr><name>score</name></expr>;</return>
     }</block></expr></expr_stmt>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">97fcf48a622</literal><operator>..</operator><literal type="number">05a13157437</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConstantScoreQuery</name> extends <name>ConstantScoreQuery</name> implements <name>Extend</name>
     <specifier>public</specifier> <name>float</name> <call><name>score</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <return>return <expr><name>theScore</name></expr>;</return>
     </block_content>}</block></function>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>freq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></switch></block></expr></expr_stmt></block_content></block></do></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></for></block_content></block></constructor></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block></class></block_content></block></function></block></class></block></class>

</unit>
