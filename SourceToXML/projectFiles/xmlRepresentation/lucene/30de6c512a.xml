<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/30de6c512a.java"><expr_stmt><expr><name>From</name> <literal type="number">30de6c512ae51391159b28e0250a9482f12690c7</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Robert</name> <name><name>Muir</name> <argument_list type="generic">&lt;<argument><name>rmuir</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">21</literal> <name>Apr</name> <literal type="number">2014</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">36</literal><operator>:</operator><literal type="number">34</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">5623</literal><operator>:</operator> <name>fix</name> <name>bug</name> <name>in</name> <name>earlyterminatingcollector</name></expr><operator>,</operator> <expr><name>fix</name> <name>test</name>
 <name>to</name> <name>be</name> <name>reproducible</name> <name>and</name> <name>more</name> <name>evil</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1588953 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name><name>EarlyTerminatingSortingCollector</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name>sorter</name><operator>/</operator><name><name>TestEarlyTermination</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">98</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name>sorter</name><operator>/</operator><name><name>TestSortingMergePolicy</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">67</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">44</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>misc</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>sorter</name><operator>/</operator><name><name>EarlyTerminatingSortingCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>misc</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>sorter</name><operator>/</operator><name><name>EarlyTerminatingSortingCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2571632defd</literal><operator>..</operator><literal type="number">27f61adc8e3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>misc</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>sorter</name><operator>/</operator><name><name>EarlyTerminatingSortingCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>misc</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>sorter</name><operator>/</operator><name><name>EarlyTerminatingSortingCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>EarlyTerminatingSortingCollector</name> extends <name>FilterCollector</name> <block>{
   <comment type="block" format="javadoc">/** Number of documents to collect in each segment */</comment>
   <expr><specifier>protected</specifier> <name>final</name> <name>int</name> <name>numDocsToCollect</name></expr>;
 
  <expr><specifier>private</specifier> <name>int</name> <name>numCollected</name></expr>;</block></expr></expr_stmt>

   <comment type="block" format="javadoc">/**
    * Create a new {@link EarlyTerminatingSortingCollector} instance.
    *
@@ -98,6 +96,7 @@ public class EarlyTerminatingSortingCollector extends FilterCollector {
     if (SortingMergePolicy.isSorted(context.reader(), sort)) {
       // segment is sorted, can early-terminate
       return new FilterLeafCollector(super.getLeafCollector(context)) {
        private int numCollected;
 
         @Override
         public void collect(int doc) throws IOException {
diff --git a/lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java b/lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java
index e1922ae9377..3af59286ab4 100644
-- a/lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java
++ b/lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java
@@ -33,9 +33,12 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
import org.apache.lucene.index.SerialMergeScheduler;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.MatchAllDocsQuery;
import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
@@ -70,7 +73,7 @@ public class TestEarlyTermination extends LuceneTestCase {
     return doc;
   }
 
  private void createRandomIndexes(int maxSegments) throws IOException {
  private void createRandomIndex() throws IOException {
     dir = newDirectory();
     numDocs = atLeast(150);
     final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);
@@ -81,8 +84,10 @@ public class TestEarlyTermination extends LuceneTestCase {
     terms = new ArrayList&lt;&gt;(randomTerms);
     final long seed = random().nextLong();
     final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));
    iwc.setMergeScheduler(new SerialMergeScheduler()); // for reproducible tests
     iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));
     iw = new RandomIndexWriter(new Random(seed), dir, iwc);
    iw.setDoRandomForceMerge(false); // don't do this, it may happen anyway with MockRandomMP
     for (int i = 0; i &lt; numDocs; ++i) {
       final Document doc = randomDocument();
       iw.addDocument(doc);
@@ -94,56 +99,70 @@ public class TestEarlyTermination extends LuceneTestCase {
         iw.deleteDocuments(new Term("s", term));
       }
     }
    if (random().nextBoolean()) {
      iw.forceMerge(5);
    }
     reader = iw.getReader();
   }

  @Override
  public void tearDown() throws Exception {
  
  private void closeIndex() throws IOException {
     reader.close();
     iw.shutdown();
     dir.close();
    super.tearDown();
   }
 
   public void testEarlyTermination() throws IOException {
    createRandomIndexes(5);
    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);
    final Sort sort = new Sort(new SortField("ndv1", SortField.Type.LONG, false));
    final boolean fillFields = random().nextBoolean();
    final boolean trackDocScores = random().nextBoolean();
    final boolean trackMaxScore = random().nextBoolean();
    final boolean inOrder = random().nextBoolean();
    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);
    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);

    final IndexSearcher searcher = newSearcher(reader);
    final int iters = atLeast(5);
    final int iters = atLeast(8);
     for (int i = 0; i &lt; iters; ++i) {
      final TermQuery query = new TermQuery(new Term("s", RandomPicks.randomFrom(random(), terms)));
      searcher.search(query, collector1);
      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, sort, numHits));
      createRandomIndex();
      for (int j = 0; j &lt; iters; ++j) {
        final IndexSearcher searcher = newSearcher(reader);
        final int numHits = TestUtil.nextInt(random(), 1, numDocs);
        final Sort sort = new Sort(new SortField("ndv1", SortField.Type.LONG, false));
        final boolean fillFields = random().nextBoolean();
        final boolean trackDocScores = random().nextBoolean();
        final boolean trackMaxScore = random().nextBoolean();
        final boolean inOrder = random().nextBoolean();
        final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);
        final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);

        final Query query;
        if (random().nextBoolean()) {
          query = new TermQuery(new Term("s", RandomPicks.randomFrom(random(), terms)));
        } else {
          query = new MatchAllDocsQuery();
        }
        searcher.search(query, collector1);
        searcher.search(query, new EarlyTerminatingSortingCollector(collector2, sort, numHits));
        assertTrue(collector1.getTotalHits() &gt;= collector2.getTotalHits());
        assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);
      }
      closeIndex();
     }
    assertTrue(collector1.getTotalHits() &gt;= collector2.getTotalHits());
    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);
   }
   
   public void testEarlyTerminationDifferentSorter() throws IOException {
    // test that the collector works correctly when the index was sorted by a
    // different sorter than the one specified in the ctor.
    createRandomIndexes(5);
    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);
    final Sort sort = new Sort(new SortField("ndv2", SortField.Type.LONG, false));
    final boolean fillFields = random().nextBoolean();
    final boolean trackDocScores = random().nextBoolean();
    final boolean trackMaxScore = random().nextBoolean();
    final boolean inOrder = random().nextBoolean();
    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);
    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);
    
    final IndexSearcher searcher = newSearcher(reader);
    final int iters = atLeast(5);
    createRandomIndex();
    final int iters = atLeast(3);
     for (int i = 0; i &lt; iters; ++i) {
      final TermQuery query = new TermQuery(new Term("s", RandomPicks.randomFrom(random(), terms)));
      final IndexSearcher searcher = newSearcher(reader);
      // test that the collector works correctly when the index was sorted by a
      // different sorter than the one specified in the ctor.
      final int numHits = TestUtil.nextInt(random(), 1, numDocs);
      final Sort sort = new Sort(new SortField("ndv2", SortField.Type.LONG, false));
      final boolean fillFields = random().nextBoolean();
      final boolean trackDocScores = random().nextBoolean();
      final boolean trackMaxScore = random().nextBoolean();
      final boolean inOrder = random().nextBoolean();
      final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);
      final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);
      
      final Query query;
      if (random().nextBoolean()) {
        query = new TermQuery(new Term("s", RandomPicks.randomFrom(random(), terms)));
      } else {
        query = new MatchAllDocsQuery();
      }
       searcher.search(query, collector1);
       Sort different = new Sort(new SortField("ndv2", SortField.Type.LONG));
       searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {
@@ -154,9 +173,10 @@ public class TestEarlyTermination extends LuceneTestCase {
           return ret;
         }
       });
      assertTrue(collector1.getTotalHits() &gt;= collector2.getTotalHits());
      assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);
     }
    assertTrue(collector1.getTotalHits() &gt;= collector2.getTotalHits());
    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);
    closeIndex();
   }
 
   private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {
diff --git a/lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java b/lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java
index b193bdd875d..65d47641bd1 100644
-- a/lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java
++ b/lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java
@@ -71,18 +71,22 @@ public class TestSortingMergePolicy extends LuceneTestCase {
   }
 
   static MergePolicy newSortingMergePolicy(Sort sort) {
    // create a MP with a low merge factor so that many merges happen
    // usually create a MP with a low merge factor so that many merges happen
     MergePolicy mp;
    if (random().nextBoolean()) {
    int thingToDo = random().nextInt(3);
    if (thingToDo == 0) {
       TieredMergePolicy tmp = newTieredMergePolicy(random());
       final int numSegs = TestUtil.nextInt(random(), 3, 5);
       tmp.setSegmentsPerTier(numSegs);
       tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));
       mp = tmp;
    } else {
    } else if (thingToDo == 1) {
       LogMergePolicy lmp = newLogMergePolicy(random());
       lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));
       mp = lmp;
    } else {
      // just a regular random one from LTC (could be alcoholic etc)
      mp = newMergePolicy();
     }
     // wrap it with a sorting mp
     return new SortingMergePolicy(mp, sort);
- 
2.19.1.windows.1

</comment></unit>
