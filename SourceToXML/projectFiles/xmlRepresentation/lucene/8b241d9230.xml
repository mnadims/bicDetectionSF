<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/8b241d9230.java"><expr_stmt><expr><name>From</name> <literal type="number">8b241d9230380b75157ad396c74ca1498f287666</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">8</literal> <name>Jan</name> <literal type="number">2011</literal> <literal type="number">16</literal><operator>:</operator><literal type="number">51</literal><operator>:</operator><literal type="number">08</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">2831</literal><operator>:</operator> <name>remove</name><operator>/</operator><name>fix</name> <name>more</name> <name>uses</name> <name>of</name> <name>non</name> <name>top</name><operator>-</operator><name>level</name> <name>readers</name> <name>in</name>
 <name>prep</name></expr></expr_stmt> <for>for AtomicReaderContext

git-svn-id: https:<comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1056734 13f79535-47bb-0310-9956-ffa450edef68</comment>
--
 .../apache/solr/search/ValueSourceParser.java <operator>|</operator> 11 ++--
 .../solr/search/function/OrdFieldSource.java  <operator>|</operator> 34 +++++++---
 .../function/ReverseOrdFieldSource.java       <operator>|</operator> 26 +++++---
 .../search/function/ScaleFloatFunction.java   <operator>|</operator> 62 +++++++++++++------
 4 files changed<operator>,</operator> <expr_stmt><expr><literal type="number">93</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">40</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ValueSourceParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ValueSourceParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">116058fc301</literal><operator>..</operator><literal type="number">5b1805ee017</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ValueSourceParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ValueSourceParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ValueSourceParser</name> implements <name>NamedListInitializedPlugin</name> <block>{
     <expr><call><name>addParser</name><argument_list>(<argument><expr><literal type="string">"ord"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ValueSourceParser</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>public</specifier> <name>ValueSource</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>FunctionQParser</name></type> <name>fp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>field</name> <init>= <expr><call><name><name>fp</name><operator>.</operator><name>parseId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TopValueSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>OrdFieldSource</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><operator>new</operator> <call><name>OrdFieldSource</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>
     <call><name>addParser</name><argument_list>(<argument><expr><literal type="string">"literal"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ValueSourceParser</name></super><argument_list>()</argument_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>ValueSourceParser</name> implements <name>NamedListInitializedPlugin</name> <block>{
     <expr><call><name>addParser</name><argument_list>(<argument><expr><literal type="string">"rord"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ValueSourceParser</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>public</specifier> <name>ValueSource</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>FunctionQParser</name></type> <name>fp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>field</name> <init>= <expr><call><name><name>fp</name><operator>.</operator><name>parseId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TopValueSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReverseOrdFieldSource</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><operator>new</operator> <call><name>ReverseOrdFieldSource</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>
     <call><name>addParser</name><argument_list>(<argument><expr><literal type="string">"top"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ValueSourceParser</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>public</specifier> <name>ValueSource</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>FunctionQParser</name></type> <name>fp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// top(vs) is now a no-op</comment>
         <decl_stmt><decl><type><name>ValueSource</name></type> <name>source</name> <init>= <expr><call><name><name>fp</name><operator>.</operator><name>parseValueSource</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// nested top is redundant, and ord and rord get automatically wrapped</comment>
        <if_stmt><if>if <condition>(<expr><name>source</name> <operator>instanceof</operator> <name>TopValueSource</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>source</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>TopValueSource</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><name>source</name></expr>;</return>
       </block_content>}</block></function>
     }</block></class></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>addParser</name><argument_list>(<argument><expr><literal type="string">"linear"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ValueSourceParser</name></super><argument_list>()</argument_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>ValueSourceParser</name> implements <name>NamedListInitializedPlugin</name> <block>{
         <expr><name>ValueSource</name> <name>source</name> <operator>=</operator> <call><name><name>fp</name><operator>.</operator><name>parseValueSource</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>float</name> <name>min</name> <operator>=</operator> <call><name><name>fp</name><operator>.</operator><name>parseFloat</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>float</name> <name>max</name> <operator>=</operator> <call><name><name>fp</name><operator>.</operator><name>parseFloat</name></name><argument_list>()</argument_list></call></expr>;
        <return>return <expr><operator>new</operator> <call><name>TopValueSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ScaleFloatFunction</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>ScaleFloatFunction</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></class></expr></argument></argument_list></call></expr></expr_stmt>
     }</block></class></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></for>
     <expr_stmt><expr><call><name>addParser</name><argument_list>(<argument><expr><literal type="string">"div"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ValueSourceParser</name></super><argument_list>()</argument_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>OrdFieldSource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>OrdFieldSource</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">93da97395d1</literal><operator>..</operator><name>d68185664cb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>OrdFieldSource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>OrdFieldSource</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>MutableValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>MutableValueInt</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">38</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">52</literal> @@ <specifier>public</specifier> class <name>OrdFieldSource</name> extends <name>ValueSource</name> <block>{
 
 
   <expr><specifier>public</specifier> <name>DocValues</name> <call><name>getValues</name><argument_list>(<argument><expr><name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <return>return <expr><operator>new</operator> <class><super><name>StringIndexDocValues</name></super><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>topReader</name> <init>= <expr><name>reader</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>topReader</name> <operator>instanceof</operator> <name>SolrIndexReader</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrIndexReader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>topReader</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name><name>r</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
      topReader = r</block><empty_stmt>;</empty_stmt></while>
    <expr_stmt/>}</block_content>
    final int off = offset</block><empty_stmt>;</empty_stmt></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>FieldCache</name><operator>.</operator><name>DocTermsIndex</name></name></type> <name>sindex</name> <init>= <expr><call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><name>topReader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <class><super><name>DocValues</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>protected</specifier> <name>String</name></type> <name>toTerm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>readableValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><name>readableValue</name></expr>;</return>
       <expr_stmt/>}</block_content>
       
       public float floatVal(int doc</block></function>)</block> <block>{
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block>
 
       <function><type><specifier>public</specifier> <name>int</name></type> <name>intVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
 
       public long longVal(int doc</block></function></class></expr></return>)</block> <block>{
        <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block>
 
       <function><type><specifier>public</specifier> <name>double</name></type> <name>doubleVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator><call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
 
       public int ordVal(int doc</block></function></class></expr></return>) <block>{
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return></block></block></expr></expr_stmt>
        <return>return <expr><call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></class>
 
       <specifier>public</specifier> <name>int</name> <call><name>numOrd</name><argument_list>()</argument_list></call> <block>{
        <return>return <expr><call><name><name>termsIndex</name><operator>.</operator><name>numOrd</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr></argument>
        <return>return <expr><call><name><name>sindex</name><operator>.</operator><name>numOrd</name></name><argument_list>()</argument_list></call></expr>;</return></argument_list></call></expr></expr_stmt>
       }
 
       public <function><type><name>String</name></type> <name>strVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <comment type="line">// the string value of the ordinal, not the string itself</comment>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>OrdFieldSource</name> extends <name>ValueSource</name> <block>{
 
           @<expr><name>Override</name>
           <specifier>public</specifier> <name>void</name> <call><name>fillValue</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
            <expr><name><name>mval</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name><name>termsIndex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;
            <expr><name><name>mval</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;
             <expr><name><name>mval</name><operator>.</operator><name>exists</name></name> <operator>=</operator> <name><name>mval</name><operator>.</operator><name>value</name></name><operator>!=</operator><literal type="number">0</literal></expr>;
           }</block></expr>
         }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ReverseOrdFieldSource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ReverseOrdFieldSource</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ef595a59aae</name><operator>..</operator><literal type="number">455fc3ab0f8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ReverseOrdFieldSource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ReverseOrdFieldSource</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">36</literal> @@ <specifier>public</specifier> <name>class</name> <name>ReverseOrdFieldSource</name> extends <name>ValueSource</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>DocValues</name> <call><name>getValues</name><argument_list>(<argument><expr><name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>final</name> <name><name>FieldCache</name><operator>.</operator><name>DocTermsIndex</name></name> <name>sindex</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>topReader</name> <init>= <expr><name>reader</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>topReader</name> <operator>instanceof</operator> <name>SolrIndexReader</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrIndexReader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>topReader</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name><name>r</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>topReader</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>off</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>FieldCache</name><operator>.</operator><name>DocTermsIndex</name></name></type> <name>sindex</name> <init>= <expr><call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><name>topReader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>sindex</name><operator>.</operator><name>numOrd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <return>return <expr><operator>new</operator> <class><super><name>DocValues</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>int</name></type> <name>intVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        <return>return <expr><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>long</name></type> <name>longVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>int</name></type> <name>ordVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        <return>return <expr><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>int</name></type> <name>numOrd</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ReverseOrdFieldSource</name> extends <name>ValueSource</name> <block>{
       }</block>
 
       <specifier>public</specifier> <name>double</name> <call><name>doubleVal</name><argument_list>(<argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <block>{
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></expr></expr_stmt>
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>String</name></type> <name>strVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <comment type="line">// the string value of the ordinal, not the string itself</comment>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <call><name><name>sindex</name><operator>.</operator><name>getOrd</name></name><argument_list>(<argument><expr><name>doc</name><operator>+</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></function>
 
       <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ScaleFloatFunction</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ScaleFloatFunction</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6e8cd65c343</literal><operator>..</operator><literal type="number">74875bedbfc</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ScaleFloatFunction</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ScaleFloatFunction</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScaleFloatFunction</name> extends <name>ValueSource</name> <block>{
     <return>return <expr><literal type="string">"scale("</literal> <operator>+</operator> <call><name><name>source</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>min</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>max</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>DocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocValues</name></type> <name>vals</name> <init>=  <expr><call><name><name>source</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxDoc</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ScaleInfo</name> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>minVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>maxVal</name></decl>;</decl_stmt>
  }</block></class>
 
    <comment type="line">// this doesn't take into account deleted docs!</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>minVal</name><init>=<expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>maxVal</name><init>=<expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
  <function><type><specifier>private</specifier> <name>ScaleInfo</name></type> <name>createScaleInfo</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name></type> <name>ctx</name> <init>= <expr><call><name><name>ValueSource</name><operator>.</operator><name>readerToContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>ctx</name><operator>.</operator><name>parent</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>
    <decl_stmt><decl><type><name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>leaves</name> <operator>=</operator> <operator>new</operator> <name><name>AtomicReaderContext</name><index>[]</index></name> <block>{<expr><operator>(</operator><name>AtomicReaderContext</name><operator>)</operator><name>ctx</name></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><name>maxDoc</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <name>maxVal</name> <operator>=</operator> <call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>minVal</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>maxVal</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
 
    <comment type="line">// Traverse the complete set of values to get the min and the max.</comment>
    <comment type="line">// Future alternatives include being able to ask a DocValues for min/max</comment>
    <comment type="line">// Another memory-intensive option is to cache the values in</comment>
    <comment type="line">// a float[] on this first pass.</comment>
    <for>for <control>(<init><decl><type><name>AtomicReaderContext</name></type> <name>leaf</name> <range>: <expr><name>leaves</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>maxDoc</name> <init>= <expr><call><name><name>leaf</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DocValues</name></type> <name>vals</name> <init>=  <expr><call><name><name>source</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>leaf</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>maxDoc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>maxDoc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>Float</name><operator>.</operator><name>floatToRawIntBits</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xff</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0xff</literal><operator>&lt;&lt;</operator><literal type="number">23</literal></expr>)</condition> <block>{<block_content>
         <comment type="line">// if the exponent in the float is all ones, then this is +Inf, -Inf or NaN</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScaleFloatFunction</name> extends <name>ValueSource</name> <block>{
       }</block></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>minVal</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>minVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>maxVal</name></expr>)</condition> <block>{<block_content>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>maxVal</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>maxVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>minVal</name> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// must have been an empty index</comment>
      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <name>maxVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>maxVal</name><operator>-</operator><name>minVal</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>max</name><operator>-</operator><name>min</name><operator>)</operator><operator>/</operator><operator>(</operator><name>maxVal</name><operator>-</operator><name>minVal</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>minSource</name> <init>= <expr><name>minVal</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>maxSource</name> <init>= <expr><name>maxVal</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScaleInfo</name></type> <name>scaleInfo</name> <init>= <expr><operator>new</operator> <call><name>ScaleInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>scaleInfo</name><operator>.</operator><name>minVal</name></name> <operator>=</operator> <name>minVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>scaleInfo</name><operator>.</operator><name>maxVal</name></name> <operator>=</operator> <name>maxVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name>scaleInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>scaleInfo</name></expr>;</return>
  </block_content>}</block></for>

  <function><type><specifier>public</specifier> <name>DocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>ScaleInfo</name></type> <name>scaleInfo</name> <init>= <expr><operator>(</operator><name>ScaleInfo</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>scaleInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>scaleInfo</name> <operator>=</operator> <call><name>createScaleInfo</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>scaleInfo</name><operator>.</operator><name>maxVal</name></name><operator>-</operator><name><name>scaleInfo</name><operator>.</operator><name>minVal</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>max</name><operator>-</operator><name>min</name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>scaleInfo</name><operator>.</operator><name>maxVal</name></name><operator>-</operator><name><name>scaleInfo</name><operator>.</operator><name>minVal</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>minSource</name> <init>= <expr><name><name>scaleInfo</name><operator>.</operator><name>minVal</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>maxSource</name> <init>= <expr><name><name>scaleInfo</name><operator>.</operator><name>maxVal</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DocValues</name></type> <name>vals</name> <init>=  <expr><call><name><name>source</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <return>return <expr><operator>new</operator> <class><super><name>DocValues</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block></class></expr></return></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></function></block></class></expr></return></block_content></block></function>

</unit>
