<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/602a1f50e7.java"><expr_stmt><expr><name>From</name> <literal type="number">602a1f50e724a19311c169e16f1807d950399e8c</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Dec</name> <literal type="number">2015</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">07</literal><operator>:</operator><literal type="number">17</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">7865</literal><operator>:</operator> <name>BlendedInfixSuggester</name> <name>was</name> <name>returning</name> <name>more</name> <name>results</name>
 <name>than</name> <name>requested</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1720832 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>  <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggester</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">14</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggesterTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">69</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestBlendedInfixSuggestions</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">20</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">99</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">7</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>f604916a77d</name><operator>..</operator><name>efabd2884b3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Bug</name> <name>Fixes</name>
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">6929</literal><operator>:</operator> <name>Fix</name> <name>SpanNotQuery</name> <name>rewriting</name> <name>to</name> <name>not</name> <name>drop</name> <name>the</name> <name>pre</name><operator>/</operator><name>post</name> <name><name>parameters</name><operator>.</operator></name>
   (<name>Tim</name> <name>Allison</name> <name>via</name> <name>Adrien</name> <name>Grand</name></expr></expr_stmt>)
 
<expr_stmt><expr><operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">7865</literal><operator>:</operator> <name>BlendedInfixSuggester</name> <name>was</name> <name>returning</name> <name>too</name> <name>many</name> <call><name>results</name>
  <argument_list>(<argument><expr><name>Arcadius</name> <name>Ahouansou</name> <name>via</name> <name>Mike</name> <name>McCandless</name></expr></argument>)</argument_list></call>

 <name>Other</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">6924</literal><operator>:</operator> <name>Upgrade</name> <name>randomizedtesting</name> <name>to</name> <literal type="number">2.3.2.</literal> <operator>(</operator><name>Dawid</name> <name>Weiss</name><operator>)</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggester</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggester</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9f4a997d80e</literal><operator>..</operator><literal type="number">1787f12d548</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggester</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggester</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlendedInfixSuggester</name> extends <name>AnalyzingInfixSuggester</name> <block>{
   
   @<expr><name>Override</name>
   <specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Lookup</name><operator>.</operator><name>LookupResult</name></name></argument>&gt;</argument_list></name> <call><name>lookup</name><argument_list>(<argument><expr><name>CharSequence</name> <name>key</name></expr></argument>, <argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>contexts</name></expr></argument>, <argument><expr><name>boolean</name> <name>onlyMorePopular</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
    <comment type="line">// here we multiply the number of searched element by the defined factor</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contexts</name></expr></argument>, <argument><expr><name>onlyMorePopular</name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <name>numFactor</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
    <comment type="line">// Don't * numFactor here since we do it down below, once, in the call chain:</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contexts</name></expr></argument>, <argument><expr><name>onlyMorePopular</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
   }
 
   @<function><type><name>Override</name>
   <specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Lookup</name><operator>.</operator><name>LookupResult</name></name></argument>&gt;</argument_list></name></type> <name>lookup</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name></type> <name>contexts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allTermsRequired</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>doHighlight</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// here we multiply the number of searched element by the defined factor</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contexts</name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <name>numFactor</name></expr></argument>, <argument><expr><name>allTermsRequired</name></expr></argument>, <argument><expr><name>doHighlight</name></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="line">// Don't * numFactor here since we do it down below, once, in the call chain:</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contexts</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>allTermsRequired</name></expr></argument>, <argument><expr><name>doHighlight</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Lookup</name><operator>.</operator><name>LookupResult</name></name></argument>&gt;</argument_list></name></type> <name>lookup</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>, <argument><name><name>BooleanClause</name><operator>.</operator><name>Occur</name></name></argument>&gt;</argument_list></name></type> <name>contextInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allTermsRequired</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>doHighlight</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// here we multiply the number of searched element by the defined factor</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contextInfo</name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <name>numFactor</name></expr></argument>, <argument><expr><name>allTermsRequired</name></expr></argument>, <argument><expr><name>doHighlight</name></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="line">// Don't * numFactor here since we do it down below, once, in the call chain:</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contextInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>allTermsRequired</name></expr></argument>, <argument><expr><name>doHighlight</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Lookup</name><operator>.</operator><name>LookupResult</name></name></argument>&gt;</argument_list></name></type> <name>lookup</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>BooleanQuery</name></type> <name>contextQuery</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allTermsRequired</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>doHighlight</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// here we multiply the number of searched element by the defined factor</comment>
    <comment type="block" format="javadoc">/** We need to do num * numFactor here only because it is the last call in the lookup chain*/</comment>
     <return>return <expr><call><name><name>super</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>contextQuery</name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <name>numFactor</name></expr></argument>, <argument><expr><name>allTermsRequired</name></expr></argument>, <argument><expr><name>doHighlight</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggesterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggesterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">87a77a3d0fa</literal><operator>..</operator><name>eb2b722ceaf</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggesterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>suggest</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>suggest</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>BlendedInfixSuggesterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>analyzing</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharArraySet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>Input</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>InputArrayIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>suggest</name><operator>.</operator><name>Lookup</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">255</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">72</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlendedInfixSuggesterTest</name> extends <name>LuceneTestCase</name> <block>{
 
   }</block>
 

  <specifier>public</specifier> <name>void</name> <call><name>testSuggesterCountForAllLookups</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{


    <expr><name>Input</name> <name><name>keys</name><index>[]</index></name> <operator>=</operator> <operator>new</operator> <name><name>Input</name><index>[]</index></name><block>{
        <expr><operator>new</operator> <call><name>Input</name><argument_list>(<argument><expr><literal type="string">"lend me your ears"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
        <argument><expr><operator>new</operator> <call><name>Input</name><argument_list>(<argument><expr><literal type="string">"as you sow so shall you reap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
    <argument/>}</block></expr></block></expr></argument></throws></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Path</name></type> <name>tempDir</name> <init>= <expr><call><name>createTempDir</name><argument_list>(<argument><expr><literal type="string">"BlendedInfixSuggesterTest"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>StandardAnalyzer</name><argument_list>(<argument><expr><name><name>CharArraySet</name><operator>.</operator><name>EMPTY_SET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// BlenderType.LINEAR is used by default (remove position*10%)</comment>
    <decl_stmt><decl><type><name>BlendedInfixSuggester</name></type> <name>suggester</name> <init>= <expr><operator>new</operator> <call><name>BlendedInfixSuggester</name><argument_list>(<argument><expr><call><name>newFSDirectory</name><argument_list>(<argument><expr><name>tempDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>suggester</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputArrayIterator</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><literal type="string">"you"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Lookup</name><operator>.</operator><name>LookupResult</name></name></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr><call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>Map</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>Map</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>Set</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>Set</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>BooleanQuery</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>responses</name> <operator>=</operator> <call><name><name>suggester</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>BooleanQuery</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name><name>suggester</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  }


   public <function><type><name>void</name></type> <comment type="block">/*testT*/</comment><name>rying</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 
     <decl_stmt><decl><type><name>BytesRef</name></type> <name>lake</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"lake"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>spelling</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestBlendedInfixSuggestions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>spelling</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestBlendedInfixSuggestions</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">31620b6931b</literal><operator>..</operator><name>b39da4d7056</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>spelling</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestBlendedInfixSuggestions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>spelling</name><operator>/</operator><name>suggest</name><operator>/</operator><name><name>TestBlendedInfixSuggestions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBlendedInfixSuggestions</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']"</literal></expr>
     )</block></expr>;</expr_stmt>
   </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testSuggestCount</name><parameter_list>()</parameter_list> <block>{<block_content>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"qt"</literal></expr></argument>, <argument><expr><name>URI</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"the"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_COUNT</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_DICT</name></name></expr></argument>, <argument><expr><literal type="string">"blended_infix_suggest_reciprocal"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/int[@name='numFound'][.='1']"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"qt"</literal></expr></argument>, <argument><expr><name>URI</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"the"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_COUNT</name></name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_DICT</name></name></expr></argument>, <argument><expr><literal type="string">"blended_infix_suggest_reciprocal"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/int[@name='numFound'][.='2']"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"qt"</literal></expr></argument>, <argument><expr><name>URI</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"the"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_COUNT</name></name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_DICT</name></name></expr></argument>, <argument><expr><literal type="string">"blended_infix_suggest_reciprocal"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/int[@name='numFound'][.='3']"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"qt"</literal></expr></argument>, <argument><expr><name>URI</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"the"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_COUNT</name></name></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>, <argument><expr><name><name>SuggesterParams</name><operator>.</operator><name>SUGGEST_DICT</name></name></expr></argument>, <argument><expr><literal type="string">"blended_infix_suggest_reciprocal"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/int[@name='numFound'][.='3']"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

 }
- 
<expr><literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
