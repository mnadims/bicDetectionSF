<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/229229a3c0.java"><expr_stmt><expr><name>From</name> <literal type="number">229229a3c0f95e1d37858a98d7a369d7306876f6</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Mike</name> <name><name>Klaas</name> <argument_list type="generic">&lt;<argument><name>klaas</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">7</literal> <name>Jul</name> <literal type="number">2008</literal> <literal type="number">23</literal><operator>:</operator><literal type="number">52</literal><operator>:</operator><literal type="number">36</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">556</literal></expr> <operator>,</operator> <expr><name>SOLR</name><operator>-</operator><literal type="number">610</literal>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/solr/trunk@674677 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                                   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>highlight</name><operator>/</operator><name><name>DefaultSolrHighlighter</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">188</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">27</literal> <operator>++</operator><operator>+</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">86</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">132</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">4487803416a</literal><operator>..</operator><name>fef9aa3a60f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">309</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">309</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>New</name> <name>Features</name>
 <literal type="number">58.</literal> <name>SOLR</name><operator>-</operator><literal type="number">502</literal><operator>:</operator> <name>Add</name> <name>search</name> <name>timeout</name> <name><name>support</name><operator>.</operator></name> (<name>Sean</name> <name>Timm</name> <name>via</name> <name>yonik</name></expr></expr_stmt>)
     
 <expr_stmt><expr><literal type="number">59.</literal> <name>SOLR</name><operator>-</operator><literal type="number">605</literal><operator>:</operator> <name>Add</name> <name>the</name> <name>ability</name> <name>to</name> <name>register</name> <name>callbacks</name> <call><name>programatically</name> <argument_list>(<argument><expr><name>ryan</name></expr></argument>, <argument><expr><name>Noble</name> <name>Paul</name></expr></argument>)</argument_list></call>

<literal type="number">60.</literal> <name>SOLR</name><operator>-</operator><literal type="number">610</literal><operator>:</operator> <name><name>hl</name><operator>.</operator><name>maxAnalyzedChars</name></name> <name>can</name> <name>be</name> <operator>-</operator><literal type="number">1</literal> <name>to</name> <name>highlight</name> <call><name>everything</name> <argument_list>(<argument><expr><name>Lars</name> <name>Kotthoff</name> <name>via</name> <name>klaas</name></expr></argument>)</argument_list></call>
     
 <name>Changes</name> <name>in</name> <name>runtime</name> <name>behavior</name>
  <literal type="number">1.</literal> <name>SOLR</name><operator>-</operator><literal type="number">559</literal><operator>:</operator> <name>use</name> <name>Lucene</name> <name>updateDocument</name></expr><operator>,</operator> <expr><name>deleteDocuments</name> <name><name>methods</name><operator>.</operator>  <name>This</name></name>
@@ <operator>-</operator><literal type="number">464</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">466</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>Bug</name> <name>Fixes</name>
     <name>via</name> <name>useMultiPartPost</name> <name>in</name> <name><name>CommonsHttpSolrServer</name><operator>.</operator></name>
     (<name>Lars</name> <name>Kotthoff</name></expr><operator>,</operator> <expr><name>Andrew</name> <name>Schurman</name></expr><operator>,</operator> <expr><name>ryan</name></expr><operator>,</operator> <expr><name>yonik</name></expr></expr_stmt>)
 
<expr_stmt><expr><literal type="number">40.</literal> <name>SOLR</name><operator>-</operator><literal type="number">556</literal><operator>:</operator> <name>multi</name><operator>-</operator><name>valued</name> <name>fields</name> <name>always</name> <name>highlighted</name> <name>in</name> <name>disparate</name> <call><name>snippets</name> <argument_list>(<argument><expr><name>Lars</name> <name>Kotthoff</name> <name>via</name> <name>klaas</name></expr></argument>)</argument_list></call>
 
 <name>Other</name> <name>Changes</name>
  <literal type="number">1.</literal> <name>SOLR</name><operator>-</operator><literal type="number">135</literal><operator>:</operator> <name>Moved</name> <name>common</name> <name>classes</name> <name>to</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name></name> <name>and</name> <name>altered</name> <name>the</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>DefaultSolrHighlighter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>DefaultSolrHighlighter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0b2281ab44d</literal><operator>..</operator><literal type="number">489c03e6603</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>DefaultSolrHighlighter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>DefaultSolrHighlighter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ListIterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathConstants</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultSolrHighlighter</name> extends <name>SolrHighlighter</name>
     <name>highlighter</name> <operator>=</operator> <operator>new</operator> <call><name>Highlighter</name><argument_list>(<argument><expr><call><name>getFormatter</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getSpanQueryScorer</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>tokenStream</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <expr_stmt><expr><call><name><name>highlighter</name><operator>.</operator><name>setTextFragmenter</name></name><argument_list>(<argument><expr><call><name>getFragmenter</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>highlighter</name><operator>.</operator><name>setMaxDocBytesToAnalyze</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>getFieldInt</name></name><argument_list>(
        <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name><name>HighlightParams</name><operator>.</operator><name>MAX_CHARS</name></name></expr></argument>, 
        <argument><expr><name><name>Highlighter</name><operator>.</operator><name>DEFAULT_MAX_DOC_BYTES_TO_ANALYZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <return>return <expr><name>highlighter</name></expr>;</return>
   }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">127</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultSolrHighlighter</name> extends <name>SolrHighlighter</name>
            <call><name>getFormatter</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr><operator>,</operator> 
            <expr><call><name>getQueryScorer</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
      <expr_stmt><expr><call><name><name>highlighter</name><operator>.</operator><name>setTextFragmenter</name></name><argument_list>(<argument><expr><call><name>getFragmenter</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>highlighter</name><operator>.</operator><name>setMaxDocBytesToAnalyze</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>getFieldInt</name></name><argument_list>(
           <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name><name>HighlightParams</name><operator>.</operator><name>MAX_CHARS</name></name></expr></argument>, 
           <argument><expr><name><name>Highlighter</name><operator>.</operator><name>DEFAULT_MAX_DOC_BYTES_TO_ANALYZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>highlighter</name></expr>;</return>
   }
   
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">272</literal></expr><operator>,</operator><expr><literal type="number">71</literal> <operator>+</operator><literal type="number">266</literal></expr><operator>,</operator><expr><literal type="number">75</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultSolrHighlighter</name> extends <name>SolrHighlighter</name></expr></expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>docTexts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
           
           <decl_stmt><decl><type><name>TokenStream</name></type> <name>tstream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>numFragments</name> <init>= <expr><call><name>getMaxSnippets</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>boolean</name></type> <name>mergeContiguousFragments</name> <init>= <expr><call><name>isMergeContiguousFragments</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
          <comment type="line">// create TokenStream</comment>
          <if_stmt><if>if <condition>(<expr><name><name>docTexts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// single-valued field</comment>
          <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>summaries</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TextFragment</name></argument>&gt;</argument_list></name></type> <name>frags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TextFragment</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>docTexts</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// create TokenStream</comment>
             <try>try <block>{<block_content>
               <comment type="line">// attempt term vectors</comment>
               <expr_stmt><expr><name>tstream</name> <operator>=</operator> <call><name><name>TokenSources</name><operator>.</operator><name>getTokenStream</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>docId</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block>
             <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
               <comment type="line">// fall back to anaylzer</comment>
              <expr_stmt><expr><name>tstream</name> <operator>=</operator> <operator>new</operator> <call><name>TokenOrderingFilter</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getAnalyzer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tokenStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name><name>docTexts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>tstream</name> <operator>=</operator> <operator>new</operator> <call><name>TokenOrderingFilter</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getAnalyzer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tokenStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name><name>docTexts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
             
            <decl_stmt><decl><type><name>Highlighter</name></type> <name>highlighter</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>HighlightParams</name><operator>.</operator><name>USE_PHRASE_HIGHLIGHTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <comment type="line">// wrap CachingTokenFilter around TokenStream for reuse</comment>
              <expr_stmt><expr><name>tstream</name> <operator>=</operator> <operator>new</operator> <call><name>CachingTokenFilter</name><argument_list>(<argument><expr><name>tstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              
              <comment type="line">// get highlighter</comment>
              <expr_stmt><expr><name>highlighter</name> <operator>=</operator> <call><name>getPhraseHighlighter</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>CachingTokenFilter</name><operator>)</operator> <name>tstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               
              <comment type="line">// after highlighter initialization, reset tstream since construction of highlighter already used it</comment>
              <expr_stmt><expr><call><name><name>tstream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
              <comment type="line">// use "the old way"</comment>
              <expr_stmt><expr><name>highlighter</name> <operator>=</operator> <call><name>getHighlighter</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
          <if_stmt><else>else <block>{<block_content>
            <comment type="line">// multi-valued field</comment>
            <expr_stmt><expr><name>tstream</name> <operator>=</operator> <operator>new</operator> <call><name>MultiValueTokenStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>docTexts</name></expr></argument>, <argument><expr><call><name><name>schema</name><operator>.</operator><name>getAnalyzer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          
          <decl_stmt><decl><type><name>Highlighter</name></type> <name>highlighter</name></decl>;</decl_stmt>
          
          <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>HighlightParams</name><operator>.</operator><name>USE_PHRASE_HIGHLIGHTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// wrap CachingTokenFilter around TokenStream for reuse</comment>
            <expr_stmt><expr><name>tstream</name> <operator>=</operator> <operator>new</operator> <call><name>CachingTokenFilter</name><argument_list>(<argument><expr><name>tstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             
            <comment type="line">// get highlighter</comment>
            <expr_stmt><expr><name>highlighter</name> <operator>=</operator> <call><name>getPhraseHighlighter</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>CachingTokenFilter</name><operator>)</operator> <name>tstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxCharsToAnalyze</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>getFieldInt</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>,
                <argument><expr><name><name>HighlightParams</name><operator>.</operator><name>MAX_CHARS</name></name></expr></argument>,
                <argument><expr><name><name>Highlighter</name><operator>.</operator><name>DEFAULT_MAX_CHARS_TO_ANALYZE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>maxCharsToAnalyze</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>highlighter</name><operator>.</operator><name>setMaxDocCharsToAnalyze</name></name><argument_list>(<argument><expr><name><name>docTexts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name><name>highlighter</name><operator>.</operator><name>setMaxDocCharsToAnalyze</name></name><argument_list>(<argument><expr><name>maxCharsToAnalyze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
             
            <comment type="line">// after highlighter initialization, reset tstream since construction of highlighter already used it</comment>
            <expr_stmt><expr><call><name><name>tstream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else <block>{<block_content>
            <comment type="line">// use "the old way"</comment>
            <expr_stmt><expr><name>highlighter</name> <operator>=</operator> <call><name>getHighlighter</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>TextFragment</name><index>[]</index></name></type> <name>bestTextFragments</name> <init>= <expr><call><name><name>highlighter</name><operator>.</operator><name>getBestTextFragments</name></name><argument_list>(<argument><expr><name>tstream</name></expr></argument>, <argument><expr><name><name>docTexts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>mergeContiguousFragments</name></expr></argument>, <argument><expr><name>numFragments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>bestTextFragments</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bestTextFragments</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bestTextFragments</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>getScore</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>frags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>bestTextFragments</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
           </block_content>}</block></else></if_stmt>

          <decl_stmt><decl><type><name>int</name></type> <name>numFragments</name> <init>= <expr><call><name>getMaxSnippets</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>boolean</name></type> <name>mergeContiguousFragments</name> <init>= <expr><call><name>isMergeContiguousFragments</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

           <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>summaries</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name><name>TextFragment</name><index>[]</index></name></type> <name>frag</name></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name><name>docTexts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>frag</name> <operator>=</operator> <call><name><name>highlighter</name><operator>.</operator><name>getBestTextFragments</name></name><argument_list>(<argument><expr><name>tstream</name></expr></argument>, <argument><expr><name><name>docTexts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mergeContiguousFragments</name></expr></argument>, <argument><expr><name>numFragments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if>
           <else>else <block>{<block_content>
               <decl_stmt><decl><type><name>StringBuilder</name></type> <name>singleValue</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
               
               <for>for <control>(<init><decl><type><name>String</name></type> <name>txt</name><range>:<expr><name>docTexts</name></expr></range></decl></init>)</control> <block>{<block_content>
             	  <expr_stmt><expr><call><name><name>singleValue</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></for>
             
              <expr_stmt><expr><name>frag</name> <operator>=</operator> <call><name><name>highlighter</name><operator>.</operator><name>getBestTextFragments</name></name><argument_list>(<argument><expr><name>tstream</name></expr></argument>, <argument><expr><call><name><name>singleValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>numFragments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></else></if_stmt>
          <comment type="line">// sort such that the fragments with the highest score come first</comment>
          <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>frags</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>TextFragment</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>TextFragment</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>TextFragment</name></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <return>return <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>arg1</name><operator>.</operator><name>getScore</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>arg0</name><operator>.</operator><name>getScore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
          }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <comment type="line">// convert fragments back into text</comment>
            <comment type="line">// TODO: we can include score and position information in output as snippet attributes</comment>
           <if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fragTexts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frag</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frag</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getScore</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>fragTexts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>frag</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>frags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fragTexts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>TextFragment</name></type> <name>fragment</name><range>: <expr><name>frags</name></expr></range></decl></init>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fragment</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>fragment</name><operator>.</operator><name>getScore</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>fragTexts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>fragment</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><name>summaries</name> <operator>=</operator> <call><name><name>fragTexts</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>summaries</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
                <expr_stmt><expr><call><name><name>docSummaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>summaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
           </block_content>}</block></for>
              <if_stmt><if>if <condition>(<expr><call><name><name>fragTexts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>numFragments</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>summaries</name> <operator>=</operator> <call><name><name>fragTexts</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>summaries</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
            <expr_stmt><expr><call><name><name>docSummaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>summaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          </block_content>}</block></for>
            <comment type="line">// no summeries made, copy text from alternate field</comment>
            <if_stmt><if>if <condition>(<expr><name>summaries</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>summaries</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
               <decl_stmt><decl><type><name>String</name></type> <name>alternateField</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFieldParam</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name><name>HighlightParams</name><operator>.</operator><name>ALTERNATE_FIELD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">370</literal></expr><operator>,</operator><expr><literal type="number">80</literal> <operator>+</operator><literal type="number">368</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultSolrHighlighter</name> extends <name>SolrHighlighter</name></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 </block_content>}</block></if></if_stmt>
 
<comment type="block" format="javadoc">/** 
 * Creates a single TokenStream out multi-value field values.
 */</comment>
<class>class <name>MultiValueTokenStream</name> <super_list><extends>extends <super><name>TokenStream</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fieldName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>values</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>analyzer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>curIndex</name></decl>;</decl_stmt>                  <comment type="line">// next index into the values array</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>curOffset</name></decl>;</decl_stmt>                 <comment type="line">// offset into concatenated string</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>TokenStream</name></type> <name>currentStream</name></decl>;</decl_stmt>     <comment type="line">// tokenStream currently being iterated</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>orderTokenOffsets</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Constructs a TokenStream for consecutively-analyzed field values
   *
   * @param fieldName name of the field
   * @param values array of field data
   * @param analyzer analyzer instance
   */</comment>
  <constructor><specifier>public</specifier> <name>MultiValueTokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>values</name></decl></parameter>, 
                               <parameter><decl><type><name>Analyzer</name></type> <name>analyzer</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>orderTokenOffsets</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fieldName</name></name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>analyzer</name></name> <operator>=</operator> <name>analyzer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>curOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>currentStream</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>orderTokenOffsets</name></name><operator>=</operator><name>orderTokenOffsets</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/** Returns the next token in the stream, or null at EOS. */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Token</name></type> <name>next</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>currentStream</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>curIndex</name><operator>++</operator></expr>;</expr_stmt>        
      <if_stmt><if>if<condition>(<expr><name>curIndex</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>currentStream</name> <operator>=</operator> <call><name><name>analyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, 
                                             <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>curIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>orderTokenOffsets</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentStream</name> <operator>=</operator> <operator>new</operator> <call><name>TokenOrderingFilter</name><argument_list>(<argument><expr><name>currentStream</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">// add extra space between multiple values</comment>
        <if_stmt><if>if<condition>(<expr><name>curIndex</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
          <expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name><name>analyzer</name><operator>.</operator><name>getPositionIncrementGap</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Token</name></type> <name>nextToken</name> <init>= <expr><call><name><name>currentStream</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>nextToken</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>curOffset</name> <operator>+=</operator> <name><name>values</name><index>[<expr><name>curIndex</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>currentStream</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <return>return <expr><call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// create an modified token which is the offset into the concatenated</comment>
    <comment type="line">// string of all values</comment>
    <decl_stmt><decl><type><name>Token</name></type> <name>offsetToken</name> <init>= <expr><operator>new</operator> <call><name>Token</name><argument_list>(<argument><expr><call><name><name>nextToken</name><operator>.</operator><name>termText</name></name><argument_list>()</argument_list></call></expr></argument>, 
                                  <argument><expr><call><name><name>nextToken</name><operator>.</operator><name>startOffset</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>curOffset</name></expr></argument>,
                                  <argument><expr><call><name><name>nextToken</name><operator>.</operator><name>endOffset</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>curOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>offsetToken</name><operator>.</operator><name>setPositionIncrement</name></name><argument_list>(<argument><expr><call><name><name>nextToken</name><operator>.</operator><name>getPositionIncrement</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>extra</name><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>offsetToken</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns all values as a single String into which the Tokens index with
   * their offsets.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>asSingleValue</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>String</name></type> <name>str</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class></block_content></block></if></if_stmt>


 <comment type="block" format="javadoc">/** Orders Tokens in a window first by their startOffset ascending.
  * endOffset is currently ignored.
  * This is meant to work around fickleness in the highlighter only.  It
diff --git a/src/test/org/apache/solr/highlight/HighlighterTest.java b/src/test/org/apache/solr/highlight/HighlighterTest.java
index 94ea3ffce2c..6610044999a 100755
-- a/src/test/org/apache/solr/highlight/HighlighterTest.java
++ b/src/test/org/apache/solr/highlight/HighlighterTest.java
@@ -185,6 +185,26 @@ public class HighlighterTest extends AbstractSolrTestCase {
             );
 
   }
  
  public void testMultiValueBestFragmentHighlight() {
    HashMap&lt;String,String&gt; args = new HashMap&lt;String,String&gt;();
    args.put("hl", "true");
    args.put("hl.fl", "textgap");
    args.put("df", "textgap");
    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(
        "standard", 0, 200, args);
    
    assertU(adoc("textgap", "first entry has one word foo", 
        "textgap", "second entry has both words foo bar",
        "id", "1"));
    assertU(commit());
    assertU(optimize());
    assertQ("Best fragment summarization",
        sumLRF.makeRequest("foo bar"),
        "//lst[@name='highlighting']/lst[@name='1']",
        "//lst[@name='1']/arr[@name='textgap']/str[.=\'second entry has both words &lt;em&gt;foo&lt;/em&gt; &lt;em&gt;bar&lt;/em&gt;\']"
    );
  }
 
 
   public void testDefaultFieldHighlight() {
@@ -361,6 +381,13 @@ public class HighlighterTest extends AbstractSolrTestCase {
             "//lst[@name='highlighting']/lst[@name='1']",
             "//lst[@name='1'][not(*)]"
             );
    args.put("hl.maxAnalyzedChars", "-1");
    sumLRF = h.getRequestFactory("standard", 0, 200, args);
    assertQ("token at start of text",
        sumLRF.makeRequest("t_text:disjoint"),
        "//lst[@name='highlighting']/lst[@name='1']",
        "//lst[@name='1']/arr[count(str)=1]"
    );
   }
   public void testRegexFragmenter() {
     HashMap&lt;String,String&gt; args = new HashMap&lt;String,String&gt;();
- 
2.19.1.windows.1

</comment></unit>
