<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/71ca2a84ba.java"><expr_stmt><expr><name>From</name> <literal type="number">71ca2a84bad2495eff3b0b15dc445f3f013ea4af</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Adrien</name> <name><name>Grand</name> <argument_list type="generic">&lt;<argument><name>jpountz</name><annotation>@<name><name>gmail</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">19</literal> <name>Jan</name> <literal type="number">2017</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">12</literal><operator>:</operator><literal type="number">04</literal> <operator>+</operator><literal type="number">0100</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">7643</literal><operator>:</operator> <name>Move</name> <name>IndexOrDocValuesQuery</name> <name>to</name> <name><name>core</name><operator>.</operator></name>

--
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>document</name><operator>/</operator><name><name>NumericDocValuesField</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">48</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedDocValuesField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">42</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">54</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>SortedNumericDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">144</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">43</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>SortedSetDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>         <operator>|</operator> <literal type="number">187</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">66</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PointRangeQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesQueries</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">238</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocValuesRangeQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">276</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">307</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ICUCollationField</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CollationField</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>EnumField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">45</literal> <operator>++</operator><operator>-</operator>
 <literal type="number">18</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">887</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">625</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
 <name>rename</name> <name>lucene</name><operator>/</operator><block>{<expr><name>sandbox</name> <operator>=</operator><operator>&gt;</operator> <name>core</name></expr>}</block><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><call><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">56</literal><operator>%</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesQueries</name><operator>.</operator><name>java</name></name>
 <name>rename</name> <name>lucene</name><operator>/</operator><block>{<expr><name>sandbox</name> <operator>=</operator><operator>&gt;</operator> <name>core</name></expr>}</block><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><call><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">96</literal><operator>%</operator></expr></argument>)</argument_list></call>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">9d1cbb7b83d</literal><operator>..</operator><literal type="number">147b0e01d7d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>API</name> <name>Changes</name>
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">7644</literal><operator>:</operator> <call><name><name>FieldComparatorSource</name><operator>.</operator><name>newComparator</name></name><argument_list>()</argument_list></call> <name>and</name>
   <call><name><name>SortField</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call> <name>no</name> <name>longer</name> <throw>throw <argument_list>IOException <argument><expr><operator>(</operator><name>Alan</name> <name>Woodward</name><operator>)</operator>
 
<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">7643</literal><operator>:</operator> <name>Replaced</name> <name>doc</name><operator>-</operator><name>values</name> <name>queries</name> <name>in</name> <name>lucene</name><operator>/</operator><name>sandbox</name> <name>with</name> <name>factory</name>
  <name>methods</name> <name>on</name> <name>the</name> <operator>*</operator><name>DocValuesField</name> <name><name>classes</name><operator>.</operator></name> (<name>Adrien</name> <name>Grand</name></expr></argument>)</argument_list></throw>

 <name>New</name> <name>Features</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">7623</literal><operator>:</operator> <name>Add</name> <name>FunctionScoreQuery</name> <name>and</name> <call><name>FunctionMatchQuery</name> <argument_list>(<argument><expr><name>Alan</name> <name>Woodward</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">96</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">99</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <name>Improvements</name>
   <name>should</name> <name>be</name> <name>run</name></expr></argument>, <argument><expr><name><name>eg</name><operator>.</operator> <name>using</name></name> <name>points</name> <name>or</name> <name>doc</name> <name>values</name> <name>depending</name> <name>on</name> <name>costs</name> <name>of</name> <name>other</name>
   <name>parts</name> <name>of</name> <name>the</name> <name><name>query</name><operator>.</operator></name> (<name>Adrien</name> <name>Grand</name></expr></argument>)</argument_list></call>
 
<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">7643</literal><operator>:</operator> <name>IndexOrDocValuesQuery</name> <name>allows</name> <name>to</name> <name>execute</name> <name>range</name> <name>queries</name> <name>using</name>
  <name>either</name> <name>points</name> <name>or</name> <name>doc</name> <name>values</name> <name>depending</name> <name>on</name> <name>which</name> <name>one</name> <name>is</name> <name>more</name> <name><name>efficient</name><operator>.</operator></name>
  (<name>Adrien</name> <name>Grand</name></expr></expr_stmt>)

 <expr_stmt><expr><name>Optimizations</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">7641</literal><operator>:</operator> <name>Optimized</name> <name>point</name> <name>range</name> <name>queries</name> <name>to</name> <name>compute</name> <name>documents</name> <name>that</name></expr></expr_stmt> <do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>not</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>NumericDocValuesField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>NumericDocValuesField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5b6dcc8dce2</literal><operator>..</operator><literal type="number">6d844925d08</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>NumericDocValuesField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>NumericDocValuesField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt></block_content></block>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name></name>;</package>
 
 
import java.io.IOException;

import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.DocValuesType;
import org.apache.lucene.index.LeafReader;
import org.apache.lucene.index.NumericDocValues;
import org.apache.lucene.index.SortedNumericDocValues;
import org.apache.lucene.search.IndexOrDocValuesQuery;
import org.apache.lucene.search.Query;
 
 <comment type="block" format="javadoc">/**
  * &lt;p&gt;
@@ -54,4 +62,44 @@ public class NumericDocValuesField extends Field {
     super(name, TYPE);
     fieldsData = Long.valueOf(value);
   }

  /**
   * Create a range query that matches all documents whose value is between
   * {@code lowerValue} and {@code upperValue} included.
   * &lt;p&gt;
   * You can have half-open ranges (which are in fact &amp;lt;/&amp;le; or &amp;gt;/&amp;ge; queries)
   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. 
   * &lt;p&gt;
   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}
   * or {@code Math.addExact(upperValue, -1)}.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link LongPoint#newRangeQuery}.
   */</comment>
  public static Query newRangeQuery(String field<operator>,</operator> long lowerValue<operator>,</operator> long upperValue</do>) <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>SortedNumericDocValuesRangeQuery</name></super><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>lowerValue</name></expr></argument>, <argument><expr><name>upperValue</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><name>SortedNumericDocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>LeafReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>NumericDocValues</name></type> <name>values</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getNumericDocValues</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>DocValues</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block>

  <comment type="block" format="javadoc">/** 
   * Create a query for matching an exact long value.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link LongPoint#newExactQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newExactQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>newRangeQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedDocValuesField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedDocValuesField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bbfb46719f0</name><operator>..</operator><name>feb772501b3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedDocValuesField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedDocValuesField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name></name>;</package>
 
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValuesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedSetDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexOrDocValuesQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -59,4 +66,39 @@ public class SortedDocValuesField extends Field {
     super(name, TYPE);
     fieldsData = bytes;
   }

  /**
   * Create a range query that matches all documents whose value is between
   * {@code lowerValue} and {@code upperValue} included.
   * &lt;p&gt;
   * You can have half-open ranges by setting {@code lowerValue = null}
   * or {@code upperValue = null}.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link BinaryPoint#newRangeQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>,
      <parameter><decl><type><name>BytesRef</name></type> <name>lowerValue</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>upperValue</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>lowerInclusive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>upperInclusive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>SortedSetDocValuesRangeQuery</name></super><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>lowerValue</name></expr></argument>, <argument><expr><name>upperValue</name></expr></argument>, <argument><expr><name>lowerInclusive</name></expr></argument>, <argument><expr><name>upperInclusive</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><name>SortedSetDocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>LeafReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>DocValues</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><call><name><name>DocValues</name><operator>.</operator><name>getSorted</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** 
   * Create a query for matching an exact {@link BytesRef} value.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link BinaryPoint#newExactQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newExactQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>newRangeQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cbba218f7de</name><operator>..</operator><literal type="number">6f9a2717267</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name></name>;</package>
 
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValuesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedNumericDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexOrDocValuesQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * &lt;p&gt;
@@ -63,4 +71,50 @@ public class SortedNumericDocValuesField extends Field {
     super(name, TYPE);
     fieldsData = Long.valueOf(value);
   }

  /**
   * Create a range query that matches all documents whose value is between
   * {@code lowerValue} and {@code upperValue} included.
   * &lt;p&gt;
   * You can have half-open ranges (which are in fact &amp;lt;/&amp;le; or &amp;gt;/&amp;ge; queries)
   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. 
   * &lt;p&gt;
   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}
   * or {@code Math.addExact(upperValue, -1)}.
   * &lt;p&gt;This query also works with fields that have indexed
   * {@link NumericDocValuesField}s.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link LongPoint#newRangeQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lowerValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>upperValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>SortedNumericDocValuesRangeQuery</name></super><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>lowerValue</name></expr></argument>, <argument><expr><name>upperValue</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><name>SortedNumericDocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>LeafReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>FieldInfo</name></type> <name>info</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getFieldInfos</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fieldInfo</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// Queries have some optimizations when one sub scorer returns null rather</comment>
          <comment type="line">// than a scorer that does not match any documents</comment>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>DocValues</name><operator>.</operator><name>getSortedNumeric</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** 
   * Create a query for matching an exact long value.
   * &lt;p&gt;This query also works with fields that have indexed
   * {@link NumericDocValuesField}s.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link LongPoint#newExactQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newExactQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>newRangeQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..18805b287c0</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedNumericDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">144</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>NumericDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedNumericDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ConstantScoreScorer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ConstantScoreWeight</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldValueQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TwoPhaseIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Weight</name></name>;</import>

<class><specifier>abstract</specifier> class <name>SortedNumericDocValuesRangeQuery</name> <super_list><extends>extends <super><name>Query</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>field</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>lowerValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>upperValue</name></decl>;</decl_stmt>

  <constructor><name>SortedNumericDocValuesRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lowerValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>upperValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerValue</name></name> <operator>=</operator> <name>lowerValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperValue</name></name> <operator>=</operator> <name>upperValue</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sameClassAs</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SortedNumericDocValuesRangeQuery</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>SortedNumericDocValuesRangeQuery</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <name>lowerValue</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>lowerValue</name></name>
        <operator>&amp;&amp;</operator> <name>upperValue</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>upperValue</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>classHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>field</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>lowerValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>upperValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>h</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>b</name>
        <operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>lowerValue</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" TO "</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>upperValue</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Query</name></type> <name>rewrite</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lowerValue</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&amp;&amp;</operator> <name>upperValue</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>FieldValueQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>rewrite</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function_decl><type><specifier>abstract</specifier> <name>SortedNumericDocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>LeafReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Weight</name></type> <name>createWeight</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>needsScores</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>ConstantScoreWeight</name></super><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>LeafReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>SortedNumericDocValues</name></type> <name>values</name> <init>= <expr><call><name>getValues</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>NumericDocValues</name></type> <name>singleton</name> <init>= <expr><call><name><name>DocValues</name><operator>.</operator><name>unwrapSingleton</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TwoPhaseIterator</name></type> <name>iterator</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>singleton</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>iterator</name> <operator>=</operator> <operator>new</operator> <class><super><name>TwoPhaseIterator</name></super><argument_list>(<argument><expr><name>singleton</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
              <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>singleton</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <return>return <expr><name>value</name> <operator>&gt;=</operator> <name>lowerValue</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>upperValue</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>matchCost</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><literal type="number">2</literal></expr>;</return> <comment type="line">// 2 comparisons</comment>
            </block_content>}</block></function>
          }</block></class></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>iterator</name> <operator>=</operator> <operator>new</operator> <class><super><name>TwoPhaseIterator</name></super><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
              <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>docValueCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>nextValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>lowerValue</name></expr>)</condition> <block>{<block_content>
                  <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// Values are sorted, so the first value that is &gt;= lowerValue is our best candidate</comment>
                <return>return <expr><name>value</name> <operator>&lt;=</operator> <name>upperValue</name></expr>;</return>
              </block_content>}</block></for>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// all values were &lt; lowerValue</comment>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>matchCost</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><literal type="number">2</literal></expr>;</return> <comment type="line">// 2 comparisons</comment>
            </block_content>}</block></function>
          }</block></class></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ConstantScoreScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>score</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7a273acd779</literal><operator>..</operator><literal type="number">26b1907617d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name></name>;</package>
 
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValuesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedSetDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexOrDocValuesQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -60,4 +67,40 @@ public class SortedSetDocValuesField extends Field {
     super(name, TYPE);
     fieldsData = bytes;
   }

  /**
   * Create a range query that matches all documents whose value is between
   * {@code lowerValue} and {@code upperValue}.
   * &lt;p&gt;This query also works with fields that have indexed
   * {@link SortedDocValuesField}s.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link BinaryPoint#newRangeQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>,
      <parameter><decl><type><name>BytesRef</name></type> <name>lowerValue</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>upperValue</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>lowerInclusive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>upperInclusive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>SortedSetDocValuesRangeQuery</name></super><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>lowerValue</name></expr></argument>, <argument><expr><name>upperValue</name></expr></argument>, <argument><expr><name>lowerInclusive</name></expr></argument>, <argument><expr><name>upperInclusive</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><name>SortedSetDocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>LeafReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>DocValues</name><operator>.</operator><name>getSortedSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** 
   * Create a query for matching an exact {@link BytesRef} value.
   * &lt;p&gt;This query also works with fields that have indexed
   * {@link SortedDocValuesField}s.
   * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: Such queries cannot efficiently advance to the next match,
   * which makes them slow if they are not ANDed with a selective query. As a
   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},
   * alongside a range query that executes on points, such as
   * {@link BinaryPoint#newExactQuery}.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newExactQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>newRangeQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..30af45f6a64</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>document</name><operator>/</operator><name><name>SortedSetDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">187</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedSetDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ConstantScoreScorer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ConstantScoreWeight</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldValueQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TwoPhaseIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Weight</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>

<class><specifier>abstract</specifier> class <name>SortedSetDocValuesRangeQuery</name> <super_list><extends>extends <super><name>Query</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>field</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BytesRef</name></type> <name>lowerValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BytesRef</name></type> <name>upperValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>lowerInclusive</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>upperInclusive</name></decl>;</decl_stmt>

  <constructor><name>SortedSetDocValuesRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>,
      <parameter><decl><type><name>BytesRef</name></type> <name>lowerValue</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>upperValue</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>lowerInclusive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>upperInclusive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerValue</name></name> <operator>=</operator> <name>lowerValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperValue</name></name> <operator>=</operator> <name>upperValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerInclusive</name></name> <operator>=</operator> <name>lowerInclusive</name> <operator>&amp;&amp;</operator> <name>lowerValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperInclusive</name></name> <operator>=</operator> <name>upperInclusive</name> <operator>&amp;&amp;</operator> <name>upperValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sameClassAs</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SortedSetDocValuesRangeQuery</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>SortedSetDocValuesRangeQuery</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>lowerValue</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>lowerValue</name></name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>upperValue</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>upperValue</name></name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <name>lowerInclusive</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>lowerInclusive</name></name>
        <operator>&amp;&amp;</operator> <name>upperInclusive</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>upperInclusive</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>classHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>field</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>lowerValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>upperValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>lowerInclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>upperInclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>h</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>b</name>
        <operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>lowerInclusive</name></expr> ?</condition><then> <expr><literal type="string">"["</literal></expr> </then><else>: <expr><literal type="string">"{"</literal></expr></else></ternary></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>lowerValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><name>lowerValue</name></expr></else></ternary></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" TO "</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>upperValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><name>upperValue</name></expr></else></ternary></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>upperInclusive</name></expr> ?</condition><then> <expr><literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">"}"</literal></expr></else></ternary></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Query</name></type> <name>rewrite</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lowerValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>upperValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>FieldValueQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>rewrite</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function_decl><type><specifier>abstract</specifier> <name>SortedSetDocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>LeafReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Weight</name></type> <name>createWeight</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>needsScores</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>ConstantScoreWeight</name></super><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>LeafReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>SortedSetDocValues</name></type> <name>values</name> <init>= <expr><call><name>getValues</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>minOrd</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lowerValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>lookupTerm</name></name><argument_list>(<argument><expr><name>lowerValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>ord</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lowerInclusive</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <name>ord</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>maxOrd</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>upperValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <call><name><name>values</name><operator>.</operator><name>getValueCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>lookupTerm</name></name><argument_list>(<argument><expr><name>upperValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>ord</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>upperInclusive</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <name>ord</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>minOrd</name> <operator>&gt;</operator> <name>maxOrd</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>SortedDocValues</name></type> <name>singleton</name> <init>= <expr><call><name><name>DocValues</name><operator>.</operator><name>unwrapSingleton</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TwoPhaseIterator</name></type> <name>iterator</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>singleton</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>iterator</name> <operator>=</operator> <operator>new</operator> <class><super><name>TwoPhaseIterator</name></super><argument_list>(<argument><expr><name>singleton</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
              <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>singleton</name><operator>.</operator><name>ordValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <return>return <expr><name>ord</name> <operator>&gt;=</operator> <name>minOrd</name> <operator>&amp;&amp;</operator> <name>ord</name> <operator>&lt;=</operator> <name>maxOrd</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>matchCost</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><literal type="number">2</literal></expr>;</return> <comment type="line">// 2 comparisons</comment>
            </block_content>}</block></function>
          }</block></class></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>iterator</name> <operator>=</operator> <operator>new</operator> <class><super><name>TwoPhaseIterator</name></super><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
              <for>for <control>(<init><decl><type><name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>ord</name> <operator>!=</operator> <name><name>SortedSetDocValues</name><operator>.</operator><name>NO_MORE_ORDS</name></name></expr>;</condition> <incr><expr><name>ord</name> <operator>=</operator> <call><name><name>values</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&lt;</operator> <name>minOrd</name></expr>)</condition> <block>{<block_content>
                  <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// Values are sorted, so the first ord that is &gt;= minOrd is our best candidate</comment>
                <return>return <expr><name>ord</name> <operator>&lt;=</operator> <name>maxOrd</name></expr>;</return>
              </block_content>}</block></for>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// all ords were &lt; minOrd</comment>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>matchCost</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><literal type="number">2</literal></expr>;</return> <comment type="line">// 2 comparisons</comment>
            </block_content>}</block></function>
          }</block></class></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ConstantScoreScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>score</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">56</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0f9e8e3e027</literal><operator>..</operator><literal type="number">35067d2105d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">66</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>LongPoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedNumericDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
 * A query that uses either an index (points or terms) or doc values in order
 * to run a range query, depending which one is more efficient.
 * A query that uses either an index structure (points or terms) or doc values
 * in order to run a query, depending which one is more efficient. This is
 * typically useful for range queries, whose {@link Weight#scorer} is costly
 * to create since it usually needs to sort large lists of doc ids. For
 * instance, for a field that both indexed {@link LongPoint}s and
 * {@link SortedNumericDocValuesField}s with the same values, an efficient
 * range query could be created by doing:
 * &lt;pre class="prettyprint"&gt;
 *   String field;
 *   long minValue, maxValue;
 *   Query pointQuery = LongPoint.newRangeQuery(field, minValue, maxValue);
 *   Query dvQuery = SortedNumericDocValuesField.newRangeQuery(field, minValue, maxValue);
 *   Query query = new IndexOrDocValuesQuery(pointQuery, dvQuery);
 * &lt;/pre&gt;
 * The above query will be efficient as it will use points in the case that they
 * perform better, ie. when we need a good lead iterator that will be almost
 * entirely consumed; and doc values otherwise, ie. in the case that another
 * part of the query is already leading iteration but we still need the ability
 * to verify that some documents match.
 * &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;This query currently only works well with point range/exact
 * queries and their equivalent doc values queries.
 * @lucene.experimental
  */</comment>
 <class><specifier>public</specifier> <specifier>final</specifier> class <name>IndexOrDocValuesQuery</name> <super_list><extends>extends <super><name>Query</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Query</name></type> <name>indexQuery</name></decl>, <decl><type ref="prev"/><name>dvQuery</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
   * Constructor that takes both a query that executes on an index structure
   * like the inverted index or the points tree, and another query that
   * executes on doc values. Both queries must match the same documents and
   * attribute constant scores.
   * Create an {@link IndexOrDocValuesQuery}. Both provided queries must match
   * the same documents and give the same scores.
   * @param indexQuery a query that has a good iterator but whose scorer may be costly to create
   * @param dvQuery a query whose scorer is cheap to create that can quickly check whether a given document matches
    */</comment>
   <constructor><specifier>public</specifier> <name>IndexOrDocValuesQuery</name><parameter_list>(<parameter><decl><type><name>Query</name></type> <name>indexQuery</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>dvQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexQuery</name></name> <operator>=</operator> <name>indexQuery</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dvQuery</name></name> <operator>=</operator> <name>dvQuery</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <comment type="block" format="javadoc">/** Return the wrapped query that may be costly to initialize but has a good
   *  iterator. */</comment>
  <function><type><specifier>public</specifier> <name>Query</name></type> <name>getIndexQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>indexQuery</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Return the wrapped query that may be slow at identifying all matching
   *  documents, but which is cheap to initialize and can efficiently
   *  verify that some documents match. */</comment>
  <function><type><specifier>public</specifier> <name>Query</name></type> <name>getRandomAccessQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>dvQuery</name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>indexQuery</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>IndexOrDocValuesQuery</name> extends <name>Query</name> <block>{
   <expr><specifier>public</specifier> <name>Weight</name> <call><name>createWeight</name><argument_list>(<argument><expr><name>IndexSearcher</name> <name>searcher</name></expr></argument>, <argument><expr><name>boolean</name> <name>needsScores</name></expr></argument>, <argument><expr><name>float</name> <name>boost</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>final</name> <name>Weight</name> <name>indexWeight</name> <operator>=</operator> <call><name><name>indexQuery</name><operator>.</operator><name>createWeight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>needsScores</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><name>final</name> <name>Weight</name> <name>dvWeight</name> <operator>=</operator> <call><name><name>dvQuery</name><operator>.</operator><name>createWeight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>needsScores</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><operator>new</operator> <class><super><name>ConstantScoreWeight</name></super><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list> <block>{
    <return>return <expr><operator>new</operator> <class><super><name>Weight</name></super><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>extractTerms</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>indexWeight</name><operator>.</operator><name>extractTerms</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></function></block></class></expr></return></block></class></expr></return>}</block>

      @<name>Override</name>
      <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>LeafReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
        <comment type="line">// We need to check a single doc, so the dv query should perform better</comment>
        <return>return <expr><call><name><name>dvWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>BulkScorer</name></type> <name>bulkScorer</name><parameter_list>(<parameter><decl><type><name>LeafReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// Bulk scorers need to consume the entire set of docs, so using an</comment>
        <comment type="line">// index structure should perform better</comment>
         <return>return <expr><call><name><name>indexWeight</name><operator>.</operator><name>bulkScorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></function>
 
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>ScorerSupplier</name></type> <name>scorerSupplier</name><parameter_list>(<parameter><decl><type><name>LeafReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>ScorerSupplier</name></type> <name>indexScorerSupplier</name> <init>= <expr><call><name><name>indexWeight</name><operator>.</operator><name>scorerSupplier</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ScorerSupplier</name></type> <name>dvScorerSupplier</name> <init>= <expr><call><name><name>dvWeight</name><operator>.</operator><name>scorerSupplier</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><specifier>final</specifier> <name>ScorerSupplier</name></type> <name>dvScorerSupplier</name> <init>= <expr><call><name><name>dvWeight</name><operator>.</operator><name>scorerSupplier</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>indexScorerSupplier</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>dvScorerSupplier</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <return>return <expr><literal type="null">null</literal></expr>;</return>
         </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PointRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PointRangeQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7c997caf08a</literal><operator>..</operator><name>f1b85519d0b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PointRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PointRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">281</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">281</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>PointRangeQuery</name> extends <name>Query</name> <block>{
 
             @<expr><name>Override</name>
             <specifier>public</specifier> <name>Scorer</name> <call><name>get</name><argument_list>(<argument><expr><name>boolean</name> <name>randomAccess</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
              <if_stmt><if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></condition></if></if_stmt>
              <if_stmt><if>if <condition>(<expr><literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <call><name><name>values</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call>
                   <operator>&amp;&amp;</operator> <call><name><name>values</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>
                   <operator>&amp;&amp;</operator> <call><name>cost</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                 <comment type="line">// If all docs have exactly one value and the cost is greater</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesQueries</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesQueries</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..501538f426f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesQueries</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">238</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>LongPoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>NumericDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedNumericDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedSetDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>TestUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>TestDocValuesQueries</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelPointRangeSortedNumericRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>doTestDuelPointRangeNumericRangeQuery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelPointRangeMultivaluedSortedNumericRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>doTestDuelPointRangeNumericRangeQuery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelPointRangeNumericRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>doTestDuelPointRangeNumericRangeQuery</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>doTestDuelPointRangeNumericRangeQuery</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>sortedNumeric</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValuesPerDoc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iters</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numValues</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxValuesPerDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numValues</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>sortedNumeric</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongPoint</name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>deleteDocuments</name></name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>min</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q2</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sortedNumeric</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>NumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>doTestDuelPointRangeSortedRangeQuery</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>sortedSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValuesPerDoc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iters</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numValues</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxValuesPerDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numValues</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encoded</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>LongPoint</name><operator>.</operator><name>encodeDimension</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>sortedSet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedSetDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongPoint</name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>deleteDocuments</name></name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>min</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encodedMin</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encodedMax</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>LongPoint</name><operator>.</operator><name>encodeDimension</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>encodedMin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LongPoint</name><operator>.</operator><name>encodeDimension</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>encodedMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>includeMin</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>includeMax</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>includeMin</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>min</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>includeMax</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>max</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q2</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sortedSet</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>,
              <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&amp;&amp;</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>encodedMin</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>&amp;&amp;</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>encodedMax</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
              <argument><expr><name>includeMin</name></expr></argument>, <argument><expr><name>includeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>,
              <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&amp;&amp;</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>encodedMin</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>&amp;&amp;</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>encodedMax</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
              <argument><expr><name>includeMin</name></expr></argument>, <argument><expr><name>includeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelPointRangeSortedSetRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>doTestDuelPointRangeSortedRangeQuery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelPointRangeMultivaluedSortedSetRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>doTestDuelPointRangeSortedRangeQuery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelPointRangeSortedRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>doTestDuelPointRangeSortedRangeQuery</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertSameMatches</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>q2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scores</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxDoc</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TopDocs</name></type> <name>td1</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>maxDoc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>scores</name></expr> ?</condition><then> <expr><name><name>Sort</name><operator>.</operator><name>RELEVANCE</name></name></expr> </then><else>: <expr><name><name>Sort</name><operator>.</operator><name>INDEXORDER</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TopDocs</name></type> <name>td2</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><name>maxDoc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>scores</name></expr> ?</condition><then> <expr><name><name>Sort</name><operator>.</operator><name>RELEVANCE</name></name></expr> </then><else>: <expr><name><name>Sort</name><operator>.</operator><name>INDEXORDER</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>td1</name><operator>.</operator><name>totalHits</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>.</operator><name>totalHits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>td1</name><operator>.</operator><name>scoreDocs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>td1</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>doc</name></expr></argument>, <argument><expr><name><name>td2</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>scores</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>td1</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name></expr></argument>, <argument><expr><name><name>td2</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name></expr></argument>, <argument><expr><literal type="number">10e-7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testEquals</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkEqual</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkUnequal</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkUnequal</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkUnequal</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Query</name></type> <name>q2</name> <init>= <expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkEqual</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkUnequal</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkUnequal</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>checkUnequal</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"quux"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testToString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:[3 TO 5]"</literal></expr></argument>, <argument><expr><call><name><name>q1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"[3 TO 5]"</literal></expr></argument>, <argument><expr><call><name><name>q1</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:[3 TO 5]"</literal></expr></argument>, <argument><expr><call><name><name>q1</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Query</name></type> <name>q2</name> <init>= <expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:[[62 61 72] TO [62 61 7a]]"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:{[62 61 72] TO [62 61 7a]]"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:{[62 61 72] TO [62 61 7a]}"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:[[62 61 72] TO *}"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:{* TO [62 61 7a]]"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"{* TO [62 61 7a]]"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo:{* TO [62 61 7a]]"</literal></expr></argument>, <argument><expr><call><name><name>q2</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingField</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Query</name></type> <name>query</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
        <argument><expr><call><name><name>NumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>SortedNumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>SortedDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"bcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>createNormalizedWeight</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">96</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>de289e7d073</name><operator>..</operator><literal type="number">8b81822c455</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestIndexOrDocValuesQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexOrDocValuesQuery</name> extends <name>LuceneTestCase</name> <block>{
     <comment type="line">// The term query is more selective, so the IndexOrDocValuesQuery should use doc values</comment>
     <expr><name>final</name> <name>Query</name> <name>q1</name> <operator>=</operator> <operator>new</operator> <call><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
         <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexOrDocValuesQuery</name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newExactQuery</name></name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>DocValuesNumbersQuery</name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexOrDocValuesQuery</name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newExactQuery</name></name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>NumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;
 
     <name>final</name> <name>Weight</name> <name>w1</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>createNormalizedWeight</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexOrDocValuesQuery</name> extends <name>LuceneTestCase</name> <block>{
     <comment type="line">// The term query is less selective, so the IndexOrDocValuesQuery should use points</comment>
     <expr><name>final</name> <name>Query</name> <name>q2</name> <operator>=</operator> <operator>new</operator> <call><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
         <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexOrDocValuesQuery</name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newExactQuery</name></name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>DocValuesNumbersQuery</name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">42L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexOrDocValuesQuery</name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newExactQuery</name></name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>NumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><literal type="number">42L</literal></expr></argument>, <argument><expr><literal type="number">42L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;
 
     <name>final</name> <name>Weight</name> <name>w2</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>createNormalizedWeight</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocValuesRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">3d4feb94798</literal><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">276</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocValuesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>PointValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedNumericDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SortedSetDocValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A range query that works on top of the doc values APIs. Such queries are
 * usually slow since they do not use an inverted index. However, in the
 * dense case where most documents match this query, it &lt;b&gt;might&lt;/b&gt; be as
 * fast or faster than a regular {@link PointRangeQuery}.
 *
 * &lt;b&gt;NOTE:&lt;/b&gt; This query is typically best used within a
 * {@link IndexOrDocValuesQuery} alongside a query that uses an indexed
 * structure such as {@link PointValues points} or {@link Terms terms},
 * which allows to run the query on doc values when that would be more
 * efficient, and using an index otherwise.
 *
 * @lucene.experimental
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DocValuesRangeQuery</name> <super_list><extends>extends <super><name>Query</name></super></extends></super_list> <block>{

  <comment type="block" format="javadoc">/** Create a new numeric range query on a numeric doc-values field. The field
   *  must has been indexed with either {@link DocValuesType#NUMERIC} or
   *  {@link DocValuesType#SORTED_NUMERIC} doc values. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newLongRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>lowerVal</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>upperVal</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeLower</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeUpper</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>DocValuesRangeQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>lowerVal</name></expr></argument>, <argument><expr><name>upperVal</name></expr></argument>, <argument><expr><name>includeLower</name></expr></argument>, <argument><expr><name>includeUpper</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Create a new numeric range query on a numeric doc-values field. The field
   *  must has been indexed with {@link DocValuesType#SORTED} or
   *  {@link DocValuesType#SORTED_SET} doc values. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Query</name></type> <name>newBytesRefRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>lowerVal</name></decl></parameter>, <parameter><decl><type><name>BytesRef</name></type> <name>upperVal</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeLower</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeUpper</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>DocValuesRangeQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name>deepCopyOf</name><argument_list>(<argument><expr><name>lowerVal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>deepCopyOf</name><argument_list>(<argument><expr><name>upperVal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>includeLower</name></expr></argument>, <argument><expr><name>includeUpper</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>BytesRef</name></type> <name>deepCopyOf</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>field</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>lowerVal</name></decl>, <decl><type ref="prev"/><name>upperVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>includeLower</name></decl>, <decl><type ref="prev"/><name>includeUpper</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>DocValuesRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>lowerVal</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>upperVal</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeLower</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeUpper</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerVal</name></name> <operator>=</operator> <name>lowerVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperVal</name></name> <operator>=</operator> <name>upperVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includeLower</name></name> <operator>=</operator> <name>includeLower</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includeUpper</name></name> <operator>=</operator> <name>includeUpper</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sameClassAs</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <call><name>equalsTo</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>cast</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalsTo</name><parameter_list>(<parameter><decl><type><name>DocValuesRangeQuery</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
           <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>lowerVal</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>lowerVal</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
           <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>upperVal</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>upperVal</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
           <name>includeLower</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>includeLower</name></name> <operator>&amp;&amp;</operator> 
           <name>includeUpper</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>includeUpper</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">31</literal> <operator>*</operator> <call><name>classHash</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>lowerVal</name></expr></argument>, <argument><expr><name>upperVal</name></expr></argument>, <argument><expr><name>includeLower</name></expr></argument>, <argument><expr><name>includeUpper</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getField</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>field</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getLowerVal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>lowerVal</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getUpperVal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>upperVal</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIncludeLower</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>includeLower</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIncludeUpper</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>includeUpper</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>includeLower</name></expr> ?</condition><then> <expr><literal type="char">'['</literal></expr> </then><else>: <expr><literal type="char">'{'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>lowerVal</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><call><name><name>lowerVal</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" TO "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>upperVal</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><call><name><name>upperVal</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>includeUpper</name></expr> ?</condition><then> <expr><literal type="char">']'</literal></expr> </then><else>: <expr><literal type="char">'}'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Query</name></type> <name>rewrite</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lowerVal</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>upperVal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>FieldValueQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>rewrite</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Weight</name></type> <name>createWeight</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>needsScores</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>boost</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lowerVal</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>upperVal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Both min and max values must not be null, call rewrite first"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>new</operator> <class><super><name>ConstantScoreWeight</name></super><argument_list>(<argument><expr><name><name>DocValuesRangeQuery</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>LeafReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TwoPhaseIterator</name></type> <name>iterator</name> <init>= <expr><call><name>createTwoPhaseIterator</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>iterator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ConstantScoreScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>score</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>private</specifier> <name>TwoPhaseIterator</name></type> <name>createTwoPhaseIterator</name><parameter_list>(<parameter><decl><type><name>LeafReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>lowerVal</name> <operator>instanceof</operator> <name>Long</name> <operator>||</operator> <name>upperVal</name> <operator>instanceof</operator> <name>Long</name></expr>)</condition> <block>{<block_content>

          <decl_stmt><decl><type><specifier>final</specifier> <name>SortedNumericDocValues</name></type> <name>values</name> <init>= <expr><call><name><name>DocValues</name><operator>.</operator><name>getSortedNumeric</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>min</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>lowerVal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>includeLower</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>lowerVal</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator> <name>lowerVal</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
              <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>lowerVal</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>max</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>upperVal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>includeUpper</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>upperVal</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator> <name>upperVal</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
              <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>upperVal</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <return>return <expr><operator>new</operator> <class><super><name>TwoPhaseIterator</name></super><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
              <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>docValueCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <assert>assert <expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
              <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>nextValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>min</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></for>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>matchCost</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><literal type="number">2</literal></expr>;</return> <comment type="line">// 2 comparisons</comment>
            </block_content>}</block></function>

          }</block></class></expr>;</return>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lowerVal</name> <operator>instanceof</operator> <name>BytesRef</name> <operator>||</operator> <name>upperVal</name> <operator>instanceof</operator> <name>BytesRef</name></expr>)</condition> <block>{<block_content>

          <decl_stmt><decl><type><specifier>final</specifier> <name>SortedSetDocValues</name></type> <name>values</name> <init>= <expr><call><name><name>DocValues</name><operator>.</operator><name>getSortedSet</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>minOrd</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>lowerVal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>lookupTerm</name></name><argument_list>(<argument><expr><operator>(</operator><name>BytesRef</name><operator>)</operator> <name>lowerVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>ord</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>includeLower</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>minOrd</name> <operator>=</operator> <name>ord</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>

          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>maxOrd</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>upperVal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <call><name><name>values</name><operator>.</operator><name>getValueCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>lookupTerm</name></name><argument_list>(<argument><expr><operator>(</operator><name>BytesRef</name><operator>)</operator> <name>upperVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>ord</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>includeUpper</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>maxOrd</name> <operator>=</operator> <name>ord</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>minOrd</name> <operator>&gt;</operator> <name>maxOrd</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <return>return <expr><operator>new</operator> <class><super><name>TwoPhaseIterator</name></super><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
              <for>for <control>(<init><decl><type><name>long</name></type> <name>ord</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>ord</name> <operator>!=</operator> <name><name>SortedSetDocValues</name><operator>.</operator><name>NO_MORE_ORDS</name></name></expr>;</condition> <incr><expr><name>ord</name> <operator>=</operator> <call><name><name>values</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ord</name> <operator>&gt;=</operator> <name>minOrd</name> <operator>&amp;&amp;</operator> <name>ord</name> <operator>&lt;=</operator> <name>maxOrd</name></expr>)</condition> <block>{<block_content>
                  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></for>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>float</name></type> <name>matchCost</name><parameter_list>()</parameter_list> <block>{<block_content>
              <return>return <expr><literal type="number">2</literal></expr>;</return> <comment type="line">// 2 comparisons</comment>
            </block_content>}</block></function>
          }</block></class></expr>;</return>

        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>c5ca64f3ae7</name><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>sandbox</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocValuesRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">307</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>LongPoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>NumericDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedNumericDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedSetDocValuesField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>StringField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LeafReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name><operator>.</operator><name>Occur</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>NumericUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>TestUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>TestDocValuesRangeQuery</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelNumericRangeQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iters</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numValues</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numValues</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongPoint</name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>deleteDocuments</name></name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>min</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>max</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q2</name> <init>= <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>BytesRef</name></type> <name>toSortableBytes</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>NumericUtils</name><operator>.</operator><name>longToSortableBytes</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuelNumericSorted</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numValues</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numValues</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedSetDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>deleteDocuments</name></name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>min</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>minInclusive</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>maxInclusive</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q2</name> <init>= <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testScore</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numValues</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numValues</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedSetDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>deleteDocuments</name></name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>min</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>minInclusive</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>maxInclusive</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>boost</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextFloat</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q1</name> <init>= <expr><operator>new</operator> <call><name>BoostQuery</name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>csq1</name> <init>= <expr><operator>new</operator> <call><name>BoostQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConstantScoreQuery</name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>csq1</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q2</name> <init>= <expr><operator>new</operator> <call><name>BoostQuery</name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>csq2</name> <init>= <expr><operator>new</operator> <call><name>BoostQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConstantScoreQuery</name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>boost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>csq2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testApproximation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numValues</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numValues</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>value</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedSetDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongPoint</name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringField</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">"b"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>deleteDocuments</name></name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>min</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>max</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>nextLong</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name></type> <name>ref</name> <init>= <expr><operator>new</operator> <call><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>ref</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>LongPoint</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ref</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name></type> <name>bq1</name> <init>= <expr><operator>new</operator> <call><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>bq1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bq1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><call><name><name>ref</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bq1</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name></type> <name>bq2</name> <init>= <expr><operator>new</operator> <call><name><name>BooleanQuery</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>bq2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bq2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assertSameMatches</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>, <argument><expr><call><name><name>ref</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bq2</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertSameMatches</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>q2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scores</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxDoc</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TopDocs</name></type> <name>td1</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>maxDoc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>scores</name></expr> ?</condition><then> <expr><name><name>Sort</name><operator>.</operator><name>RELEVANCE</name></name></expr> </then><else>: <expr><name><name>Sort</name><operator>.</operator><name>INDEXORDER</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TopDocs</name></type> <name>td2</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><name>maxDoc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>scores</name></expr> ?</condition><then> <expr><name><name>Sort</name><operator>.</operator><name>RELEVANCE</name></name></expr> </then><else>: <expr><name><name>Sort</name><operator>.</operator><name>INDEXORDER</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>td1</name><operator>.</operator><name>totalHits</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>.</operator><name>totalHits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>td1</name><operator>.</operator><name>scoreDocs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>td1</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>doc</name></expr></argument>, <argument><expr><name><name>td2</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>scores</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>td1</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name></expr></argument>, <argument><expr><name><name>td2</name><operator>.</operator><name>scoreDocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name></expr></argument>, <argument><expr><literal type="number">10e-7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testToString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:[2 TO 5]"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:{2 TO 5]"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:{2 TO 5}"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:{* TO 5}"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:[2 TO *}"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BytesRef</name></type> <name>min</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BytesRef</name></type> <name>max</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:[[61] TO [62]]"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:{[61] TO [62]]"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:{[61] TO [62]}"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:{* TO [62]}"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"f:[[61] TO *}"</literal></expr></argument>, <argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDocValuesRangeSupportsApproximation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><literal type="number">42L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>LeafReaderContext</name></type> <name>ctx</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Query</name></type> <name>q1</name> <init>= <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv1"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">100L</literal></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>createNormalizedWeight</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>s</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>twoPhaseIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Query</name></type> <name>q2</name> <init>= <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(<argument><expr><literal type="string">"dv2"</literal></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toSortableBytes</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>createNormalizedWeight</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>twoPhaseIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testLongRangeBoundaryValues</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>iw</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>doc</name> <operator>=</operator> <operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedNumericDocValuesField</name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><literal type="number">200l</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>iw</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>searcher</name> <init>= <expr><call><name>newSearcher</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Long</name></type> <name>min</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Long</name></type> <name>max</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TopDocs</name></type> <name>td</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name><name>searcher</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Sort</name><operator>.</operator><name>INDEXORDER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>td</name><operator>.</operator><name>totalHits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>td</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name><name>searcher</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Sort</name><operator>.</operator><name>INDEXORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>td</name><operator>.</operator><name>totalHits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>analysis</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ICUCollationField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>analysis</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ICUCollationField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">20711632acf</literal><operator>..</operator><literal type="number">51527682a0f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>analysis</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ICUCollationField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>analysis</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ICUCollationField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>collation</name><operator>.</operator><name>ICUCollationKeyAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedSetDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocValuesRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermRangeQuery</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">272</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">271</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ICUCollationField</name> extends <name>FieldType</name> <block>{
     <expr><name>BytesRef</name> <name>low</name> <operator>=</operator> <name>part1</name> <operator>==</operator> <literal type="null">null</literal> <operator>?</operator> <literal type="null">null</literal> <operator>:</operator> <call><name>getCollationKey</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr>;
     <name>BytesRef</name> <name>high</name> <operator>=</operator> <ternary><condition><expr><name>part2</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name>getCollationKey</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>field</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(
              <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(
              <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt> 
      <return>return <expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(
          <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <return>return <expr><operator>new</operator> <call><name>TermRangeQuery</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CollationField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CollationField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">998db2ac336</literal><operator>..</operator><literal type="number">805e20498c4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CollationField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>CollationField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>collation</name><operator>.</operator><name>CollationKeyAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedSetDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocValuesRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermRangeQuery</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">241</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CollationField</name> extends <name>FieldType</name> <block>{
     <expr><name>BytesRef</name> <name>low</name> <operator>=</operator> <name>part1</name> <operator>==</operator> <literal type="null">null</literal> <operator>?</operator> <literal type="null">null</literal> <operator>:</operator> <call><name>getCollationKey</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr>;
     <name>BytesRef</name> <name>high</name> <operator>=</operator> <ternary><condition><expr><name>part2</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name>getCollationKey</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>field</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(
      return <argument><expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(
           <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></return>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <return>return <expr><operator>new</operator> <call><name>TermRangeQuery</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>EnumField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>EnumField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">967070c8e9d</literal><operator>..</operator><literal type="number">5723206563e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>EnumField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>EnumField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>legacy</name><operator>.</operator><name>LegacyNumericUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>EnumFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ConstantScoreQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocValuesRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">253</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">252</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>EnumField</name> extends <name>PrimitiveFieldType</name> <block>{
     <expr><name>Query</name> <name>query</name> <operator>=</operator> <literal type="null">null</literal></expr>;
     <name>final</name> <name>boolean</name> <name>matchOnly</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>field</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>matchOnly</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>query</name> <operator>=</operator> <operator>new</operator> <call><name>ConstantScoreQuery</name><argument_list>(<argument><expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>minValue</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>maxValue</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
              <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>lowerValue</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>upperValue</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>minValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lowerValue</name> <operator>=</operator> <call><name><name>minValue</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>minInclusive</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>lowerValue</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>maxValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>upperValue</name> <operator>=</operator> <call><name><name>maxValue</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxInclusive</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>--</operator><name>upperValue</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>query</name> <operator>=</operator> <operator>new</operator> <call><name>ConstantScoreQuery</name><argument_list>(<argument><expr><call><name><name>NumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lowerValue</name></expr></argument>, <argument><expr><name>upperValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>LegacyNumericRangeQuery</name><operator>.</operator><name>newIntRange</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_PRECISION_STEP</name></expr></argument>,
           <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>minValue</name></expr></else></ternary></expr></argument>,
<argument><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3922edc1060</literal><operator>..</operator><literal type="number">54f882f178b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>FieldType</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">36</literal></expr></argument>,<argument><expr><literal type="number">13</literal> @@</expr></argument></argument_list></call></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharFilterFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>TokenFilterFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>TokenizerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SortedSetDocValuesField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexableField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>legacy</name><operator>.</operator><name>LegacyNumericType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocValuesRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocValuesRewriteMethod</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>MultiTermQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>PrefixQuery</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">720</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">720</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FieldType</name> extends <name>FieldProperties</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>Query</name> <call><name>getRangeQuery</name><argument_list>(<argument><expr><name>QParser</name> <name>parser</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>part1</name></expr></argument>, <argument><expr><name>String</name> <name>part2</name></expr></argument>, <argument><expr><name>boolean</name> <name>minInclusive</name></expr></argument>, <argument><expr><name>boolean</name> <name>maxInclusive</name></expr></argument>)</argument_list></call> <block>{
     <comment type="line">// TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)</comment>
    <expr><name>final</name> <name>BytesRef</name> <name>miValue</name> <operator>=</operator> <name>part1</name> <operator>==</operator> <literal type="null">null</literal> <operator>?</operator> <literal type="null">null</literal> <operator>:</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name>toInternal</name><argument_list>(<argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <name>final</name> <name>BytesRef</name> <name>maxValue</name> <operator>=</operator> <ternary><condition><expr><name>part2</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name>toInternal</name><argument_list>(<argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>field</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newBytesRefRange</name></name><argument_list>(
          <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><ternary><condition><expr><name>part1</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name>toInternal</name><argument_list>(<argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
          <argument><expr><ternary><condition><expr><name>part2</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name>toInternal</name><argument_list>(<argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
          <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><call><name><name>SortedSetDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(
            <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>miValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>,
            <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <decl_stmt><decl><type><name>SolrRangeQuery</name></type> <name>rangeQuery</name> <init>= <expr><operator>new</operator> <call><name>SolrRangeQuery</name><argument_list>(
             <argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><name>part1</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name>toInternal</name><argument_list>(<argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name>part2</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><call><name>toInternal</name><argument_list>(<argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
            <argument><expr><name>miValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>,
             <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <return>return <expr><name>rangeQuery</name></expr>;</return>
     </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0e8324cd826</literal><operator>..</operator><literal type="number">57dbefffb62</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TrieField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>DoubleFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>FloatFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>IntFieldSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queries</name><operator>.</operator><name>function</name><operator>.</operator><name>valuesource</name><operator>.</operator><name>LongFieldSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocValuesRangeQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>MatchNoDocsQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortedSetSelector</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">376</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">376</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
     <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>INTEGER</name></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>matchOnly</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
          <argument><expr><name>query</name> <operator>=</operator> <call><name>numericDocValuesRangeQuery</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                 <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>LegacyNumericRangeQuery</name><operator>.</operator><name>newIntRange</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ps</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">399</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">399</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
         <break>break;</break></block></expr></argument></argument_list></call></expr></expr_stmt>
       <case>case <expr><name>LONG</name></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>matchOnly</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>query</name> <operator>=</operator> <call><name>numericDocValuesRangeQuery</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                 <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">422</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">422</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
         <break>break;</break></block></expr></expr_stmt>
       <case>case <expr><name>DATE</name></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>matchOnly</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>query</name> <operator>=</operator> <call><name>numericDocValuesRangeQuery</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>DateMathParser</name><operator>.</operator><name>parseMath</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name>max</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>DateMathParser</name><operator>.</operator><name>parseMath</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                 <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">440</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">440</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
     <return>return <expr><name>query</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Query</name></type> <name>numericDocValuesRangeQuery</name><parameter_list>(
      <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>,
      <parameter><decl><type><name>Number</name></type> <name>lowerValue</name></decl></parameter>, <parameter><decl><type><name>Number</name></type> <name>upperValue</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>lowerInclusive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>upperInclusive</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>actualLowerValue</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lowerValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>actualLowerValue</name> <operator>=</operator> <call><name><name>lowerValue</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lowerInclusive</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>actualLowerValue</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>new</operator> <call><name>MatchNoDocsQuery</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>actualLowerValue</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>actualUpperValue</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>upperValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>actualUpperValue</name> <operator>=</operator> <call><name><name>upperValue</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>upperInclusive</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>actualUpperValue</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>new</operator> <call><name>MatchNoDocsQuery</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>--</operator><name>actualUpperValue</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>NumericDocValuesField</name><operator>.</operator><name>newRangeQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>actualLowerValue</name></expr></argument>, <argument><expr><name>actualUpperValue</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>FLOAT_NEGATIVE_INFINITY_BITS</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>DOUBLE_NEGATIVE_INFINITY_BITS</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>FLOAT_POSITIVE_INFINITY_BITS</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">476</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">505</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TrieField</name> extends <name>PrimitiveFieldType</name> <block>{
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content> <comment type="line">// If both max and min are negative (or -0d), then issue range query with max and min reversed</comment>
       <if_stmt><if>if <condition>(<expr><operator>(</operator><name>minVal</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>minVal</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0d</literal> <operator>||</operator> <name>minBits</name> <operator>==</operator> <name>minusZeroBits</name><operator>)</operator> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>maxVal</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>maxVal</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0d</literal> <operator>||</operator> <name>maxBits</name> <operator>==</operator> <name>minusZeroBits</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name>
        <name>query</name> <operator>=</operator> <call><name>numericDocValuesRangeQuery</name>
             <argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>maxBits</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>min</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>negativeInfinityBits</name></expr> </then><else>: <expr><name>minBits</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// If both max and min are positive, then issue range query</comment>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <name><name>DocValuesRangeQuery</name><operator>.</operator><name>newLongRange</name></name>
        <name>query</name> <operator>=</operator> <call><name>numericDocValuesRangeQuery</name>
             <argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>minBits</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>max</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>positiveInfinityBits</name></expr> </then><else>: <expr><name>maxBits</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>minInclusive</name></expr></argument>, <argument><expr><name>maxInclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
     </block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block></expr></expr_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></function></block></class>

</unit>
