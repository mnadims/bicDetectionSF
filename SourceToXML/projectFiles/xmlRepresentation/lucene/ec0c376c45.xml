<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/ec0c376c45.java"><expr_stmt><expr><name>From</name> <name>ec0c376c45d477dde4c14b2ca764360d64f8bca8</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Uwe</name> <name><name>Schindler</name> <argument_list type="generic">&lt;<argument><name>uschindler</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Sep</name> <literal type="number">2009</literal> <literal type="number">15</literal><operator>:</operator><literal type="number">36</literal><operator>:</operator><literal type="number">24</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">1919</literal><operator>:</operator> <name>Fix</name> <name>analysis</name> <name>back</name> <name>compat</name></expr></expr_stmt> <break>break. <name>Thanks</name> <name>to</name> <name>Robert</name>
 <name>Muir</name> for <name>the</name> <name>testcases</name><operator>,</operator> <name>and</name> <name>Yonik</name> <name>and</name> <name>Mark</name> <name>Miller</name> for <name>testing</name>!

<name>git</name>-<name>svn</name>-<name>id</name>: <name>https</name>:<comment type="line">//svn.apache.org/repos/asf/lucene/java/trunk@816673 13f79535-47bb-0310-9956-ffa450edef68</comment>
--
 .../<name>apache</name>/<name>lucene</name>/<name>analysis</name>/<name><name>TokenStream</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  25 ++--
 .../<name>analysis</name>/<name><name>TestTokenStreamBWComp</name><operator>.</operator><name>java</name></name>       <operator>|</operator> 107 ++++++++++++++----
 2 <name>files</name> <name>changed</name><operator>,</operator> 102 <name>insertions</name>(+</break>)<operator>,</operator> <expr_stmt><expr><literal type="number">30</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>TokenStream</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>TokenStream</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">33d33f19160</literal><operator>..</operator><name>cf70dbe0d14</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>TokenStream</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>TokenStream</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>TypeAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Payload</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Attribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSource</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">377</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">378</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>TokenStream</name> extends <name>AttributeSource</name> <block>{
       <return>return <expr><call><name>incrementToken</name><argument_list>()</argument_list></call> <operator>?</operator> <name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name> <operator>:</operator> <literal type="null">null</literal></expr>;</return>
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <assert>assert <expr><name><name>supportedMethods</name><operator>.</operator><name>hasNext</name></name></expr>;</assert>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name> <init>= <expr><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
      <return>return <expr><name>token</name></expr>;</return>
      <return>return <expr><call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></else></if_stmt>
   }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">396</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">394</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>TokenStream</name> extends <name>AttributeSource</name> <block>{
     <if_stmt><if>if <condition>(<expr><name>tokenWrapper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"This TokenStream only supports the new Attributes API."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     
    <name>final</name> <name>Token</name> <name>nextToken</name></block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>supportedMethods</name><operator>.</operator><name>hasIncrementToken</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><call><name>incrementToken</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Token</name><operator>)</operator> <call><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Token</name></type> <name>savedDelegate</name> <init>= <expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <operator>new</operator> <call><name>Token</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nextToken</name> <operator>=</operator> <ternary><condition><expr><call><name>incrementToken</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>savedDelegate</name></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <assert>assert <expr><name><name>supportedMethods</name><operator>.</operator><name>hasReusableNext</name></name></expr>;</assert>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>tokenWrapper</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
      <return>return <expr><operator>(</operator><name>Token</name><operator>)</operator> <call><name><name>token</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
      <expr_stmt><expr><name>nextToken</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Token</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>nextToken</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Payload</name></type> <name>p</name> <init>= <expr><call><name><name>nextToken</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>nextToken</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><operator>(</operator><name>Payload</name><operator>)</operator> <call><name><name>p</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>nextToken</name></expr>;</return>
   }
 
   <comment type="block" format="javadoc">/**
diff --git a/src/test/org/apache/lucene/analysis/TestTokenStreamBWComp.java b/src/test/org/apache/lucene/analysis/TestTokenStreamBWComp.java
index f4ac2ec6690..67d13d9b562 100644
-- a/src/test/org/apache/lucene/analysis/TestTokenStreamBWComp.java
++ b/src/test/org/apache/lucene/analysis/TestTokenStreamBWComp.java
@@ -27,8 +27,9 @@ import org.apache.lucene.analysis.tokenattributes.*;
 /** This class tests some special cases of backwards compatibility when using the new TokenStream API with old analyzers */</comment>
 public <class>class <name>TestTokenStreamBWComp</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>doc</name> <init>= <expr><literal type="string">"This is the new TokenStream api"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>stopwords</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"is"</literal></expr>, <expr><literal type="string">"the"</literal></expr>, <expr><literal type="string">"this"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>doc</name> <init>= <expr><literal type="string">"This is the new TokenStream api"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>stopwords</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"is"</literal></expr>, <expr><literal type="string">"the"</literal></expr>, <expr><literal type="string">"this"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>results</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"new"</literal></expr>, <expr><literal type="string">"tokenstream"</literal></expr>, <expr><literal type="string">"api"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
 
   <class><specifier>public</specifier> <specifier>static</specifier> class <name>POSToken</name> <super_list><extends>extends <super><name>Token</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PROPERNOUN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>PayloadAttribute</name> <name>payloadAtt</name> <operator>=</operator> <operator>(</operator><name>PayloadAttribute</name><operator>)</operator> <call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>PayloadAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name>TermAttribute</name> <name>termAtt</name> <operator>=</operator> <operator>(</operator><name>TermAttribute</name><operator>)</operator> <call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>TermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     
    <expr><name>int</name> <name>i</name><operator>=</operator><literal type="number">0</literal></expr>;
     <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><call><name><name>termAtt</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Payload</name></type> <name>p</name> <init>= <expr><call><name><name>payloadAtt</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name><name>PartOfSpeechAnnotatingFilter</name><operator>.</operator><name>PROPER_NOUN_ANNOTATION</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"only TokenStream is a proper noun"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"only TokenStream is a proper noun"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
         <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"all other tokens (if this test fails, the special POSToken subclass is not correctly passed through the chain)"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
      <constructor_decl><name>assertEquals</name><parameter_list>(<parameter><decl><type><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>term</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
     }</block></class>   
   }</block></class>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">205</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>stream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>Token</name> <name>reusableToken</name> <operator>=</operator> <operator>new</operator> <call><name>Token</name><argument_list>()</argument_list></call></expr>;
     
    <expr><name>int</name> <name>i</name><operator>=</operator><literal type="number">0</literal></expr>;
     <while>while <condition>(<expr><operator>(</operator><name>reusableToken</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>reusableToken</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><call><name><name>reusableToken</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Payload</name></type> <name>p</name> <init>= <expr><call><name><name>reusableToken</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name><name>PartOfSpeechAnnotatingFilter</name><operator>.</operator><name>PROPER_NOUN_ANNOTATION</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"only TokenStream is a proper noun"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"only TokenStream is a proper noun"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
         <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"all other tokens (if this test fails, the special POSToken subclass is not correctly passed through the chain)"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
     }   
   }
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">220</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>stream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
     
     <expr><name>Token</name> <name>token</name></expr>;
    <expr><name>int</name> <name>i</name><operator>=</operator><literal type="number">0</literal></expr>;
     <while>while <condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Payload</name></type> <name>p</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name><name>PartOfSpeechAnnotatingFilter</name><operator>.</operator><name>PROPER_NOUN_ANNOTATION</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"only TokenStream is a proper noun"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"only TokenStream is a proper noun"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
         <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"all other tokens (if this test fails, the special POSToken subclass is not correctly passed through the chain)"</literal></expr></argument>, <argument><expr><literal type="string">"tokenstream"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
     }   
   }
   
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">255</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
         <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
         <call><name>fail</name><argument_list>(<argument><expr><literal type="string">"If only the new API is allowed, this should fail with an UOE"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       } catch <expr_stmt><expr><operator>(</operator><name>UnsupportedOperationException</name> <name>uoe</name><operator>)</operator> <block>{
        <expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>PartOfSpeechTaggingFilter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" does not implement incrementToken() which is needed for onlyUseNewAPI."</literal><operator>)</operator><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>PartOfSpeechTaggingFilter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" does not implement incrementToken() which is needed for onlyUseNewAPI."</literal><operator>)</operator></expr></argument>,<argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       }</block>
 
       <comment type="line">// this should pass, as all core token streams support the new API</comment>
@@ <operator>-</operator><literal type="number">255</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">265</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
       <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
       
       <comment type="line">// Test, if all attributes are implemented by their implementation, not Token/TokenWrapper</comment>
      <call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TermAttribute is implemented by TermAttributeImpl"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TermAttribute is not implemented by TermAttributeImpl"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>TermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TermAttributeImpl</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"OffsetAttribute is implemented by OffsetAttributeImpl"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"OffsetAttribute is not implemented by OffsetAttributeImpl"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>OffsetAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>OffsetAttributeImpl</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"FlagsAttribute is implemented by FlagsAttributeImpl"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"FlagsAttribute is not implemented by FlagsAttributeImpl"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>FlagsAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>FlagsAttributeImpl</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PayloadAttribute is implemented by PayloadAttributeImpl"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PayloadAttribute is not implemented by PayloadAttributeImpl"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>PayloadAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>PayloadAttributeImpl</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl"</literal></expr></argument>, 
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PositionIncrementAttribute is not implemented by PositionIncrementAttributeImpl"</literal></expr></argument>, 
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>PositionIncrementAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>PositionIncrementAttributeImpl</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TypeAttribute is implemented by TypeAttributeImpl"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TypeAttribute is not implemented by TypeAttributeImpl"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>TypeAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TypeAttributeImpl</name></expr></argument>)</argument_list></call></expr></argument>;
         
       <comment type="line">// try to call old API, this should fail</comment>
<argument>@@ <expr><operator>-</operator><literal type="number">275</literal></expr></argument>,<argument><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">285</literal></expr></argument>,<argument><expr><literal type="number">14</literal> @@ <specifier>public</specifier> class <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
         <while>while <condition>(<expr><operator>(</operator><name>reusableToken</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>reusableToken</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
         <call><name>fail</name><argument_list>(<argument><expr><literal type="string">"If only the new API is allowed, this should fail with an UOE"</literal></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call>
       }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedOperationException</name></type> <name>uoe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"This TokenStream only supports the new Attributes API."</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"This TokenStream only supports the new Attributes API."</literal></expr></argument>, <argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></catch>
       <try>try <block>{<block_content>
         <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
         <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"If only the new API is allowed, this should fail with an UOE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedOperationException</name></type> <name>uoe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"This TokenStream only supports the new Attributes API."</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"This TokenStream only supports the new Attributes API."</literal></expr></argument>, <argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></catch></try>
       
       <comment type="line">// Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">292</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">302</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
       <comment type="line">// itsself.</comment>
       <expr><call><name><name>TokenStream</name><operator>.</operator><name>setOnlyUseNewAPI</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
       <expr><name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TermAttribute is implemented by TokenWrapper"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TermAttribute is not implemented by TokenWrapper"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>TermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TokenWrapper</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"OffsetAttribute is implemented by TokenWrapper"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"OffsetAttribute is not implemented by TokenWrapper"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>OffsetAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TokenWrapper</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"FlagsAttribute is implemented by TokenWrapper"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"FlagsAttribute is not implemented by TokenWrapper"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>FlagsAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TokenWrapper</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PayloadAttribute is implemented by TokenWrapper"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PayloadAttribute is not implemented by TokenWrapper"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>PayloadAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TokenWrapper</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PositionIncrementAttribute is implemented by TokenWrapper"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"PositionIncrementAttribute is not implemented by TokenWrapper"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>PositionIncrementAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TokenWrapper</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TypeAttribute is implemented by TokenWrapper"</literal></expr></argument>,
      <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"TypeAttribute is not implemented by TokenWrapper"</literal></expr></argument>,
         <argument><expr><call><name><name>stream</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>TypeAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>TokenWrapper</name></expr></argument>)</argument_list></call></expr></argument>;
       
     }</argument_list></call></expr></argument> <finally>finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">321</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">63</literal> @@ <specifier>public</specifier> class <name>TestTokenStreamBWComp</name> extends <name>LuceneTestCase</name> <block>{
       <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
       <call><name>fail</name><argument_list>(<argument><expr><literal type="string">"One TokenFilter does not override any of the required methods, so it should fail."</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt/>}</block_content> catch (UnsupportedOperationException uoe</block></finally>)</argument_list></call> <block>{
      <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"does not implement any of incrementToken(), next(Token), next()."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"invalid UOE message"</literal></expr></argument>, <argument><expr><call><name><name>uoe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"does not implement any of incrementToken(), next(Token), next()."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></expr></argument>
   }</argument_list></call>
   
  <specifier>public</specifier> <name>void</name> <call><name>testMixedOldApiConsumer</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="line">// WhitespaceTokenizer is using incrementToken() API:</comment>
    <expr><name>TokenStream</name> <name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><literal type="string">"foo bar moo maeh"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
    
    <argument><expr><name>Token</name> <name>foo</name> <operator>=</operator> <operator>new</operator> <call><name>Token</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name>foo</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Token</name> <name>bar</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><call><name><name>foo</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>bar</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    
    <argument><expr><name>Token</name> <name>moo</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"moo"</literal></expr></argument>, <argument><expr><call><name><name>moo</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"private 'bar' term should still be valid"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>bar</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    
    <comment type="line">// and now we also use incrementToken()... (very bad, but should work)</comment>
    <argument><expr><name>TermAttribute</name> <name>termAtt</name> <operator>=</operator> <operator>(</operator><name>TermAttribute</name><operator>)</operator> <call><name><name>stream</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>TermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"maeh"</literal></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;    
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"private 'bar' term should still be valid"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>bar</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;    
  }</argument_list></call>
  
  <comment type="block">/*
   * old api that cycles thru foo, bar, meh
   */</comment>
  <specifier>private</specifier> class <name>RoundRobinOldAPI</name> extends <name>TokenStream</name> <block>{
    <expr><name>int</name> <name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name>String</name> <name><name>terms</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><literal type="string">"meh"</literal></expr> }</block></expr>;

    <expr><specifier>public</specifier> <name>Token</name> <call><name>next</name><argument_list>(<argument><expr><name>Token</name> <name>reusableToken</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><call><name><name>reusableToken</name><operator>.</operator><name>setTermBuffer</name></name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><name>count</name> <operator>%</operator> <name><name>terms</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
      <expr><name>count</name><operator>++</operator></expr>;
      <return>return <expr><name>reusableToken</name></expr>;</return>
    }</block>
  }
  
  <specifier>public</specifier> <name>void</name> <call><name>testMixedOldApiConsumer2</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="line">// RoundRobinOldAPI is using TokenStream(next)</comment>
    <expr><name>TokenStream</name> <name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>RoundRobinOldAPI</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
    <argument><expr><name>TermAttribute</name> <name>termAtt</name> <operator>=</operator> <operator>(</operator><name>TermAttribute</name><operator>)</operator> <call><name><name>stream</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>TermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>;
    
    <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Token</name> <name>bar</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>bar</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"meh"</literal></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"private 'bar' term should still be valid"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>bar</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name>Token</name> <name>foo</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"the term attribute should still be the same"</literal></expr></argument>, <argument><expr><literal type="string">"meh"</literal></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><call><name><name>foo</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"private 'bar' term should still be valid"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><call><name><name>bar</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
  }</argument_list></call></expr></argument>
  
 }</argument_list></call>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></expr_stmt>

</unit>
