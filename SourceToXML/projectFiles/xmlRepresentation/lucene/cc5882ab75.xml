<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/cc5882ab75.java"><expr_stmt><expr><name>From</name> <name>cc5882ab7568f8946c7eb7d6ff549130ec32d7d4</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Robert</name> <name><name>Muir</name> <argument_list type="generic">&lt;<argument><name>rmuir</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">19</literal> <name>Jul</name> <literal type="number">2010</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">58</literal><operator>:</operator><literal type="number">30</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">2458</literal><operator>:</operator> <name>queryparser</name> <name>turns</name> <name>all</name> <name>CJK</name> <name>queries</name> <name>into</name> <name>phrase</name>
 <name>queries</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@965585 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">7</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>FieldQueryTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>ext</name><operator>/</operator><name><name>ExtendableQueryParser</name><operator>.</operator><name>java</name></name>            <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">20</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>jj</name></name>       <operator>|</operator>  <literal type="number">20</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>standard</name><operator>/</operator><name><name>QueryParserWrapper</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>AnalyzerQueryNodeProcessor</name><operator>.</operator><name>java</name></name>           <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">91</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">90</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQueryParserWrapper</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">90</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>MultiFieldQueryParser</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">29</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">72</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>  <operator>|</operator>  <literal type="number">72</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestQueryParser</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">106</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrQueryParser</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SolrPluginUtils</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>ConvertedLegacyTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">20</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">585</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">70</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">8f2b7308743</literal><operator>..</operator><name>f23a2660c07</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">439</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">439</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>Bug</name> <name>fixes</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2549</literal><operator>:</operator> <name>Fix</name> <name>TimeLimitingCollector</name><operator>#</operator><name>TimeExceededException</name> <name>to</name> <name>record</name>
   <name>the</name> <name>absolute</name> <name><name>docid</name><operator>.</operator></name>  (<name>Uwe</name> <name>Schindler</name></expr></expr_stmt>)

<expr_stmt><expr><operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2458</literal><operator>:</operator> <name>QueryParser</name> <name>no</name> <name>longer</name> <name>automatically</name> <name>forms</name> <name>phrase</name> <name>queries</name></expr><operator>,</operator>
  <expr><name>assuming</name> <name>whitespace</name> <name><name>tokenization</name><operator>.</operator> <name>Previously</name></name> <name>all</name> <name>CJK</name> <name>queries</name></expr><operator>,</operator></expr_stmt> <for>for example<operator>,</operator>
  <expr_stmt><expr><name>would</name> <name>be</name> <name>turned</name> <name>into</name> <name>phrase</name> <name><name>queries</name><operator>.</operator> <name>The</name></name> <name>old</name> <name>behavior</name> <name>is</name> <name>preserved</name> <name>with</name>
  <name>the</name> <name>matchVersion</name> <name>parameter</name></expr></expr_stmt></for> <for>for previous versions. Additionally<operator>,</operator> <decl_stmt><decl><type><name>you</name> <name>can</name>
  <name>explicitly</name> <name>enable</name> <name>the</name> <name>old</name> <name>behavior</name> <name>with</name></type> <name>setAutoGeneratePhraseQueries</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list> 
  <argument_list>(<argument><expr><name>Robert</name> <name>Muir</name></expr></argument>)</argument_list>
   
 <name>New</name> <name>features</name>
 
<name>diff</name> --<name>git</name> <name>a</name>/<name>lucene</name>/<name>contrib</name>/<name>highlighter</name>/<name>src</name>/<name>test</name>/<name>org</name>/<name>apache</name>/<name>lucene</name>/<name>search</name>/<name>vectorhighlight</name>/<name><name>FieldQueryTest</name><operator>.</operator><name>java</name></name> <name>b</name>/<name>lucene</name>/<name>contrib</name>/<name>highlighter</name>/<name>src</name>/<name>test</name>/<name>org</name>/<name>apache</name>/<name>lucene</name>/<name>search</name>/<name>vectorhighlight</name>/<name><name>FieldQueryTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cb73765fcaf</name>..42924fdc8c9 100644
-- <name>a</name>/<name>lucene</name>/<name>contrib</name>/<name>highlighter</name>/<name>src</name>/<name>test</name>/<name>org</name>/<name>apache</name>/<name>lucene</name>/<name>search</name>/<name>vectorhighlight</name>/<name><name>FieldQueryTest</name><operator>.</operator><name>java</name></name>
++ <name>b</name>/<name>lucene</name>/<name>contrib</name>/<name>highlighter</name>/<name>src</name>/<name>test</name>/<name>org</name>/<name>apache</name>/<name>lucene</name>/<name>search</name>/<name>vectorhighlight</name>/<name><name>FieldQueryTest</name><operator>.</operator><name>java</name></name>
@@ -55</decl>,7 +55,7 @@ public <decl><type ref="prev"/><name>class</name> <name>FieldQueryTest</name> extends <name>AbstractTestCase</name> <block>{<block_content>
   </block_content>}</block></decl></decl_stmt></for>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testFlattenTermAndPhrase2gram</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>paB</name><operator>.</operator><name>parse</name></name><argument_list>( <argument><expr><literal type="string">"AA AND BCD OR EFGH"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>paB</name><operator>.</operator><name>parse</name></name><argument_list>( <argument><expr><literal type="string">"AA AND \"BCD\" OR \"EFGH\""</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>FieldQuery</name></type> <name>fq</name> <init>= <expr><operator>new</operator> <call><name>FieldQuery</name><argument_list>( <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Query</name></argument>&gt;</argument_list></name></type> <name>flatQueries</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Query</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>fq</name><operator>.</operator><name>flatten</name></name><argument_list>( <argument><expr><name>query</name></expr></argument>, <argument><expr><name>flatQueries</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">679</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">679</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>FieldQueryTest</name> extends <name>AbstractTestCase</name> <block>{
   }</block>
   
   <specifier>public</specifier> <name>void</name> <call><name>testQueryPhraseMapOverlap2gram</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Query</name> <name>query</name> <operator>=</operator> <call><name><name>paB</name><operator>.</operator><name>parse</name></name><argument_list>( <argument><expr><literal type="string">"abc AND bcd"</literal></expr></argument> )</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>paB</name><operator>.</operator><name>parse</name></name><argument_list>( <argument><expr><literal type="string">"\"abc\" AND \"bcd\""</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
     
     <comment type="line">// phraseHighlight = true, fieldMatch = true</comment>
     <decl_stmt><decl><type><name>FieldQuery</name></type> <name>fq</name> <init>= <expr><operator>new</operator> <call><name>FieldQuery</name><argument_list>( <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>ext</name><operator>/</operator><name><name>ExtendableQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>ext</name><operator>/</operator><name><name>ExtendableQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1533d11d5bd</literal><operator>..</operator><literal type="number">6592c60afef</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>ext</name><operator>/</operator><name><name>ExtendableQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>ext</name><operator>/</operator><name><name>ExtendableQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExtendableQueryParser</name> extends <name>QueryParser</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>final</name> <name>String</name> <name>field</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>queryText</name></expr></argument>)</argument_list></call>
  <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>final</name> <name>String</name> <name>field</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>ParseException</name> <block>{
     <expr><name>final</name> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>splitExtensionField</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>extensions</name>
         <operator>.</operator><name>splitExtensionField</name></name><argument_list>(<argument><expr><name>defaultField</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExtendableQueryParser</name> extends <name>QueryParser</name> <block>{
       <return>return <expr><call><name><name>extension</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExtensionQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>splitExtensionField</name><operator>.</operator><name>cur</name></name></expr></argument>,
           <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3ff9dfb3ae5</literal><operator>..</operator><name>eb199c6265a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name> implements <name>PrecedenceQueryParserConstants</name> <block>{
   <comment type="block" format="javadoc">/**
    * @exception ParseException throw in overridden method to disallow
    */</comment>
  <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>)</argument_list></call>  <throws>throws <argument><expr><name>ParseException</name> <block>{
  <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>  <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument>
     <comment type="line">// Use the analyzer to get all the tokens, and then build a TermQuery,</comment>
     <comment type="line">// PhraseQuery, or nothing based on the term count</comment>
 
@<argument>@ <expr><operator>-</operator><literal type="number">330</literal></expr></argument>,<argument><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">330</literal></expr></argument>,<argument><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name> implements <name>PrecedenceQueryParserConstants</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>restoreState</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/></block_content></block></expr>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name> <operator>||</operator> <operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
           <comment type="line">// no phrase query:</comment>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>(<argument><expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name><name>BooleanClause</name><operator>.</operator><name>Occur</name></name></type> <name>occur</name> <init>= <expr><ternary><condition><expr><name>positionCount</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>operator</name> <operator>==</operator> <name>AND_OPERATOR</name></expr> ?</condition><then>
            <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr> </then><else>: <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

           <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>restoreState</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <decl_stmt><decl><type><name>TermQuery</name></type> <name>currentQuery</name> <init>= <expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(
                 <argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name>occur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></for>
           <return>return <expr><name>q</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">371</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">375</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name> implements <name>PrecedenceQueryParserConstants</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Base implementation delegates to {@link #getFieldQuery(String,String)}.
   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.
    * This method may be overridden, for example, to return
    * a SpanNearQuery instead of a PhraseQuery.
    *
@@ -379,7 +383,7 @@ public class PrecedenceQueryParser implements PrecedenceQueryParserConstants {
    */</comment>
   <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>int</name> <name>slop</name></expr></argument>)</argument_list></call>
         <throws>throws <argument><expr><name>ParseException</name> <block>{
    <expr><name>Query</name> <name>query</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>query</name> <operator>instanceof</operator> <name>PhraseQuery</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PhraseQuery</name><operator>)</operator> <name>query</name><operator>)</operator><operator>.</operator><call><name>setSlop</name><argument_list>(<argument><expr><name>slop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">847</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">851</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name> implements <name>PrecedenceQueryParserConstants</name> <block>{
          }</block>
          <name>q</name> <operator>=</operator> <call><name>getFuzzyQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>, <argument><expr><name>fms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
       <break>break;</break>
     <case>case <expr><name>RANGEIN_START</name></expr>:</case>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>jj</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>jj</name></name>
<name>index</name> <name>c8f740b4ea0</name><operator>..</operator><name>bac09854dc9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>jj</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>PrecedenceQueryParser</name><operator>.</operator><name>jj</name></name>
@@ <operator>-</operator><literal type="number">323</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">323</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name> <block>{
   <comment type="block" format="javadoc">/**
    * @exception ParseException throw in overridden method to disallow
    */</comment>
  <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>)</argument_list></call>  <throws>throws <argument><expr><name>ParseException</name> <block>{
  <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>  <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument>
     <comment type="line">// Use the analyzer to get all the tokens, and then build a TermQuery,</comment>
     <comment type="line">// PhraseQuery, or nothing based on the term count</comment>
 
@<argument>@ <expr><operator>-</operator><literal type="number">354</literal></expr></argument>,<argument><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">354</literal></expr></argument>,<argument><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>restoreState</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/></block_content></block></expr>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name> <operator>||</operator> <operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
           <comment type="line">// no phrase query:</comment>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>(<argument><expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          
          <decl_stmt><decl><type><name><name>BooleanClause</name><operator>.</operator><name>Occur</name></name></type> <name>occur</name> <init>= <expr><ternary><condition><expr><name>positionCount</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>operator</name> <operator>==</operator> <name>AND_OPERATOR</name></expr> ?</condition><then>
            <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr> </then><else>: <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

           <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>restoreState</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <decl_stmt><decl><type><name>TermQuery</name></type> <name>currentQuery</name> <init>= <expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(
                 <argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>termAtt</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name>occur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></for>
           <return>return <expr><name>q</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">395</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">399</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrecedenceQueryParser</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Base implementation delegates to {@link #getFieldQuery(String,String)}.
   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.
    * This method may be overridden, for example, to return
    * a SpanNearQuery instead of a PhraseQuery.
    *
@@ -403,7 +407,7 @@ public class PrecedenceQueryParser {
    */</comment>
   <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>int</name> <name>slop</name></expr></argument>)</argument_list></call>
         <throws>throws <argument><expr><name>ParseException</name> <block>{
    <expr><name>Query</name> <name>query</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>query</name> <operator>instanceof</operator> <name>PhraseQuery</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PhraseQuery</name><operator>)</operator> <name>query</name><operator>)</operator><operator>.</operator><call><name>setSlop</name><argument_list>(<argument><expr><name>slop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">830</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">834</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>Query</name> <call><name>Term</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>)</argument_list></call> <operator>:</operator> <block>{
        	 }</block>
          <name>q</name> <operator>=</operator> <call><name>getFuzzyQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>, <argument><expr><name>fms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <operator>|</operator> <expr_stmt><expr><operator>(</operator> <call><argument_list type="generic">&lt;<argument><name>RANGEIN_START</name></argument>&gt;</argument_list> <argument_list>( <argument><expr><name>goop1</name><operator>=</operator><operator>&lt;</operator><name>RANGEIN_GOOP</name><operator>&gt;</operator><operator>|</operator><name>goop1</name><operator>=</operator><operator>&lt;</operator><name>RANGEIN_QUOTED</name><operator>&gt;</operator></expr></argument> )</argument_list></call>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>QueryParserWrapper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>QueryParserWrapper</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a5783d72dc7</name><operator>..</operator><literal type="number">7572d7ade67</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>QueryParserWrapper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>QueryParserWrapper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">448</literal><operator>,</operator><literal type="number">10</literal> <operator>+</operator><literal type="number">448</literal><operator>,</operator><literal type="number">16</literal> @@ <specifier>public</specifier> class <name>QueryParserWrapper</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** @deprecated Use {@link #getFieldQuery(String, String, boolean)} instead */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * @exception ParseException throw in overridden method to disallow
    */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>)</argument_list>
  protected <name>Query</name> <name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list>
       <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw></decl>;</decl_stmt>
   </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name>processors</name><operator>/</operator><name><name>AnalyzerQueryNodeProcessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name>processors</name><operator>/</operator><name><name>AnalyzerQueryNodeProcessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">818b3f98c14</literal><operator>..</operator><name>ea995156452</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name>processors</name><operator>/</operator><name><name>AnalyzerQueryNodeProcessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name>processors</name><operator>/</operator><name><name>AnalyzerQueryNodeProcessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>GroupQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>NoTokenFoundQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>ParametricQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>QueryNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>QuotedFieldQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>TextableQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>nodes</name><operator>.</operator><name>TokenizedPhraseQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>processors</name><operator>.</operator><name>QueryNodeProcessorImpl</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>AnalyzerQueryNodeProcessor</name> extends <name>QueryNodeProcessorImpl</name> <block>{
 
         <return>return <expr><name>fieldNode</name></expr>;</return>
 
      }</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>severalTokensAtSamePosition</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>severalTokensAtSamePosition</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>node</name> <operator>instanceof</operator> <name>QuotedFieldQueryNode</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>node</name> <operator>instanceof</operator> <name>QuotedFieldQueryNode</name><operator>)</operator></expr>)</condition> <block>{<block_content>
           <comment type="line">// no phrase query:</comment>
           <decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>QueryNode</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>QueryNode</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>AnalyzerQueryNodeProcessor</name> extends <name>QueryNodeProcessorImpl</name> <block>{
             <expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FieldQueryNode</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
           }</block></expr></expr_stmt>

          <return>return <expr><operator>new</operator> <call><name>GroupQueryNode</name><argument_list>(
          if <argument><expr><operator>(</operator><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument></argument_list></call></expr></return>
            <return>return <expr><operator>new</operator> <call><name>GroupQueryNode</name><argument_list>(
               <argument><expr><operator>new</operator> <call><name>StandardBooleanQueryNode</name><argument_list>(<argument><expr><name>children</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          <if_stmt><else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>StandardBooleanQueryNode</name><argument_list>(<argument><expr><name>children</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
 
         </block_content>}</block></if> <else>else <block>{<block_content>
           <comment type="line">// phrase query:</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5f26ed078f0</literal><operator>..</operator><literal type="number">9336eff5dba</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>DateTools</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FuzzyQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>PhraseQuery</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">283</literal></expr><operator>,</operator><expr><literal type="number">90</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPrecedenceQueryParser</name> extends <name>LocalizedTestCase</name> <block>{
     <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term term1 term2"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"term term1 term2"</literal></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <comment type="line">//individual CJK chars as terms, like StandardAnalyzer</comment>
  <class><specifier>private</specifier> class <name>SimpleCJKTokenizer</name> <super_list><extends>extends <super><name>Tokenizer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CharTermAttribute</name></type> <name>termAtt</name> <init>= <expr><call><name>addAttribute</name><argument_list>(<argument><expr><name><name>CharTermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleCJKTokenizer</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>incrementToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>clearAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>termAtt</name><operator>.</operator><name>setEmpty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SimpleCJKAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\""</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKSloppyPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setSlop</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"~3"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="line">// failing tests disabled since PrecedenceQueryParser</comment>
   <comment type="line">// is currently unmaintained</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>_testWildcard</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">353</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">440</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPrecedenceQueryParser</name> extends <name>LocalizedTestCase</name> <block>{
     <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term -stop term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">"term term"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"drop AND stop AND roll"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">"+drop +roll"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
                      <argument><expr><literal type="string">"term \"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <expr_stmt><expr><literal type="string">"term (phrase1 phrase2) term"</literal></expr></expr_stmt>)</block_content></block>;</function>
     <comment type="line">// note the parens in this next assertion differ from the original</comment>
     <comment type="line">// QueryParser behavior</comment>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term AND NOT phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
                      <argument><expr><literal type="string">"(+term -\"phrase1 phrase2\") term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <expr_stmt><expr><literal type="string">"(+term -(phrase1 phrase2)) term"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop OR stop AND stop"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"term term term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>BooleanQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4d3e3840355</literal><operator>..</operator><literal type="number">3a8156f8b4a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PositionIncrementAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>processors</name><operator>.</operator><name>QueryNodeProcessorImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>processors</name><operator>.</operator><name>QueryNodeProcessorPipeline</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>standard</name><operator>.</operator><name>config</name><operator>.</operator><name>DefaultOperatorAttribute</name><operator>.</operator><name>Operator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>standard</name><operator>.</operator><name>nodes</name><operator>.</operator><name>WildcardQueryNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FuzzyQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">333</literal></expr><operator>,</operator><expr><literal type="number">90</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQPHelper</name> extends <name>LocalizedTestCase</name> <block>{
     <expr><call><name>assertQueryEqualsAllowLeadingWildcard</name><argument_list>(<argument><expr><literal type="string">"??\u3000??\u3000??"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"??\u0020??\u0020??"</literal></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <comment type="line">//individual CJK chars as terms, like StandardAnalyzer</comment>
  <class><specifier>private</specifier> class <name>SimpleCJKTokenizer</name> <super_list><extends>extends <super><name>Tokenizer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CharTermAttribute</name></type> <name>termAtt</name> <init>= <expr><call><name>addAttribute</name><argument_list>(<argument><expr><name><name>CharTermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleCJKTokenizer</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>incrementToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>clearAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>termAtt</name><operator>.</operator><name>setEmpty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SimpleCJKAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\""</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKSloppyPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setSlop</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"~3"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"\"term germ\"~2"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"\"term germ\"~2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term term term"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"term term term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">529</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">615</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQPHelper</name> extends <name>LocalizedTestCase</name> <block>{
 
     <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"drop AND stop AND roll"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">"+drop +roll"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
        <argument><expr><literal type="string">"term \"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <expr_stmt><expr><literal type="string">"term phrase1 phrase2 term"</literal></expr></expr_stmt>)</block_content></block>;</function>
 
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term AND NOT phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
        <argument><expr><literal type="string">"+term -\"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><literal type="string">"+term -(phrase1 phrase2) term"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
 
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop^3"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQueryParserWrapper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQueryParserWrapper</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fc18e2ce98f</name><operator>..</operator><name>d6f74d3f50e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQueryParserWrapper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>contrib</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQueryParserWrapper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>DateField</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>processors</name><operator>.</operator><name>QueryNodeProcessorImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>core</name><operator>.</operator><name>processors</name><operator>.</operator><name>QueryNodeProcessorPipeline</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>standard</name><operator>.</operator><name>nodes</name><operator>.</operator><name>WildcardQueryNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>standard</name><operator>.</operator><name>processors</name><operator>.</operator><name>WildcardQueryNodeProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FuzzyQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">323</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">325</literal></expr><operator>,</operator><expr><literal type="number">90</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQueryParserWrapper</name> extends <name>LocalizedTestCase</name> <block>{
     <expr><call><name>assertQueryEqualsAllowLeadingWildcard</name><argument_list>(<argument><expr><literal type="string">"??\u3000??\u3000??"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"??\u0020??\u0020??"</literal></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <comment type="line">//individual CJK chars as terms, like StandardAnalyzer</comment>
  <class><specifier>private</specifier> class <name>SimpleCJKTokenizer</name> <super_list><extends>extends <super><name>Tokenizer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CharTermAttribute</name></type> <name>termAtt</name> <init>= <expr><call><name>addAttribute</name><argument_list>(<argument><expr><name><name>CharTermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleCJKTokenizer</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>incrementToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>clearAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>termAtt</name><operator>.</operator><name>setEmpty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SimpleCJKAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\""</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKSloppyPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setSlop</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"~3"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"\"term germ\"~2"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"\"term germ\"~2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term term term"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"term term term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">528</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">614</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQueryParserWrapper</name> extends <name>LocalizedTestCase</name> <block>{
 
     <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"drop AND stop AND roll"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">"+drop +roll"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
        <argument><expr><literal type="string">"term \"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <expr_stmt><expr><literal type="string">"term phrase1 phrase2 term"</literal></expr></expr_stmt>)</block_content></block>;</function>
 
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term AND NOT phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
        <argument><expr><literal type="string">"+term -\"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><literal type="string">"+term -(phrase1 phrase2) term"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
 
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop^3"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>MultiFieldQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>MultiFieldQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">90f1b5fa755</literal><operator>..</operator><literal type="number">284e35c1806</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>MultiFieldQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>MultiFieldQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiFieldQueryParser</name> extends <name>QueryParser</name></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name></type> <name>clauses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <comment type="line">//If the user passes a map of boosts</comment>
           <if_stmt><if>if <condition>(<expr><name>boosts</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">119</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">119</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiFieldQueryParser</name> extends <name>QueryParser</name></expr></expr_stmt>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       <return>return <expr><call><name>getBooleanQuery</name><argument_list>(<argument><expr><name>clauses</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>applySlop</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>slop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><name>q</name></expr>;</return>
   </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiFieldQueryParser</name> extends <name>QueryParser</name>
   
 
   @<name>Override</name>
  <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
    <return>return <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quoted</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name></type> <name>clauses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">//If the user passes a map of boosts</comment>
          <if_stmt><if>if <condition>(<expr><name>boosts</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">//Get the boost from the map and apply them</comment>
            <decl_stmt><decl><type><name>Float</name></type> <name>boost</name> <init>= <expr><call><name><name>boosts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>boost</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><call><name><name>boost</name><operator>.</operator><name>floatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>clauses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BooleanClause</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name><name>clauses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="line">// happens for stopwords</comment>
        <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><call><name>getBooleanQuery</name><argument_list>(<argument><expr><name>clauses</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>q</name></expr>;</return>
   </block_content>}</block></function>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9fed418e9a7</literal><operator>..</operator><literal type="number">115a3e7ad27</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>WildcardQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>VirtualMethod</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * This class is generated by JavaCC.  The most important method is
@@ -107,6 +108,8 @@ import org.apache.lucene.util.Version;
  * &lt;ul&gt;
  *    &lt;li&gt; As of 2.9, {@link #setEnablePositionIncrements} is true by
  *         default.
 *    &lt;li&gt; As of 3.1, {@link #setAutoGeneratePhraseQueries} is false by
 *         default.
  * &lt;/ul&gt;
  */</comment>
 <class><specifier>public</specifier> class <name>QueryParser</name> <super_list><implements>implements <super><name>QueryParserConstants</name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
   <comment type="line">// for use when constructing RangeQuerys.</comment>
   <expr><name>Collator</name> <name>rangeCollator</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
  <comment type="block" format="javadoc">/** @deprecated remove when getFieldQuery is removed */</comment>
  <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name> <name>getFieldQueryMethod</name> <operator>=</operator>
    <operator>new</operator> <call><name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>QueryParser</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"getFieldQuery"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
  <comment type="block" format="javadoc">/** @deprecated remove when getFieldQuery is removed */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name></type> <name>getFieldQueryWithQuotedMethod</name> <init>=
    <expr><operator>new</operator> <call><name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>QueryParser</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"getFieldQuery"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>boolean</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** @deprecated remove when getFieldQuery is removed */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasNewAPI</name> <init>=
    <expr><call><name><name>VirtualMethod</name><operator>.</operator><name>compareImplementationDistance</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>getFieldQueryWithQuotedMethod</name></expr></argument>, <argument><expr><name>getFieldQueryMethod</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// its ok for both to be overridden</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoGeneratePhraseQueries</name></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/** The default operator for parsing queries. 
    * Use {@link QueryParser#setDefaultOperator} to change it.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">185</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <expr_stmt><expr><name>enablePositionIncrements</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>matchVersion</name><operator>.</operator><name>onOrAfter</name></name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_31</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setAutoGeneratePhraseQueries</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setAutoGeneratePhraseQueries</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   }</block></class>
 
   <comment type="block" format="javadoc">/** Parses a query string, returning a {@link org.apache.lucene.search.Query}.
@@ -214,6 +235,29 @@ public class QueryParser implements QueryParserConstants {
     return field;
   }
 
  /**
   * @see #setAutoGeneratePhraseQueries(boolean)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>getAutoGeneratePhraseQueries</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>autoGeneratePhraseQueries</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Set to true if phrase queries will be automatically generated
   * when the analyzer returns more than one term from whitespace
   * delimited text.
   * NOTE: this behavior may not be suitable for all languages.
   * &lt;p&gt;
   * Set to false if phrase queries should only be generated when
   * surrounded by double quotes.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setAutoGeneratePhraseQueries</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasNewAPI</name></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"You must implement the new API: getFieldQuery(String,String,boolean)"</literal>
       <operator>+</operator> <literal type="string">" to use setAutoGeneratePhraseQueries(false)"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>autoGeneratePhraseQueries</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
    * Get the minimal similarity for fuzzy queries.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">506</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">550</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Clause cannot be both required and prohibited"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * @deprecated Use {@link #getFieldQuery(String,String,boolean)} instead.
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// treat the text as if it was quoted, to drive phrase logic with old versions.</comment>
    <return>return <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * @exception ParseException throw in overridden method to disallow
    */</comment>
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quoted</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// Use the analyzer to get all the tokens, and then build a TermQuery,</comment>
     <comment type="line">// PhraseQuery, or nothing based on the term count</comment>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">587</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">639</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
       }</block></expr></expr_stmt>
       <return>return <expr><call><name>newTermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function> <if_stmt><else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>autoGeneratePhraseQueries</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>autoGeneratePhraseQueries</name><operator>)</operator></expr>)</condition> <block>{<block_content>
           <comment type="line">// no phrase query:</comment>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><call><name>newBooleanQuery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><call><name>newBooleanQuery</name><argument_list>(<argument><expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name><name>BooleanClause</name><operator>.</operator><name>Occur</name></name></type> <name>occur</name> <init>= <expr><ternary><condition><expr><name>positionCount</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>operator</name> <operator>==</operator> <name>AND_OPERATOR</name></expr> ?</condition><then>
            <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr> </then><else>: <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

           <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numTokens</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
             <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">603</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">659</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
 
             <expr><name>Query</name> <name>currentQuery</name> <operator>=</operator> <call><name>newTermQuery</name><argument_list>(
                 <argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name>occur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></try>
           <return>return <expr><name>q</name></expr>;</return>
         </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">682</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">738</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
 
 
   <comment type="block" format="javadoc">/**
   * Base implementation delegates to {@link #getFieldQuery(String,String)}.
   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.
    * This method may be overridden, for example, to return
    * a SpanNearQuery instead of a PhraseQuery.
    *
@@ -690,7 +746,7 @@ public class QueryParser implements QueryParserConstants {
    */</comment>
   <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>int</name> <name>slop</name></expr></argument>)</argument_list></call>
         <throws>throws <argument><expr><name>ParseException</name> <block>{
    <expr><name>Query</name> <name>query</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>Query</name> <name>query</name> <operator>=</operator> <ternary><condition><expr><name>hasNewAPI</name></expr> ?</condition><then> <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>query</name> <operator>instanceof</operator> <name>PhraseQuery</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PhraseQuery</name><operator>)</operator> <name>query</name><operator>)</operator><operator>.</operator><call><name>setSlop</name><argument_list>(<argument><expr><name>slop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1343</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1399</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> implements <name>QueryParserConstants</name> <block>{
          }</block>
          <name>q</name> <operator>=</operator> <call><name>getFuzzyQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>,<argument><expr><name>fms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <ternary><condition><expr><name>hasNewAPI</name></expr> ?</condition><then> <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
       <break>break;</break>
     <case>case <expr><name>RANGEIN_START</name></expr>:</case>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>
<name>index</name> <name>fa4eed3cbc0</name><operator>..</operator><literal type="number">0747aaeee3e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>
@@ <operator>-</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>WildcardQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>VirtualMethod</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * This class is generated by JavaCC.  The most important method is
@@ -131,6 +132,8 @@ import org.apache.lucene.util.Version;
  * &lt;ul&gt;
  *    &lt;li&gt; As of 2.9, {@link #setEnablePositionIncrements} is true by
  *         default.
 *    &lt;li&gt; As of 3.1, {@link #setAutoGeneratePhraseQueries} is false by
 *         default.
  * &lt;/ul&gt;
  */</comment>
 <class><specifier>public</specifier> class <name>QueryParser</name> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">174</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> <block>{
   <comment type="line">// for use when constructing RangeQuerys.</comment>
   <expr><name>Collator</name> <name>rangeCollator</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
  <comment type="block" format="javadoc">/** @deprecated remove when getFieldQuery is removed */</comment>
  <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name> <name>getFieldQueryMethod</name> <operator>=</operator>
    <operator>new</operator> <call><name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>QueryParser</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"getFieldQuery"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
  <comment type="block" format="javadoc">/** @deprecated remove when getFieldQuery is removed */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name></type> <name>getFieldQueryWithQuotedMethod</name> <init>=
    <expr><operator>new</operator> <call><name><name>VirtualMethod</name><argument_list type="generic">&lt;<argument><name>QueryParser</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>QueryParser</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"getFieldQuery"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>boolean</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** @deprecated remove when getFieldQuery is removed */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasNewAPI</name> <init>= 
    <expr><call><name><name>VirtualMethod</name><operator>.</operator><name>compareImplementationDistance</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>, 
        <argument><expr><name>getFieldQueryWithQuotedMethod</name></expr></argument>, <argument><expr><name>getFieldQueryMethod</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// its ok for both to be overridden</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoGeneratePhraseQueries</name></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/** The default operator for parsing queries. 
    * Use {@link QueryParser#setDefaultOperator} to change it.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> <block>{
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <expr_stmt><expr><name>enablePositionIncrements</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>matchVersion</name><operator>.</operator><name>onOrAfter</name></name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_31</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setAutoGeneratePhraseQueries</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setAutoGeneratePhraseQueries</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   }</block></class>
 
   <comment type="block" format="javadoc">/** Parses a query string, returning a {@link org.apache.lucene.search.Query}.
@@ -238,6 +259,29 @@ public class QueryParser {
     return field;
   }
 
  /**
   * @see #setAutoGeneratePhraseQueries(boolean)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>getAutoGeneratePhraseQueries</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>autoGeneratePhraseQueries</name></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Set to true if phrase queries will be automatically generated
   * when the analyzer returns more than one term from whitespace
   * delimited text.
   * NOTE: this behavior may not be suitable for all languages.
   * &lt;p&gt;
   * Set to false if phrase queries should only be generated when
   * surrounded by double quotes.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setAutoGeneratePhraseQueries</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasNewAPI</name></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"You must implement the new API: getFieldQuery(String,String,boolean)"</literal>
       <operator>+</operator> <literal type="string">" to use setAutoGeneratePhraseQueries(false)"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>autoGeneratePhraseQueries</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
    <comment type="block" format="javadoc">/**
    * Get the minimal similarity for fuzzy queries.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">530</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">574</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Clause cannot be both required and prohibited"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * @deprecated Use {@link #getFieldQuery(String,String,boolean)} instead.
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// treat the text as if it was quoted, to drive phrase logic with old versions.</comment>
    <return>return <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * @exception ParseException throw in overridden method to disallow
    */</comment>
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quoted</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// Use the analyzer to get all the tokens, and then build a TermQuery,</comment>
     <comment type="line">// PhraseQuery, or nothing based on the term count</comment>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">611</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">663</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> <block>{
       }</block></expr></expr_stmt>
       <return>return <expr><call><name>newTermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function> <if_stmt><else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>severalTokensAtSamePosition</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>autoGeneratePhraseQueries</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>autoGeneratePhraseQueries</name><operator>)</operator></expr>)</condition> <block>{<block_content>
           <comment type="line">// no phrase query:</comment>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><call><name>newBooleanQuery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>q</name> <init>= <expr><call><name>newBooleanQuery</name><argument_list>(<argument><expr><name>positionCount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          
          <decl_stmt><decl><type><name><name>BooleanClause</name><operator>.</operator><name>Occur</name></name></type> <name>occur</name> <init>= <expr><ternary><condition><expr><name>positionCount</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>operator</name> <operator>==</operator> <name>AND_OPERATOR</name></expr> ?</condition><then> 
            <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>MUST</name></name></expr> </then><else>: <expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

           <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numTokens</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
             <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">627</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">683</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> <block>{
 
             <expr><name>Query</name> <name>currentQuery</name> <operator>=</operator> <call><name>newTermQuery</name><argument_list>(
                 <argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentQuery</name></expr></argument>, <argument><expr><name>occur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></try>
           <return>return <expr><name>q</name></expr>;</return>
         </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">706</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">762</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> <block>{
 
 
   <comment type="block" format="javadoc">/**
   * Base implementation delegates to {@link #getFieldQuery(String,String)}.
   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.
    * This method may be overridden, for example, to return
    * a SpanNearQuery instead of a PhraseQuery.
    *
@@ -714,7 +770,7 @@ public class QueryParser {
    */</comment>
   <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>int</name> <name>slop</name></expr></argument>)</argument_list></call>
         <throws>throws <argument><expr><name>ParseException</name> <block>{
    <expr><name>Query</name> <name>query</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>Query</name> <name>query</name> <operator>=</operator> <ternary><condition><expr><name>hasNewAPI</name></expr> ?</condition><then> <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>query</name> <operator>instanceof</operator> <name>PhraseQuery</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PhraseQuery</name><operator>)</operator> <name>query</name><operator>)</operator><operator>.</operator><call><name>setSlop</name><argument_list>(<argument><expr><name>slop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1314</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1370</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>Query</name> <call><name>Term</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>)</argument_list></call> <operator>:</operator> <block>{
        	 }</block>
        	 <name>q</name> <operator>=</operator> <call><name>getFuzzyQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>,<argument><expr><name>fms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>q</name> <operator>=</operator> <ternary><condition><expr><name>hasNewAPI</name></expr> ?</condition><then> <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>termImage</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <operator>|</operator> <expr_stmt><expr><operator>(</operator> <call><argument_list type="generic">&lt;<argument><name>RANGEIN_START</name></argument>&gt;</argument_list> <argument_list>( <argument><expr><name>goop1</name><operator>=</operator><operator>&lt;</operator><name>RANGEIN_GOOP</name><operator>&gt;</operator><operator>|</operator><name>goop1</name><operator>=</operator><operator>&lt;</operator><name>RANGEIN_QUOTED</name><operator>&gt;</operator></expr></argument> )</argument_list></call>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5443eea46c3</literal><operator>..</operator><literal type="number">3049d41cc96</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">32</literal><operator>,</operator><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermRangeQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>WildcardQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>VirtualMethod</name></name>;</import>
 
 <comment type="block" format="javadoc">/** Token Manager. */</comment>
 <expr_stmt><expr><specifier>public</specifier> <name>class</name> <name>QueryParserTokenManager</name> implements <name>QueryParserConstants</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">69979a4f797</literal><operator>..</operator><literal type="number">061086cccde</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiAnalyzer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <comment type="line">// direct call to (super's) getFieldQuery to demonstrate differnce</comment>
     <comment type="line">// between phrase and multiphrase with modified default slop</comment>
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"\"foo bar\"~99"</literal></expr></argument>,
                 <argument><expr><call><name><name>qp</name><operator>.</operator><name>getSuperFieldQuery</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"foo bar"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                 <call><name><name>qp</name><operator>.</operator><name>getSuperFieldQuery</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"foo bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call>)</block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"\"(multi multi2) bar\"~99"</literal></expr></argument>,
                 <argument><expr><call><name><name>qp</name><operator>.</operator><name>getSuperFieldQuery</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"multi bar"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>qp</name><operator>.</operator><name>getSuperFieldQuery</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"multi bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
 
     
     <comment type="line">// ask sublcass to parse phrase with modified default slop</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">243</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">243</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiAnalyzer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
         }</block>
 
         <comment type="block" format="javadoc">/** expose super's version */</comment>
        <specifier>public</specifier> <name>Query</name> <call><name>getSuperFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>f</name></expr></argument>, <argument><expr><name>String</name> <name>t</name></expr></argument>)</argument_list></call> 
        <specifier>public</specifier> <name>Query</name> <call><name>getSuperFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>f</name></expr></argument>, <argument><expr><name>String</name> <name>t</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call> 
             <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block></if></if_stmt>
         <comment type="block" format="javadoc">/** wrap super's version */</comment>
         <decl_stmt><decl><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>f</name></expr></argument>, <argument><expr><name>String</name> <name>t</name></expr></argument>)</argument_list>
        protected <name>Query</name> <name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>f</name></expr></argument>, <argument><expr><name>String</name> <name>t</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list>
             <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument></throws>
            return new <name>DumbQueryWrapper</name><argument_list>(<argument><expr><call><name>getSuperFieldQuery</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>DumbQueryWrapper</name><argument_list>(<argument><expr><call><name>getSuperFieldQuery</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block></if></if_stmt>
     </block_content>}</block></else></if_stmt>
     
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3691b8775a9</literal><operator>..</operator><name>c272a5f2350</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryParser</name><operator>/</operator><name><name>TestQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>DateField</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>MultiTermQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FuzzyQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">248</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">250</literal></expr><operator>,</operator><expr><literal type="number">103</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQueryParser</name> extends <name>LocalizedTestCase</name> <block>{
 	 <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term\u3000term\u3000term"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"term\u0020term\u0020term"</literal></expr></argument>)</argument_list></call></expr>;
 	 <call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"ç¨èª\u3000ç¨èª\u3000ç¨èª"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"ç¨èª\u0020ç¨èª\u0020ç¨èª"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
   </block_content>}</block></function>

  <comment type="line">//individual CJK chars as terms, like StandardAnalyzer</comment>
  <class><specifier>private</specifier> class <name>SimpleCJKTokenizer</name> <super_list><extends>extends <super><name>Tokenizer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CharTermAttribute</name></type> <name>termAtt</name> <init>= <expr><call><name>addAttribute</name><argument_list>(<argument><expr><name><name>CharTermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleCJKTokenizer</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>incrementToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>clearAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>termAtt</name><operator>.</operator><name>setEmpty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SimpleCJKAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
   
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedTerm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>BooleanQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>BooleanQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"ä¸­å½^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\""</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKBoostedPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"^0.5"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCJKSloppyPhrase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>setSlop</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="string">"\"ä¸­å½\"~3"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testAutoGeneratePhraseQueriesOn</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// individual CJK chars as terms</comment>
    <decl_stmt><decl><type><name>SimpleCJKAnalyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <call><name>SimpleCJKAnalyzer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
  
    <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>PhraseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"ä¸­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QueryParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>QueryParser</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setAutoGeneratePhraseQueries</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"ä¸­å½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term term term"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"term term term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"tÃ¼rm term term"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockAnalyzer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tÃ¼rm term term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">437</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">535</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQueryParser</name> extends <name>LocalizedTestCase</name> <block>{
     
     <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"drop AND stop AND roll"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">"+drop +roll"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
                      <argument><expr><literal type="string">"term \"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
                      <expr_stmt><expr><literal type="string">"term (phrase1 phrase2) term"</literal></expr></expr_stmt>)</block_content></block>;</function>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"term AND NOT phrase term"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>,
                      <argument><expr><literal type="string">"+term -\"phrase1 phrase2\" term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <expr_stmt><expr><literal type="string">"+term -(phrase1 phrase2) term"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop^3"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"(stop)^3"</literal></expr></argument>, <argument><expr><name>qpAnalyzer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">912</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1010</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQueryParser</name> extends <name>LocalizedTestCase</name> <block>{
       }</block>
 
       @<name>Override</name>
      <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>ParseException</name> <block>{
      <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>ParseException</name> <block>{
         <expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7b481e1f920</literal><operator>..</operator><literal type="number">3a386d15e66</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExtendedDismaxQParserPlugin</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">869</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">869</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>ExtendedDismaxQParser</name> extends <name>QParser</name> <block>{
     <expr><name>int</name> <name>slop</name></expr>;
 
     @<name>Override</name>
    <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>val</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>ParseException</name> <block>{
    <expr><specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>val</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>ParseException</name> <block>{
 <comment type="line">//System.out.println("getFieldQuery: val="+val);</comment>
 
       <expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>QType</name><operator>.</operator><name>FIELD</name></name></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1004</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1004</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>ExtendedDismaxQParser</name> extends <name>QParser</name> <block>{
         <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
           <case>case <expr><name>FIELD</name></expr>:</case>  <comment type="line">// fallthrough</comment>
           <case>case <expr><name>PHRASE</name></expr>:</case>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>type</name> <operator>==</operator> <name><name>QType</name><operator>.</operator><name>PHRASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>query</name> <operator>instanceof</operator> <name>PhraseQuery</name></expr>)</condition> <block>{<block_content>
               <decl_stmt><decl><type><name>PhraseQuery</name></type> <name>pq</name> <init>= <expr><operator>(</operator><name>PhraseQuery</name><operator>)</operator><name>query</name></expr></init></decl>;</decl_stmt>
               <if_stmt><if>if <condition>(<expr><name>minClauseSize</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>pq</name><operator>.</operator><name>getTerms</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&lt;</operator> <name>minClauseSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cfbf2cc1eeb</name><operator>..</operator><literal type="number">9882e220dca</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrQueryParser</name> extends <name>QueryParser</name> <block>{
   }</block>
 
   <specifier>public</specifier> <call><name>SolrQueryParser</name><argument_list>(<argument><expr><name>QParser</name> <name>parser</name></expr></argument>, <argument><expr><name>String</name> <name>defaultField</name></expr></argument>, <argument><expr><name>Analyzer</name> <name>analyzer</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_24</name></name></expr></argument>, <argument><expr><name>defaultField</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr>;
    <call><name>super</name><argument_list>(<argument><expr><call><name><name>parser</name><operator>.</operator><name>getReq</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSolrConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLuceneVersion</name><argument_list>(<argument><expr><literal type="string">"luceneMatchVersion"</literal></expr></argument>, <argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_24</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defaultField</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>getReq</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parser</name></name> <operator>=</operator> <name>parser</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultField</name></name> <operator>=</operator> <name>defaultField</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrQueryParser</name> extends <name>QueryParser</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getFieldQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>queryText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quoted</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkNullField</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// intercept magic field name of "_" to use as a hook for our</comment>
     <comment type="line">// own functions.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrQueryParser</name> extends <name>QueryParser</name> <block>{
     }</block></expr></expr_stmt>
 
     <comment type="line">// default to a normal field query</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>protected</specifier> <name>Query</name></type> <name>getRangeQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>part1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>part2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SolrPluginUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SolrPluginUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">71386af9d44</literal><operator>..</operator><literal type="number">88cb045bc25</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SolrPluginUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SolrPluginUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">842</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">842</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrPluginUtils</name> <block>{
      <expr><operator>*</operator> <name><name>DisjunctionMaxQuery</name><operator>.</operator></name>  (<name>so</name> <name>yes</name><operator>:</operator> <name>aliases</name> <name>which</name> <name>point</name> <name>at</name> <name>other</name>
      <operator>*</operator> <name>aliases</name> <name>should</name> <name>work</name></expr>)
      <operator>*</operator><operator>/</operator>
    <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>)</argument_list></call>
    <specifier>protected</specifier> <name>Query</name> <call><name>getFieldQuery</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>queryText</name></expr></argument>, <argument><expr><name>boolean</name> <name>quoted</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>ParseException</name> <block>{</block></expr></argument></throws></block></expr></expr_stmt>
             
       <if_stmt><if>if <condition>(<expr><call><name><name>aliases</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">857</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">857</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrPluginUtils</name> <block>{
                 
         <for>for <control>(<init><decl><type><name>String</name></type> <name>f</name> <range>: <expr><call><name><name>a</name><operator>.</operator><name>fields</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
 
          <decl_stmt><decl><type><name>Query</name></type> <name>sub</name> <init>= <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Query</name></type> <name>sub</name> <init>= <expr><call><name>getFieldQuery</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>queryText</name></expr></argument>,<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>sub</name></expr>)</condition> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>a</name><operator>.</operator><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>sub</name><operator>.</operator><name>setBoost</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">870</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">870</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrPluginUtils</name> <block>{
 
       }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
         <try>try <block>{<block_content>
          <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr>;</return>
          <return>return <expr><call><name><name>super</name><operator>.</operator><name>getFieldQuery</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <return>return <expr><literal type="null">null</literal></expr>;</return>
         </block_content>}</block></catch></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>ConvertedLegacyTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>ConvertedLegacyTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8dd279e4235</literal><operator>..</operator><name>d5a8e667e0e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>ConvertedLegacyTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>ConvertedLegacyTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">998</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">998</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConvertedLegacyTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"id:42 AND subword:IBM's"</literal></expr></argument>)</argument_list></call></expr></argument>
             ,<argument><expr><literal type="string">"*[count(//doc)=1]"</literal></expr></argument>
             )</argument_list></call></expr>;
    <call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"id:42 AND subword:IBM'sx"</literal></expr></argument>)</argument_list></call>
    <call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"id:42 AND subword:\"IBM'sx\""</literal></expr></argument>)</argument_list></call></expr></argument>
             ,<argument><expr><literal type="string">"*[count(//doc)=0]"</literal></expr></argument>
             )</argument_list></call></expr></argument>;</argument_list></call>
 
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></block></expr></expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></switch></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></function></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt>

</unit>
