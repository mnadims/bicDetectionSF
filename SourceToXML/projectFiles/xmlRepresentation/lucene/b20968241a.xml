<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/b20968241a.java"><expr_stmt><expr><name>From</name> <name>b20968241ae072c6f5b11e4f80053a7e90ce9186</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Noble</name> <name><name>Paul</name> <argument_list type="generic">&lt;<argument><name>noble</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">22</literal> <name>Jul</name> <literal type="number">2011</literal> <literal type="number">06</literal><operator>:</operator><literal type="number">47</literal><operator>:</operator><literal type="number">43</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">2382</literal><operator>-</operator><name>abstracted</name> <name>DIHWriter</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1149477 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestMailEntityProcessor</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHLogLevels</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">81</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DebugLogger</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">84</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">240</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">62</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestDocBuilder</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">7</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">292</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">191</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHLogLevels</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestMailEntityProcessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestMailEntityProcessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a89477c3dd3</name><operator>..</operator><literal type="number">604ab8de38a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestMailEntityProcessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>-</operator><name>extras</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestMailEntityProcessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMailEntityProcessor</name> extends <name>AbstractDataImportHandlerTestCase</name> <block>{
       <return>return <expr><call><name><name>docs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Do nothing</comment>
    </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>doDeleteAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHLogLevels</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHLogLevels</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..0ce3f6dd900</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHLogLevels</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<enum><specifier>public</specifier> enum <name>DIHLogLevels</name> <block>{
	<decl><name>START_ENTITY</name></decl>, <decl><name>END_ENTITY</name></decl>, <decl><name>TRANSFORMED_ROW</name></decl>, <decl><name>ENTITY_META</name></decl>, <decl><name>PRE_TRANSFORMER_ROW</name></decl>, <decl><name>START_DOC</name></decl>, <decl><name>END_DOC</name></decl>, <decl><name>ENTITY_OUT</name></decl>, <decl><name>ROW_END</name></decl>, <decl><name>TRANSFORMER_EXCEPTION</name></decl>, <decl><name>ENTITY_EXCEPTION</name></decl>, <decl><name>DISABLE_LOGGING</name></decl>, <decl><name>ENABLE_LOGGING</name></decl>, <decl><name>NONE</name></decl>
}</block></enum>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..18d7fd3a275</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DIHWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">81</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>handler</name><operator>.</operator><name>dataimport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrInputDocument</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @solr.experimental
 *
 */</comment>
<interface><specifier>public</specifier> interface <name>DIHWriter</name> <block>{
	
	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  If this writer supports transactions or commit points, then commit any changes, 
	 *  optionally optimizing the data for read/write performance
	 * &lt;/p&gt;
	 * @param optimize
	 */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>commit</name><argument_list>(<argument><expr><name>boolean</name> <name>optimize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Release resources used by this writer.  After calling close, reads &amp; updates will throw exceptions.
	 * &lt;/p&gt;
	 */</comment>
	<function_decl><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  If this writer supports transactions or commit points, then roll back any uncommitted changes.
	 * &lt;/p&gt;
	 */</comment>
	<function_decl><type><specifier>public</specifier> <name>void</name></type> <name>rollback</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Delete from the writer's underlying data store based the passed-in writer-specific query. (Optional Operation)
	 * &lt;/p&gt;
	 * @param q
	 */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>deleteByQuery</name><argument_list>(<argument><expr><name>String</name> <name>q</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Delete everything from the writer's underlying data store
	 * &lt;/p&gt;
	 */</comment>
	<function_decl><type><specifier>public</specifier> <name>void</name></type> <name>doDeleteAll</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Delete from the writer's underlying data store based on the passed-in Primary Key
	 * &lt;/p&gt;
	 * @param key
	 */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>deleteDoc</name><argument_list>(<argument><expr><name>Object</name> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	


	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Add a document to this writer's underlying data store.
	 * &lt;/p&gt;
	 * @param doc
	 * @return
	 */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>upload</name><argument_list>(<argument><expr><name>SolrInputDocument</name> <name>doc</name></expr></argument>)</argument_list></decl>;</decl_stmt>


	
	<comment type="block" format="javadoc">/**
	 * &lt;p&gt;
	 *  Provide context information for this writer.  init() should be called before using the writer.
	 * &lt;/p&gt;
	 * @param context
	 */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>init</name><argument_list>(<argument><expr><name>Context</name> <name>context</name></expr></argument>)</argument_list></decl> ;</decl_stmt>
	
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DebugLogger</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DebugLogger</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4b2ebafafba</literal><operator>..</operator><literal type="number">06ee91a3a6a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DebugLogger</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DebugLogger</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
   <expr><specifier>private</specifier> <name><name>Stack</name><argument_list type="generic">&lt;<argument><name>DebugInfo</name></argument>&gt;</argument_list></name> <name>debugStack</name></expr>;
 
   <expr><name>NamedList</name> <name>output</name></expr>;
  <expr><specifier>private</specifier> <name>final</name> <name>SolrWriter</name> <name>writer</name></expr>;
<comment type="line">//  private final SolrWriter writer1;</comment>
 
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>LINE</name> <operator>=</operator> <literal type="string">"---------------------------------------------"</literal></expr>;
 
@@ <expr><operator>-</operator><literal type="number">54</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">54</literal></expr>,<expr><literal type="number">8</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
 
   <expr><name>boolean</name> <name>enabled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
 
  <expr><specifier>public</specifier> <call><name>DebugLogger</name><argument_list>(<argument><expr><name>SolrWriter</name> <name>solrWriter</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>writer</name> <operator>=</operator> <name>solrWriter</name></expr>;
  <expr><specifier>public</specifier> <call><name>DebugLogger</name><argument_list>()</argument_list></call> <block>{
<comment type="line">//    writer = solrWriter;</comment>
     <expr><name>output</name> <operator>=</operator> <operator>new</operator> <call><name>NamedList</name><argument_list>()</argument_list></call></expr>;
     <expr><name>debugStack</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>DebugInfo</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
         <return>return <expr><call><name><name>super</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr></expr_stmt></block></class></expr>
       }</block></expr>
     }</block></expr>;
    <expr><call><name><name>debugStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>debugStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name>output</name> <operator>=</operator> <call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>lst</name></expr>;
   }</block>
 
@@ <operator>-</operator><literal type="number">75</literal></expr>,<expr><literal type="number">47</literal> <operator>+</operator><literal type="number">75</literal></expr>,<expr><literal type="number">47</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
     <return>return <expr><call><name><name>debugStack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <literal type="null">null</literal> <operator>:</operator> <call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>
 
  <specifier>public</specifier> <name>void</name> <call><name>log</name><argument_list>(<argument><expr><name>int</name> <name>event</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>Object</name> <name>row</name></expr></argument>)</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>DISABLE_LOGGING</name></name></expr>)</condition> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>DIHLogLevels</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>DISABLE_LOGGING</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <return>return;</return>
    <expr_stmt/></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>ENABLE_LOGGING</name></name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>ENABLE_LOGGING</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name> <operator>&amp;&amp;</operator> <name>event</name> <operator>!=</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name>
            <operator>&amp;&amp;</operator> <name>event</name> <operator>!=</operator> <name><name>SolrWriter</name><operator>.</operator><name>END_ENTITY</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name> <operator>&amp;&amp;</operator> <name>event</name> <operator>!=</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name>
            <operator>&amp;&amp;</operator> <name>event</name> <operator>!=</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>END_ENTITY</name></name></expr>)</condition> <block>{<block_content>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name></expr></argument>, <argument><expr><call><name>peekStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name></expr></argument>, <argument><expr><call><name>peekStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>debugStack</name>
              <operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name></expr></argument>, <argument><expr><call><name>peekStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_OUT</name></name> <operator>==</operator> <name>event</name>
            <operator>||</operator> <name><name>SolrWriter</name><operator>.</operator><name>PRE_TRANSFORMER_ROW</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name>
              <operator>||</operator> <call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name></expr></argument>, <argument><expr><call><name>peekStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_OUT</name></name> <operator>==</operator> <name>event</name>
            <operator>||</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>PRE_TRANSFORMER_ROW</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name>
              <operator>||</operator> <call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>fmt</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{<expr><operator>++</operator><call><name><name>debugStack</name>
                 <operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>rowCount</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>addToNamedList</name><argument_list>(<argument><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>lst</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>ROW_END</name></name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>ROW_END</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>popAllTransformers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>END_ENTITY</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>debugStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name></expr>)</condition><block type="pseudo"><block_content/></block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>END_ENTITY</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>debugStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name></expr>)</condition><block type="pseudo"><block_content>
         <empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>END_DOC</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>debugStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition><block type="pseudo"><block_content/></block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>END_DOC</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>debugStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition><block type="pseudo"><block_content>
         <empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><call><name>peekStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"EXCEPTION"</literal></expr></argument>,
               <argument><expr><call><name>getStacktraceString</name><argument_list>(<argument><expr><operator>(</operator><name>Exception</name><operator>)</operator> <name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMED_ROW</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMED_ROW</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><call><name>peekStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>addToNamedList</name><argument_list>(<argument><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>lst</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
         <expr><name>DataImportHandlerException</name> <name>dataImportHandlerException</name> <operator>=</operator> <operator>(</operator><name>DataImportHandlerException</name><operator>)</operator> <name>row</name></expr>;
         <name><name>dataImportHandlerException</name><operator>.</operator><name>debugged</name></name> <operator>=</operator> <literal type="boolean">true</literal></block></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_META</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_META</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>popAllTransformers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name> <operator>==</operator> <name>event</name></expr>)</condition> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>row</name> <operator>instanceof</operator> <name>DataImportHandlerException</name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>DataImportHandlerException</name></type> <name>dihe</name> <init>= <expr><operator>(</operator><name>DataImportHandlerException</name><operator>)</operator> <name>row</name></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name><name>dihe</name><operator>.</operator><name>debugged</name></name></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
 
   <expr><specifier>private</specifier> <name>void</name> <call><name>popAllTransformers</name><argument_list>()</argument_list></call> <block>{
     <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name></expr>)</condition><block type="pseudo"><block_content>
    	<decl_stmt><decl><type><name>DIHLogLevels</name></type> <name>type</name> <init>= <expr><call><name><name>debugStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name></expr>)</condition><block type="pseudo"><block_content>
         <break>break;</break></block_content></block></if></if_stmt>
       <expr_stmt><expr><call><name><name>debugStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></while></block></expr>}</block>
@@ <operator>-</operator><literal type="number">181</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">181</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
 
       @<expr><name>Override</name>
       <specifier>public</specifier> <name>Object</name> <call><name>getData</name><argument_list>(<argument><expr><name>String</name> <name>query</name></expr></argument>)</argument_list></call> <block>{
        <expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_META</name></name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;
        <call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_META</name></name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></block></expr>;
         <name>long</name> <name>start</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt></block_content></block></if></if_stmt>
         <try>try <block>{<block_content>
           <return>return <expr><call><name><name>ds</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DataImportHandlerException</name></type> <name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>,
          <argument><expr><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>,
                   <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
           <throw>throw <expr><name>de</name></expr>;</throw>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>,
          <argument><expr><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>,
                   <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
           <decl_stmt><decl><type><name>DataImportHandlerException</name></type> <name>de</name> <init>= <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(
                   <argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><name><name>de</name><operator>.</operator><name>debugged</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
           <throw>throw <expr><name>de</name></expr>;</throw>
         </block_content>}</block></catch> <finally>finally <block>{<block_content>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_META</name></name></expr></argument>, <argument><expr><literal type="string">"time-taken"</literal></expr></argument>, <argument><expr><name>DocBuilder</name>
          <call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_META</name></name></expr></argument>, <argument><expr><literal type="string">"time-taken"</literal></expr></argument>, <argument><expr><call><name><name>DocBuilder</name>
                   <operator>.</operator><name>getTimeElapsedSince</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
         </block_content>}</block></finally></try>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
     <return>return <expr><operator>new</operator> <class><super><name>Transformer</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>Object</name></type> <name>transformRow</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>PRE_TRANSFORMER_ROW</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>PRE_TRANSFORMER_ROW</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>tName</name> <init>= <expr><call><name>getTransformerName</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
           <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>transformRow</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMED_ROW</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMED_ROW</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DataImportHandlerException</name></type> <name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>de</name><operator>.</operator><name>debugged</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
           <throw>throw <expr><name>de</name></expr>;</throw>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>DataImportHandlerException</name></type> <name>de</name> <init>= <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><name><name>de</name><operator>.</operator><name>debugged</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
           <throw>throw <expr><name>de</name></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <name>class</name> <name>DebugLogger</name> <block>{
 
     <expr><name>NamedList</name> <name>lst</name></expr>;
 
    <name>int</name> <name>type</name></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DIHLogLevels</name></type> <name>type</name></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>DebugInfo</name></type> <name>parent</name></decl>;</decl_stmt>
 
    <constructor><specifier>public</specifier> <name>DebugInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>DebugInfo</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>DebugInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>DIHLogLevels</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>DebugInfo</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>lst</name> <operator>=</operator> <operator>new</operator> <call><name>NamedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>displayName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>displayName</name> <operator>=</operator> <literal type="string">"entity:"</literal> <operator>+</operator> <name>name</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMED_ROW</name></name>
                <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr>)</condition> <block>{<block_content>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMED_ROW</name></name>
                <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>TRANSFORMER_EXCEPTION</name></name></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>displayName</name> <operator>=</operator> <literal type="string">"transformer:"</literal> <operator>+</operator> <name>name</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition> <block>{<block_content>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>displayName</name> <operator>=</operator> <literal type="string">"document#"</literal> <operator>+</operator> <call><name><name>SolrWriter</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>displayName</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">42fade7da03</literal><operator>..</operator><name>f1ceba4ef28</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>DocBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">60</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
 
   <expr><specifier>public</specifier> <name>Statistics</name> <name>importStatistics</name> <operator>=</operator> <operator>new</operator> <call><name>Statistics</name><argument_list>()</argument_list></call></expr>;
 
  <name>SolrWriter</name> <name>writer</name></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>DIHWriter</name></type> <name>writer</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><name><name>DataImporter</name><operator>.</operator><name>RequestParams</name></name></type> <name>requestParameters</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><name>boolean</name></type> <name>verboseDebug</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>session</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>session</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>DocBuilder</name></argument>&gt;</argument_list></name></type> <name>INSTANCE</name> <init>= <expr><operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>DocBuilder</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>functionsNamespace</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>persistedProperties</name></decl>;</decl_stmt>
   
   <decl_stmt><decl><type><specifier>private</specifier> <name>DIHPropertiesWriter</name></type> <name>propWriter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_WRITER_IMPL</name> <init>= <expr><literal type="string">"writerImpl"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WRITER_NAME</name> <init>= <expr><literal type="string">"SolrWriter"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>DebugLogger</name></type> <name>debugLogger</name></decl>;</decl_stmt>
 
  <constructor><specifier>public</specifier> <name>DocBuilder</name><parameter_list>(<parameter><decl><type><name>DataImporter</name></type> <name>dataImporter</name></decl></parameter>, <parameter><decl><type><name>SolrWriter</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>DIHPropertiesWriter</name></type> <name>propWriter</name></decl></parameter>, <parameter><decl><type><name><name>DataImporter</name><operator>.</operator><name>RequestParams</name></name></type> <name>reqParams</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <name>DocBuilder</name><parameter_list>(<parameter><decl><type><name>DataImporter</name></type> <name>dataImporter</name></decl></parameter>, <parameter><decl><type><name>SolrWriter</name></type> <name>solrWriter</name></decl></parameter>, <parameter><decl><type><name>DIHPropertiesWriter</name></type> <name>propWriter</name></decl></parameter>, <parameter><decl><type><name><name>DataImporter</name><operator>.</operator><name>RequestParams</name></name></type> <name>reqParams</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>INSTANCE</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataImporter</name></name> <operator>=</operator> <name>dataImporter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writer</name></name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propWriter</name></name> <operator>=</operator> <name>propWriter</name></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>DataImporter</name><operator>.</operator><name>QUERY_COUNT</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>importStatistics</name><operator>.</operator><name>queryCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>requestParameters</name> <operator>=</operator> <name>reqParams</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>verboseDebug</name> <operator>=</operator> <name><name>requestParameters</name><operator>.</operator><name>debug</name></name> <operator>&amp;&amp;</operator> <name><name>requestParameters</name><operator>.</operator><name>verbose</name></name></expr>;</expr_stmt>
     <expr_stmt><expr><name>functionsNamespace</name> <operator>=</operator> <call><name><name>EvaluatorBag</name><operator>.</operator><name>getFunctionsNamespace</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>dataImporter</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><name>functions</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>persistedProperties</name> <operator>=</operator> <call><name><name>propWriter</name><operator>.</operator><name>readIndexerProperties</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>String</name></type> <name>writerClassStr</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>reqParams</name><operator>!=</operator><literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>reqParams</name><operator>.</operator><name>requestParams</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
    	<expr_stmt><expr><name>writerClassStr</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <call><name><name>reqParams</name><operator>.</operator><name>requestParams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_WRITER_IMPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>writerClassStr</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>writerClassStr</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DEFAULT_WRITER_NAME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>writerClassStr</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DocBuilder</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>DEFAULT_WRITER_NAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    	<try>try <block>{<block_content>
    		<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>DIHWriter</name></argument>&gt;</argument_list></name></type> <name>writerClass</name> <init>= <expr><call><name>loadClass</name><argument_list>(<argument><expr><name>writerClassStr</name></expr></argument>, <argument><expr><call><name><name>dataImporter</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>writer</name></name> <operator>=</operator> <call><name><name>writerClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    		<throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to load Writer implementation:"</literal> <operator>+</operator> <name>writerClassStr</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    	</block_content>}</block></catch></try>
   	</block_content>}</block></if> <else>else <block>{<block_content>
    	<expr_stmt><expr><name>writer</name> <operator>=</operator> <name>solrWriter</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>ContextImpl</name></type> <name>ctx</name> <init>= <expr><operator>new</operator> <call><name>ContextImpl</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>reqParams</name><operator>.</operator><name>requestParams</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>




  <function><type><specifier>private</specifier> <name>DebugLogger</name></type> <name>getDebubLogger</name><parameter_list>()</parameter_list><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>debugLogger</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>debugLogger</name> <operator>=</operator> <operator>new</operator> <call><name>DebugLogger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>debugLogger</name></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>VariableResolverImpl</name></type> <name>getVariableResolver</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">139</literal></expr><operator>,</operator><expr><literal type="number">94</literal> <operator>+</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">100</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
 
   @<expr><call><name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>execute</name><argument_list>()</argument_list></call> <block>{
    <expr><call><name><name>dataImporter</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>STATUS_MSGS</name></name></expr></argument>, <argument><expr><name>statusMessages</name></expr></argument>)</argument_list></call></expr>;
    <name>document</name> <operator>=</operator> <call><name><name>dataImporter</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><name>document</name></block></expr>;
    <name>final</name> <name>AtomicLong</name> <name>startTime</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TIME_ELAPSED</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Object</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getTimeElapsedSince</name><argument_list>(<argument><expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_QUERIES_EXECUTED</name></name></expr></argument>,
            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>queryCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_ROWS_EXECUTED</name></name></expr></argument>,
            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>rowsCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOC_PROCESSED</name></name></expr></argument>,
            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>docCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOCS_SKIPPED</name></name></expr></argument>,
            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>skipDocCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entities</name> <init>= <expr><name><name>requestParameters</name><operator>.</operator><name>entities</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Trigger onImportStart</comment>
    <if_stmt><if>if <condition>(<expr><name><name>document</name><operator>.</operator><name>onImportStart</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>invokeEventListener</name><argument_list>(<argument><expr><name><name>document</name><operator>.</operator><name>onImportStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>AtomicBoolean</name></type> <name>fullCleanDone</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//we must not do a delete of *:* multiple times if there are multiple root entities to be run</comment>
    <decl_stmt><decl><type><name>Properties</name></type> <name>lastIndexTimeProps</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>lastIndexTimeProps</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>LAST_INDEX_KEY</name></expr></argument>,
            <argument><expr><call><name><name>DataImporter</name><operator>.</operator><name>DATE_TIME_FORMAT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><call><name><name>dataImporter</name><operator>.</operator><name>getIndexStartTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>e</name> <range>: <expr><name><name>document</name><operator>.</operator><name>entities</name></name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>entities</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entities</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>lastIndexTimeProps</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>LAST_INDEX_KEY</name></expr></argument>,
              <argument><expr><call><name><name>DataImporter</name><operator>.</operator><name>DATE_TIME_FORMAT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>root</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>delQuery</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>allAttributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"preImportDeleteQuery"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>dataImporter</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DataImporter</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING_DELTA_DUMP</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doDelta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delQuery</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>allAttributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"postImportDeleteQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>delQuery</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>fullCleanDone</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doFullDump</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delQuery</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>allAttributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"postImportDeleteQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>delQuery</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>fullCleanDone</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOC_PROCESSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>stop</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Dont commit if aborted using command=abort</comment>
      <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Aborted"</literal></expr></argument>, <argument><expr><call><name><name>DataImporter</name><operator>.</operator><name>DATE_TIME_FORMAT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Do not commit unnecessarily if this is a delta-import and no documents were created or deleted</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>requestParameters</name><operator>.</operator><name>clean</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>importStatistics</name><operator>.</operator><name>docCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>importStatistics</name><operator>.</operator><name>deletedDocCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>lastIndexTimeProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Finished operation normally, commit now</comment>
        <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>lastIndexTimeProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>writer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>document</name><operator>.</operator><name>onImportEnd</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invokeEventListener</name><argument_list>(<argument><expr><name><name>document</name><operator>.</operator><name>onImportEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>TIME_ELAPSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOC_PROCESSED</name></name></expr></argument>, <argument><expr><literal type="string">""</literal><operator>+</operator> <call><name><name>importStatistics</name><operator>.</operator><name>docCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>importStatistics</name><operator>.</operator><name>failedDocCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_FAILED_DOCS</name></name></expr></argument>, <argument><expr><literal type="string">""</literal><operator>+</operator> <call><name><name>importStatistics</name><operator>.</operator><name>failedDocCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Time taken "</literal></expr></argument>, <argument><expr><call><name>getTimeElapsedSince</name><argument_list>(<argument><expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Time taken = "</literal> <operator>+</operator> <call><name>getTimeElapsedSince</name><argument_list>(<argument><expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<try>try <block>{<block_content>
	    <expr_stmt><expr><call><name><name>dataImporter</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>STATUS_MSGS</name></name></expr></argument>, <argument><expr><name>statusMessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>dataImporter</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><name>document</name></expr>;</expr_stmt>
	    <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicLong</name></type> <name>startTime</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TIME_ELAPSED</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Object</name></super><argument_list>()</argument_list> <block>{
	      <function><annotation>@<name>Override</name></annotation>
	      <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
	        <return>return <expr><call><name>getTimeElapsedSince</name><argument_list>(<argument><expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	      </block_content>}</block></function>
	    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_QUERIES_EXECUTED</name></name></expr></argument>,
	            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>queryCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_ROWS_EXECUTED</name></name></expr></argument>,
	            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>rowsCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOC_PROCESSED</name></name></expr></argument>,
	            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>docCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOCS_SKIPPED</name></name></expr></argument>,
	            <argument><expr><name><name>importStatistics</name><operator>.</operator><name>skipDocCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entities</name> <init>= <expr><name><name>requestParameters</name><operator>.</operator><name>entities</name></name></expr></init></decl>;</decl_stmt>
	
	    <comment type="line">// Trigger onImportStart</comment>
	    <if_stmt><if>if <condition>(<expr><name><name>document</name><operator>.</operator><name>onImportStart</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
	      <expr_stmt><expr><call><name>invokeEventListener</name><argument_list>(<argument><expr><name><name>document</name><operator>.</operator><name>onImportStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	    <decl_stmt><decl><type><name>AtomicBoolean</name></type> <name>fullCleanDone</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <comment type="line">//we must not do a delete of *:* multiple times if there are multiple root entities to be run</comment>
	    <decl_stmt><decl><type><name>Properties</name></type> <name>lastIndexTimeProps</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>lastIndexTimeProps</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>LAST_INDEX_KEY</name></expr></argument>,
	            <argument><expr><call><name><name>DataImporter</name><operator>.</operator><name>DATE_TIME_FORMAT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><call><name><name>dataImporter</name><operator>.</operator><name>getIndexStartTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for <control>(<init><decl><type><name><name>DataConfig</name><operator>.</operator><name>Entity</name></name></type> <name>e</name> <range>: <expr><name><name>document</name><operator>.</operator><name>entities</name></name></expr></range></decl></init>)</control> <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>entities</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entities</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	        <continue>continue;</continue></block_content></block></if></if_stmt>
	      <expr_stmt><expr><call><name><name>lastIndexTimeProps</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>LAST_INDEX_KEY</name></expr></argument>,
	              <argument><expr><call><name><name>DataImporter</name><operator>.</operator><name>DATE_TIME_FORMAT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>root</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
	      <decl_stmt><decl><type><name>String</name></type> <name>delQuery</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>allAttributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"preImportDeleteQuery"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name><name>dataImporter</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DataImporter</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING_DELTA_DUMP</name></name></expr>)</condition> <block>{<block_content>
	        <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>doDelta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>delQuery</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>allAttributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"postImportDeleteQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if_stmt><if>if <condition>(<expr><name>delQuery</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
	          <expr_stmt><expr><call><name><name>fullCleanDone</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if> <else>else <block>{<block_content>
	        <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>doFullDump</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>delQuery</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>allAttributes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"postImportDeleteQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if_stmt><if>if <condition>(<expr><name>delQuery</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
	          <expr_stmt><expr><call><name><name>fullCleanDone</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><call><name>cleanByQuery</name><argument_list>(<argument><expr><name>delQuery</name></expr></argument>, <argument><expr><name>fullCleanDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	      </block_content>}</block></else></if_stmt>
	      <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOC_PROCESSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></for>
	
	    <if_stmt><if>if <condition>(<expr><call><name><name>stop</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
	      <comment type="line">// Dont commit if aborted using command=abort</comment>
	      <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Aborted"</literal></expr></argument>, <argument><expr><call><name><name>DataImporter</name><operator>.</operator><name>DATE_TIME_FORMAT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else>else <block>{<block_content>
	      <comment type="line">// Do not commit unnecessarily if this is a delta-import and no documents were created or deleted</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>requestParameters</name><operator>.</operator><name>clean</name></name></expr>)</condition> <block>{<block_content>
	        <if_stmt><if>if <condition>(<expr><call><name><name>importStatistics</name><operator>.</operator><name>docCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>importStatistics</name><operator>.</operator><name>deletedDocCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	          <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>lastIndexTimeProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if> <else>else <block>{<block_content>
	        <comment type="line">// Finished operation normally, commit now</comment>
	        <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>lastIndexTimeProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></else></if_stmt> 
	      
	      <if_stmt><if>if <condition>(<expr><name><name>document</name><operator>.</operator><name>onImportEnd</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
	        <expr_stmt><expr><call><name>invokeEventListener</name><argument_list>(<argument><expr><name><name>document</name><operator>.</operator><name>onImportEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>TIME_ELAPSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_DOC_PROCESSED</name></name></expr></argument>, <argument><expr><literal type="string">""</literal><operator>+</operator> <call><name><name>importStatistics</name><operator>.</operator><name>docCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if<condition>(<expr><call><name><name>importStatistics</name><operator>.</operator><name>failedDocCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DataImporter</name><operator>.</operator><name>MSG</name><operator>.</operator><name>TOTAL_FAILED_DOCS</name></name></expr></argument>, <argument><expr><literal type="string">""</literal><operator>+</operator> <call><name><name>importStatistics</name><operator>.</operator><name>failedDocCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	    <expr_stmt><expr><call><name><name>statusMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Time taken "</literal></expr></argument>, <argument><expr><call><name>getTimeElapsedSince</name><argument_list>(<argument><expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Time taken = "</literal> <operator>+</operator> <call><name>getTimeElapsedSince</name><argument_list>(<argument><expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
		<block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <finally>finally
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>writer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
	      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
		</block_content>}</block></finally></try>
   </block_content>}</block></function>
 
   <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">560</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">596</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
     <expr><call><name><name>Context</name><operator>.</operator><name>CURRENT_CONTEXT</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     
     <if_stmt><if>if <condition>(<expr><name><name>requestParameters</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>DISABLE_LOGGING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>DISABLE_LOGGING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>START_ENTITY</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>START_ENTITY</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <decl_stmt><decl><type><name>int</name></type> <name>seenDocCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">578</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">614</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
           <expr><name>seenDocCount</name><operator>++</operator></expr>;</block></expr></expr_stmt>
 
           <if_stmt><if>if <condition>(<expr><name>seenDocCount</name> <operator>&gt;</operator> <name><name>requestParameters</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENABLE_LOGGING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENABLE_LOGGING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
 
           <if_stmt><if>if <condition>(<expr><name>verboseDebug</name> <operator>&amp;&amp;</operator> <name><name>entity</name><operator>.</operator><name>isDocRoot</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>START_DOC</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>START_DOC</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>entity</name><operator>.</operator><name>isDocRoot</name></name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>doc</name> <operator>=</operator> <operator>new</operator> <call><name>DocWrapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">611</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">647</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
           }</block></expr></expr_stmt>
 
           <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_OUT</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>arow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_OUT</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>arow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           <expr_stmt><expr><call><name><name>importStatistics</name><operator>.</operator><name>rowsCount</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">647</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">683</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
 
         }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>DataImportHandlerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           <if_stmt><if>if<condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DataImportHandlerException</name><operator>.</operator><name>SKIP_ROW</name></name></expr>)</condition><block>{<block_content>
             <continue>continue;</continue>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">666</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">702</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocBuilder</name> <block>{
             <throw>throw <argument_list>e</argument_list></throw>;
         }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ENTITY_EXCEPTION</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
           <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch> <finally>finally <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>ROW_END</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>ROW_END</name></name></expr></argument>, <argument><expr><name><name>entity</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>.</operator><name>isDocRoot</name></name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>END_DOC</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>END_DOC</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>Context</name><operator>.</operator><name>CURRENT_CONTEXT</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
         </block_content>}</block></finally>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></catch> <finally>finally <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>verboseDebug</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>END_ENTITY</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getDebubLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name><name>DIHLogLevels</name><operator>.</operator><name>END_ENTITY</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><call><name><name>entityProcessor</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5184ead5705</literal><operator>..</operator><name>cd12996780c</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>SolrWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
 * &lt;p&gt; Writes documents to SOLR as well as provides methods for loading and persisting last index time. &lt;/p&gt;
 * &lt;p&gt; Writes documents to SOLR. &lt;/p&gt;
  * &lt;p/&gt;
  * &lt;b&gt;This API is experimental and may change in the future.&lt;/b&gt;
  *
  * @since solr 1.3
  */</comment>
<class><specifier>public</specifier> class <name>SolrWriter</name> <block>{
<class><specifier>public</specifier> class <name>SolrWriter</name> <super_list><implements>implements <super><name>DIHWriter</name></super></implements></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SolrWriter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LAST_INDEX_KEY</name> <init>= <expr><literal type="string">"last_index_time"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;
   }</block></expr></expr_stmt>
   

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
  	<try>try <block>{<block_content>
  		<expr_stmt><expr><call><name><name>processor</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  	</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  		<throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>,
  				<argument><expr><literal type="string">"Unable to call finish() on UpdateRequestProcessor"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
  	</block_content>}</block></catch></try>
  </block_content>}</block></function>
  <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>boolean</name></type> <name>upload</name><parameter_list>(<parameter><decl><type><name>SolrInputDocument</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>AddUpdateCommand</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AddUpdateCommand</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
 
     <return>return <expr><literal type="boolean">true</literal></expr>;</return>
   }</block></expr></expr_stmt>

  
  <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>deleteDoc</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Deleting document: "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
       <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception while deleteing: "</literal> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
   </block_content>}</block></try>
  
	<function><type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>processor</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>DataImportHandlerException</name><argument_list>(<argument><expr><name><name>DataImportHandlerException</name><operator>.</operator><name>SEVERE</name></name></expr></argument>,
          <argument><expr><literal type="string">"Unable to call finish() on UpdateRequestProcessor"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
  
  	
	<function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>deleteByQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Deleting documents from Solr with query: "</literal> <operator>+</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></try>
 
	<function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>commit</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>optimize</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>CommitUpdateCommand</name></type> <name>commit</name> <init>= <expr><operator>new</operator> <call><name>CommitUpdateCommand</name><argument_list>(<argument><expr><name>req</name></expr></argument>,<argument><expr><name>optimize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">110</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></try>
 
	<function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>rollback</name><parameter_list>()</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>RollbackUpdateCommand</name></type> <name>rollback</name> <init>= <expr><operator>new</operator> <call><name>RollbackUpdateCommand</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></try>
 
	<function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>doDeleteAll</name><parameter_list>()</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>DeleteUpdateCommand</name></type> <name>deleteCommand</name> <init>= <expr><operator>new</operator> <call><name>DeleteUpdateCommand</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrWriter</name> <block>{
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     }</block></expr></expr_stmt>
   </block_content>}</block></try>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="block">/* NO-OP */</comment>		
	</block_content>}</block></function>
 
  <function><type><specifier>public</specifier> <name>DebugLogger</name></type> <name>getDebugLogger</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>debugLogger</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>debugLogger</name> <operator>=</operator> <operator>new</operator> <call><name>DebugLogger</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>debugLogger</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This method is used for verbose debugging
   *
   * @param event The event name start.entity ,end.entity ,transformer.row
   * @param name  Name of the entity/transformer
   * @param row   The actual data . Can be a Map&lt;String,object&gt; or a List&lt;Map&lt;String,object&gt;&gt;
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>getDebugLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>START_ENTITY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>END_ENTITY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
          <decl><type ref="prev"/><name>TRANSFORMED_ROW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>ENTITY_META</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>PRE_TRANSFORMER_ROW</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
          <decl><type ref="prev"/><name>START_DOC</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>END_DOC</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>ENTITY_OUT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>ROW_END</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
          <decl><type ref="prev"/><name>TRANSFORMER_EXCEPTION</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>ENTITY_EXCEPTION</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, <decl><type ref="prev"/><name>DISABLE_LOGGING</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
          <decl><type ref="prev"/><name>ENABLE_LOGGING</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestDocBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestDocBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f6ba0b9c2e0</name><operator>..</operator><name>f8bfa216ab7</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestDocBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>contrib</name><operator>/</operator><name>dataimporthandler</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name>dataimport</name><operator>/</operator><name><name>TestDocBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocBuilder</name> extends <name>AbstractDataImportHandlerTestCase</name> <block>{
       <return>return <expr><call><name><name>docs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Do nothing</comment>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>doDeleteAll</name><parameter_list>()</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name>deleteAllCalled</name> <operator>=</operator> <name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocBuilder</name> extends <name>AbstractDataImportHandlerTestCase</name> <block>{
     }</block>
     
     @<name>Override</name>
    <specifier>public</specifier> <name>void</name> <call><name>finish</name><argument_list>()</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <block>{
       <expr><name>finishCalled</name> <operator>=</operator> <name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>;</block></expr>
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></try></block_content></block></function></block></class></block></class></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></constructor></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></constructor></block_content></block></constructor></block_content></block></catch></try></block_content></block></function></block></class></expr></return></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>

</unit>
