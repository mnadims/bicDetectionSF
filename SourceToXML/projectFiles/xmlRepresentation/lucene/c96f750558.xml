<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/c96f750558.java"><expr_stmt><expr><name>From</name> <name>c96f750558a05220afc008e2e1cfb3537627dadb</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">24</literal> <name>Apr</name> <literal type="number">2014</literal> <literal type="number">13</literal><operator>:</operator><literal type="number">57</literal><operator>:</operator><literal type="number">47</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">5610</literal><operator>:</operator> <name>add</name> <name><name>Terms</name><operator>.</operator><name>getMin</name></name><operator>/</operator><name>Max</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1589729 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>bloom</name><operator>/</operator><name><name>BloomFilteringPostingsFormat</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">47</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">42</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">16</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiTerms</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">26</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">74</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NumericUtils</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">91</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTerms</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">196</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AssertingAtomicReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">14</literal> <operator>++</operator>
 <literal type="number">11</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">518</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">17</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTerms</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">42a2c4fa59e</literal><operator>..</operator><name>b64b6b6aaed</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>Other</name>
 
 <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>=</operator> <name>Lucene</name> <literal type="number">4.9.0</literal> <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>=</operator>
 
<name>New</name> <name>Features</name>

<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">5610</literal><operator>:</operator> <name>Add</name> <name><name>Terms</name><operator>.</operator><name>getMin</name></name> <name>and</name> <name><name>Terms</name><operator>.</operator><name>getMax</name></name> <name>to</name> <name>get</name> <name>the</name> <name>lowest</name> <name>and</name>
  <name>highest</name> <name>terms</name></expr><operator>,</operator> <expr><name>and</name> <name><name>NumericUtils</name><operator>.</operator><name>get</name></name><block>{<expr><name>Min</name><operator>/</operator><name>Max</name></expr>}</block><block>{<expr><name>Int</name><operator>/</operator><name>Long</name></expr>}</block> <name>to</name> <name>get</name> <name>the</name>
  <name>minimum</name> <name>numeric</name> <name>values</name> <name>from</name> <name>the</name> <name>provided</name> <name><name>Terms</name><operator>.</operator></name>  (<name>Robert</name> <name>Muir</name></expr><operator>,</operator> <expr><name>Mike</name>
  <name>McCandless</name></expr></expr_stmt>)

 <expr_stmt><expr><name>API</name> <name>Changes</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">5582</literal><operator>:</operator> <name>Deprecate</name> <call><name><name>IndexOutput</name><operator>.</operator><name>length</name></name> <argument_list>(<argument><expr><name>just</name> <name>use</name>
@@ <operator>-</operator><literal type="number">93</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">100</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>Optimizations</name>
   
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">5599</literal><operator>:</operator> <name>HttpReplicator</name> <name>did</name> <name>not</name> <name>properly</name> <name>delegate</name> <name>bulk</name> <call><name>read</name><argument_list>()</argument_list></call> <name>to</name> <name>wrapped</name>
   <name><name>InputStream</name><operator>.</operator></name> (<name>Christoph</name> <name>Kaser</name> <name>via</name> <name>Shai</name> <name>Erera</name></expr></argument>)</argument_list></call>
  

 <name>Bug</name> <name>fixes</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">5600</literal><operator>:</operator> <name>HttpClientBase</name> <name>did</name> <name>not</name> <name>properly</name> <name>consume</name> <name>a</name> <name>connection</name></expr></expr_stmt> <if_stmt><if>if a server
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
index b36dc6d8d38..785c780e6c7 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
@@ -293<operator>,</operator><expr_stmt><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>BloomFilteringPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
       <expr><specifier>public</specifier> <name>boolean</name> <call><name>hasPayloads</name><argument_list>()</argument_list></call> <block>{
         <return>return <expr><call><name><name>delegateTerms</name><operator>.</operator><name>hasPayloads</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
       }</block>

      @<name>Override</name>
      <specifier>public</specifier> <name>BytesRef</name> <call><name>getMin</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt></if></if_stmt>
        <return>return <expr><call><name><name>delegateTerms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr>;</return>
      }

      @<function><type><name>Override</name>
      <specifier>public</specifier> <name>BytesRef</name></type> <name>getMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>delegateTerms</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
     }
     
     final <class>class <name>BloomFilteredTermsEnum</name> <super_list><extends>extends <super><name>TermsEnum</name></super></extends></super_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">624322ad47a</literal><operator>..</operator><literal type="number">54e37e5a05b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
         <expr><name>final</name> <name>long</name> <name>sumDocFreq</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readVLong</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>final</name> <name>int</name> <name>docCount</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>final</name> <name>int</name> <name>longsSize</name> <operator>=</operator> <ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name><name>BlockTreeTermsWriter</name><operator>.</operator><name>VERSION_META_ARRAY</name></name></expr> ?</condition><then> <expr><call><name><name>in</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;

        <expr><name>BytesRef</name> <name>minTerm</name></expr>, <expr><name>maxTerm</name></expr>;
        <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>BlockTreeTermsWriter</name><operator>.</operator><name>VERSION_MIN_MAX_TERMS</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>minTerm</name> <operator>=</operator> <call><name>readBytesRef</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>maxTerm</name> <operator>=</operator> <call><name>readBytesRef</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
          <expr_stmt><expr><name>minTerm</name> <operator>=</operator> <name>maxTerm</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
         <if_stmt><if>if <condition>(<expr><name>docCount</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>docCount</name> <operator>&gt;</operator> <call><name><name>info</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// #docs with field must be &lt;= #docs</comment>
           <throw>throw <expr><operator>new</operator> <call><name>CorruptIndexException</name><argument_list>(<argument><expr><literal type="string">"invalid docCount: "</literal> <operator>+</operator> <name>docCount</name> <operator>+</operator> <literal type="string">" maxDoc: "</literal> <operator>+</operator> <call><name><name>info</name><operator>.</operator><name>getDocCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" (resource="</literal> <operator>+</operator> <name>in</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">181</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
           <throw>throw <argument_list>new <argument><expr><call><name>CorruptIndexException</name><argument_list>(<argument><expr><literal type="string">"invalid sumTotalTermFreq: "</literal> <operator>+</operator> <name>sumTotalTermFreq</name> <operator>+</operator> <literal type="string">" sumDocFreq: "</literal> <operator>+</operator> <name>sumDocFreq</name> <operator>+</operator> <literal type="string">" (resource="</literal> <operator>+</operator> <name>in</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
         }</block>
         <name>final</name> <name>long</name> <name>indexStartFP</name> <operator>=</operator> <call><name><name>indexIn</name><operator>.</operator><name>readVLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FieldReader</name></type> <name>previous</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FieldReader</name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>, <argument><expr><name>numTerms</name></expr></argument>, <argument><expr><name>rootCode</name></expr></argument>, <argument><expr><name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>sumDocFreq</name></expr></argument>, <argument><expr><name>docCount</name></expr></argument>, <argument><expr><name>indexStartFP</name></expr></argument>, <argument><expr><name>longsSize</name></expr></argument>, <argument><expr><name>indexIn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FieldReader</name></type> <name>previous</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>fieldInfo</name><operator>.</operator><name>name</name></name></expr></argument>,       
                                          <argument><expr><operator>new</operator> <call><name>FieldReader</name><argument_list>(<argument><expr><name>fieldInfo</name></expr></argument>, <argument><expr><name>numTerms</name></expr></argument>, <argument><expr><name>rootCode</name></expr></argument>, <argument><expr><name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>sumDocFreq</name></expr></argument>, <argument><expr><name>docCount</name></expr></argument>,
                                                          <argument><expr><name>indexStartFP</name></expr></argument>, <argument><expr><name>longsSize</name></expr></argument>, <argument><expr><name>indexIn</name></expr></argument>, <argument><expr><name>minTerm</name></expr></argument>, <argument><expr><name>maxTerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>CorruptIndexException</name><argument_list>(<argument><expr><literal type="string">"duplicate field: "</literal> <operator>+</operator> <name><name>fieldInfo</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">" (resource="</literal> <operator>+</operator> <name>in</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>BytesRef</name></type> <name>readBytesRef</name><parameter_list>(<parameter><decl><type><name>IndexInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BytesRef</name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/** Reads terms file header. */</comment>
   <function><type><specifier>private</specifier> <name>int</name></type> <name>readHeader</name><parameter_list>(<parameter><decl><type><name>IndexInput</name></type> <name>input</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>CodecUtil</name><operator>.</operator><name>checkHeader</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>TERMS_CODEC_NAME</name></name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">456</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">474</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@ <specifier>public</specifier> class <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
     <expr><name>final</name> <name>long</name> <name>indexStartFP</name></expr>;
     <expr><name>final</name> <name>long</name> <name>rootBlockFP</name></expr>;
     <expr><name>final</name> <name>BytesRef</name> <name>rootCode</name></expr>;
    <expr><name>final</name> <name>BytesRef</name> <name>minTerm</name></expr>;
    <expr><name>final</name> <name>BytesRef</name> <name>maxTerm</name></expr>;
     <expr><name>final</name> <name>int</name> <name>longsSize</name></expr>;
 
     <expr><specifier>private</specifier> <name>final</name> <name><name>FST</name><argument_list type="generic">&lt;<argument><name>BytesRef</name></argument>&gt;</argument_list></name> <name>index</name></expr>;
     <comment type="line">//private boolean DEBUG;</comment>
 
    <expr><call><name>FieldReader</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>fieldInfo</name></expr></argument>, <argument><expr><name>long</name> <name>numTerms</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>rootCode</name></expr></argument>, <argument><expr><name>long</name> <name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>long</name> <name>sumDocFreq</name></expr></argument>, <argument><expr><name>int</name> <name>docCount</name></expr></argument>, <argument><expr><name>long</name> <name>indexStartFP</name></expr></argument>, <argument><expr><name>int</name> <name>longsSize</name></expr></argument>, <argument><expr><name>IndexInput</name> <name>indexIn</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>FieldReader</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>fieldInfo</name></expr></argument>, <argument><expr><name>long</name> <name>numTerms</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>rootCode</name></expr></argument>, <argument><expr><name>long</name> <name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>long</name> <name>sumDocFreq</name></expr></argument>, <argument><expr><name>int</name> <name>docCount</name></expr></argument>,
                <argument><expr><name>long</name> <name>indexStartFP</name></expr></argument>, <argument><expr><name>int</name> <name>longsSize</name></expr></argument>, <argument><expr><name>IndexInput</name> <name>indexIn</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>minTerm</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>maxTerm</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <assert>assert <expr><name>numTerms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
       <name><name>this</name><operator>.</operator><name>fieldInfo</name></name> <operator>=</operator> <name>fieldInfo</name></block></expr></argument>;
       <comment type="line">//DEBUG = BlockTreeTermsReader.DEBUG &amp;&amp; fieldInfo.name.equals("id");</comment>
<argument>@@ <expr><operator>-</operator><literal type="number">472</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">493</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>public</specifier> class <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>indexStartFP</name></name> <operator>=</operator> <name>indexStartFP</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>rootCode</name></name> <operator>=</operator> <name>rootCode</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>longsSize</name></name> <operator>=</operator> <name>longsSize</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>minTerm</name></name> <operator>=</operator> <name>minTerm</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>maxTerm</name></name> <operator>=</operator> <name>maxTerm</name></expr>;
       <comment type="line">// if (DEBUG) {</comment>
       <comment type="line">//   System.out.println("BTTR: seg=" + segment + " field=" + fieldInfo.name + " rootBlockCode=" + rootCode + " divisor=" + indexDivisor);</comment>
       <comment type="line">// }</comment>
@@ <expr><operator>-</operator><literal type="number">498</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">521</literal></expr>,<expr><literal type="number">26</literal> @@ <specifier>public</specifier> class <name>BlockTreeTermsReader</name> extends <name>FieldsProducer</name> <block>{
       }</block></expr>
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name>BytesRef</name> <call><name>getMin</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
      <if_stmt><if>if <condition>(<expr><name>minTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Older index that didn't store min/maxTerm</comment>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>minTerm</name></expr>;</return>
      </block_content>}</block></else></if_stmt></argument_list></call></expr></init></decl></decl_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>getMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>maxTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Older index that didn't store min/maxTerm</comment>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>maxTerm</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/** For debugging -- used by CheckIndex too*/</comment>
     <comment type="line">// TODO: maybe push this into Terms?</comment>
     <function><type><specifier>public</specifier> <name>Stats</name></type> <name>computeStats</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6320ec9a979</literal><operator>..</operator><name>f752f8a2fc1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>BlockTreeTermsWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>packed</name><operator>.</operator><name>PackedInts</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>InnerNode</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <expr_stmt><expr><name>EntryCount</name></expr><operator>,</operator> <expr><name><name>SuffixLength</name><index>[<operator>,</operator><ternary><condition><expr><name>Sub</name></expr>?</condition><then/></ternary>]</index></name></expr><operator>,</operator> <expr><name><name>Byte</name><argument_list type="generic">&lt;<argument><name>sup</name></argument>&gt;</argument_list></name><name><name>SuffixLength</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>sup</name></argument>&gt;</argument_list></name></expr><operator>,</operator> <expr><name>StatsLength</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>lt</name></expr>;</expr_stmt> <expr_stmt><expr><ternary><condition><expr><name>TermStats</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>gt</name></expr></then></ternary></expr>;</expr_stmt><expr_stmt><expr><operator>&lt;</operator><name>sup</name><operator>&gt;</operator><name><name>EntryCount</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>sup</name></argument>&gt;</argument_list></name></expr><operator>,</operator> <expr><name>MetaLength</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>lt</name></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><operator>&lt;</operator><name>i</name><operator>&gt;</operator><name>TermMetadata</name></expr> ?</condition><then> <expr><operator>&lt;</operator><operator>/</operator><name>i</name><operator>&gt;</operator><operator>&amp;</operator><name>gt</name></expr></then></ternary></expr>;</expr_stmt><expr_stmt><expr><operator>&lt;</operator><name>sup</name><operator>&gt;</operator><name><name>EntryCount</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>sup</name></argument>&gt;</argument_list></name><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>TermStats</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <expr_stmt><expr><name>DocFreq</name></expr><operator>,</operator> <expr><name><name>TotalTermFreq</name> <argument_list type="generic">&lt;<argument><operator>/</operator><name>li</name></argument>&gt;</argument_list></name>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>FieldSummary</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <expr_stmt><expr><name>NumFields</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>lt</name></expr>;</expr_stmt><expr_stmt><expr><name>FieldNumber</name></expr><operator>,</operator> <expr><name>NumTerms</name></expr><operator>,</operator> <expr><name>RootCodeLength</name></expr><operator>,</operator> <expr><name><name>Byte</name><argument_list type="generic">&lt;<argument><name>sup</name></argument>&gt;</argument_list></name><name><name>RootCodeLength</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>sup</name></argument>&gt;</argument_list></name></expr><operator>,</operator>
 <expr><ternary><condition><expr><operator>*</operator>                            <name>SumTotalTermFreq</name></expr>?</condition><then/></ternary></expr><operator>,</operator> <expr><name>SumDocFreq</name></expr><operator>,</operator> <expr><name>DocCount</name><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><operator>&lt;</operator><name>sup</name><operator>&gt;</operator><name><name>NumFields</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>sup</name></argument>&gt;</argument_list></name><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
 <operator>*</operator>                            <name>SumTotalTermFreq</name></expr>?</condition><then/></ternary></expr><operator>,</operator> <expr><name>SumDocFreq</name></expr><operator>,</operator> <expr><name>DocCount</name></expr><operator>,</operator> <expr><name>LongsSize</name></expr><operator>,</operator> <expr><name>MinTerm</name></expr><operator>,</operator> <expr><name>MaxTerm</name><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt><expr_stmt><expr><operator>&lt;</operator><name>sup</name><operator>&gt;</operator><name><name>NumFields</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>sup</name></argument>&gt;</argument_list></name><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>Header</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>CodecUtil</name><operator>#</operator><name>writeHeader</name> <name>CodecHeader</name></expr></block_content>}</block><expr_stmt><expr><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>DirOffset</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>DataOutput</name><operator>#</operator><name>writeLong</name> <name>Uint64</name></expr></block_content>}</block><expr_stmt><expr><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
 <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>MinTerm</name></expr><operator>,</operator><expr><name>MaxTerm</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>DataOutput</name><operator>#</operator><name>writeVInt</name> <name>VInt</name></expr></block_content>}</block> <expr_stmt><expr><name>length</name> <name>followed</name> <name>by</name> <name>the</name> <name><name>byte</name><index>[]</index></name><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>EntryCount</name></expr><operator>,</operator><expr><name>SuffixLength</name></expr><operator>,</operator><expr><name>StatsLength</name></expr><operator>,</operator><expr><name>DocFreq</name></expr><operator>,</operator><expr><name>MetaLength</name></expr><operator>,</operator><expr><name>NumFields</name></expr><operator>,</operator>
 <expr><operator>*</operator>        <name>FieldNumber</name></expr><operator>,</operator><expr><name>RootCodeLength</name></expr><operator>,</operator><expr><name>DocCount</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>DataOutput</name><operator>#</operator><name>writeVInt</name> <name>VInt</name></expr></block_content>}</block><expr_stmt><expr><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
 <operator>*</operator>        <name>FieldNumber</name></expr><operator>,</operator><expr><name>RootCodeLength</name></expr><operator>,</operator><expr><name>DocCount</name></expr><operator>,</operator><expr><name>LongsSize</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>DataOutput</name><operator>#</operator><name>writeVInt</name> <name>VInt</name></expr></block_content>}</block><expr_stmt><expr><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>TotalTermFreq</name></expr><operator>,</operator><expr><name>NumTerms</name></expr><operator>,</operator><expr><name>SumTotalTermFreq</name></expr><operator>,</operator><expr><name>SumDocFreq</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> 
  <expr_stmt><expr><operator>*</operator>        <block>{@<expr><name>link</name> <name>DataOutput</name><operator>#</operator><name>writeVLong</name> <name>VLong</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>Footer</name> <operator>--</operator><operator>&amp;</operator><name>gt</name></expr>;</expr_stmt> <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>CodecUtil</name><operator>#</operator><name>writeFooter</name> <name>CodecFooter</name></expr></block_content>}</block><expr_stmt><expr><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">138</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">139</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>packed</name><operator>.</operator><name>PackedInts</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>SumDocFreq</name> <name>is</name> <name>the</name> <name>total</name> <name>number</name> <name>of</name> <name>postings</name></expr><operator>,</operator> <expr><name>the</name> <name>number</name> <name>of</name> <name>term</name><operator>-</operator><name>document</name> <name>pairs</name> <name>across</name>
  <operator>*</operator>        <name>the</name> <name>entire</name> <name><name>field</name><operator>.</operator></name>&lt;<operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>DocCount</name> <name>is</name> <name>the</name> <name>number</name> <name>of</name> <name>documents</name> <name>that</name> <name>have</name> <name>at</name> <name>least</name> <name>one</name> <name>posting</name></expr></expr_stmt> <for>for this field.&lt;/li&gt;
 *    &lt;li&gt;LongsSize records how many long values the postings writer/reader record per term
 *        <control>(<init><expr><name><name>e</name><operator>.</operator><name>g</name><operator>.</operator></name>, <name>to</name> <name>hold</name> <name>freq</name><operator>/</operator><name>prox</name><operator>/</operator><name>doc</name> <name>file</name> <name>offsets</name></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
 <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>MinTerm</name></expr><operator>,</operator> <expr><name>MaxTerm</name> <name>are</name> <name>the</name> <name>lowest</name> <name>and</name> <name>highest</name> <name>term</name> <name>in</name> <name>this</name> <name><name>field</name><operator>.</operator></name>&lt;<operator>/</operator><name>li</name><operator>&gt;</operator>
  <operator>*</operator>    <operator>&lt;</operator><name>li</name><operator>&gt;</operator><name>PostingsHeader</name> <name>and</name> <name>TermMetadata</name> <name>are</name> <name>plugged</name> <name>into</name> <name>by</name> <name>the</name> <name>specific</name> <name>postings</name> <name>implementation</name><operator>:</operator>
  <operator>*</operator>        <name>these</name> <name>contain</name> <name>arbitrary</name> <name>per</name><operator>-</operator><name>file</name> <call><name>data</name> <argument_list>(<argument><expr><name>such</name> <name>as</name> <name>parameters</name> <name>or</name> <name>versioning</name> <name>information</name></expr></argument>)</argument_list></call> 
  <operator>*</operator>        <name>and</name> <name>per</name><operator>-</operator><name>term</name> <call><name>data</name> <argument_list>(<argument><expr><name>such</name> <name>as</name> <name>pointers</name> <name>to</name> <name>inverted</name> <name>files</name></expr></argument>)</argument_list></call><operator>.</operator><operator>&lt;</operator><operator>/</operator><name>li</name><operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">216</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">220</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
   <comment type="block" format="javadoc">/** checksums */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>VERSION_CHECKSUM</name> <operator>=</operator> <literal type="number">3</literal></expr>;
 
  <comment type="block" format="javadoc">/** min/max term */</comment>
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>VERSION_MIN_MAX_TERMS</name> <operator>=</operator> <literal type="number">4</literal></expr>;

   <comment type="block" format="javadoc">/** Current terms format. */</comment>
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>VERSION_CURRENT</name> <operator>=</operator> <name>VERSION_CHECKSUM</name></expr>;
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>VERSION_CURRENT</name> <operator>=</operator> <name>VERSION_MIN_MAX_TERMS</name></expr>;
 
   <comment type="block" format="javadoc">/** Extension of terms index file */</comment>
   <expr><specifier>static</specifier> <name>final</name> <name>String</name> <name>TERMS_INDEX_EXTENSION</name> <operator>=</operator> <literal type="string">"tip"</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">241</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">248</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
     <expr><specifier>public</specifier> <name>final</name> <name>long</name> <name>sumDocFreq</name></expr>;
     <expr><specifier>public</specifier> <name>final</name> <name>int</name> <name>docCount</name></expr>;
     <expr><specifier>private</specifier> <name>final</name> <name>int</name> <name>longsSize</name></expr>;
    <expr><specifier>public</specifier> <name>final</name> <name>BytesRef</name> <name>minTerm</name></expr>;
    <expr><specifier>public</specifier> <name>final</name> <name>BytesRef</name> <name>maxTerm</name></expr>;
 
    <expr><specifier>public</specifier> <call><name>FieldMetaData</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>fieldInfo</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>rootCode</name></expr></argument>, <argument><expr><name>long</name> <name>numTerms</name></expr></argument>, <argument><expr><name>long</name> <name>indexStartFP</name></expr></argument>, <argument><expr><name>long</name> <name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>long</name> <name>sumDocFreq</name></expr></argument>, <argument><expr><name>int</name> <name>docCount</name></expr></argument>, <argument><expr><name>int</name> <name>longsSize</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <call><name>FieldMetaData</name><argument_list>(<argument><expr><name>FieldInfo</name> <name>fieldInfo</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>rootCode</name></expr></argument>, <argument><expr><name>long</name> <name>numTerms</name></expr></argument>, <argument><expr><name>long</name> <name>indexStartFP</name></expr></argument>, <argument><expr><name>long</name> <name>sumTotalTermFreq</name></expr></argument>, <argument><expr><name>long</name> <name>sumDocFreq</name></expr></argument>, <argument><expr><name>int</name> <name>docCount</name></expr></argument>, <argument><expr><name>int</name> <name>longsSize</name></expr></argument>,
                         <argument><expr><name>BytesRef</name> <name>minTerm</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>maxTerm</name></expr></argument>)</argument_list></call> <block>{
       <assert>assert <expr><name>numTerms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
       <name><name>this</name><operator>.</operator><name>fieldInfo</name></name> <operator>=</operator> <name>fieldInfo</name></block></expr>;
       <assert>assert <expr><name>rootCode</name> <operator>!=</operator> <literal type="null">null</literal><operator>:</operator> <literal type="string">"field="</literal> <operator>+</operator> <name><name>fieldInfo</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">" numTerms="</literal> <operator>+</operator> <name>numTerms</name></expr>;</assert>
@@ <operator>-</operator><literal type="number">253</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">263</literal><operator>,</operator><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>sumDocFreq</name></name> <operator>=</operator> <name>sumDocFreq</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>docCount</name></name> <operator>=</operator> <name>docCount</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>longsSize</name></name> <operator>=</operator> <name>longsSize</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>minTerm</name></name> <operator>=</operator> <name>minTerm</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>maxTerm</name></name> <operator>=</operator> <name>maxTerm</name></expr>;
     }</block></block></expr>
   }</block>
 
@@ <operator>-</operator><literal type="number">354</literal></expr>,<expr><literal type="number">16</literal> <operator>+</operator><literal type="number">366</literal></expr>,<expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
         <expr><name>TermsEnum</name> <name>termsEnum</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;
 
         <expr><name>TermsWriter</name> <name>termsWriter</name> <operator>=</operator> <operator>new</operator> <call><name>TermsWriter</name><argument_list>(<argument><expr><call><name><name>fieldInfos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name>BytesRef</name> <name>minTerm</name> <operator>=</operator> <literal type="null">null</literal></expr>;
        <expr><name>BytesRef</name> <name>maxTerm</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr>;
         <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name>BytesRef</name></type> <name>term</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <break>break;</break>
           <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block></expr>
          <if_stmt><if>if <condition>(<expr><name>minTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>minTerm</name> <operator>=</operator> <call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block_content></block></if></if_stmt>}</block>
          <call><name><name>maxTerm</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
           <expr_stmt><expr><call><name><name>termsWriter</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>termsEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></function>
 
        <expr_stmt><expr><call><name><name>termsWriter</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>termsWriter</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><name>minTerm</name></expr></argument>, <argument><expr><ternary><condition><expr><name>minTerm</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>maxTerm</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }
       success <expr_stmt><expr><operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
     } finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1065</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1082</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
     }</block>
 
     <comment type="line">// Finishes all terms in this field</comment>
    <specifier>public</specifier> <name>void</name> <call><name>finish</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>void</name> <call><name>finish</name><argument_list>(<argument><expr><name>BytesRef</name> <name>minTerm</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>maxTerm</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>numTerms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>blockBuilder</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1095</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1112</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
                                      <expr><name>sumTotalTermFreq</name></expr>,
                                      <expr><name>sumDocFreq</name></expr>,
                                      <expr><call><name><name>docsSeen</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr>,
                                     <expr><name>longsSize</name></expr>))</block></expr>;</expr_stmt>
                                     <expr_stmt><expr><name>longsSize</name></expr><operator>,</operator>
                                     <expr><name>minTerm</name></expr><operator>,</operator> <expr><name>maxTerm</name></expr></expr_stmt>)</block_content></block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt>
       } else <block>{<block_content>
         <assert>assert <expr><name>sumTotalTermFreq</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IndexOptions</name><operator>.</operator><name>DOCS_ONLY</name></name> <operator>&amp;&amp;</operator> <name>sumTotalTermFreq</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</assert>
         <assert>assert <expr><name>sumDocFreq</name> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1123</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1141</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
       <for>for<control>(<init><decl><type><name>FieldMetaData</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{<block_content>
         <comment type="line">//System.out.println("  field " + field.fieldInfo.name + " " + field.numTerms + " terms");</comment>
         <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>fieldInfo</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name><name>field</name><operator>.</operator><name>numTerms</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
         <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeVLong</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>numTerms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>rootCode</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>rootCode</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>.</operator><name>rootCode</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>.</operator><name>rootCode</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1133</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1152</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
         <expr><call><name><name>out</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>docCount</name></name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>out</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>longsSize</name></name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>indexOut</name><operator>.</operator><name>writeVLong</name></name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>indexStartFP</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>writeBytesRef</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>field</name><operator>.</operator><name>minTerm</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>writeBytesRef</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>field</name><operator>.</operator><name>maxTerm</name></name></expr></argument>)</argument_list></call></expr>;
       }</block>
       <call><name>writeTrailer</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>dirStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1144</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1165</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>BlockTreeTermsWriter</name> extends <name>FieldsConsumer</name> implements <name>Closeable</name> <block>{
       <expr><call><name><name>IOUtils</name><operator>.</operator><name>closeWhileHandlingException</name></name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>indexOut</name></expr></argument>, <argument><expr><name>postingsWriter</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt></block_content></block></for>
   }</block>

  <specifier>private</specifier> <specifier>static</specifier> <name>void</name> <call><name>writeBytesRef</name><argument_list>(<argument><expr><name>IndexOutput</name> <name>out</name></expr></argument>, <argument><expr><name>BytesRef</name> <name>bytes</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name><name>out</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7ae4aca5a4a</literal><operator>..</operator><literal type="number">4a87726a6f1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">756</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">756</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>CheckIndex</name> <block>{
       <expr><name>final</name> <name>boolean</name> <name>hasPositions</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>hasPositions</name></name><argument_list>()</argument_list></call></expr>;
       <expr><name>final</name> <name>boolean</name> <name>hasPayloads</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>hasPayloads</name></name><argument_list>()</argument_list></call></expr>;
       <expr><name>final</name> <name>boolean</name> <name>hasOffsets</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>hasOffsets</name></name><argument_list>()</argument_list></call></expr>;
      
      <expr><name>BytesRef</name> <name>bb</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr>;
      <assert>assert <expr><call><name><name>bb</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
      <name>final</name> <name>BytesRef</name> <name>minTerm</name> <operator>=</operator> <ternary><condition><expr><name>bb</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <assert>assert <expr><call><name><name>bb</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
      <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>maxTerm</name> <init>= <expr><ternary><condition><expr><name>bb</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
 
       <comment type="line">// term vectors cannot omit TF:</comment>
       <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>expectedHasFreqs</name> <init>= <expr><operator>(</operator><name>isVectors</name> <operator>||</operator> <call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">817</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">825</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>CheckIndex</name> <block>{
           <expr><call><name><name>lastTerm</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt>
         
        <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minTerm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", minTerm="</literal> <operator>+</operator> <name>minTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>maxTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", maxTerm="</literal> <operator>+</operator> <name>maxTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        
         <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>docFreq</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>docFreq</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"docfreq: "</literal> <operator>+</operator> <name>docFreq</name> <operator>+</operator> <literal type="string">" is out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3213a22db46</literal><operator>..</operator><name>b6bfcc41532</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilteredTermsEnum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
  <expr_stmt><expr><operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FilteredTermsEnum</name> extends <name>TermsEnum</name> <block>{
 
  <expr><specifier>private</specifier> <name>BytesRef</name> <name>initialSeekTerm</name> <operator>=</operator> <literal type="null">null</literal></expr>;
  <specifier>private</specifier> <name>BytesRef</name> <name>initialSeekTerm</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>doSeek</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>BytesRef</name></type> <name>actualTerm</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TermsEnum</name></type> <name>tenum</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Which term the enum is currently positioned to. */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>BytesRef</name></type> <name>actualTerm</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** The delegate {@link TermsEnum}. */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TermsEnum</name></type> <name>tenum</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/** Return value, if term should be accepted or the iteration should
    * {@code END}. The {@code *_SEEK} values denote, that after handling the current term
@@ -246,6 +249,7 @@ public abstract class FilteredTermsEnum extends TermsEnum {
         case END:
           // we are supposed to end the enum
           return null;
        // NO: we just fall through and iterate again
       }
     }
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java b/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
index 9ad1a1a61b2..85ef653be19 100644
-- a/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
++ b/lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
@@ -84,6 +84,32 @@ public final class MultiTerms extends Terms {
       return TermsEnum.EMPTY;
     }
   }
  
  @Override
  public BytesRef getMin() throws IOException {
    BytesRef minTerm = null;
    for(Terms terms : subs) {
      BytesRef term = terms.getMin();
      if (minTerm == null || term.compareTo(minTerm) &lt; 0) {
        minTerm = term;
      }
    }

    return minTerm;
  }

  @Override
  public BytesRef getMax() throws IOException {
    BytesRef maxTerm = null;
    for(Terms terms : subs) {
      BytesRef term = terms.getMax();
      if (maxTerm == null || term.compareTo(maxTerm) &gt; 0) {
        maxTerm = term;
      }
    }

    return maxTerm;
  }
 
   @Override
   public TermsEnum iterator(TermsEnum reuse) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/index/Terms.java b/lucene/core/src/java/org/apache/lucene/index/Terms.java
index c0aedfcaabc..533d51e8634 100644
-- a/lucene/core/src/java/org/apache/lucene/index/Terms.java
++ b/lucene/core/src/java/org/apache/lucene/index/Terms.java
@@ -117,4 +117,78 @@ public abstract class Terms {
 
   /** Zero-length array of {@link Terms}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>Terms</name><index>[]</index></name></type> <name>EMPTY_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>Terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Returns the smallest term (in lexicographic order) in the field. 
   *  Note that, just like other term measures, this measure does not 
   *  take deleted documents into account. */</comment>
  <function><type><specifier>public</specifier> <name>BytesRef</name></type> <name>getMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns the largest term (in lexicographic order) in the field. 
   *  Note that, just like other term measures, this measure does not 
   *  take deleted documents into account. */</comment>
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"fallthrough"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>BytesRef</name></type> <name>getMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// empty: only possible from a FilteredTermsEnum...</comment>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// try to seek-by-ord</comment>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>TermsEnum</name></type> <name>iterator</name> <init>= <expr><call><name>iterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>seekExact</name></name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>iterator</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedOperationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ok</comment>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    
    <comment type="line">// otherwise: binary search</comment>
    <decl_stmt><decl><type><name>TermsEnum</name></type> <name>iterator</name> <init>= <expr><call><name>iterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BytesRef</name></type> <name>v</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// empty: only possible from a FilteredTermsEnum...</comment>
      <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BytesRef</name></type> <name>scratch</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>scratch</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// Iterates over digits:</comment>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>

      <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// Binary search current digit to find the highest</comment>
      <comment type="line">// digit before END:</comment>
      <while>while <condition>(<expr><name>low</name> <operator>!=</operator> <name>high</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name><operator>+</operator><name>high</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>scratch</name><operator>.</operator><name>bytes</name><index>[<expr><name><name>scratch</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name>mid</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>seekCeil</name></name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>TermsEnum</name><operator>.</operator><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>)</condition> <block>{<block_content>
          <comment type="line">// Scratch was too high</comment>
          <if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>scratch</name><operator>.</operator><name>length</name></name><operator>--</operator></expr>;</expr_stmt>
            <return>return <expr><name>scratch</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// Scratch was too low; there is at least one term</comment>
          <comment type="line">// still after it:</comment>
          <if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <name>mid</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>

      <comment type="line">// Recurse to next digit:</comment>
      <expr_stmt><expr><name><name>scratch</name><operator>.</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>scratch</name><operator>.</operator><name>grow</name></name><argument_list>(<argument><expr><name><name>scratch</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NumericUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NumericUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">12dcf18b6b3</literal><operator>..</operator><literal type="number">98bb667d441</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NumericUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NumericUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>NumericTokenStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>DoubleField</name></name>;</import> <comment type="line">// javadocs</comment>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FloatField</name></name>;</import> <comment type="line">// javadocs</comment>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>IntField</name></name>;</import> <comment type="line">// javadocs</comment>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>LongField</name></name>;</import> <comment type="line">// javadocs</comment>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilterAtomicReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilteredTermsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>NumericRangeFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>NumericRangeQuery</name></name>;</import> <comment type="line">// for javadocs</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">464</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">468</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NumericUtils</name> <block>{
    <expr><operator>*</operator>         <name>terms</name> <name>with</name> <name>a</name> <name>shift</name> <name>value</name> <name><name>of</name> <argument_list type="generic">&lt;<argument><name>tt</name></argument>&gt;</argument_list></name><literal type="number">0</literal><operator>&lt;</operator><operator>/</operator><name>tt</name><operator>&gt;</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>TermsEnum</name> <call><name>filterPrefixCodedLongs</name><argument_list>(<argument><expr><name>TermsEnum</name> <name>termsEnum</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><operator>new</operator> <class><super><name>FilteredTermsEnum</name></super><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list> <block>{
    <return>return <expr><operator>new</operator> <class><super><name>SeekingNumericFilteredTermsEnum</name></super><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list> <block>{

       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>protected</specifier> <name>AcceptStatus</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><ternary><condition><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getPrefixCodedLongShift</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>AcceptStatus</name><operator>.</operator><name>YES</name></name></expr> </then><else>: <expr><name><name>AcceptStatus</name><operator>.</operator><name>END</name></name></expr></else></ternary></expr>;</return>
       <expr_stmt/></block_content></block></function></block></class></expr></return></block></class></expr></return>}</block></expr>
     }</block></expr>;</expr_stmt>
   }
  

   <comment type="block" format="javadoc">/**
    * Filters the given {@link TermsEnum} by accepting only prefix coded 32 bit
    * terms with a shift value of &lt;tt&gt;0&lt;/tt&gt;.
@@ -482,7 +487,7 @@ public final class NumericUtils {
    *         terms with a shift value of &lt;tt&gt;0&lt;/tt&gt;.
    */</comment>
   public <function><type><specifier>static</specifier> <name>TermsEnum</name></type> <name>filterPrefixCodedInts</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>termsEnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>FilteredTermsEnum</name></super><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list> <block>{
    <return>return <expr><operator>new</operator> <class><super><name>SeekingNumericFilteredTermsEnum</name></super><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list> <block>{
       
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>protected</specifier> <name>AcceptStatus</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>BytesRef</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">490</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">495</literal></expr><operator>,</operator><expr><literal type="number">85</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NumericUtils</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></function><empty_stmt>;</empty_stmt>
   }</block></class>

  <comment type="block" format="javadoc">/** Just like FilteredTermsEnum, except it adds a limited
   *  seekCeil implementation that only works with {@link
   *  #filterPrefixCodedInts} and {@link
   *  #filterPrefixCodedLongs}. */</comment>
  <specifier>private</specifier> <specifier>static</specifier> <specifier>abstract</specifier> <name>class</name> <name>SeekingNumericFilteredTermsEnum</name> extends <name>FilteredTermsEnum</name> <block>{
    <expr><specifier>public</specifier> <call><name>SeekingNumericFilteredTermsEnum</name><argument_list>(<argument><expr><name>final</name> <name>TermsEnum</name> <name>tenum</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><name>tenum</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    }</block>

    @<name>Override</name>
    @<call><name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"fallthrough"</literal></expr></argument>)</argument_list></call>
    <specifier>public</specifier> <name>SeekStatus</name> <call><name>seekCeil</name><argument_list>(<argument><expr><name>BytesRef</name> <name>term</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{

      <comment type="line">// NOTE: This is not general!!  It only handles YES</comment>
      <comment type="line">// and END, because that's all we need for the numeric</comment>
      <comment type="line">// case here</comment>

      <expr><name>SeekStatus</name> <name>status</name> <operator>=</operator> <call><name><name>tenum</name><operator>.</operator><name>seekCeil</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>;</return>
      <expr_stmt/></block_content></block></if></if_stmt>}</block>

      <name>actualTerm</name> <operator>=</operator> <call><name><name>tenum</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr>;</return>

      <if_stmt><if>if <condition>(<expr><call><name>accept</name><argument_list>(<argument><expr><name>actualTerm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>AcceptStatus</name><operator>.</operator><name>YES</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>status</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>SeekStatus</name><operator>.</operator><name>END</name></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    }</block></class></expr></return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Terms</name></type> <name>intTerms</name><parameter_list>(<parameter><decl><type><name>Terms</name></type> <name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name><name>FilterAtomicReader</name><operator>.</operator><name>FilterTerms</name></name></super><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
          <return>return <expr><call><name>filterPrefixCodedInts</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Terms</name></type> <name>longTerms</name><parameter_list>(<parameter><decl><type><name>Terms</name></type> <name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name><name>FilterAtomicReader</name><operator>.</operator><name>FilterTerms</name></name></super><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
          <return>return <expr><call><name>filterPrefixCodedLongs</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>iterator</name></name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr>;</return>
  </block_content>}</block></function>
    
  <comment type="block" format="javadoc">/** Returns the minimum int value indexed into this
   *  numeric field. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMinInt</name><parameter_list>(<parameter><decl><type><name>Terms</name></type> <name>terms</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// All shift=0 terms are sorted first, so we don't need</comment>
    <comment type="line">// to filter the incoming terms; we can just get the</comment>
    <comment type="line">// min: </comment>
    <return>return <expr><call><name><name>NumericUtils</name><operator>.</operator><name>prefixCodedToInt</name></name><argument_list>(<argument><expr><call><name><name>terms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns the maximum int value indexed into this
   *  numeric field. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxInt</name><parameter_list>(<parameter><decl><type><name>Terms</name></type> <name>terms</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>NumericUtils</name><operator>.</operator><name>prefixCodedToInt</name></name><argument_list>(<argument><expr><call><name>intTerms</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMax</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns the minimum long value indexed into this
   *  numeric field. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMinLong</name><parameter_list>(<parameter><decl><type><name>Terms</name></type> <name>terms</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// All shift=0 terms are sorted first, so we don't need</comment>
    <comment type="line">// to filter the incoming terms; we can just get the</comment>
    <comment type="line">// min: </comment>
    <return>return <expr><call><name><name>NumericUtils</name><operator>.</operator><name>prefixCodedToLong</name></name><argument_list>(<argument><expr><call><name><name>terms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns the maximum long value indexed into this
   *  numeric field. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMaxLong</name><parameter_list>(<parameter><decl><type><name>Terms</name></type> <name>terms</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>NumericUtils</name><operator>.</operator><name>prefixCodedToLong</name></name><argument_list>(<argument><expr><call><name>longTerms</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMax</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
   
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTerms</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTerms</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..ac39b1a0ec7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTerms</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">196</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name></name>;</package>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>CannedBinaryTokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>DoubleField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FloatField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>IntField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>LongField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>NumericUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>TestUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>TestTerms</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testTermMinMaxBasic</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>newTextField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"a b c cc ddd"</literal></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><literal type="string">"ddd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testTermMinMaxRandom</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BytesRef</name></type> <name>minTerm</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BytesRef</name></type> <name>maxTerm</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>numDocs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><operator>new</operator> <call><name>TextField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//System.out.println("  doc " + i);</comment>
      <decl_stmt><decl><type><name><name>CannedBinaryTokenStream</name><operator>.</operator><name>BinaryToken</name><index>[]</index></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <name><name>CannedBinaryTokenStream</name><operator>.</operator><name>BinaryToken</name><index>[<expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>tokens</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBytes</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BytesRef</name></type> <name>tokenBytes</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//System.out.println("    token " + tokenBytes);</comment>
        <if_stmt><if>if <condition>(<expr><name>minTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>tokenBytes</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minTerm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">//System.out.println("      ** new min");</comment>
          <expr_stmt><expr><name>minTerm</name> <operator>=</operator> <name>tokenBytes</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxTerm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>tokenBytes</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>maxTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">//System.out.println("      ** new max");</comment>
          <expr_stmt><expr><name>maxTerm</name> <operator>=</operator> <name>tokenBytes</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>tokens</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name><name>CannedBinaryTokenStream</name><operator>.</operator><name>BinaryToken</name></name><argument_list>(<argument><expr><name>tokenBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setTokenStream</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CannedBinaryTokenStream</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>minTerm</name></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>maxTerm</name></expr></argument>, <argument><expr><call><name><name>terms</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testIntFieldMinMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minValue</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxValue</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>numDocs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>minValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMinInt</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMaxInt</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testLongFieldMinMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>minValue</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>maxValue</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>numDocs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>num</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>minValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMinLong</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMaxLong</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testFloatFieldMinMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>minValue</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>maxValue</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>numDocs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>num</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextFloat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>minValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FloatField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>sortableIntToFloat</name></name><argument_list>(<argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMinInt</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>sortableIntToFloat</name></name><argument_list>(<argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMaxInt</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoubleFieldMinMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RandomIndexWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>RandomIndexWriter</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numDocs</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>minValue</name> <init>= <expr><name><name>Double</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>maxValue</name> <init>= <expr><name><name>Double</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>numDocs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>minValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DoubleField</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Terms</name></type> <name>terms</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getTerms</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>sortableLongToDouble</name></name><argument_list>(<argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMinLong</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>, <argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>sortableLongToDouble</name></name><argument_list>(<argument><expr><call><name><name>NumericUtils</name><operator>.</operator><name>getMaxLong</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AssertingAtomicReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AssertingAtomicReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">086cb21fb89</literal><operator>..</operator><name>b6d7c2ad1c2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AssertingAtomicReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>AssertingAtomicReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>AssertingAtomicReader</name> extends <name>FilterAtomicReader</name> <block>{
       <return>return <expr><operator>new</operator> <call><name>AssertingTermsEnum</name><argument_list>(<argument><expr><name>termsEnum</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>getMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>BytesRef</name></type> <name>v</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <assert>assert <expr><name>v</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>v</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
      <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BytesRef</name></type> <name>getMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>BytesRef</name></type> <name>v</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <assert>assert <expr><name>v</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>v</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
      <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>TermsEnum</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>TermsEnum</name></type> <name>reuse</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <comment type="line">// TODO: should we give this thing a random to be super-evil,</comment>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function>

</unit>
