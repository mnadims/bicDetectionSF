<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/e92a91ed18.java"><expr_stmt><expr><name>From</name> <name>e92a91ed185f0f9be9b136ecade6d5a43f1ae00f</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">24</literal> <name>Jun</name> <literal type="number">2010</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">17</literal><operator>:</operator><literal type="number">52</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">2410</literal><operator>:</operator> <operator>~</operator><literal type="number">2.5X</literal> <name>speed</name> <name>up</name></expr></expr_stmt> <for>for exact <control>(<init><expr><name>slop</name><operator>=</operator><literal type="number">0</literal></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>PhraseQuery</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@957465 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExactPhraseScorer</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">332</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">81</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">57</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseScorer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SloppyPhraseScorer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">113</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">9</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">547</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">72</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>d6425791efd</name><operator>..</operator><name>ca458187d56</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>New</name> <name>features</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2489</literal><operator>:</operator> <name>Added</name> <call><name>PerFieldCodecWrapper</name> <argument_list>(<argument><expr><name>in</name> <name><name>oal</name><operator>.</operator><name>index</name><operator>.</operator><name>codecs</name></name></expr></argument>)</argument_list></call> <name>which</name>
   <name>lets</name> <name>you</name> <name>set</name> <name>the</name> <name>Codec</name> <name>per</name> <call><name>field</name> <argument_list>(<argument><expr><name>Mike</name> <name>McCandless</name></expr></argument>)</argument_list></call>

<name>Optimizations</name>

<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2410</literal><operator>:</operator> <operator>~</operator><literal type="number">2.5X</literal> <name>speedup</name> <name>on</name> <call><name>exact</name> <argument_list>(<argument><expr><name>slop</name><operator>=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <name>PhraseQuery</name> <name><name>matching</name><operator>.</operator></name>
  (<name>Mike</name> <name>McCandless</name></expr></expr_stmt></block_content></block></for>)
   
 <expr_stmt><expr><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>=</operator> <name>Lucene</name> <literal type="number">3.x</literal> <operator>(</operator><name>not</name> <name>yet</name> <name>released</name><operator>)</operator> <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>=</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExactPhraseScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExactPhraseScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">55825b48ad2</literal><operator>..</operator><literal type="number">14ab22de1af</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExactPhraseScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ExactPhraseScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">39</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">317</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>*</name></name>;</import>
 
<class><specifier>final</specifier> class <name>ExactPhraseScorer</name> <super_list><extends>extends <super><name>PhraseScorer</name></super></extends></super_list> <block>{
<class><specifier>final</specifier> class <name>ExactPhraseScorer</name> <super_list><extends>extends <super><name>Scorer</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Weight</name></type> <name>weight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>norms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>value</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SCORE_CACHE_SIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>scoreCache</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name>SCORE_CACHE_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>endMinus1</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>CHUNK</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>gen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>counts</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>CHUNK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>gens</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>CHUNK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>boolean</name></type> <name>noDocs</name></decl>;</decl_stmt>
 
  <constructor><name>ExactPhraseScorer</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name><name>DocsAndPositionsEnum</name><index>[]</index></name></type> <name>postings</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>offsets</name></decl></parameter>,
      <parameter><decl><type><name>Similarity</name></type> <name>similarity</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>norms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <class><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>ChunkState</name> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>posEnum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>useAdvance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>posUpto</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>posLimit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lastPos</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ChunkState</name><parameter_list>(<parameter><decl><type><name>DocsAndPositionsEnum</name></type> <name>posEnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useAdvance</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>posEnum</name></name> <operator>=</operator> <name>posEnum</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>useAdvance</name></name> <operator>=</operator> <name>useAdvance</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ChunkState</name><index>[]</index></name></type> <name>chunkStates</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>docID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>freq</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[]</index></name> <name>postings</name></expr></argument>,
                    <argument><expr><name>Similarity</name> <name>similarity</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>norms</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>norms</name></name> <operator>=</operator> <name>norms</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>chunkStates</name> <operator>=</operator> <operator>new</operator> <name><name>ChunkState</name><index>[<expr><name><name>postings</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>endMinus1</name> <operator>=</operator> <name><name>postings</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>postings</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

      <comment type="line">// Coarse optimization: advance(target) is fairly</comment>
      <comment type="line">// costly, so, if the relative freq of the 2nd</comment>
      <comment type="line">// rarest term is not that much (&gt; 1/5th) rarer than</comment>
      <comment type="line">// the first term, then we just use .nextDoc() when</comment>
      <comment type="line">// ANDing.  This buys ~15% gain for phrases where</comment>
      <comment type="line">// freq of rarest 2 terms is close:</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>useAdvance</name> <init>= <expr><name><name>postings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>docFreq</name> <operator>&gt;</operator> <literal type="number">5</literal><operator>*</operator><name><name>postings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>docFreq</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>chunkStates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ChunkState</name><argument_list>(<argument><expr><name><name>postings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>postings</name></expr></argument>, <argument><expr><operator>-</operator><name><name>postings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name>useAdvance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>postings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>postings</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>noDocs</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SCORE_CACHE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>scoreCache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getSimilarity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>tf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></for>
   </block_content>}</block></constructor>
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <specifier>final</specifier> <name>float</name></type> <name>phraseFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// sort list with pq</comment>
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>PhrasePositions</name></type> <name>pp</name> <init>= <expr><name>first</name></expr></init></decl>;</init> <condition><expr><name>pp</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>pp</name> <operator>=</operator> <name><name>pp</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>firstPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				  <comment type="line">// build pq from list</comment>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pqToList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>					  <comment type="line">// rebuild list from pq</comment>

    <comment type="line">// for counting how many times the exact phrase is found in current document,</comment>
    <comment type="line">// just count how many times all PhrasePosition's have exactly the same position.   </comment>
    <decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>					  <comment type="line">// find position w/ all terms</comment>
      <while>while <condition>(<expr><name><name>first</name><operator>.</operator><name>position</name></name> <operator>&lt;</operator> <name><name>last</name><operator>.</operator><name>position</name></name></expr>)</condition> <block>{<block_content>	  <comment type="line">// scan forward in first</comment>
        <do>do <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>first</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>freq</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><name><name>first</name><operator>.</operator><name>position</name></name> <operator>&lt;</operator> <name><name>last</name><operator>.</operator><name>position</name></name></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>firstToLast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>freq</name><operator>++</operator></expr>;</expr_stmt>					  <comment type="line">// all equal: a match</comment>
    </block_content>}</block> while <condition>(<expr><call><name><name>last</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>nextDoc</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>

      <comment type="line">// first (rarest) term</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doc</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>posEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>docID</name> <operator>=</operator> <name>doc</name></expr>;</expr_stmt>
        <return>return <expr><name>doc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// not-first terms</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>chunkStates</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ChunkState</name></type> <name>cs</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>doc2</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>useAdvance</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>doc2</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>doc2</name> <operator>=</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <while>while<condition>(<expr><name>doc2</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// safety net -- fallback to .advance if we've</comment>
            <comment type="line">// done too many .nextDocs</comment>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>iter</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>doc2</name> <operator>=</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>doc2</name> <operator>=</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc2</name> <operator>&gt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>chunkStates</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// this doc has all the terms -- now test whether</comment>
        <comment type="line">// phrase occurs</comment>
        <expr_stmt><expr><name>docID</name> <operator>=</operator> <name>doc</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name>phraseFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>docID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// first term</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>posEnum</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>docID</name> <operator>=</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>;</expr_stmt>
      <return>return <expr><name>doc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      
      <comment type="line">// not-first terms</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>chunkStates</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>doc2</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>posEnum</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc2</name> <operator>&lt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>doc2</name> <operator>=</operator> <name><name>chunkStates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>posEnum</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>doc2</name> <operator>&gt;</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>chunkStates</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// this doc has all the terms -- now test whether</comment>
        <comment type="line">// phrase occurs</comment>
        <expr_stmt><expr><name>docID</name> <operator>=</operator> <name>doc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name>phraseFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>docID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>doc</name> <operator>=</operator> <name><name>chunkStates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>posEnum</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <name><name>DocsEnum</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>docID</name> <operator>=</operator> <name>doc</name></expr>;</expr_stmt>
        <return>return <expr><name>doc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"ExactPhraseScorer("</literal> <operator>+</operator> <name>weight</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// used by MultiPhraseQuery</comment>
  <function><type><name>float</name></type> <name>currentFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>freq</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>docID</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>docID</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>float</name></type> <name>score</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>raw</name></decl>;</decl_stmt> <comment type="line">// raw score</comment>
    <if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;</operator> <name>SCORE_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>raw</name> <operator>=</operator> <name><name>scoreCache</name><index>[<expr><name>freq</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>raw</name> <operator>=</operator> <call><name>getSimilarity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>tf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>freq</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><ternary><condition><expr><name>norms</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>raw</name></expr> </then><else>: <expr><name>raw</name> <operator>*</operator> <call><name>getSimilarity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decodeNormValue</name><argument_list>(<argument><expr><name><name>norms</name><index>[<expr><name>docID</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> <comment type="line">// normalize</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>phraseFreq</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// init chunks</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>chunkStates</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>ChunkState</name></type> <name>cs</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>posLimit</name></name> <operator>=</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>freq</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lastPos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>chunkStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>chunkEnd</name> <init>= <expr><name>CHUNK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// process chunk by chunk</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>end</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// TODO: we could fold in chunkStart into offset and</comment>
    <comment type="line">// save one subtract per pos incr</comment>

    <while>while<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>

      <expr_stmt><expr><name>gen</name><operator>++</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>gen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// wraparound</comment>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>gens</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gen</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// first term</comment>
      <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ChunkState</name></type> <name>cs</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name>chunkEnd</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>cs</name><operator>.</operator><name>lastPos</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lastPos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>posIndex</name> <init>= <expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name>chunkStart</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>counts</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <assert>assert <expr><name><name>gens</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>!=</operator> <name>gen</name></expr>;</assert>
            <expr_stmt><expr><name><name>gens</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>=</operator> <name>gen</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name> <operator>==</operator> <name><name>cs</name><operator>.</operator><name>posLimit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block>

      <comment type="line">// middle terms</comment>
      <decl_stmt><decl><type><name>boolean</name></type> <name>any</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>t</name><operator>&lt;</operator><name>endMinus1</name></expr>;</condition><incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ChunkState</name></type> <name>cs</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>any</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name>chunkEnd</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>cs</name><operator>.</operator><name>lastPos</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lastPos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>posIndex</name> <init>= <expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name>chunkStart</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>posIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gens</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>==</operator> <name>gen</name> <operator>&amp;&amp;</operator> <name><name>counts</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>
              <comment type="line">// viable</comment>
              <expr_stmt><expr><name><name>counts</name><index>[<expr><name>posIndex</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
              <expr_stmt><expr><name>any</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name> <operator>==</operator> <name><name>cs</name><operator>.</operator><name>posLimit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>any</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>any</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// petered out for this chunk</comment>
        <expr_stmt><expr><name>chunkStart</name> <operator>+=</operator> <name>CHUNK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunkEnd</name> <operator>+=</operator> <name>CHUNK</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// last term</comment>

      <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ChunkState</name></type> <name>cs</name> <init>= <expr><name><name>chunkStates</name><index>[<expr><name>endMinus1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name>chunkEnd</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>cs</name><operator>.</operator><name>lastPos</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lastPos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>posIndex</name> <init>= <expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name>chunkStart</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>posIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gens</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>==</operator> <name>gen</name> <operator>&amp;&amp;</operator> <name><name>counts</name><index>[<expr><name>posIndex</name></expr>]</index></name> <operator>==</operator> <name>endMinus1</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>freq</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name> <operator>==</operator> <name><name>cs</name><operator>.</operator><name>posLimit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>posUpto</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cs</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>cs</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <call><name><name>cs</name><operator>.</operator><name>posEnum</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block>

      <expr_stmt><expr><name>chunkStart</name> <operator>+=</operator> <name>CHUNK</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>chunkEnd</name> <operator>+=</operator> <name>CHUNK</name></expr>;</expr_stmt>
    </block_content>}</block></while>

     <return>return <expr><name>freq</name></expr>;</return>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d8127fc3eb3</name><operator>..</operator><name>cfd4eefb268</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">32</literal> <operator>+</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">64</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
       <if_stmt><if>if <condition>(<expr><call><name><name>termArrays</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>                  <comment type="line">// optimize zero-term case</comment>
         <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
 
      <name><name>DocsAndPositionsEnum</name><index>[]</index></name> <name>postings</name> <operator>=</operator> <operator>new</operator> <name><name>DocsAndPositionsEnum</name><index>[<expr><call><name><name>termArrays</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></block></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>postings</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Bits</name></type> <name>delDocs</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <decl_stmt><decl><type><name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[]</index></name></type> <name>postingsFreqs</name> <init>= <expr><operator>new</operator> <name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[<expr><call><name><name>termArrays</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>postingsFreqs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name><name>Term</name><index>[]</index></name></type> <name>terms</name> <init>= <expr><call><name><name>termArrays</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <decl_stmt><decl><type><specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>postingsEnum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>docFreq</name></decl>;</decl_stmt>

         <if_stmt><if>if <condition>(<expr><name><name>terms</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>postingsEnum</name> <operator>=</operator> <operator>new</operator> <call><name>UnionDocsAndPositionsEnum</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// coarse -- this overcounts since a given doc can</comment>
          <comment type="line">// have more than one terms:</comment>
          <expr_stmt><expr><name>docFreq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>terms</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>docFreq</name> <operator>+=</operator> <call><name><name>reader</name><operator>.</operator><name>docFreq</name></name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
         </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>postingsEnum</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>termPositionsEnum</name></name><argument_list>(<argument><expr><call><name><name>MultiFields</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>final</name> <name>BytesRef</name> <name>text</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>text</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
          <expr_stmt><expr><name>postingsEnum</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>termPositionsEnum</name></name><argument_list>(<argument><expr><name>delDocs</name></expr></argument>,
                                                   <argument><expr><name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>text</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                  <expr_stmt><expr><name>text</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>postingsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>MultiFields</name><operator>.</operator><name>getTermDocsEnum</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>delDocs</name></expr></argument>, <argument><expr><name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <comment type="line">// term does exist, but has no positions</comment>
              <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"field \""</literal> <operator>+</operator> <name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term="</literal> <operator>+</operator> <name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>text</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <comment type="line">// term does not exist</comment>
              <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>docFreq</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>docFreq</name></name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
        <if_stmt><if>if <condition>(<expr><name>postingsEnum</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>postingsFreqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name></name><argument_list>(<argument><expr><name>postingsEnum</name></expr></argument>, <argument><expr><name>docFreq</name></expr></argument>, <argument><expr><call><name><name>positions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
 
        <expr_stmt><expr><name><name>postings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>postingsEnum</name></expr>;</expr_stmt>
      <comment type="line">// sort by increasing docFreq order</comment>
      <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>postingsFreqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>new</operator> <call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><call><name>getPositions</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                     <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><operator>new</operator> <call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><call><name>getPositions</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
      if <argument><expr><operator>(</operator><name>slop</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <block>{
        <expr><name>ExactPhraseScorer</name> <name>s</name> <operator>=</operator> <operator>new</operator> <call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                                    <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></argument></argument_list></call></expr></return></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>noDocs</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>s</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      }</block></class> <if_stmt><else>else <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                       <argument><expr><name>slop</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
     }</block></class>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">231</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">263</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
       <expr><call><name><name>fieldExpl</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"fieldWeight("</literal><operator>+</operator><call><name>getQuery</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" in "</literal><operator>+</operator><name>doc</name><operator>+</operator>
                                <literal type="string">"), product of:"</literal></expr></argument>)</argument_list></call></expr>;
 
      <expr><name>PhraseScorer</name> <name>scorer</name> <operator>=</operator> <operator>(</operator><name>PhraseScorer</name><operator>)</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>Scorer</name> <name>scorer</name> <operator>=</operator> <operator>(</operator><name>Scorer</name><operator>)</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
       <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>Explanation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="string">"no matching docs"</literal></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/></block_content></block></if></if_stmt>}</block>

       <name>Explanation</name> <name>tfExplanation</name> <operator>=</operator> <operator>new</operator> <call><name>Explanation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>phraseFreq</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>d</name> <operator>==</operator> <name>doc</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>scorer</name><operator>.</operator><name>currentFreq</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>phraseFreq</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>phraseFreq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ExactPhraseScorer</name><operator>)</operator> <name>scorer</name><operator>)</operator><operator>.</operator><call><name>currentFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>phraseFreq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SloppyPhraseScorer</name><operator>)</operator> <name>scorer</name><operator>)</operator><operator>.</operator><call><name>currentFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>phraseFreq</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

       <expr_stmt><expr><call><name><name>tfExplanation</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>similarity</name><operator>.</operator><name>tf</name></name><argument_list>(<argument><expr><name>phraseFreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>tfExplanation</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"tf(phraseFreq="</literal> <operator>+</operator> <name>phraseFreq</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>fieldExpl</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>tfExplanation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">456</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">499</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>class</name> <name>UnionDocsAndPositionsEnum</name> extends <name>DocsAndPositionsEnum</name> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>DocsAndPositionsEnum</name></argument>&gt;</argument_list></name> <name>docsEnums</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>DocsAndPositionsEnum</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <expr><name>final</name> <name>Bits</name> <name>delDocs</name> <operator>=</operator> <call><name><name>MultiFields</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>(<argument><expr><name>indexReader</name></expr></argument>)</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>terms</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>text</name> <init>= <expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>text</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>DocsAndPositionsEnum</name></type> <name>postings</name> <init>= <expr><call><name><name>indexReader</name><operator>.</operator><name>termPositionsEnum</name></name><argument_list>(<argument><expr><name>delDocs</name></expr></argument>,
                                                                     <argument><expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call></expr></argument>,
                                                                    <argument><expr><operator>new</operator> <call><name>BytesRef</name><argument_list>(<argument><expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>text</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                                    <expr_stmt><expr><name>text</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for></block></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>postings</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>docsEnums</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>postings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>MultiFields</name><operator>.</operator><name>getTermDocsEnum</name></name><argument_list>(<argument><expr><name>indexReader</name></expr></argument>, <argument><expr><name>delDocs</name></expr></argument>, <argument><expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// term does exist, but has no positions</comment>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"field \""</literal> <operator>+</operator> <name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>field</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term="</literal> <operator>+</operator> <name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>text</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></else></if_stmt>
     }
 
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">54c1d258144</literal><operator>..</operator><name>f583174ba0a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
       <return>return <expr><call><name><name>super</name><operator>.</operator><name>rewrite</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <class><specifier>static</specifier> class <name>PostingsAndFreq</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>PostingsAndFreq</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocsAndPositionsEnum</name></type> <name>postings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>docFreq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PostingsAndFreq</name><parameter_list>(<parameter><decl><type><name>DocsAndPositionsEnum</name></type> <name>postings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docFreq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>postings</name></name> <operator>=</operator> <name>postings</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docFreq</name></name> <operator>=</operator> <name>docFreq</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>PostingsAndFreq</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><name>docFreq</name> <operator>-</operator> <name><name>other</name><operator>.</operator><name>docFreq</name></name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

   <class><specifier>private</specifier> class <name>PhraseWeight</name> <super_list><extends>extends <super><name>Weight</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Similarity</name></type> <name>similarity</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>value</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
       <if_stmt><if>if <condition>(<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			  <comment type="line">// optimize zero-term case</comment>
         <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
 
      <name><name>DocsAndPositionsEnum</name><index>[]</index></name> <name>postings</name> <operator>=</operator> <operator>new</operator> <name><name>DocsAndPositionsEnum</name><index>[<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>PostingsAndFreq</name><index>[]</index></name></type> <name>postingsFreqs</name> <init>= <expr><operator>new</operator> <name><name>PostingsAndFreq</name><index>[<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>Bits</name></type> <name>delDocs</name> <init>= <expr><call><name><name>MultiFields</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>Term</name></type> <name>t</name> <init>= <expr><call><name><name>terms</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">200</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
             <return>return <expr><literal type="null">null</literal></expr>;</return>
           }</block></expr></expr_stmt>
         </block_content>}</block></for>
        <expr_stmt><expr><name><name>postings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>postingsEnum</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>postingsFreqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>PostingsAndFreq</name><argument_list>(<argument><expr><name>postingsEnum</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>docFreq</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>field</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>positions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></class>

      <comment type="line">// sort by increasing docFreq order</comment>
      <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>postingsFreqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>				  <comment type="line">// optimize exact case</comment>
        <return>return <expr><operator>new</operator> <call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><call><name>getPositions</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                     <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <if type="elseif">else
      if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>				  <comment type="line">// optimize exact case</comment>
        <decl_stmt><decl><type><name>ExactPhraseScorer</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                                    <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>noDocs</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>s</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
         <return>return
          <expr><operator>new</operator> <call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><call><name>getPositions</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>slop</name></expr></argument>,
          <argument><expr><operator>new</operator> <call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>slop</name></expr></argument>,
                                  <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></return>

      </block_content>}</block></else></if_stmt>
     }
 
     @<expr_stmt><expr><name>Override</name>
@@ <operator>-</operator><literal type="number">244</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">271</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
       <expr><call><name><name>fieldExpl</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"fieldWeight("</literal><operator>+</operator><name>field</name><operator>+</operator><literal type="string">":"</literal><operator>+</operator><name>query</name><operator>+</operator><literal type="string">" in "</literal><operator>+</operator><name>doc</name><operator>+</operator>
                                <literal type="string">"), product of:"</literal></expr></argument>)</argument_list></call></expr>;
 
      <expr><name>PhraseScorer</name> <name>scorer</name> <operator>=</operator> <operator>(</operator><name>PhraseScorer</name><operator>)</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>Scorer</name> <name>scorer</name> <operator>=</operator> <operator>(</operator><name>Scorer</name><operator>)</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
       <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>Explanation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="string">"no matching docs"</literal></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/></block_content></block></if></if_stmt>}</block>
       <name>Explanation</name> <name>tfExplanation</name> <operator>=</operator> <operator>new</operator> <call><name>Explanation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>phraseFreq</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>d</name> <operator>==</operator> <name>doc</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>scorer</name><operator>.</operator><name>currentFreq</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>phraseFreq</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>doc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>phraseFreq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ExactPhraseScorer</name><operator>)</operator> <name>scorer</name><operator>)</operator><operator>.</operator><call><name>currentFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>phraseFreq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SloppyPhraseScorer</name><operator>)</operator> <name>scorer</name><operator>)</operator><operator>.</operator><call><name>currentFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>phraseFreq</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

       <expr_stmt><expr><call><name><name>tfExplanation</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>similarity</name><operator>.</operator><name>tf</name></name><argument_list>(<argument><expr><name>phraseFreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>tfExplanation</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"tf(phraseFreq="</literal> <operator>+</operator> <name>phraseFreq</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ab15ae926c3</name><operator>..</operator><literal type="number">4dc62cdea60</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>

 <comment type="block" format="javadoc">/** Expert: Scoring functionality for phrase queries.
  * &lt;br&gt;A document is considered matching if it contains the phrase-query terms  
  * at "valid" positions. What "valid positions" are
@@ -43,7 +41,7 @@ abstract class PhraseScorer extends Scorer {
 
   private float freq; //phrase frequency in current doc as computed by phraseFreq().
 
  PhraseScorer(Weight weight, DocsAndPositionsEnum[] postings, int[] offsets,
  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,
       Similarity similarity, byte[] norms) {
     super(similarity);
     this.norms = norms;
@@ -56,7 +54,7 @@ abstract class PhraseScorer extends Scorer {
     // this allows to easily identify a matching (exact) phrase 
     // when all PhrasePositions have exactly the same position.
     for (int i = 0; i &lt; postings.length; i++) {
      PhrasePositions pp = new PhrasePositions(postings[i], offsets[i]);
      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);
       if (last != null) {			  // add next to end of list
         last.next = pp;
       } else {
diff --git a/lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer.java b/lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
index decf1c84e8c..42941214d6e 100644
-- a/lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
++ b/lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
@@ -17,8 +17,6 @@ package org.apache.lucene.search;
  * limitations under the License.
  */</comment>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>final</name> <name>class</name> <name>SloppyPhraseScorer</name> extends <name>PhraseScorer</name> <block>{
     <expr><specifier>private</specifier> <name>PhrasePositions</name> <name><name>tmpPos</name><index>[]</index></name></expr>; <comment type="line">// for flipping repeating pps.</comment>
     <expr><specifier>private</specifier> <name>boolean</name> <name>checkedRepeats</name></expr>;
 
    <expr><call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name><name>DocsAndPositionsEnum</name><index>[]</index></name> <name>postings</name></expr></argument>, <argument><expr><name><name>int</name><index>[]</index></name> <name>offsets</name></expr></argument>, <argument><expr><name>Similarity</name> <name>similarity</name></expr></argument>,
    <argument><expr><call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[]</index></name> <name>postings</name></expr></argument>, <argument><expr><name>Similarity</name> <name>similarity</name></expr></argument>,
                        <argument><expr><name>int</name> <name>slop</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>norms</name></expr></argument>)</argument_list></call> <block>{
        <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;
         <expr><name><name>this</name><operator>.</operator><name>slop</name></name> <operator>=</operator> <name>slop</name></expr>;
     }</block>
 
@@ <operator>-</operator><literal type="number">53</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">51</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>final</name> class <name>SloppyPhraseScorer</name> extends <name>PhraseScorer</name> <block>{
      <expr><operator>*</operator> <name>We</name> <name>may</name> <name>want</name> <name>to</name> <name>fix</name> <name>this</name> <name>in</name> <name>the</name> <call><name>future</name> <argument_list>(<argument><expr><name>currently</name> <name>not</name></expr></argument>, for <argument><expr><name>performance</name> <name>reasons</name></expr></argument>)</argument_list></call><operator>.</operator>
      <operator>*</operator><operator>/</operator>
     @<name>Override</name>
    <specifier>protected</specifier> <name>final</name> <name>float</name> <call><name>phraseFreq</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>protected</specifier> <name>float</name> <call><name>phraseFreq</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>int</name> <name>end</name> <operator>=</operator> <call><name>initPhrasePositions</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
         
         <expr><name>float</name> <name>freq</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e0cf8e75513</name><operator>..</operator><literal type="number">3186865b117</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr>,<expr><literal type="number">6</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldSelector</name></name>;</import></block></expr></argument>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>CorruptIndexException</name></name>;</import></argument_list></call></expr></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">300</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>final</name> <name>class</name> <name>JustCompileSearch</name> <block>{
 
   <expr><specifier>static</specifier> <name>final</name> <name>class</name> <name>JustCompilePhraseScorer</name> extends <name>PhraseScorer</name> <block>{
 
    <expr><call><name>JustCompilePhraseScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name><name>DocsAndPositionsEnum</name><index>[]</index></name> <name>docs</name></expr></argument>, <argument><expr><name><name>int</name><index>[]</index></name> <name>offsets</name></expr></argument>,
    <argument><expr><call><name>JustCompilePhraseScorer</name><argument_list>(<argument><expr><name>Weight</name> <name>weight</name></expr></argument>, <argument><expr><name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[]</index></name> <name>postings</name></expr></argument>,
         <argument><expr><name>Similarity</name> <name>similarity</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>norms</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>docs</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name>super</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>postings</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
     @<name>Override</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">33b4a0690e8</literal><operator>..</operator><literal type="number">96b6142a43a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">117</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">117</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <specifier>public</specifier> class <name>TestMultiPhraseQuery</name> extends <name>LuceneTestCase</name>
         <comment type="line">// test slop:</comment>
         <call><name><name>query3</name><operator>.</operator><name>setSlop</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
         <argument><expr><name>result</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>query3</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><name>scoreDocs</name></expr></argument>;

        <comment type="line">// just make sure no exc:</comment>
        <argument><expr><call><name><name>searcher</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>query3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;

         <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>; <comment type="line">// blueberry pizza, bluebird pizza, bluebird foobar pizza</comment>
 
         <argument><expr><name>MultiPhraseQuery</name> <name>query4</name> <operator>=</operator> <operator>new</operator> <call><name>MultiPhraseQuery</name><argument_list>()</argument_list></call></expr></argument>;
<argument>@@ <expr><operator>-</operator><literal type="number">169</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">173</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <specifier>public</specifier> class <name>TestMultiPhraseQuery</name> extends <name>LuceneTestCase</name>
       <name><name>ScoreDoc</name><index>[]</index></name> <name>hits</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><name>scoreDocs</name></expr></argument>;
 
       <argument><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Wrong number of hits"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>hits</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>;

      <comment type="line">// just make sure no exc:</comment>
      <argument><expr><call><name><name>searcher</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;

       <argument><expr><call><name><name>searcher</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr></argument>;
       <argument><expr><call><name><name>indexStore</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr></argument>;
   }</argument_list></call>
@@ <operator>-</operator><literal type="number">211</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">219</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiPhraseQuery</name> extends <name>LuceneTestCase</name>
     <call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>q</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Term</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><literal type="string">"nope"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><literal type="string">"nope"</literal></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Wrong number of hits"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>totalHits</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// just make sure no exc:</comment>
    <expr><call><name><name>searcher</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;

     <expr><call><name><name>searcher</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
     <expr><call><name><name>indexStore</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
   }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6c470fd0e94</literal><operator>..</operator><literal type="number">8d1cc5dcfd3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">18</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">21</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package></block></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name><operator>.</operator><name>OpenMode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryParser</name><operator>.</operator><name>QueryParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>RAMDirectory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>_TestUtil</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Tests {@link PhraseQuery}.
@@ -331,11 +334,11 @@ public class TestPhraseQuery extends LuceneTestCase {
     writer.addDocument(doc);
     
     Document doc2 = new Document();
    doc2.add(new Field("field", "foo firstname xxx lastname foo", Field.Store.YES, Field.Index.ANALYZED));
    doc2.add(new Field("field", "foo firstname zzz lastname foo", Field.Store.YES, Field.Index.ANALYZED));
     writer.addDocument(doc2);
     
     Document doc3 = new Document();
    doc3.add(new Field("field", "foo firstname xxx yyy lastname foo", Field.Store.YES, Field.Index.ANALYZED));
    doc3.add(new Field("field", "foo firstname zzz yyy lastname foo", Field.Store.YES, Field.Index.ANALYZED));
     writer.addDocument(doc3);
     
     writer.optimize();
@@ -517,6 +520,9 @@ public class TestPhraseQuery extends LuceneTestCase {
     //System.out.println("(exact) field: one two three: "+score0);
     QueryUtils.check(query,searcher);
 
    // just make sure no exc:
    searcher.explain(query, 0);

     // search on non palyndrome, find phrase with slop 3, though no slop required here.
     query.setSlop(4); // to use sloppy scorer 
     hits = searcher.search(query, null, 1000).scoreDocs;
@@ -533,6 +539,10 @@ public class TestPhraseQuery extends LuceneTestCase {
     query.add(new Term("palindrome", "two"));
     query.add(new Term("palindrome", "three"));
     hits = searcher.search(query, null, 1000).scoreDocs;

    // just make sure no exc:
    searcher.explain(query, 0);

     assertEquals("just sloppy enough", 1, hits.length);
     //float score2 = hits[0].score;
     //System.out.println("palindrome: one two three: "+score2);
@@ -572,4 +582,93 @@ public class TestPhraseQuery extends LuceneTestCase {
     Query rewritten = pq.rewrite(searcher.getIndexReader());
     assertTrue(rewritten instanceof TermQuery);
   }

  public void testRandomPhrases() throws Exception {
    Directory dir = new MockRAMDirectory();
    Analyzer analyzer = new MockAnalyzer();

    IndexWriter w  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
    List&lt;List&lt;String&gt;&gt; docs = new ArrayList&lt;List&lt;String&gt;&gt;();
    Document d = new Document();
    Field f = new Field("f", "", Field.Store.NO, Field.Index.ANALYZED);
    d.add(f);

    Random r = newRandom();

    int NUM_DOCS = 10*_TestUtil.getRandomMultiplier();
    for(int i=0;i&lt;NUM_DOCS;i++) {
      // must be &gt; 4096 so it spans multiple chunks
      int termCount = _TestUtil.nextInt(r, 10000, 30000);

      List&lt;String&gt; doc = new ArrayList&lt;String&gt;();

      StringBuilder sb = new StringBuilder();
      while(doc.size() &lt; termCount) {
        if (r.nextInt(5) == 1 || docs.size() == 0) {
          // make new non-empty-string term
          String term;
          while(true) {
            term = _TestUtil.randomUnicodeString(r);
            if (term.length() &gt; 0) {
              break;
            }
          }
          TokenStream ts = analyzer.reusableTokenStream("ignore", new StringReader(term));
          CharTermAttribute termAttr = ts.addAttribute(CharTermAttribute.class);
          while(ts.incrementToken()) {
            String text = termAttr.toString();
            doc.add(text);
            sb.append(text).append(' ');
          }
        } else {
          // pick existing sub-phrase
          List&lt;String&gt; lastDoc = docs.get(r.nextInt(docs.size()));
          int len = _TestUtil.nextInt(r, 1, 10);
          int start = r.nextInt(lastDoc.size()-len);
          for(int k=start;k&lt;start+len;k++) {
            String t = lastDoc.get(k);
            doc.add(t);
            sb.append(t).append(' ');
          }
        }
      }
      docs.add(doc);
      f.setValue(sb.toString());
      w.addDocument(d);
    }

    IndexReader reader = w.getReader();
    IndexSearcher s = new IndexSearcher(reader);
    w.close();

    // now search
    for(int i=0;i&lt;100*_TestUtil.getRandomMultiplier();i++) {
      int docID = r.nextInt(docs.size());
      List&lt;String&gt; doc = docs.get(docID);
      
      final int numTerm = _TestUtil.nextInt(r, 2, 20);
      final int start = r.nextInt(doc.size()-numTerm);
      PhraseQuery pq = new PhraseQuery();
      StringBuilder sb = new StringBuilder();
      for(int t=start;t&lt;start+numTerm;t++) {
        pq.add(new Term("f", doc.get(t)));
        sb.append(doc.get(t)).append(' ');
      }

      TopDocs hits = s.search(pq, NUM_DOCS);
      boolean found = false;
      for(int j=0;j&lt;hits.scoreDocs.length;j++) {
        if (hits.scoreDocs[j].doc == docID) {
          found = true;
          break;
        }
      }

      assertTrue("phrase '" + sb + "' not found; start=" + start, found);
    }

    reader.close();
    searcher.close();
    dir.close();
  }
 }
- 
2.19.1.windows.1

</comment></unit>
