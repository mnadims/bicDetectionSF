<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/3597bc4bf4.java"><expr_stmt><expr><name>From</name> <literal type="number">3597bc4bf4b22eef4585de211bea7593d8b69035</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Christopher</name> <name>John</name> <name><name>Male</name> <argument_list type="generic">&lt;<argument><name>chrism</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">12</literal> <name>Sep</name> <literal type="number">2011</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">42</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <name>Converted</name> <name>simple</name> <name>Analyzers</name> <name>which</name> <name>got</name> <name>lost</name> <name>in</name>
 <name>merging</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1169654 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">72</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">13</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name>              <operator>|</operator> <literal type="number">11</literal> <operator>+</operator><operator>--</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">49</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">47</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c1ba6cb8dea</name><operator>..</operator><name>d68a8f8bbba</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
         
         <comment type="line">// now we add another document which has payloads for field f3 and verify if the SegmentMerger</comment>
         <comment type="line">// enabled payloads for that field</comment>
        <expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call></expr>; <comment type="line">// Clear payload state for each field</comment>
         <expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>ram</name></expr></argument>, <argument><expr><call><name>newIndexWriterConfig</name><argument_list>( <argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
             <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOpenMode</name><argument_list>(<argument><expr><name><name>OpenMode</name><operator>.</operator><name>CREATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><name>d</name> <operator>=</operator> <operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">188</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">189</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
         <comment type="line">// occurrences within two consecutive skip intervals</comment>
         <expr><name>int</name> <name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>numDocs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>analyzer</name><operator>.</operator><name>setPayloadData</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadAnalyzer</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>numTerms</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></for>}</block>
         
         <comment type="line">// make sure we create more than one segment to test merging</comment>
@@ <operator>-</operator><literal type="number">198</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">199</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
         
         <comment type="line">// now we make sure to have different payload lengths next at the next skip point        </comment>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDocs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>analyzer</name><operator>.</operator><name>setPayloadData</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>analyzer</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadAnalyzer</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <name>numTerms</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></for>}</block>
         
         <call><name><name>writer</name><operator>.</operator><name>optimize</name></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">404</literal></expr>,<expr><literal type="number">39</literal> <operator>+</operator><literal type="number">405</literal></expr>,<expr><literal type="number">37</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
     <comment type="block" format="javadoc">/**
      * This Analyzer uses an WhitespaceTokenizer and PayloadFilter.
      */</comment>
    <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
         <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>PayloadData</name></argument>&gt;</argument_list></name> <name>fieldToData</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>PayloadData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

        <expr><specifier>public</specifier> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call> <block>{
          <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        }</block>
         
        <name>void</name> <call><name>setPayloadData</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
            <expr><call><name><name>fieldToData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadData</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><specifier>public</specifier> <call><name>PayloadAnalyzer</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
            <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <expr><call><name>setPayloadData</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;
         }</block>
 
        <name>void</name> <call><name>setPayloadData</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>int</name> <name>numFieldInstancesToSkip</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
            <expr><call><name><name>fieldToData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadData</name><argument_list>(<argument><expr><name>numFieldInstancesToSkip</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><name>void</name> <call><name>setPayloadData</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
            <expr><call><name><name>fieldToData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadData</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         }</block>
         
         @<name>Override</name>
        <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
        <expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
             <expr><name>PayloadData</name> <name>payload</name> <operator>=</operator>  <call><name><name>fieldToData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
            <expr><name>TokenStream</name> <name>ts</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
            <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>payload</name><operator>.</operator><name>numFieldInstancesToSkip</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>payload</name><operator>.</operator><name>numFieldInstancesToSkip</name></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt/></block_content></block></else></if_stmt>}</block></expr>
            }</block></expr>
            <return>return <expr><name>ts</name></expr>;</return>
            <name>Tokenizer</name> <name>ts</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></block></expr>;
            <expr><name>TokenStream</name> <name>tokenStream</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>payload</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then>
                <expr><operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ts</name></expr></else></ternary></expr>;
            <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tokenStream</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
         }</block>
         
         <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadData</name> <block>{
             <expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr>;
             <expr><name>int</name> <name>offset</name></expr>;
             <expr><name>int</name> <name>length</name></expr>;
            <expr><name>int</name> <name>numFieldInstancesToSkip</name></expr>;
            
            <expr><call><name>PayloadData</name><argument_list>(<argument><expr><name>int</name> <name>skip</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
                <expr><name>numFieldInstancesToSkip</name> <operator>=</operator> <name>skip</name></expr>;

            <expr><call><name>PayloadData</name><argument_list>(<argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
                 <expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;
                 <expr><name><name>this</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;
                 <expr><name><name>this</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;
@@ <expr><operator>-</operator><literal type="number">454</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">453</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
         <expr><specifier>private</specifier> <name>int</name> <name>offset</name></expr>;
         <expr><specifier>private</specifier> <name>int</name> <name>startOffset</name></expr>;
         <expr><name>PayloadAttribute</name> <name>payloadAtt</name></expr>;
        <expr><name>CharTermAttribute</name> <name>termAttribute</name></expr>;
         
         <expr><specifier>public</specifier> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>TokenStream</name> <name>in</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>int</name> <name>length</name></expr></argument>)</argument_list></call> <block>{
             <expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">462</literal></expr>,<expr><literal type="number">23</literal> <operator>+</operator><literal type="number">462</literal></expr>,<expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloads</name> extends <name>LuceneTestCase</name> <block>{
             <expr><name><name>this</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;
             <expr><name><name>this</name><operator>.</operator><name>startOffset</name></name> <operator>=</operator> <name>offset</name></expr>;
             <expr><name>payloadAtt</name> <operator>=</operator> <call><name>addAttribute</name><argument_list>(<argument><expr><name><name>PayloadAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
            <expr><name>termAttribute</name> <operator>=</operator> <call><name>addAttribute</name><argument_list>(<argument><expr><name><name>CharTermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
         }</block>
         
         @<name>Override</name>
         <specifier>public</specifier> <name>boolean</name> <call><name>incrementToken</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
             <expr><name>boolean</name> <name>hasNext</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>incrementToken</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
            <if_stmt><if>if <condition>(<expr><name>hasNext</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>length</name> <operator>&lt;=</operator> <name><name>data</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Payload</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Payload</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>payloadAtt</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>                
                <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>payloadAtt</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt/></block_content></block></else></if_stmt>}</block></expr>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNext</name></expr>)</condition> <block>{<block_content>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>

            <comment type="line">// Some values of the same field are to have payloads and others not</comment>
            <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>length</name> <operator>&lt;=</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>termAttribute</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"NO PAYLOAD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>Payload</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Payload</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>payloadAtt</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
              <expr_stmt><expr><call><name><name>payloadAtt</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></else></if_stmt>}</block></expr>
            
            <return>return <expr><name>hasNext</name></expr>;</return></block></expr>

            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
         }</block></expr></expr_stmt>
 
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c3a30c51477</name><operator>..</operator><literal type="number">15448e5ba49</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PayloadAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBasics</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }
   
  static <decl_stmt><decl><type><specifier>final</specifier> <name>Analyzer</name></type> <name>simplePayloadAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>simplePayloadAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
 
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SimplePayloadFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SimplePayloadFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
     
   </block_content>}</block></function><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c12a4142cc7</name><operator>..</operator><literal type="number">52191ac68ea</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">213</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">213</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWordDelimiterFilter</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><name>final</name> <name>CharArraySet</name> <name>protWords</name> <operator>=</operator> <operator>new</operator> <call><name>CharArraySet</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"NUTCH"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
     
     <comment type="block">/* analyzer that uses whitespace + wdf */</comment>
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>WordDelimiterFilter</name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protWords</name></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WordDelimiterFilter</name><argument_list>(
            <argument><expr><name>tokenizer</name></expr></argument>,
            <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
 
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></block></expr></expr_stmt></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt>

</unit>
