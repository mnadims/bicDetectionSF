<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/ff83497b27.java"><expr_stmt><expr><name>From</name> <name>ff83497b27c56dd86a94f64e081c2694772bd571</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Steven</name> <name><name>Rowe</name> <argument_list type="generic">&lt;<argument><name>sarowe</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">17</literal> <name>Mar</name> <literal type="number">2015</literal> <literal type="number">05</literal><operator>:</operator><literal type="number">13</literal><operator>:</operator><literal type="number">36</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">6141</literal><operator>:</operator> <name>Schema</name> <name>API</name><operator>:</operator> <name>Remove</name> <name>fields</name></expr><operator>,</operator> <expr><name>dynamic</name> <name>fields</name></expr><operator>,</operator> <expr><name>field</name>
 <name>types</name> <name>and</name> <name>copy</name> <name>fields</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>and</name> <name>replace</name></type> <name>fields</name></decl>, <decl><type ref="prev"/><name>dynamic</name> <name>fields</name> <name>and</name> <name>field</name> <name>types</name>

<name>git</name>-<name>svn</name>-<name>id</name><range>: <expr><name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1667175 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>SchemaHandler</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchema</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">164</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ManagedIndexSchema</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">658</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>schema</name><operator>/</operator><name><name>ManagedIndexSchemaFactory</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaManager</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">380</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ZkIndexSchemaReader</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>rest</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaAPI</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">450</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaConcurrent</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">206</literal> <operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestSchemaManager</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">56</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">12</literal> <name>files</name> <name>changed</name></expr></range></decl>, 1590 <decl><type ref="prev"/><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></decl>, 359 <decl><type ref="prev"/><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list>

<name>diff</name> --<name>git</name> <name>a</name>/<name>solr</name>/<name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name>/<name>solr</name>/<name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> 8ae25eba878..<name>cb526075da0</name> 100644
-- <name>a</name>/<name>solr</name>/<name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
++ <name>b</name>/<name>solr</name>/<name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ -175</decl>,6 +175,9 @@ <decl><type ref="prev"/><name>New</name> <name>Features</name>
     <name><name>json</name><operator>.</operator><name>facet</name></name><init>=<expr><block>{<expr><name>count1</name><operator>:</operator><block>{<expr><name>query</name><operator>:</operator><literal type="string">"price:[10 TO 20]"</literal></expr>}</block></expr>, <expr><name>count2</name><operator>:</operator><block>{<expr><name>query</name><operator>:</operator><literal type="string">"color:blue AND popularity:[0 TO 50]"</literal></expr>}</block></expr> }</block>
     <name><name>json</name><operator>.</operator><name>facet</name></name><operator>=</operator><block>{<expr><name>categories</name><operator>:</operator><block>{<expr><name>terms</name><operator>:</operator><block>{<expr><name>field</name><operator>:</operator><name>cat</name></expr>, <expr><name>sort</name><operator>:</operator><literal type="string">"x desc"</literal></expr>, <expr><name>facet</name><operator>:</operator><block>{<expr><name>x</name><operator>:</operator><literal type="string">"avg(price)"</literal></expr>, <expr><name>y</name><operator>:</operator><literal type="string">"sum(price)"</literal></expr>}</block></expr>}</block></expr>}</block></expr>}</block>
   <operator>(</operator><name>yonik</name><operator>)</operator>
  
<operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">6141</literal><operator>:</operator> <name>Schema</name> <name>API</name><operator>:</operator> <name>Remove</name> <name>fields</name></expr></init></decl>, <decl><type ref="prev"/><name>dynamic</name> <name>fields</name></decl>, <decl><type ref="prev"/><name>field</name> <name>types</name> <name>and</name> <name>copy</name>
  <name>fields</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>and</name> <name>replace</name></type> <name>fields</name></decl>, <decl><type ref="prev"/><name>dynamic</name> <name>fields</name> <name>and</name> <name>field</name> <name><name>types</name><operator>.</operator></name> (<name>Steve</name> <name>Rowe</name></decl>)
 
 
 Bug Fixes
diff --git a/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java b/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java
index 538dd7b0318..47df8f648c9 100644
-- a/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java
++ b/solr/core/src/java/org/apache/solr/handler/SchemaHandler.java
@@ -62<operator>,</operator>11 +62<operator>,</operator>9 @@ public class SchemaHandler extends RequestHandlerBase <block>{<block_content>
         </block_content>}</block></decl_stmt>
         <break>break;</break>
       }

     } <if_stmt><else>else <block>{<block_content>
       <expr_stmt><expr><call><name>handleGET</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>

   }
 
   private <function><type><name>void</name></type> <name>handleGET</name><parameter_list>(<parameter><decl><type><name>SolrQueryRequest</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>SolrQueryResponse</name></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">165</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaHandler</name> extends <name>RequestHandlerBase</name> <block>{
 
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>String</name> <call><name>getDescription</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><literal type="string">"Edit schema.xml"</literal></expr>;</return></block></expr>
    <return>return <expr><literal type="string">"CRUD operations over the Solr schema"</literal></expr>;</return>
   }</block></expr></expr_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchema</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchema</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">235d879b262</literal><operator>..</operator><literal type="number">40560534891</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchema</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>IndexSchema</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">755</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">755</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchema</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/** Returns true if the given name has exactly one asterisk either at the start or end of the name */</comment>
  <specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <call><name>isValidFieldGlob</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name> <call><name>isValidFieldGlob</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <operator>(</operator><name>pos</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">935</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">935</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchema</name> <block>{
     }</block></expr></expr_stmt></block_content></block></if></if_stmt>
   }</block>
 
  <specifier>private</specifier> <name>void</name> <call><name>registerExplicitSrcAndDestFields</name><argument_list>(<argument><expr><name>String</name> <name>source</name></expr></argument>, <argument><expr><name>int</name> <name>maxChars</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>destSchemaField</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>sourceSchemaField</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>protected</specifier> <name>void</name> <call><name>registerExplicitSrcAndDestFields</name><argument_list>(<argument><expr><name>String</name> <name>source</name></expr></argument>, <argument><expr><name>int</name> <name>maxChars</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>destSchemaField</name></expr></argument>, <argument><expr><name>SchemaField</name> <name>sourceSchemaField</name></expr></argument>)</argument_list></call> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name> <name>copyFieldList</name> <operator>=</operator> <call><name><name>copyFieldsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;
     <if_stmt><if>if <condition>(<expr><name>copyFieldList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>copyFieldList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1108</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1108</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchema</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>destDynamicBase</name></name> <operator>=</operator> <name>destDynamicBase</name></expr>;</block></expr></expr_stmt></block_content></block></if></if_stmt>
     }</block>
 
    <specifier>public</specifier> <name>DynamicField</name> <call><name>getDestination</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><name>destination</name></expr>;</return></block></expr> }</block>

     <specifier>public</specifier> <name>String</name> <call><name>getDestFieldName</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><call><name><name>destination</name><operator>.</operator><name>getRegex</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr> }</block>
 
     <comment type="block" format="javadoc">/**
@@ -1295,7 +1297,7 @@ public class IndexSchema {
       if (df.matches(fieldName)) return df.prototype.getType();
     }
     return null;
  };
  }
 
 
   /**
@@ -1416,10 +1418,11 @@ public class IndexSchema {
     List&lt;SimpleOrderedMap&lt;Object&gt;&gt; copyFieldProperties = new ArrayList&lt;&gt;();
     SortedMap&lt;String,List&lt;CopyField&gt;&gt; sortedCopyFields = new TreeMap&lt;&gt;(copyFieldsMap);
     for (List&lt;CopyField&gt; copyFields : sortedCopyFields.values()) {
      copyFields = new ArrayList&lt;&gt;(copyFields);
       Collections.sort(copyFields, new Comparator&lt;CopyField&gt;() {
         @Override
         public int compare(CopyField cf1, CopyField cf2) {
          // sources are all be the same, just sorting by destination here
          // sources are all the same, just sorting by destination here
           return cf1.getDestination().getName().compareTo(cf2.getDestination().getName());
         }
       });
@@ -1494,12 +1497,12 @@ public class IndexSchema {
    * {@link #getSchemaUpdateLock()}.
    *
    * @param newField the SchemaField to add 
   * @param persist to persist the schema or not or not
   * @param persist to persist the schema or not
    * @return a new IndexSchema based on this schema with newField added
    * @see #newField(String, String, Map)
    */</comment>
   <specifier>public</specifier> <name>IndexSchema</name> <call><name>addField</name><argument_list>(<argument><expr><name>SchemaField</name> <name>newField</name></expr></argument>, <argument><expr><name>boolean</name> <name>persist</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name>addFields</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>newField</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>Collections</name><operator>.</operator><name>EMPTY_MAP</name></name></expr></argument>,<argument><expr><name>persist</name></expr></argument> )</argument_list></call></expr>;</return></block></expr></expr_stmt>
    <return>return <expr><call><name>addFields</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>newField</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>persist</name></expr></argument>)</argument_list></call></expr>;</return>
   }
 
   public <function><type><name>IndexSchema</name></type> <name>addField</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>newField</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1551</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1554</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchema</name> <block>{
   }</block>
 
 
  <comment type="block" format="javadoc">/**
   * Copies this schema, deletes the named fields from the copy.
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
   * Requires synchronizing on the object returned by
   * {@link #getSchemaUpdateLock()}.
   *
   * @param names the names of the fields to delete
   * @return a new IndexSchema based on this schema with the named fields deleted
   */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>deleteFields</name><argument_list>(<argument><expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>names</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

  <comment type="block" format="javadoc">/**
   * Copies this schema, deletes the named field from the copy, creates a new field 
   * with the same name using the given args, then rebinds any referring copy fields
   * to the replacement field.
   *
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
   * Requires synchronizing on the object returned by {@link #getSchemaUpdateLock()}.
   *
   * @param fieldName The name of the field to be replaced
   * @param replacementFieldType  The field type of the replacement field                                   
   * @param replacementArgs Initialization params for the replacement field
   * @return a new IndexSchema based on this schema with the named field replaced
   */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>replaceField</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>FieldType</name> <name>replacementFieldType</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name> <name>replacementArgs</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

   <comment type="block" format="javadoc">/**
    * Copies this schema, adds the given dynamic fields to the copy,
    * Requires synchronizing on the object returned by
@@ -1558,7 +1599,7 @@ public class IndexSchema {
    *
    * @param newDynamicFields the SchemaFields to add
    * @param copyFieldNames 0 or more names of targets to copy this field to.  The target fields must already exist.
   * @param persist to persist the schema or not or not
   * @param persist to persist the schema or not
    * @return a new IndexSchema based on this schema with newDynamicFields added
    * @see #newDynamicField(String, String, Map)
    */</comment>
@@ <operator>-</operator><literal type="number">1572</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">1613</literal></expr><operator>,</operator><expr><literal type="number">78</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchema</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Copies this schema and adds the new copy fields to the copy
   * Copies this schema, deletes the named dynamic fields from the copy.
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
   * Requires synchronizing on the object returned by
   * {@link #getSchemaUpdateLock()}.
   *
   * @param fieldNamePatterns the names of the dynamic fields to delete
   * @return a new IndexSchema based on this schema with the named dynamic fields deleted
   */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>deleteDynamicFields</name><argument_list>(<argument><expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>fieldNamePatterns</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

  <comment type="block" format="javadoc">/**
   * Copies this schema, deletes the named dynamic field from the copy, creates a new dynamic
   * field with the same field name pattern using the given args, then rebinds any referring
   * dynamic copy fields to the replacement dynamic field.
   *
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
   * Requires synchronizing on the object returned by {@link #getSchemaUpdateLock()}.
   *
   * @param fieldNamePattern The glob for the dynamic field to be replaced
   * @param replacementFieldType  The field type of the replacement dynamic field                                   
   * @param replacementArgs Initialization params for the replacement dynamic field
   * @return a new IndexSchema based on this schema with the named dynamic field replaced
   */</comment>
  <specifier>public</specifier> <name>ManagedIndexSchema</name> <call><name>replaceDynamicField</name>
      <argument_list>(<argument><expr><name>String</name> <name>fieldNamePattern</name></expr></argument>, <argument><expr><name>FieldType</name> <name>replacementFieldType</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name> <name>replacementArgs</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

    <comment type="block" format="javadoc">/**
     * Copies this schema and adds the new copy fields to the copy
     * Requires synchronizing on the object returned by
     * {@link #getSchemaUpdateLock()}.
     *
     * @param copyFields Key is the name of the source field name, value is a collection of target field names.  Fields must exist.
     * @param persist to persist the schema or not
     * @return The new Schema with the copy fields added
     */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>addCopyFields</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>copyFields</name></expr></argument>, <argument><expr><name>boolean</name> <name>persist</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

  <comment type="block" format="javadoc">/**
   * Copies this schema and deletes the given copy fields from the copy.
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
    * Requires synchronizing on the object returned by
    * {@link #getSchemaUpdateLock()}.
    *
   * @param copyFields Key is the name of the source field name, value is a collection of target field names.  Fields must exist.
   * @param persist to persist the schema or not or not
   * @return The new Schema with the copy fields added
   * @param copyFields Key is the name of the source field name, value is a collection of target field names. 
   *                   Each corresponding copy field directives must exist.
   * @return The new Schema with the copy fields deleted
    */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>addCopyFields</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>copyFields</name></expr></argument>, <argument><expr><name>boolean</name> <name>persist</name></expr></argument>)</argument_list></call><block>{
  <expr><specifier>public</specifier> <name>IndexSchema</name> <call><name>deleteCopyFields</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>copyFields</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
     <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
     <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
   }</block>
 

   <comment type="block" format="javadoc">/**
    * Returns a SchemaField if the given fieldName does not already 
    * exist in this schema, and does not match any dynamic fields 
@@ -1623,7 +1722,7 @@ public class IndexSchema {
   }
 
   /**
   * Returns the schema update lock that should be synchronzied on
   * Returns the schema update lock that should be synchronized on
    * to update the schema.  Only applicable to mutable schemas.
    *
    * @return the schema update lock object to synchronize on
@@ -1640,7 +1739,7 @@ public class IndexSchema {
    * {@link #getSchemaUpdateLock()}.
    *
    * @param fieldTypeList a list of FieldTypes to add
   * @param persist to persist the schema or not or not
   * @param persist to persist the schema or not
    * @return a new IndexSchema based on this schema with the new types added
    * @see #newFieldType(String, String, Map)
    */</comment>
@@ <operator>-</operator><literal type="number">1650</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1749</literal></expr>,<expr><literal type="number">43</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSchema</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
   }</block>
 
  <comment type="block" format="javadoc">/**
   * Copies this schema, deletes the named field types from the copy.
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
   * Requires synchronizing on the object returned by {@link #getSchemaUpdateLock()}.
   *
   * @param names the names of the field types to delete
   * @return a new IndexSchema based on this schema with the named field types deleted
   */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>deleteFieldTypes</name><argument_list>(<argument><expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>names</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

  <comment type="block" format="javadoc">/**
   * Copies this schema, deletes the named field type from the copy, creates a new field type 
   * with the same name using the given args, rebuilds fields and dynamic fields of the given
   * type, then rebinds any referring copy fields to the rebuilt fields.
   * 
   * &lt;p&gt;
   * The schema will not be persisted.
   * &lt;p&gt;
   * Requires synchronizing on the object returned by {@link #getSchemaUpdateLock()}.
   *  
   * @param typeName The name of the field type to be replaced
   * @param replacementClassName The class name of the replacement field type
   * @param replacementArgs Initialization params for the replacement field type
   * @return a new IndexSchema based on this schema with the named field type replaced
   */</comment>
  <specifier>public</specifier> <name>IndexSchema</name> <call><name>replaceFieldType</name><argument_list>(<argument><expr><name>String</name> <name>typeName</name></expr></argument>, <argument><expr><name>String</name> <name>replacementClassName</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name> <name>replacementArgs</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>msg</name> <operator>=</operator> <literal type="string">"This IndexSchema is not mutable."</literal></expr>;
    <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    <throw>throw <argument_list>new <argument><expr><call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

   <comment type="block" format="javadoc">/**
    * Returns a FieldType if the given typeName does not already
    * exist in this schema. The resulting FieldType can be used in a call
diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
index 436e59c24f5..f96a89fc0c2 100644
-- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
@@ -68,6 +68,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -386,7 +387,7 @@ public final class ManagedIndexSchema extends IndexSchema {
   public ManagedIndexSchema addFields(Collection&lt;SchemaField&gt; newFields,
                                       Map&lt;String, Collection&lt;String&gt;&gt; copyFieldNames,
                                       boolean persist) {
    ManagedIndexSchema newSchema = null;
    ManagedIndexSchema newSchema;
     if (isMutable) {
       boolean success = false;
       if (copyFieldNames == null){
@@ -440,11 +441,129 @@ public final class ManagedIndexSchema extends IndexSchema {
     return newSchema;
   }
 
  @Override
  public ManagedIndexSchema deleteFields(Collection&lt;String&gt; names) {
    ManagedIndexSchema newSchema;
    if (isMutable) {
      newSchema = shallowCopy(true);
      for (String name : names) {
        SchemaField field = getFieldOrNull(name); 
        if (null != field) {
          if (copyFieldsMap.containsKey(name) || isCopyFieldTarget(field)) {
            throw new SolrException(ErrorCode.BAD_REQUEST, "Can't delete '" + name
                + "' because it's referred to by at least one copy field directive.");
          }
          newSchema.fields.remove(name);
          newSchema.fieldsWithDefaultValue.remove(field);
          newSchema.requiredFields.remove(field);
        } else {
          String msg = "The field '" + name + "' is not present in this schema, and so cannot be deleted.";
          throw new SolrException(ErrorCode.BAD_REQUEST, msg);
        }
      }
      // Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.refreshAnalyzers();
    } else {
      String msg = "This ManagedIndexSchema is not mutable.";
      log.error(msg);
      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
    }
    return newSchema;
  }
 
  @Override
  public ManagedIndexSchema replaceField
      (String fieldName, FieldType replacementFieldType, Map&lt;String,?&gt; replacementArgs) {
    ManagedIndexSchema newSchema;
    if (isMutable) {
      SchemaField oldField = fields.get(fieldName);
      if (null == oldField) {
        String msg = "The field '" + fieldName + "' is not present in this schema, and so cannot be replaced.";
        throw new SolrException(ErrorCode.BAD_REQUEST, msg);
      }
      newSchema = shallowCopy(true);
      // clone data structures before modifying them
      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);
      newSchema.copyFieldTargetCounts
          = (Map&lt;SchemaField,Integer&gt;)((HashMap&lt;SchemaField,Integer&gt;)copyFieldTargetCounts).clone();
      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];
      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);

      // Drop the old field
      newSchema.fields.remove(fieldName);
      newSchema.fieldsWithDefaultValue.remove(oldField);
      newSchema.requiredFields.remove(oldField);

      // Add the replacement field
      SchemaField replacementField = SchemaField.create(fieldName, replacementFieldType, replacementArgs);
      newSchema.fields.put(fieldName, replacementField);
      if (null != replacementField.getDefaultValue()) {
        log.debug(replacementField.getName() + " contains default value: " + replacementField.getDefaultValue());
        newSchema.fieldsWithDefaultValue.add(replacementField);
      }
      if (replacementField.isRequired()) {
        log.debug("{} is required in this schema", replacementField.getName());
        newSchema.requiredFields.add(replacementField);
      }

      List&lt;CopyField&gt; copyFieldsToRebuild = new ArrayList&lt;&gt;();
      newSchema.removeCopyFieldSource(fieldName, copyFieldsToRebuild);

      newSchema.copyFieldTargetCounts.remove(oldField); // zero out target count for this field

      // Remove copy fields where the target is this field; remember them to rebuild
      for (Map.Entry&lt;String,List&lt;CopyField&gt;&gt; entry : newSchema.copyFieldsMap.entrySet()) {
        List&lt;CopyField&gt; perSourceCopyFields = entry.getValue();
        Iterator&lt;CopyField&gt; checkDestCopyFieldsIter = perSourceCopyFields.iterator();
        while (checkDestCopyFieldsIter.hasNext()) {
          CopyField checkDestCopyField = checkDestCopyFieldsIter.next();
          if (fieldName.equals(checkDestCopyField.getDestination().getName())) {
            checkDestCopyFieldsIter.remove();
            copyFieldsToRebuild.add(checkDestCopyField);
          }
        }
      }
      newSchema.rebuildCopyFields(copyFieldsToRebuild);

      // Find dynamic copy fields where the source or destination is this field; remember them to rebuild
      List&lt;DynamicCopy&gt; dynamicCopyFieldsToRebuild = new ArrayList&lt;&gt;();
      List&lt;DynamicCopy&gt; newDynamicCopyFields = new ArrayList&lt;&gt;();
      for (int i = 0 ; i &lt; newSchema.dynamicCopyFields.length ; ++i) {
        DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];
        SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();
        if (fieldName.equals(dynamicCopy.getRegex()) || fieldName.equals(destinationPrototype.getName())) {
          dynamicCopyFieldsToRebuild.add(dynamicCopy);
        } else {
          newDynamicCopyFields.add(dynamicCopy);
        }
      }
      // Rebuild affected dynamic copy fields
      if (dynamicCopyFieldsToRebuild.size() &gt; 0) {
        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);
        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {
          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());
        }
      }

      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.refreshAnalyzers();
    } else {
      String msg = "This ManagedIndexSchema is not mutable.";
      log.error(msg);
      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
    }
    return newSchema;
  }
  
   @Override
   public ManagedIndexSchema addDynamicFields(Collection&lt;SchemaField&gt; newDynamicFields, 
                                              Map&lt;String,Collection&lt;String&gt;&gt; copyFieldNames, boolean persist) {
    ManagedIndexSchema newSchema = null;
    ManagedIndexSchema newSchema;
     if (isMutable) {
       boolean success = false;
       if (copyFieldNames == null){
@@ -474,7 +593,7 @@ public final class ManagedIndexSchema extends IndexSchema {
         aware.inform(newSchema);
       }
       newSchema.refreshAnalyzers();
      if(persist) {
      if (persist) {
         success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists
         if (success) {
           log.debug("Added dynamic field(s): {}", newDynamicFields);
@@ -490,9 +609,153 @@ public final class ManagedIndexSchema extends IndexSchema {
     return newSchema;
   }
 
  @Override
  public ManagedIndexSchema deleteDynamicFields(Collection&lt;String&gt; fieldNamePatterns) {
    ManagedIndexSchema newSchema;
    if (isMutable) {
      newSchema = shallowCopy(true);

      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];
      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);

      List&lt;DynamicCopy&gt; dynamicCopyFieldsToRebuild = new ArrayList&lt;&gt;();
      List&lt;DynamicCopy&gt; newDynamicCopyFields = new ArrayList&lt;&gt;();

      for (String fieldNamePattern : fieldNamePatterns) {
        DynamicField dynamicField = null;
        int dfPos = 0;
        for ( ; dfPos &lt; newSchema.dynamicFields.length ; ++dfPos) {
          DynamicField df = newSchema.dynamicFields[dfPos];
          if (df.getRegex().equals(fieldNamePattern)) {
            dynamicField = df;
            break;
          }
        }
        if (null == dynamicField) {
          String msg = "The dynamic field '" + fieldNamePattern
              + "' is not present in this schema, and so cannot be deleted.";
          throw new SolrException(ErrorCode.BAD_REQUEST, msg);
        }          
        for (int i = 0 ; i &lt; newSchema.dynamicCopyFields.length ; ++i) {
          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];
          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();
          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();
          if ((null != destDynamicBase &amp;&amp; fieldNamePattern.equals(destDynamicBase.getRegex()))
              || (null != sourceDynamicBase &amp;&amp; fieldNamePattern.equals(sourceDynamicBase.getRegex()))
              || dynamicField.matches(dynamicCopy.getRegex())
              || dynamicField.matches(dynamicCopy.getDestFieldName())) {
            dynamicCopyFieldsToRebuild.add(dynamicCopy);
            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());
            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it
          } else {
            newDynamicCopyFields.add(dynamicCopy);
          }
        }
        if (newSchema.dynamicFields.length &gt; 1) {
          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];
          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);
          // skip over the dynamic field to be deleted
          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);
          newSchema.dynamicFields = temp;
        } else {
          newSchema.dynamicFields = new DynamicField[0];
        }
      }
      // After removing all dynamic fields, rebuild affected dynamic copy fields.
      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.
      if (dynamicCopyFieldsToRebuild.size() &gt; 0) {
        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);
        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {
          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());
        }
      }

      // Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.refreshAnalyzers();
    } else {
      String msg = "This ManagedIndexSchema is not mutable.";
      log.error(msg);
      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
    }
    return newSchema;
  }

  @Override
  public ManagedIndexSchema replaceDynamicField
    (String fieldNamePattern, FieldType replacementFieldType, Map&lt;String,?&gt; replacementArgs) {
    ManagedIndexSchema newSchema;
    if (isMutable) {
      DynamicField oldDynamicField = null;
      int dfPos = 0;
      for ( ; dfPos &lt; dynamicFields.length ; ++dfPos) {
        DynamicField dynamicField = dynamicFields[dfPos];
        if (dynamicField.getRegex().equals(fieldNamePattern)) {
          oldDynamicField = dynamicField;
          break;
        }
      }
      if (null == oldDynamicField) {
        String msg = "The dynamic field '" + fieldNamePattern 
            + "' is not present in this schema, and so cannot be replaced.";
        throw new SolrException(ErrorCode.BAD_REQUEST, msg);
      }

      newSchema = shallowCopy(true);

      // clone data structures before modifying them
      newSchema.copyFieldTargetCounts
          = (Map&lt;SchemaField,Integer&gt;)((HashMap&lt;SchemaField,Integer&gt;)copyFieldTargetCounts).clone();
      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];
      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);

      // Put the replacement dynamic field in place
      SchemaField prototype = SchemaField.create(fieldNamePattern, replacementFieldType, replacementArgs);
      newSchema.dynamicFields[dfPos] = new DynamicField(prototype);

      // Find dynamic copy fields where this dynamic field is the source or target base; remember them to rebuild
      List&lt;DynamicCopy&gt; dynamicCopyFieldsToRebuild = new ArrayList&lt;&gt;();
      List&lt;DynamicCopy&gt; newDynamicCopyFields = new ArrayList&lt;&gt;();
      for (int i = 0 ; i &lt; newSchema.dynamicCopyFields.length ; ++i) {
        DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];
        DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();
        DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();
        if (fieldNamePattern.equals(dynamicCopy.getRegex())
            || fieldNamePattern.equals(dynamicCopy.getDestFieldName())
            || (null != destDynamicBase &amp;&amp; fieldNamePattern.equals(destDynamicBase.getRegex()))
            || (null != sourceDynamicBase &amp;&amp; fieldNamePattern.equals(sourceDynamicBase.getRegex()))) {
          dynamicCopyFieldsToRebuild.add(dynamicCopy);
          newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());
          // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it
        } else {
          newDynamicCopyFields.add(dynamicCopy);
        }
      }
      // Rebuild affected dynamic copy fields
      if (dynamicCopyFieldsToRebuild.size() &gt; 0) {
        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);
        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {
          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());
        }
      }

      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.refreshAnalyzers();
    } else {
      String msg = "This ManagedIndexSchema is not mutable.";
      log.error(msg);
      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
    }
    return newSchema;
  }

   @Override
   public ManagedIndexSchema addCopyFields(Map&lt;String, Collection&lt;String&gt;&gt; copyFields, boolean persist) {
    ManagedIndexSchema newSchema = null;
    ManagedIndexSchema newSchema;
     if (isMutable) {
       boolean success = false;
       newSchema = shallowCopy(true);
@@ -517,10 +780,150 @@ public final class ManagedIndexSchema extends IndexSchema {
           log.error("Failed to add copy fields for {} sources", copyFields.size());
         }
       }
    } else {
      String msg = "This ManagedIndexSchema is not mutable.";
      log.error(msg);
      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
     }
     return newSchema;
   }
 
  @Override
  public ManagedIndexSchema deleteCopyFields(Map&lt;String,Collection&lt;String&gt;&gt; copyFields) {
    ManagedIndexSchema newSchema;
    if (isMutable) {
      newSchema = shallowCopy(true);
      // clone data structures before modifying them
      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);
      newSchema.copyFieldTargetCounts
          = (Map&lt;SchemaField,Integer&gt;)((HashMap&lt;SchemaField,Integer&gt;)copyFieldTargetCounts).clone();
      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];
      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);

      for (Map.Entry&lt;String,Collection&lt;String&gt;&gt; entry : copyFields.entrySet()) {
        // Key is the source, values are the destinations
        for (String destination : entry.getValue()) {
          newSchema.deleteCopyField(entry.getKey(), destination);
        }
      }
      //TODO: move this common stuff out to shared methods
      // Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.refreshAnalyzers();
    } else {
      String msg = "This ManagedIndexSchema is not mutable.";
      log.error(msg);
      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
    }
    return newSchema;
  }
  
  private void deleteCopyField(String source, String dest) {
    // Assumption: a copy field directive will exist only if the source &amp; destination (dynamic) fields exist
    SchemaField destSchemaField = fields.get(dest);
    SchemaField sourceSchemaField = fields.get(source);

    final String invalidGlobMessage = "is an invalid glob: either it contains more than one asterisk,"
        + " or the asterisk occurs neither at the start nor at the end.";
    if (source.contains("*") &amp;&amp; ! isValidFieldGlob(source)) {
      String msg = "copyField source '" + source + "' " + invalidGlobMessage;
      throw new SolrException(ErrorCode.BAD_REQUEST, msg);
    }
    if (dest.contains("*") &amp;&amp; ! isValidFieldGlob(dest)) {
      String msg = "copyField dest '" + dest + "' " + invalidGlobMessage;
      throw new SolrException(ErrorCode.BAD_REQUEST, msg);
    }

    boolean found = false;

    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field
      if (dynamicCopyFields != null) {
        for (int i = 0 ; i &lt; dynamicCopyFields.length ; ++i) {
          DynamicCopy dynamicCopy = dynamicCopyFields[i];
          if (source.equals(dynamicCopy.getRegex()) &amp;&amp; dest.equals(dynamicCopy.getDestFieldName())) {
            found = true;
            decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());
            if (dynamicCopyFields.length &gt; 1) {
              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];
              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);
              // skip over the dynamic copy field to be deleted
              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);
              dynamicCopyFields = temp;
            } else {
              dynamicCopyFields = null;
            }
            break;
          }
        }
      }
    } else { // non-dynamic copy field directive
      List&lt;CopyField&gt; copyFieldList = copyFieldsMap.get(source);
      if (copyFieldList != null) {
        for (Iterator&lt;CopyField&gt; iter = copyFieldList.iterator() ; iter.hasNext() ; ) {
          CopyField copyField = iter.next();
          if (dest.equals(copyField.getDestination().getName())) {
            found = true;
            decrementCopyFieldTargetCount(copyField.getDestination());
            iter.remove();
            if (copyFieldList.isEmpty()) {
              copyFieldsMap.remove(source);
            }
            break;
          }
        }
      }
    }
    if ( ! found) {
      throw new SolrException(ErrorCode.BAD_REQUEST,
          "Copy field directive not found: '" + source + "' -&gt; '" + dest + "'");
    }
  }

  /**
   * Removes all copy fields with the given source field name, decrements the count for the copy field target,
   * and adds the removed copy fields to removedCopyFields.
   */</comment>
  <specifier>private</specifier> <name>void</name> <call><name>removeCopyFieldSource</name><argument_list>(<argument><expr><name>String</name> <name>sourceFieldName</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name> <name>removedCopyFields</name></expr></argument>)</argument_list></call> <block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name> <name>sourceCopyFields</name> <operator>=</operator> <call><name><name>copyFieldsMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>sourceFieldName</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>sourceCopyFields</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>CopyField</name></type> <name>sourceCopyField</name> <range>: <expr><name>sourceCopyFields</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>decrementCopyFieldTargetCount</name><argument_list>(<argument><expr><call><name><name>sourceCopyField</name><operator>.</operator><name>getDestination</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>removedCopyFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sourceCopyField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt>}</block></expr>
    }</block></expr></expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Registers new copy fields with the source, destination and maxChars taken from each of the oldCopyFields.
   * 
   * Assumption: the fields in oldCopyFields still exist in the schema. 
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>rebuildCopyFields</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></type> <name>oldCopyFields</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>oldCopyFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>CopyField</name></type> <name>copyField</name> <range>: <expr><name>oldCopyFields</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SchemaField</name></type> <name>source</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>copyField</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SchemaField</name></type> <name>destination</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>copyField</name><operator>.</operator><name>getDestination</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerExplicitSrcAndDestFields</name>
            <argument_list>(<argument><expr><call><name><name>copyField</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>copyField</name><operator>.</operator><name>getMaxChars</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destination</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Decrements the count for the given destination field in copyFieldTargetCounts.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>decrementCopyFieldTargetCount</name><parameter_list>(<parameter><decl><type><name>SchemaField</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Integer</name></type> <name>count</name> <init>= <expr><call><name><name>copyFieldTargetCounts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <assert>assert <expr><name>count</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>copyFieldTargetCounts</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>copyFieldTargetCounts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>ManagedIndexSchema</name></type> <name>addFieldTypes</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FieldType</name></argument>&gt;</argument_list></name></type> <name>fieldTypeList</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>persist</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMutable</name></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">579</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">982</literal></expr><operator>,</operator><expr><literal type="number">180</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
     <return>return <expr><name>newSchema</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>ManagedIndexSchema</name></type> <name>deleteFieldTypes</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ManagedIndexSchema</name></type> <name>newSchema</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>isMutable</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>fieldTypes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"The field type '"</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">"' is not present in this schema, and so cannot be deleted."</literal></expr></init></decl>;</decl_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>SchemaField</name></type> <name>field</name> <range>: <expr><call><name><name>fields</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"Can't delete '"</literal> <operator>+</operator> <name>name</name>
                <operator>+</operator> <literal type="string">"' because it's the field type of field '"</literal> <operator>+</operator> <call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>DynamicField</name></type> <name>dynamicField</name> <range>: <expr><name>dynamicFields</name></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>dynamicField</name><operator>.</operator><name>getPrototype</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><literal type="string">"Can't delete '"</literal> <operator>+</operator> <name>name</name>
                <operator>+</operator> <literal type="string">"' because it's the field type of dynamic field '"</literal> <operator>+</operator> <call><name><name>dynamicField</name><operator>.</operator><name>getRegex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <expr_stmt><expr><name>newSchema</name> <operator>=</operator> <call><name>shallowCopy</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>informResourceLoaderAwareObjectsForFieldType</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>newSchema</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cloneCopyFieldsMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>original</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clone</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>original</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>original</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>clone</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>ManagedIndexSchema</name></type> <name>replaceFieldType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>typeName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>replacementClassName</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>replacementArgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ManagedIndexSchema</name></type> <name>newSchema</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>isMutable</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>fieldTypes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"The field type '"</literal> <operator>+</operator> <name>typeName</name> <operator>+</operator> <literal type="string">"' is not present in this schema, and so cannot be replaced."</literal></expr></init></decl>;</decl_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>BAD_REQUEST</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>newSchema</name> <operator>=</operator> <call><name>shallowCopy</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// clone data structures before modifying them</comment>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name></name> <operator>=</operator> <operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>FieldType</name></argument>&gt;</argument_list></name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>FieldType</name></argument>&gt;</argument_list></name><operator>)</operator><name>fieldTypes</name><operator>)</operator><operator>.</operator><call><name>clone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>copyFieldsMap</name></name> <operator>=</operator> <call><name>cloneCopyFieldsMap</name><argument_list>(<argument><expr><name>copyFieldsMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>copyFieldTargetCounts</name></name>
          <operator>=</operator> <operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>SchemaField</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>SchemaField</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><operator>)</operator><name>copyFieldTargetCounts</name><operator>)</operator><operator>.</operator><call><name>clone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>dynamicCopyFields</name></name> <operator>=</operator> <operator>new</operator> <name><name>DynamicCopy</name><index>[<expr><name><name>dynamicCopyFields</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>dynamicCopyFields</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newSchema</name><operator>.</operator><name>dynamicCopyFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dynamicCopyFields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>dynamicFields</name></name> <operator>=</operator> <operator>new</operator> <name><name>DynamicField</name><index>[<expr><name><name>dynamicFields</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>dynamicFields</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newSchema</name><operator>.</operator><name>dynamicFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dynamicFields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FieldType</name></type> <name>replacementFieldType</name> <init>= <expr><call><name><name>newSchema</name><operator>.</operator><name>newFieldType</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>, <argument><expr><name>replacementClassName</name></expr></argument>, <argument><expr><name>replacementArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>, <argument><expr><name>replacementFieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Rebuild fields of the type being replaced</comment>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></type> <name>copyFieldsToRebuild</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SchemaField</name></argument>&gt;</argument_list></name></type> <name>replacementFields</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SchemaField</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>fieldsIter</name> <init>= <expr><call><name><name>newSchema</name><operator>.</operator><name>fields</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>fieldsIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SchemaField</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>fieldsIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SchemaField</name></type> <name>oldField</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>oldField</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><call><name><name>oldField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          
          <comment type="line">// Drop the old field</comment>
          <expr_stmt><expr><call><name><name>fieldsIter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fieldsWithDefaultValue</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>oldField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>requiredFields</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>oldField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="line">// Add the replacement field</comment>
          <decl_stmt><decl><type><name>SchemaField</name></type> <name>replacementField</name> <init>= <expr><call><name><name>SchemaField</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>replacementFieldType</name></expr></argument>, <argument><expr><call><name><name>oldField</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>replacementFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replacementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Save the new field to be added after iteration is finished</comment>
          <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>replacementField</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>replacementField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" contains default value: "</literal> <operator>+</operator> <call><name><name>replacementField</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fieldsWithDefaultValue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replacementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>replacementField</name><operator>.</operator><name>isRequired</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{} is required in this schema"</literal></expr></argument>, <argument><expr><call><name><name>replacementField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>requiredFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replacementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>removeCopyFieldSource</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>copyFieldsToRebuild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <for>for <control>(<init><decl><type><name>SchemaField</name></type> <name>replacementField</name> <range>: <expr><name>replacementFields</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fields</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>replacementField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replacementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <comment type="line">// Remove copy fields where the target is of the type being replaced; remember them to rebuild</comment>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>copyFieldsMapIter</name> <init>= <expr><call><name><name>newSchema</name><operator>.</operator><name>copyFieldsMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>copyFieldsMapIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>copyFieldsMapIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></type> <name>perSourceCopyFields</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>CopyField</name></argument>&gt;</argument_list></name></type> <name>checkDestCopyFieldsIter</name> <init>= <expr><call><name><name>perSourceCopyFields</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>checkDestCopyFieldsIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>CopyField</name></type> <name>checkDestCopyField</name> <init>= <expr><call><name><name>checkDestCopyFieldsIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SchemaField</name></type> <name>destination</name> <init>= <expr><call><name><name>checkDestCopyField</name><operator>.</operator><name>getDestination</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>typeName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>destination</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>checkDestCopyFieldsIter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>copyFieldsToRebuild</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>checkDestCopyField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>copyFieldTargetCounts</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// zero out target count</comment>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><call><name><name>perSourceCopyFields</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>copyFieldsMapIter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <comment type="line">// Rebuild dynamic fields of the type being replaced</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newSchema</name><operator>.</operator><name>dynamicFields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SchemaField</name></type> <name>prototype</name> <init>= <expr><name><name>newSchema</name><operator>.</operator><name>dynamicFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getPrototype</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>typeName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>prototype</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>dynamicFields</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DynamicField</name>
              <argument_list>(<argument><expr><call><name><name>SchemaField</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>prototype</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replacementFieldType</name></expr></argument>, <argument><expr><call><name><name>prototype</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <comment type="line">// Find dynamic copy fields where the destination field's type is being replaced</comment>
      <comment type="line">// or the source dynamic base's type is being replaced; remember them to rebuild</comment>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DynamicCopy</name></argument>&gt;</argument_list></name></type> <name>dynamicCopyFieldsToRebuild</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DynamicCopy</name></argument>&gt;</argument_list></name></type> <name>newDynamicCopyFields</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newSchema</name><operator>.</operator><name>dynamicCopyFields</name><operator>.</operator><name>length</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>DynamicCopy</name></type> <name>dynamicCopy</name> <init>= <expr><name><name>newSchema</name><operator>.</operator><name>dynamicCopyFields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DynamicField</name></type> <name>sourceDynamicBase</name> <init>= <expr><call><name><name>dynamicCopy</name><operator>.</operator><name>getSourceDynamicBase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SchemaField</name></type> <name>destinationPrototype</name> <init>= <expr><call><name><name>dynamicCopy</name><operator>.</operator><name>getDestination</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrototype</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>typeName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>destinationPrototype</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            <operator>||</operator> <operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>sourceDynamicBase</name> <operator>&amp;&amp;</operator> <call><name><name>typeName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>sourceDynamicBase</name><operator>.</operator><name>getPrototype</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>dynamicCopyFieldsToRebuild</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dynamicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>decrementCopyFieldTargetCount</name></name><argument_list>(<argument><expr><name>destinationPrototype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// don't add this dynamic copy field to newDynamicCopyFields - effectively removing it</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>newDynamicCopyFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dynamicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <comment type="line">// Rebuild affected dynamic copy fields</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>dynamicCopyFieldsToRebuild</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>dynamicCopyFields</name></name> <operator>=</operator> <call><name><name>newDynamicCopyFields</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>DynamicCopy</name><index>[<expr><call><name><name>newDynamicCopyFields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>DynamicCopy</name></type> <name>dynamicCopy</name> <range>: <expr><name>dynamicCopyFieldsToRebuild</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>registerCopyField</name></name><argument_list>(<argument><expr><call><name><name>dynamicCopy</name><operator>.</operator><name>getRegex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dynamicCopy</name><operator>.</operator><name>getDestFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dynamicCopy</name><operator>.</operator><name>getMaxChars</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>rebuildCopyFields</name></name><argument_list>(<argument><expr><name>copyFieldsToRebuild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>informResourceLoaderAwareObjectsForFieldType</name></name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>newSchema</name></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Informs analyzers used by a fieldType.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">696</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1273</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
     <comment type="line">// build the new FieldType using the existing FieldTypePluginLoader framework</comment>
     <comment type="line">// which expects XML, so we use a JSON to XML adapter to transform the JSON object</comment>
     <comment type="line">// provided in the request into the XML format supported by the plugin loader</comment>
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FieldType</name></argument>&gt;</argument_list></name> <name>newFieldTypes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FieldType</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <name><name>List</name><argument_list type="generic">&lt;<argument><name>SchemaAware</name></argument>&gt;</argument_list></name> <name>schemaAwareList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SchemaAware</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>FieldType</name></argument>&gt;</argument_list></name></type> <name>newFieldTypes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SchemaAware</name></argument>&gt;</argument_list></name></type> <name>schemaAwareList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>FieldTypePluginLoader</name></type> <name>typeLoader</name> <init>= <expr><operator>new</operator> <call><name>FieldTypePluginLoader</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>newFieldTypes</name></expr></argument>, <argument><expr><name>schemaAwareList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>typeLoader</name><operator>.</operator><name>loadSingle</name></name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><call><name><name>FieldTypeXmlAdapter</name><operator>.</operator><name>toNode</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>newFieldTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">749</literal></expr><operator>,</operator><expr><literal type="number">56</literal> <operator>+</operator><literal type="number">1326</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
   

  <comment type="block" format="javadoc">/** 
   * Called from ZkIndexSchemaReader to merge the fields from the serialized managed schema
   * on ZooKeeper with the local managed schema.
   * 
   * @param inputSource The serialized content of the managed schema from ZooKeeper
   * @param schemaZkVersion The ZK version of the managed schema on ZooKeeper
   * @return The new merged schema
   */</comment>
  <function><type><name>ManagedIndexSchema</name></type> <name>reloadFields</name><parameter_list>(<parameter><decl><type><name>InputSource</name></type> <name>inputSource</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schemaZkVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ManagedIndexSchema</name></type> <name>newSchema</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>newSchema</name> <operator>=</operator> <call><name>shallowCopy</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Config</name></type> <name>schemaConf</name> <init>= <expr><operator>new</operator> <call><name>Config</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>SCHEMA</name></expr></argument>, <argument><expr><name>inputSource</name></expr></argument>, <argument><expr><name>SLASH</name><operator>+</operator><name>SCHEMA</name><operator>+</operator><name>SLASH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Document</name></type> <name>document</name> <init>= <expr><call><name><name>schemaConf</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>XPath</name></type> <name>xpath</name> <init>= <expr><call><name><name>schemaConf</name><operator>.</operator><name>getXPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// create a unified collection of field types from zk and in the local</comment>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>mergeFieldTypesFromZk</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>loadFields</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// let's completely rebuild the copy fields from the schema in ZK.</comment>
      <comment type="line">// create new copyField-related objects so we don't affect the</comment>
      <comment type="line">// old schema</comment>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>copyFieldsMap</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>dynamicCopyFields</name></name> <operator>=</operator> <operator>new</operator> <name><name>DynamicCopy</name><index>[]</index></name> <block>{}</block></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>copyFieldTargetCounts</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>loadCopyFields</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>uniqueKeyField</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>requiredFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>uniqueKeyField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">//Run the callbacks on SchemaAware now that everything else is done</comment>
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// notify analyzers and other objects for our fieldTypes</comment>
      <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>informResourceLoaderAwareObjectsForFieldType</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newSchema</name><operator>.</operator><name>schemaZkVersion</name></name> <operator>=</operator> <name>schemaZkVersion</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SolrException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"Schema Parsing Failed: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>newSchema</name></expr>;</return>
  </block_content>}</block></function>
  
   <constructor><specifier>private</specifier> <name>ManagedIndexSchema</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SolrConfig</name></type> <name>solrConfig</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>SolrResourceLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isMutable</name></decl></parameter>,
                              <parameter><decl><type><name>String</name></type> <name>managedSchemaResourceName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schemaZkVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>schemaUpdateLock</name></decl></parameter>)</parameter_list> 
       <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">872</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">1399</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
   <expr><specifier>public</specifier> <name>Object</name> <call><name>getSchemaUpdateLock</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>schemaUpdateLock</name></expr>;</return></block></expr>
   }</block>

  <comment type="block" format="javadoc">/**
   * Loads FieldType objects defined in the schema.xml document.
   *
   * @param document Schema XML document where field types are defined.
   * @param xpath Used for evaluating xpath expressions to find field types defined in the schema.xml.
   * @throws javax.xml.xpath.XPathExpressionException if an error occurs when finding field type elements in the document.
   */</comment>
  <specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>mergeFieldTypesFromZk</name><argument_list>(<argument><expr><name>Document</name> <name>document</name></expr></argument>, <argument><expr><name>XPath</name> <name>xpath</name></expr></argument>)</argument_list></call>
      <throws>throws <argument><expr><name>XPathExpressionException</name>
  <block>{
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FieldType</name></argument>&gt;</argument_list></name> <name>newFieldTypes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FieldType</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FieldTypePluginLoader</name></type> <name>typeLoader</name> <init>= <expr><operator>new</operator> <call><name>FieldTypePluginLoader</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>newFieldTypes</name></expr></argument>, <argument><expr><name>schemaAware</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><call><name>getFieldTypeXPathExpressions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeList</name></type> <name>nodes</name> <init>= <expr><operator>(</operator><name>NodeList</name><operator>)</operator> <call><name><name>xpath</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>, <argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>XPathConstants</name><operator>.</operator><name>NODESET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>typeLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>newTypeName</name> <range>: <expr><call><name><name>newFieldTypes</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>fieldTypes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>newTypeName</name></expr></argument>, <argument><expr><call><name><name>newFieldTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>newTypeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></constructor>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ManagedIndexSchemaFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ManagedIndexSchemaFactory</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e4a067d0f07</name><operator>..</operator><literal type="number">160085d68a7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ManagedIndexSchemaFactory</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ManagedIndexSchemaFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">404</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">404</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ManagedIndexSchemaFactory</name> extends <name>IndexSchemaFactory</name> implements <name>Sol</name>
     <name><name>this</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name>schema</name></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>setLatestSchema</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
  
  public <function><type><name>boolean</name></type> <name>isMutable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>isMutable</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>SolrConfig</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>config</name></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>caf27736c2a</name><operator>..</operator><name>be99485acfc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaField</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SchemaField</name> extends <name>FieldProperties</name> <block>{
   <expr><specifier>public</specifier> <name>boolean</name> <call><name>sortMissingFirst</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><operator>(</operator><name>properties</name> <operator>&amp;</operator> <name>SORT_MISSING_FIRST</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</return></block></expr> }</block>
   <specifier>public</specifier> <name>boolean</name> <call><name>sortMissingLast</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><operator>(</operator><name>properties</name> <operator>&amp;</operator> <name>SORT_MISSING_LAST</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRequired</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>required</name></expr>;</return> </block_content>}</block></function> 
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getArgs</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
 
   <comment type="line">// things that should be determined by field type, not set as options</comment>
   <function><type><name>boolean</name></type> <name>isTokenized</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>properties</name> <operator>&amp;</operator> <name>TOKENIZED</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5130647a4fd</literal><operator>..</operator><name>c4c1e5b6a34</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>SchemaManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkController</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkSolrResourceLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>ConfigOverlay</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>CoreDescriptor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrResourceLoader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>EMPTY_LIST</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>EMPTY_MAP</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singleton</name></name>;</import>
 <import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singletonList</name></name>;</import>
 <import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singletonMap</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>FieldType</name><operator>.</operator><name>CLASS_NAME</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name><operator>.</operator><name>NAME</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name><operator>.</operator><name>SOURCE</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexSchema</name><operator>.</operator><name>TYPE</name></name>;</import>
 
<comment type="block" format="javadoc">/**A utility class to manipulate schema using the bulk mode.
 * This class takes in all the commands and process them completely. It is an all or none
 * operation
/**
 * A utility class to manipulate schema using the bulk mode.
 * This class takes in all the commands and processes them completely.
 * It is an all or nothing operation.
  */</comment>
 <class><specifier>public</specifier> class <name>SchemaManager</name> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SchemaManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">50</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaManager</name> <block>{
   <expr><name>final</name> <name>SolrQueryRequest</name> <name>req</name></expr>;
   <expr><name>ManagedIndexSchema</name> <name>managedIndexSchema</name></expr>;
 
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>ADD_FIELD</name> <operator>=</operator> <literal type="string">"add-field"</literal></expr>;
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>ADD_COPY_FIELD</name> <operator>=</operator> <literal type="string">"add-copy-field"</literal></expr>;
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>ADD_DYNAMIC_FIELD</name> <operator>=</operator> <literal type="string">"add-dynamic-field"</literal></expr>;
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>ADD_FIELD_TYPE</name> <operator>=</operator> <literal type="string">"add-field-type"</literal></expr>;

  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>KNOWN_OPS</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>static</specifier> <block>{
    <expr><call><name><name>KNOWN_OPS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ADD_COPY_FIELD</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>KNOWN_OPS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ADD_FIELD</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>KNOWN_OPS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ADD_DYNAMIC_FIELD</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>KNOWN_OPS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ADD_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;
  }</block>

   <specifier>public</specifier> <call><name>SchemaManager</name><argument_list>(<argument><expr><name>SolrQueryRequest</name> <name>req</name></expr></argument>)</argument_list></call><block>{
     <expr><name><name>this</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;

   }</block>
 
  <comment type="block" format="javadoc">/**Take in a JSON command set and execute them . It tries to capture as many errors
   * as possible instead of failing at the frst error it encounters
   * @param rdr The input as a Reader
   * @return Lis of errors . If the List is empty then the operation is successful.
  /**
   * Take in a JSON command set and execute them. It tries to capture as many errors
   * as possible instead of failing at the first error it encounters
   * @param reader The input as a Reader
   * @return List of errors. If the List is empty then the operation was successful.
    */</comment>
  <specifier>public</specifier> <name>List</name> <call><name>performOperations</name><argument_list>(<argument><expr><name>Reader</name> <name>rdr</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>CommandOperation</name></argument>&gt;</argument_list></name> <name>ops</name> <operator>=</operator> <literal type="null">null</literal></expr></block></expr></argument></throws></expr>;
  <expr><specifier>public</specifier> <name>List</name> <call><name>performOperations</name><argument_list>(<argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>CommandOperation</name></argument>&gt;</argument_list></name> <name>ops</name></expr></block></expr></argument></throws></expr>;
     <try>try <block>{<block_content>
      <expr_stmt><expr><name>ops</name> <operator>=</operator> <call><name><name>CommandOperation</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ops</name> <operator>=</operator> <call><name><name>CommandOperation</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name><init>= <expr><literal type="string">"Error parsing schema operations "</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>  ,<argument><expr><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"Error parsing schema operations "</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name>singletonMap</name><argument_list>(<argument><expr><name><name>CommandOperation</name><operator>.</operator><name>ERR_MSGS</name></name></expr></argument>, <argument><expr><name>msg</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></catch>
     <decl_stmt><decl><type><name>List</name></type> <name>errs</name> <init>= <expr><call><name><name>CommandOperation</name><operator>.</operator><name>captureErrors</name></name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>errs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>errs</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>errs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>errs</name></expr>;</return></block_content></block></if></if_stmt>
 
     <decl_stmt><decl><type><name>IndexSchema</name></type> <name>schema</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>schema</name> <operator>instanceof</operator> <name>ManagedIndexSchema</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>singletonList</name><argument_list>( <argument><expr><call><name>singletonMap</name><argument_list>(<argument><expr><name><name>CommandOperation</name><operator>.</operator><name>ERR_MSGS</name></name></expr></argument>,<argument><expr><literal type="string">"schema is not editable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><call><name>singletonList</name><argument_list>(<argument><expr><call><name>singletonMap</name><argument_list>(<argument><expr><name><name>CommandOperation</name><operator>.</operator><name>ERR_MSGS</name></name></expr></argument>, <argument><expr><literal type="string">"schema is not editable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>

     <synchronized>synchronized <init>(<expr><call><name><name>schema</name><operator>.</operator><name>getSchemaUpdateLock</name></name><argument_list>()</argument_list></call></expr>)</init> <block>{<block_content>
       <return>return <expr><call><name>doOperations</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></synchronized>

   }</block></class>
 
   <function><type><specifier>private</specifier> <name>List</name></type> <name>doOperations</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CommandOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>KeeperException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaManager</name> <block>{
     <expr><name>long</name> <name>startTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>long</name> <name>endTime</name> <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr> </then><else>: <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;
     <expr><name>SolrCore</name> <name>core</name> <operator>=</operator> <call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init>;</init> <condition><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>endTime</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
    <while>while <condition>(<expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>endTime</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>managedIndexSchema</name> <operator>=</operator> <call><name>getFreshManagedSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name>CommandOperation</name></type> <name>op</name> <range>: <expr><name>operations</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ADD_FIELD</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>ADD_DYNAMIC_FIELD</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>applyAddField</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for></block_content></block></while></block_content></block></for>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if<condition>(<expr><call><name><name>ADD_COPY_FIELD</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>applyAddCopyField</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name><name>ADD_FIELD_TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>applyAddType</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OpType</name></type> <name>opType</name> <init>= <expr><call><name><name>OpType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>opType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>opType</name><operator>.</operator><name>perform</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"No such operation : "</literal> <operator>+</operator> <name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaManager</name> <block>{
               <expr><call><name><name>managedIndexSchema</name><operator>.</operator><name>getResourceName</name></name><argument_list>()</argument_list></call></expr>,
               <expr><call><name><name>sw</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>,
               <expr><literal type="boolean">true</literal></expr>)</block></expr>;</expr_stmt>
          <return>return <expr><name>EMPTY_LIST</name></expr>;</return>
          <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
         </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name><name>ZkController</name><operator>.</operator><name>ResourceModifiedInZkException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Race condition schema modified by another node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">"Exception persisting schema"</literal></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <return>return <expr><call><name>singletonList</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block></catch>

      </block_content>}</block></function><if_stmt><else>else <block>{<block_content>

      </block_content>}</block></else></if_stmt> <if_stmt><else>else <block>{<block_content>
         <try>try <block>{<block_content>
           <comment type="line">//only for non cloud stuff</comment>
           <expr_stmt><expr><call><name><name>managedIndexSchema</name><operator>.</operator><name>persistManagedSchema</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>core</name><operator>.</operator><name>setLatestSchema</name></name><argument_list>(<argument><expr><name>managedIndexSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>waitForOtherReplicasToUpdate</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>EMPTY_LIST</name></expr>;</return>
          <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>ManagedIndexSchema</name><operator>.</operator><name>SchemaChangedInZkException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">"Failed to update schema because schema is modified"</literal></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">"Exception persisting schema"</literal></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">102</literal> <operator>+</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">269</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaManager</name> <block>{
         }</block></expr></expr_stmt>
       </block_content>}</block></catch></try>
     </block_content>}</block></else></if_stmt>

     <return>return <expr><call><name>singletonList</name><argument_list>(<argument><expr><literal type="string">"Unable to persist schema"</literal></expr></argument>)</argument_list></call></expr>;</return>

   }
 
   private <function><type><name>void</name></type> <name>waitForOtherReplicasToUpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>startTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call><operator>instanceof</operator> <name>ZkSolrResourceLoader</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ZkSolrResourceLoader</name></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>CoreDescriptor</name></type> <name>cd</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoreDescriptor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>collection</name> <init>= <expr><call><name><name>cd</name><operator>.</operator><name>getCollectionName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>collection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>ZkSolrResourceLoader</name></type> <name>zkLoader</name> <init>= <expr><operator>(</operator><name>ZkSolrResourceLoader</name><operator>)</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>getResourceLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>timeLeftSecs</name> <init>= <expr><name>timeout</name> <operator>-</operator>   <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>timeLeftSecs</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"Not enough time left to update replicas. However the schema is updated already"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>timeLeftSecs</name> <init>= <expr><name>timeout</name> <operator>-</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>timeLeftSecs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SolrException</name><argument_list>(<argument><expr><name><name>SolrException</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>,
              <argument><expr><literal type="string">"Not enough time left to update replicas. However, the schema is updated already."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>ManagedIndexSchema</name><operator>.</operator><name>waitForSchemaZkVersionAgreement</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>,
             <argument><expr><call><name><name>cd</name><operator>.</operator><name>getCloudDescriptor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoreNodeName</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><operator>(</operator><name>managedIndexSchema</name><operator>)</operator><operator>.</operator><call><name>getSchemaZkVersion</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>zkLoader</name><operator>.</operator><name>getZkController</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>timeLeftSecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>

     </block_content>}</block></if></if_stmt>
   </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>applyAddType</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>clz</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>CLASS_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>FieldType</name></type> <name>fieldType</name> <init>= <expr><call><name><name>managedIndexSchema</name><operator>.</operator><name>newFieldType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clz</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getDataMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>managedIndexSchema</name> <operator>=</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>addFieldTypes</name></name><argument_list>(<argument><expr><call><name>singletonList</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  <enum><specifier>public</specifier> enum <name>OpType</name> <block>{
    <decl><name>ADD_FIELD_TYPE</name><argument_list>(<argument><expr><literal type="string">"add-field-type"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>CLASS_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>FieldType</name></type> <name>fieldType</name> <init>= <expr><call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>newFieldType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>className</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getDataMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>addFieldTypes</name></name><argument_list>(<argument><expr><call><name>singletonList</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>ADD_COPY_FIELD</name><argument_list>(<argument><expr><literal type="string">"add-copy-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>src</name>  <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>SOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dests</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStrs</name></name><argument_list>(<argument><expr><name>DESTINATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>SOURCE</name></expr></argument>, <argument><expr><name>DESTINATION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"Only the '"</literal> <operator>+</operator> <name>SOURCE</name> <operator>+</operator> <literal type="string">"' and '"</literal> <operator>+</operator> <name>DESTINATION</name>
              <operator>+</operator> <literal type="string">"' params are allowed with the 'add-copy-field' operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>addCopyFields</name></name><argument_list>(<argument><expr><call><name>singletonMap</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dests</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>ADD_FIELD</name><argument_list>(<argument><expr><literal type="string">"add-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>getFieldTypeByName</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ft</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"No such field type '"</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>SchemaField</name></type> <name>field</name> <init>= <expr><call><name><name>SchemaField</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> 
              <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>addFields</name></name><argument_list>(<argument><expr><call><name>singletonList</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>ADD_DYNAMIC_FIELD</name><argument_list>(<argument><expr><literal type="string">"add-dynamic-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>getFieldTypeByName</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ft</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"No such field type '"</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return  <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>SchemaField</name></type> <name>field</name> <init>= <expr><call><name><name>SchemaField</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> 
              <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>addDynamicFields</name></name><argument_list>(<argument><expr><call><name>singletonList</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>DELETE_FIELD_TYPE</name><argument_list>(<argument><expr><literal type="string">"delete-field-type"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"Only the '"</literal> <operator>+</operator> <name>NAME</name> <operator>+</operator> <literal type="string">"' param is allowed with the 'delete-field-type' operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>deleteFieldTypes</name></name><argument_list>(<argument><expr><call><name>singleton</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>DELETE_COPY_FIELD</name><argument_list>(<argument><expr><literal type="string">"delete-copy-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>source</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>SOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dests</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStrs</name></name><argument_list>(<argument><expr><name>DESTINATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>SOURCE</name></expr></argument>, <argument><expr><name>DESTINATION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"Only the '"</literal> <operator>+</operator> <name>SOURCE</name> <operator>+</operator> <literal type="string">"' and '"</literal> <operator>+</operator> <name>DESTINATION</name> 
              <operator>+</operator> <literal type="string">"' params are allowed with the 'delete-copy-field' operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>deleteCopyFields</name></name><argument_list>(<argument><expr><call><name>singletonMap</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dests</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>DELETE_FIELD</name><argument_list>(<argument><expr><literal type="string">"delete-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"Only the '"</literal> <operator>+</operator> <name>NAME</name> <operator>+</operator> <literal type="string">"' param is allowed with the 'delete-field' operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>                                                            
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>deleteFields</name></name><argument_list>(<argument><expr><call><name>singleton</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>                                                             
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>DELETE_DYNAMIC_FIELD</name><argument_list>(<argument><expr><literal type="string">"delete-dynamic-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"Only the '"</literal> <operator>+</operator> <name>NAME</name> <operator>+</operator> <literal type="string">"' param is allowed with the 'delete-dynamic-field' operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>deleteDynamicFields</name></name><argument_list>(<argument><expr><call><name>singleton</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>REPLACE_FIELD_TYPE</name><argument_list>(<argument><expr><literal type="string">"replace-field-type"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>CLASS_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>replaceFieldType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>className</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getDataMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>REPLACE_FIELD</name><argument_list>(<argument><expr><literal type="string">"replace-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>getFieldTypeByName</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ft</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"No such field type '"</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>replaceField</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>,
    <decl><name>REPLACE_DYNAMIC_FIELD</name><argument_list>(<argument><expr><literal type="string">"replace-dynamic-field"</literal></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <type><specifier>public</specifier> <name>boolean</name></type> <name>perform</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SchemaManager</name></type> <name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>getFieldTypeByName</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ft</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"No such field type '"</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return  <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name></name> <operator>=</operator> <call><name><name>mgr</name><operator>.</operator><name>managedIndexSchema</name><operator>.</operator><name>replaceDynamicField</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></decl>;

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>perform</name><argument_list>(<argument><expr><name>CommandOperation</name> <name>op</name></expr></argument>, <argument><expr><name>SchemaManager</name> <name>mgr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>OpType</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>Nested</name><operator>.</operator><name>OP_TYPES</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Nested</name> <block>{ <comment type="line">// Initializes contained static map before any enum ctor</comment>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>OpType</name></argument>&gt;</argument_list></name></type> <name>OP_TYPES</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></class>

    <constructor><specifier>private</specifier> <name>OpType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Nested</name><operator>.</operator><name>OP_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></constructor>
   }</block></enum>
 
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getErrorStr</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name><init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>cause</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name><name>cause</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>cause</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>cause</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>cause</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>cause</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>cause</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
       <expr_stmt><expr><name>cause</name> <operator>=</operator> <call><name><name>cause</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></for>
 
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>applyAddCopyField</name><parameter_list>(<parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>src</name>  <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>SOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dest</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStrs</name></name><argument_list>(<argument><expr><name>DESTINATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>managedIndexSchema</name> <operator>=</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>addCopyFields</name></name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>singletonMap</name><argument_list>(<argument><expr><name>src</name></expr></argument>,<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>applyAddField</name><parameter_list>( <parameter><decl><type><name>CommandOperation</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>op</name><operator>.</operator><name>getStr</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>op</name><operator>.</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>FieldType</name></type> <name>ft</name> <init>= <expr><call><name><name>managedIndexSchema</name><operator>.</operator><name>getFieldTypeByName</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>ft</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><literal type="string">"No such field type '"</literal><operator>+</operator><name>type</name><operator>+</operator><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return  <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>ADD_DYNAMIC_FIELD</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>managedIndexSchema</name> <operator>=</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>addDynamicFields</name></name><argument_list>(
            <argument><expr><call><name>singletonList</name><argument_list>(<argument><expr><call><name><name>SchemaField</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>EMPTY_MAP</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>managedIndexSchema</name> <operator>=</operator> <call><name><name>managedIndexSchema</name><operator>.</operator><name>addFields</name></name><argument_list>(
            <argument><expr><call><name>singletonList</name><argument_list>( <argument><expr><call><name><name>SchemaField</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><call><name><name>op</name><operator>.</operator><name>getValuesExcluding</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>EMPTY_MAP</name></expr></argument>,
            <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>op</name><operator>.</operator><name>addError</name></name><argument_list>(<argument><expr><call><name>getErrorStr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>ManagedIndexSchema</name></type> <name>getFreshManagedSchema</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>SolrResourceLoader</name></type> <name>resourceLoader</name> <init>= <expr><call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>resourceLoader</name> <operator>instanceof</operator> <name>ZkSolrResourceLoader</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ZkSolrResourceLoader</name></type> <name>loader</name> <init>= <expr><operator>(</operator><name>ZkSolrResourceLoader</name><operator>)</operator> <name>resourceLoader</name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>resourceLoader</name><operator>.</operator><name>openResource</name></name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>in</name> <operator>instanceof</operator> <name><name>ZkSolrResourceLoader</name><operator>.</operator><name>ZkByteArrayInputStream</name></name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ZkSolrResourceLoader</name><operator>.</operator><name>ZkByteArrayInputStream</name></name><operator>)</operator> <name>in</name><operator>)</operator><operator>.</operator><call><name>getStat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">284</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">426</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SchemaManager</name> <block>{
             <expr><literal type="boolean">true</literal></expr>,
             <expr><call><name><name>req</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceName</name><argument_list>()</argument_list></call></expr>,
             <expr><name>version</name></expr>,<expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr>)</block></expr>;</expr_stmt>
      </block_content>}</block></if><else>else <block>{<block_content>
      </block_content>}</block></else></if_stmt> <if_stmt><else>else <block>{<block_content>
         <return>return <expr><operator>(</operator><name>ManagedIndexSchema</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block></else></if_stmt>

     </block_content>}</block></if> <else>else <block>{<block_content>
       <return>return <expr><operator>(</operator><name>ManagedIndexSchema</name><operator>)</operator> <call><name><name>req</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></else></if_stmt>



   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ZkIndexSchemaReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ZkIndexSchemaReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1e88a448b7a</literal><operator>..</operator><literal type="number">5b44cd57925</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ZkIndexSchemaReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>ZkIndexSchemaReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>ZkIndexSchemaReader</name> implements <name>OnReconnect</name> <block>{
       <if_stmt><if>if <condition>(<expr><name>expectedZkVersion</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>oldSchema</name><operator>.</operator><name>schemaZkVersion</name></name> <operator>&lt;</operator> <name>expectedZkVersion</name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>zkClient</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>managedSchemaPath</name></expr></argument>, <argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>stat</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>oldSchema</name><operator>.</operator><name>schemaZkVersion</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Retrieved schema version "</literal><operator>+</operator><call><name><name>stat</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" from ZooKeeper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Retrieved schema version "</literal><operator>+</operator> <call><name><name>stat</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" from ZooKeeper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name>InputSource</name></type> <name>inputSource</name> <init>= <expr><operator>new</operator> <call><name>InputSource</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ManagedIndexSchema</name></type> <name>newSchema</name> <init>= <expr><call><name><name>oldSchema</name><operator>.</operator><name>reloadFields</name></name><argument_list>(<argument><expr><name>inputSource</name></expr></argument>, <argument><expr><call><name><name>stat</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>resourceName</name> <init>= <expr><call><name><name>managedIndexSchemaFactory</name><operator>.</operator><name>getManagedSchemaResourceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ManagedIndexSchema</name></type> <name>newSchema</name> <init>= <expr><operator>new</operator> <call><name>ManagedIndexSchema</name>
              <argument_list>(<argument><expr><call><name><name>managedIndexSchemaFactory</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>resourceName</name></expr></argument>, <argument><expr><name>inputSource</name></expr></argument>,
                  <argument><expr><call><name><name>managedIndexSchemaFactory</name><operator>.</operator><name>isMutable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>resourceName</name></expr></argument>, <argument><expr><call><name><name>stat</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>managedIndexSchemaFactory</name><operator>.</operator><name>setSchema</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>long</name></type> <name>stop</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Finished refreshing schema in "</literal> <operator>+</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>stop</name> <operator>-</operator> <name>start</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ae1e6305ecb</name><operator>..</operator><literal type="number">3401780e50d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>util</name><operator>/</operator><name><name>CommandOperation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommandOperation</name> <block>{
     <return>return <expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>?</operator> <name>def</name> <operator>:</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
   }</block>
 
  <specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name> <call><name>getDataMap</name><argument_list>()</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name> <call><name>getDataMap</name><argument_list>()</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><name>commandData</name> <operator>instanceof</operator> <name>Map</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>Map</name><operator>)</operator> <name>commandData</name></expr>;</return>
      <comment type="line">//noinspection unchecked</comment>
      <return>return <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name><operator>)</operator><name>commandData</name></expr>;</return>
     <expr_stmt/></block_content></block></if></if_stmt>}</block>
     <call><name>addError</name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"The command ''{0}'' should have the values as a json object {key:val} format"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name><name>Collections</name><operator>.</operator><name>EMPTY_MAP</name></name></expr>;</return></block></expr></expr_stmt>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></catch></try>
 
   <function><type><specifier>private</specifier> <name>Object</name></type> <name>getRootPrimitive</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommandOperation</name> <block>{
    <expr><operator>*</operator> <name>Get</name> <name>all</name> <name>the</name> <name>values</name> <name>from</name> <name>the</name> <name>metadata</name></expr> <for>for the command
    * without the specified keys
    */
  public Map getValuesExcluding<control>(<init><expr><name>String</name><operator>...</operator> <name>keys</name></expr></init>)</control> <block>{<block_content>
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getValuesExcluding</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>getMapVal</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>hasError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>emptyMap</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt><comment type="line">//just to verify the type is Map</comment>
    <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>cp</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <name>commandData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation> 
    <type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>cp</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator><name>commandData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>keys</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>cp</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>rest</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaAPI</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>rest</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaAPI</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">050fc082ecf</literal><operator>..</operator><literal type="number">4fe2e07dbc0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>rest</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaAPI</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>rest</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaAPI</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>rest</name><operator>.</operator><name>schema</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RestTestBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RestTestHarness</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jetty</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletHolder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>noggit</name><operator>.</operator><name>JSONParser</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>noggit</name><operator>.</operator><name>ObjectBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>restlet</name><operator>.</operator><name>ext</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServerServlet</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
 
 <class><specifier>public</specifier> class <name>TestBulkSchemaAPI</name> <super_list><extends>extends <super><name>RestTestBase</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>tmpSolrHome</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>tmpConfDir</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>collection</name> <init>= <expr><literal type="string">"collection1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>confDir</name> <init>= <expr><name>collection</name> <operator>+</operator> <literal type="string">"/conf"</literal></expr></init></decl>;</decl_stmt>

 
   <function><annotation>@<name>Before</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>before</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><name>tmpSolrHome</name> <operator>=</operator> <call><name>createTempDir</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpConfDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>tmpSolrHome</name></expr></argument>, <argument><expr><name>confDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyDirectory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>TEST_HOME</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tmpSolrHome</name><operator>.</operator><name>getAbsoluteFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>ServletHolder</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>extraServlets</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ServletHolder</name></type> <name>solrRestApi</name> <init>= <expr><operator>new</operator> <call><name>ServletHolder</name><argument_list>(<argument><expr><literal type="string">"SolrSchemaRestApi"</literal></expr></argument>, <argument><expr><name><name>ServerServlet</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>solrRestApi</name><operator>.</operator><name>setInitParameter</name></name><argument_list>(<argument><expr><literal type="string">"org.restlet.application"</literal></expr></argument>, <argument><expr><literal type="string">"org.apache.solr.rest.SolrSchemaRestApi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>extraServlets</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>solrRestApi</name></expr></argument>, <argument><expr><literal type="string">"/schema/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'</comment>

     <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"managed.schema.mutable"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"enable.update.log"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>createJettyAndHarness</name><argument_list>(<argument><expr><call><name><name>tmpSolrHome</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"solrconfig-managed-schema.xml"</literal></expr></argument>, <argument><expr><literal type="string">"schema-rest.xml"</literal></expr></argument>,
        <argument><expr><literal type="string">"/solr"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>extraServlets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><literal type="string">"/solr"</literal></expr><operator>,</operator> <expr><literal type="boolean">true</literal></expr><operator>,</operator> <expr><literal type="null">null</literal></expr></expr_stmt>)</block_content></block>;</function>
   <expr_stmt/></block></class></block_content></block></for></block_content></block></function></block_content></block></for>}</block>
 
   @<name>After</name>
@@ <operator>-</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name> <block>{
 
   <expr><specifier>public</specifier> <name>void</name> <call><name>testMultipleAddFieldWithErrors</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
 
    <expr><name>String</name> <name>payload</name> <operator>=</operator> <call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>json</name></name><argument_list>( <argument><expr><literal type="string">"{\n"</literal> <operator>+</operator>
    <name>String</name> <name>payload</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
         <literal type="string">"    'add-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                 'name':'a1',\n"</literal> <operator>+</operator>
         <literal type="string">"                 'type': 'string1',\n"</literal> <operator>+</operator></expr></argument></argument_list></call></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">93</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">77</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><literal type="string">"                 'stored':true,\n"</literal> <operator>+</operator>
         <literal type="string">"                 'indexed':true\n"</literal> <operator>+</operator>
         <literal type="string">"                 }\n"</literal> <operator>+</operator>
        <literal type="string">"   \n"</literal> <operator>+</operator>
        <literal type="string">"    }"</literal></expr></expr_stmt>)</block_content></block></expr>;
        <expr><literal type="string">"    }"</literal></expr>;
 
    <expr><name>String</name> <name>response</name> <operator>=</operator> <call><name><name>restTestHarness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>response</name> <operator>=</operator> <call><name><name>restTestHarness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name>Map</name> <name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name>List</name> <name>l</name> <operator>=</operator> <operator>(</operator><name>List</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">111</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">94</literal></expr>,<expr><literal type="number">41</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name> <block>{
 
 
   <expr><specifier>public</specifier> <name>void</name> <call><name>testMultipleCommands</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name><block>{
    <expr><name>RestTestHarness</name> <name>harness</name> <operator>=</operator> <name>restTestHarness</name></expr></block></expr></argument></throws></expr>;

    <expr><name>Map</name> <name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"wdf_nocase"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'wdf_nocase' field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"wdf_nocase"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'wdf_nocase' field type does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"boolean"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'boolean' field type does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sortMissingFirst"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sortMissingLast"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'name' field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"nametext"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'bind' field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"boolean"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"attr_*"</literal></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'attr_*' dynamic field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>List</name> <name>l</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"*_i"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>Set</name> <name>s</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"*_s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

     <expr><name>String</name> <name>payload</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'name':'a1',\n"</literal> <operator>+</operator>
@@ <operator>-</operator><literal type="number">126</literal></expr>,<expr><literal type="number">48</literal> <operator>+</operator><literal type="number">144</literal></expr>,<expr><literal type="number">85</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name> <block>{
         <expr><literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-dynamic-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'name' :'*_lol',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'type':'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                        'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                        },\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type':'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-copy-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'source' :'a1',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'dest':['a2','hello_lol']\n"</literal> <operator>+</operator>
        <literal type="string">"                        },\n"</literal> <operator>+</operator>
        <literal type="string">"                       'dest':['a2','hello_lol']\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-field-type' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'name' :'mystr',\n"</literal> <operator>+</operator>
         <literal type="string">"                       'class' : 'solr.StrField',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'sortMissingLast':'true'\n"</literal> <operator>+</operator>
        <literal type="string">"                        },\n"</literal> <operator>+</operator>
        <literal type="string">"                       'sortMissingLast':'true'\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-field-type' : {"</literal> <operator>+</operator>
        <literal type="string">"                     'name' : 'myNewTxtField',\n"</literal> <operator>+</operator>
        <literal type="string">"                     'class':'solr.TextField','positionIncrementGap':'100',\n"</literal> <operator>+</operator>
        <literal type="string">"                     'analyzer' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                                  'charFilters':[\n"</literal> <operator>+</operator>
        <literal type="string">"                                            {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\1+'}\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name' : 'myNewTxtField',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'class':'solr.TextField',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'positionIncrementGap':'100',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'analyzer' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                               'charFilters':[\n"</literal> <operator>+</operator>
        <literal type="string">"                                          {\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'class':'solr.PatternReplaceCharFilterFactory',\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'replacement':'$1$1',\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'pattern':'([a-zA-Z])\\\\\\\\1+'\n"</literal> <operator>+</operator>
        <literal type="string">"                                          }\n"</literal> <operator>+</operator>
         <literal type="string">"                                         ],\n"</literal> <operator>+</operator>
        <literal type="string">"                     'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\n"</literal> <operator>+</operator>
        <literal type="string">"                     'filters':[\n"</literal> <operator>+</operator>
        <literal type="string">"                             {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\n"</literal> <operator>+</operator>
        <literal type="string">"                             {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\n"</literal> <operator>+</operator>
        <literal type="string">"                             {'class':'solr.LowerCaseFilterFactory'},\n"</literal> <operator>+</operator>
        <literal type="string">"                             {'class':'solr.ASCIIFoldingFilterFactory'},\n"</literal> <operator>+</operator>
        <literal type="string">"                             {'class':'solr.KStemFilterFactory'}\n"</literal> <operator>+</operator>
        <literal type="string">"                  ]\n"</literal> <operator>+</operator>
        <literal type="string">"                }\n"</literal> <operator>+</operator>
        <literal type="string">"              }"</literal><operator>+</operator>
        <literal type="string">"          }"</literal></expr>;

    <expr><name>RestTestHarness</name> <name>harness</name> <operator>=</operator> <name>restTestHarness</name></expr>;


    <expr><name>String</name> <name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>json</name></name><argument_list>( <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><literal type="string">"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\n"</literal> <operator>+</operator>
        <literal type="string">"                               'filters':[\n"</literal> <operator>+</operator>
        <literal type="string">"                                          {\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'class':'solr.WordDelimiterFilterFactory',\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'preserveOriginal':'0'\n"</literal> <operator>+</operator>
        <literal type="string">"                                          },\n"</literal> <operator>+</operator>
        <literal type="string">"                                          {\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'class':'solr.StopFilterFactory',\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'words':'stopwords.txt',\n"</literal> <operator>+</operator>
        <literal type="string">"                                           'ignoreCase':'true'\n"</literal> <operator>+</operator>
        <literal type="string">"                                          },\n"</literal> <operator>+</operator>
        <literal type="string">"                                          {'class':'solr.LowerCaseFilterFactory'},\n"</literal> <operator>+</operator>
        <literal type="string">"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\n"</literal> <operator>+</operator>
        <literal type="string">"                                          {'class':'solr.KStemFilterFactory'}\n"</literal> <operator>+</operator>
        <literal type="string">"                                         ]\n"</literal> <operator>+</operator>
        <literal type="string">"                               }\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal><operator>+</operator>
        <literal type="string">"          'add-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'a3',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type': 'myNewTxtField',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-field' : {'name':'wdf_nocase'},\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-field-type' : {'name':'wdf_nocase'},\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-dynamic-field' : {'name':'*_tt'},\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\n"</literal> <operator>+</operator>
        <literal type="string">"          'replace-field-type' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'boolean',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'class':'solr.BoolField',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'sortMissingFirst':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
        <literal type="string">"          'replace-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'name',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type':'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
        <literal type="string">"          'replace-dynamic-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'attr_*',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type':'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'multiValued':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       }\n"</literal> <operator>+</operator>
        <literal type="string">"          }\n"</literal></expr>;
    
    <expr><name>String</name> <name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>Map</name> <name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><name>response</name></expr></argument>,  <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 

    <expr><name>Map</name> <name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"a1"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"a1"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"field a1 not created"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">182</literal></expr>,<expr><literal type="number">29</literal> <operator>+</operator><literal type="number">237</literal></expr>,<expr><literal type="number">279</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"indexed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>,<argument><expr><literal type="string">"*_lol"</literal></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"field *_lol not created"</literal></expr></argument>,<argument><expr><name>m</name></expr></argument> )</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"field *_lol not created"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"stored"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"indexed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>List</name> <name>l</name> <operator>=</operator> <call><name>getCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>,<argument><expr><literal type="string">"a1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>Set</name> <name>s</name> <operator>=</operator><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>l</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>l</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"a1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"hello_lol"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"a2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>,<argument><expr><literal type="string">"mystr"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>l</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"*_i"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"*_s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"mystr"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"solr.StrField"</literal></expr></argument>,<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>,<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sortMissingLast"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"solr.StrField"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sortMissingLast"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>,<argument><expr><literal type="string">"myNewTxtField"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"myNewTxtField"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"a3"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"field a3 not created"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"myNewTxtField"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"wdf_nocase"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"field 'wdf_nocase' not deleted"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"wdf_nocase"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"field type 'wdf_nocase' not deleted"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"*_tt"</literal></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"dynamic field '*_tt' not deleted"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"boolean"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'boolean' field type does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sortMissingLast"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sortMissingFirst"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// this field will be rebuilt when "boolean" field type is replaced</comment>
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'bind' field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'name' field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"attr_*"</literal></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'attr_*' dynamic field does not exist in the schema"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  }</block>
  
  <specifier>public</specifier> <name>void</name> <call><name>testDeleteAndReplace</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>RestTestHarness</name> <name>harness</name> <operator>=</operator> <name>restTestHarness</name></expr></block></expr></argument></throws></expr>;

    <expr><name>Map</name> <name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField1"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Field 'NewField1' already exists in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField2"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Field 'NewField2' already exists in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewFieldType"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"'NewFieldType' field type already exists in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>List</name> <name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"There is already a copy field with source 'NewField1' in the schema"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField1*"</literal></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Dynamic field 'NewDynamicField1*' already exists in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField2*"</literal></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Dynamic field 'NewDynamicField2*' already exists in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>String</name> <name>cmds</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator> 
        <literal type="string">"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\n"</literal> <operator>+</operator>
        <literal type="string">"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\n"</literal> <operator>+</operator>
        <literal type="string">"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\n"</literal> <operator>+</operator>
        <literal type="string">"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewField4',         'dest':'NewField3'                       }]\n"</literal> <operator>+</operator>
        <literal type="string">"}\n"</literal></expr>;

    <expr><name>String</name> <name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewFieldType"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"'NewFieldType' is not in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField1"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"Field 'NewField1' is not in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField2"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"Field 'NewField2' is not in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField3"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"Field 'NewField3' is not in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>map</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField4"</literal></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"Field 'NewField4' is not in the schema"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>Set</name> <name>set</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>Object</name></type> <name>obj</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><name>obj</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block>
    <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewField2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewDynamicField1A"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField1*"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"NewField2"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField2*"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"NewField2"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField3*"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"NewField3"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField4"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"NewField3"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-field-type' : {'name':'NewFieldType'}}"</literal></expr>;
    <expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>Object</name> <name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>errors</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"Can't delete 'NewFieldType' because it's the field type of "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-field' : {'name':'NewField1'}}"</literal></expr>;
    <expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>errors</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name>
        <argument_list>(<argument><expr><literal type="string">"Can't delete 'NewField1' because it's referred to by at least one copy field directive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-field' : {'name':'NewField2'}}"</literal></expr>;
    <expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>errors</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name>
        <argument_list>(<argument><expr><literal type="string">"Can't delete 'NewField2' because it's referred to by at least one copy field directive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'replace-field' : {'name':'NewField1', 'type':'string'}}"</literal></expr>;
    <expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <comment type="line">// Make sure the copy field directives with source NewField1 are preserved</comment>
    <expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>set</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>Object</name></type> <name>obj</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><name>obj</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block>
    <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewField2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewDynamicField1A"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}"</literal></expr>;
    <expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>errors</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name>
        <argument_list>(<argument><expr><literal type="string">"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'replace-field' : {'name':'NewField2', 'type':'string'}}"</literal></expr>;
    <expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;
    <comment type="line">// Make sure the copy field directives with destination NewField2 are preserved</comment>
    <expr><name>list</name> <operator>=</operator> <call><name>getDestCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField2"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>set</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>Object</name></type> <name>obj</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><name>obj</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block>
    <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewField1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewDynamicField1*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewDynamicField2*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Make sure the copy field directives with source NewDynamicField2* are preserved</comment>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField2*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"NewField2"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Make sure the copy field directives with destinations matching NewDynamicField1* are preserved</comment>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getDestCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField1A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"NewField1"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Make sure the copy field directives with sources and destinations of type NewFieldType are preserved</comment>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getDestCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>set</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>Object</name></type> <name>obj</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><name>obj</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewField4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NewDynamicField3*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\n"</literal> <operator>+</operator>
        <literal type="string">"                        {'source':'NewField4',         'dest':'NewField3'                       }]\n"</literal> <operator>+</operator>
        <literal type="string">"}\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField1*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField2*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewDynamicField3*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"NewField4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},"</literal> <operator>+</operator>
        <literal type="string">"                             {'name':'NewDynamicField2*'},\n"</literal> <operator>+</operator>
        <literal type="string">"                             {'name':'NewDynamicField3*'}]\n"</literal> <operator>+</operator>
        <literal type="string">"}\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>cmds</name> <operator>=</operator> <literal type="string">"{'delete-field-type':{'name':'NewFieldType'}}"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>harness</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name>json</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator><call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Map</name></type> <name>getObj</name><parameter_list>(<parameter><decl><type><name>RestTestHarness</name></type> <name>restHarness</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fld</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">517</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name> <block>{
     <expr><name>List</name> <name>l</name> <operator>=</operator> <operator>(</operator><name>List</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><name>l</name></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><call><name><name>fld</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>fld</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
        <return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">226</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">532</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaAPI</name> extends <name>RestTestBase</name> <block>{
     <return>return <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>List</name></type> <name>getCopyFields</name><parameter_list>(<parameter><decl><type><name>RestTestHarness</name></type> <name>harness</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>List</name></type> <name>getSourceCopyFields</name><parameter_list>(<parameter><decl><type><name>RestTestHarness</name></type> <name>harness</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><call><name>getRespMap</name><argument_list>(<argument><expr><name>harness</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>List</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>List</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"copyFields"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>List</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><name>l</name></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><call><name><name>src</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>src</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
     </block_content>}</block></for>
     <return>return <expr><name>result</name></expr>;</return>

   </block_content>}</block></function>
 

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>List</name></type> <name>getDestCopyFields</name><parameter_list>(<parameter><decl><type><name>RestTestHarness</name></type> <name>harness</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><call><name>getRespMap</name><argument_list>(<argument><expr><name>harness</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>List</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"copyFields"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><name>l</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>dest</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaConcurrent</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaConcurrent</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b3ed82a9d7f</name><operator>..</operator><name>af9aba17315</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaConcurrent</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestBulkSchemaConcurrent</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 
 
 <import>import static <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>rest</name><operator>.</operator><name>schema</name><operator>.</operator><name>TestBulkSchemaAPI</name><operator>.</operator><name>getCopyFields</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>rest</name><operator>.</operator><name>schema</name><operator>.</operator><name>TestBulkSchemaAPI</name><operator>.</operator><name>getSourceCopyFields</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>rest</name><operator>.</operator><name>schema</name><operator>.</operator><name>TestBulkSchemaAPI</name><operator>.</operator><name>getObj</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaConcurrent</name>  extends <name>AbstractFullDistribZkTestBase</name> <block>{
     <expr><name><name>Thread</name><index>[]</index></name> <name>threads</name> <operator>=</operator> <operator>new</operator> <name><name>Thread</name><index>[<expr><name>threadCount</name></expr>]</index></name></expr>;
     <expr><name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>List</name></argument>&gt;</argument_list></name> <name>collectErrors</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>threadCount</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>threadCount</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>finalI</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list><block>{
         <function><annotation>@<name>Override</name></annotation>
         <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>ArrayList</name></type> <name>errs</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>collectErrors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ArrayList</name></type> <name>errs</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>collectErrors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>invokeBulkCall</name><argument_list>(<argument><expr><name>finalI</name></expr></argument>,<argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>invokeBulkAddCall</name><argument_list>(<argument><expr><name>finalI</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>invokeBulkReplaceCall</name><argument_list>(<argument><expr><name>finalI</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>invokeBulkDeleteCall</name><argument_list>(<argument><expr><name>finalI</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt/></block_content></block></try></block_content></block></function></block></class></expr></expr_stmt></block_content></block></for></block_content></block></for>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></catch>

         </block_content>}</block></function>
       </block_content>}</block></function><empty_stmt>;</empty_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaConcurrent</name>  extends <name>AbstractFullDistribZkTestBase</name> <block>{
     <expr><name>boolean</name> <name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
 
     <for>for <control>(<init><decl><type><name>List</name></type> <name>e</name> <range>: <expr><name>collectErrors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>  <operator>!</operator><call><name><name>e</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>  <operator>!</operator><call><name><name>e</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>

     }
 
     assertTrue<expr_stmt><expr><operator>(</operator><call><name><name>collectErrors</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>,</operator> <name>success</name><operator>)</operator></expr>;</expr_stmt>


   }
 
  private <function><type><name>void</name></type> <name>invokeBulkCall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>invokeBulkAddCall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>payload</name> <init>= <expr><literal type="string">"{\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'name':'replaceFieldA',\n"</literal> <operator>+</operator>
@@ <operator>-</operator><literal type="number">134</literal></expr></init></decl>,39 +131,35 @@ public <decl><type ref="prev"/><name>class</name> <name>TestBulkSchemaConcurrent</name>  extends <name>AbstractFullDistribZkTestBase</name> <block>{<block_content>
         <expr_stmt><expr><literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-dynamic-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'name' :'replaceDynamicField',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'type':'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                        'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                        },\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type':'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-copy-field' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'source' :'replaceFieldA',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'dest':['replaceDynamicCopyFieldDest']\n"</literal> <operator>+</operator>
        <literal type="string">"                        },\n"</literal> <operator>+</operator>
        <literal type="string">"                       'dest':['replaceDynamicCopyFieldDest']\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
         <literal type="string">"          'add-field-type' : {\n"</literal> <operator>+</operator>
         <literal type="string">"                       'name' :'myNewFieldTypeName',\n"</literal> <operator>+</operator>
         <literal type="string">"                       'class' : 'solr.StrField',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'sortMissingLast':'true'\n"</literal> <operator>+</operator>
        <literal type="string">"                        }\n"</literal> <operator>+</operator>
        <literal type="string">"\n"</literal> <operator>+</operator>
        <literal type="string">"                       'sortMissingLast':'true'\n"</literal> <operator>+</operator>
        <literal type="string">"                       }\n"</literal> <operator>+</operator>
         <literal type="string">" }"</literal></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>aField</name> <init>= <expr><literal type="string">"a"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>dynamicFldName</name> <init>= <expr><literal type="string">"*_lol"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>dynamicCopyFldDest</name> <init>= <expr><literal type="string">"hello_lol"</literal><operator>+</operator><name>seed</name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>newFieldTypeName</name> <init>= <expr><literal type="string">"mystr"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
 

    <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>publisher</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceFieldA"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceDynamicField"</literal></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"dynamicFieldLol"</literal></expr></argument>,<argument><expr><literal type="string">"lol"</literal><operator>+</operator><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceDynamicCopyFieldDest"</literal></expr></argument>,<argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"myNewFieldTypeName"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>publisher</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>response</name> <init>= <expr><call><name><name>publisher</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>json</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Object</name></type> <name>errors</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>errors</name><operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errors</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>errs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>ZkStateReader</name><operator>.</operator><name>toJSON</name></name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">176</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaConcurrent</name>  extends <name>AbstractFullDistribZkTestBase</name> <block>{
     <expr><name>RestTestHarness</name> <name>harness</name> <operator>=</operator> <call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>long</name></type> <name>maxTimeoutMillis</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>!</operator><name>success</name>
          <operator>&amp;&amp;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>maxTimeoutMillis</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>maxTimeoutMillis</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"field {0} not created"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">178</literal></expr><operator>,</operator><expr><literal type="number">163</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBulkSchemaConcurrent</name>  extends <name>AbstractFullDistribZkTestBase</name> <block>{
         <expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"dynamic field {0} not created"</literal></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
         
        <decl_stmt><decl><type><name>List</name></type> <name>l</name> <init>= <expr><call><name>getCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"a1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCopyField</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name>
            <operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"CopyField source={0},dest={1} not created"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>l</name> <init>= <expr><call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCopyField</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"CopyField source={0},dest={1} not created"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"new type {0}  not created"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
         
        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><literal type="string">"mystr"</literal></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"new type {}  not created"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
         <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></while>
     </block_content>}</block></while> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>harness</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>errs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>errmessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>invokeBulkReplaceCall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>payload</name> <init>= <expr><literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"          'replace-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'replaceFieldA',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type': 'text',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
        <literal type="string">"          'replace-dynamic-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name' :'replaceDynamicField',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'type':'text',\n"</literal> <operator>+</operator>
        <literal type="string">"                        'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                        'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                        },\n"</literal> <operator>+</operator>
        <literal type="string">"          'replace-field-type' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name' :'myNewFieldTypeName',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'class' : 'solr.TextField'\n"</literal> <operator>+</operator>
        <literal type="string">"                        }\n"</literal> <operator>+</operator>
        <literal type="string">" }"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>aField</name> <init>= <expr><literal type="string">"a"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>dynamicFldName</name> <init>= <expr><literal type="string">"*_lol"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>dynamicCopyFldDest</name> <init>= <expr><literal type="string">"hello_lol"</literal><operator>+</operator><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>newFieldTypeName</name> <init>= <expr><literal type="string">"mystr"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceFieldA"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceDynamicField"</literal></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"myNewFieldTypeName"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>publisher</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>response</name> <init>= <expr><call><name><name>publisher</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>json</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Object</name></type> <name>errors</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>errors</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>errs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>ZkStateReader</name><operator>.</operator><name>toJSON</name></name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//get another node</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errmessages</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>harness</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>maxTimeoutMillis</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>maxTimeoutMillis</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"field {0} no longer present"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"dynamic field {0} no longer present"</literal></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>List</name></type> <name>l</name> <init>= <expr><call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCopyField</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"CopyField source={0},dest={1} no longer present"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"new type {0} no longer present"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>harness</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>errs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>errmessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>invokeBulkDeleteCall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>payload</name> <init>= <expr><literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-field' : {'name':'replaceFieldA'},\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-dynamic-field' : {'name' :'replaceDynamicField'},\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-copy-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'source' :'replaceFieldA',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'dest':['replaceDynamicCopyFieldDest']\n"</literal> <operator>+</operator>
        <literal type="string">"                       },\n"</literal> <operator>+</operator>
        <literal type="string">"          'delete-field-type' : {'name' :'myNewFieldTypeName'}\n"</literal> <operator>+</operator>
        <literal type="string">" }"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>aField</name> <init>= <expr><literal type="string">"a"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>dynamicFldName</name> <init>= <expr><literal type="string">"*_lol"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>dynamicCopyFldDest</name> <init>= <expr><literal type="string">"hello_lol"</literal><operator>+</operator><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>newFieldTypeName</name> <init>= <expr><literal type="string">"mystr"</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceFieldA"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceDynamicField"</literal></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"replaceDynamicCopyFieldDest"</literal></expr></argument>,<argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>payload</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"myNewFieldTypeName"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>publisher</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>response</name> <init>= <expr><call><name><name>publisher</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><literal type="string">"/schema?wt=json"</literal></expr></argument>, <argument><expr><call><name><name>SolrTestCaseJ4</name><operator>.</operator><name>json</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>ObjectBuilder</name><operator>.</operator><name>getVal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Object</name></type> <name>errors</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>errors</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>errs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>ZkStateReader</name><operator>.</operator><name>toJSON</name></name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//get another node</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errmessages</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RestTestHarness</name></type> <name>harness</name> <init>= <expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>restTestHarnesses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>maxTimeoutMillis</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>maxTimeoutMillis</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"field {0} still exists"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>, <argument><expr><literal type="string">"dynamicFields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"dynamic field {0} still exists"</literal></expr></argument>, <argument><expr><name>dynamicFldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>List</name></type> <name>l</name> <init>= <expr><call><name>getSourceCopyFields</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>checkCopyField</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"CopyField source={0},dest={1} still exists"</literal></expr></argument>, <argument><expr><name>aField</name></expr></argument>, <argument><expr><name>dynamicCopyFldDest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getObj</name><argument_list>(<argument><expr><name>harness</name></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>, <argument><expr><literal type="string">"fieldTypes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>errmessages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"new type {0} still exists"</literal></expr></argument>, <argument><expr><name>newFieldTypeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>harness</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>errmessages</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>errs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>errmessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkCopyField</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Map</name></argument>&gt;</argument_list></name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
     <for>for <control>(<init><decl><type><name>Map</name></type> <name>map</name> <range>: <expr><name>l</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>src</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <call><name><name>dest</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>src</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dest</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"dest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
     </block_content>}</block></for>
     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
   </block_content>}</block></function>


 </block_content>}</block></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestSchemaManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestSchemaManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c4892c5f29e</name><operator>..</operator><literal type="number">6ff689a187d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestSchemaManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>TestSchemaManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">44</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSchemaManager</name> extends <name>SolrTestCaseJ4</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testParsing</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>String</name> <name>x</name> <operator>=</operator> <literal type="string">"{\n"</literal> <operator>+</operator>
        <literal type="string">" \"add-field\" : {\n"</literal> <operator>+</operator>
        <literal type="string">"              \"name\":\"a\",\n"</literal> <operator>+</operator>
        <literal type="string">"              \"type\": \"string\",\n"</literal> <operator>+</operator>
        <literal type="string">"              \"stored\":true,\n"</literal> <operator>+</operator>
        <literal type="string">"              \"indexed\":false\n"</literal> <operator>+</operator>
        <literal type="string">" 'add-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"              'name':'a',\n"</literal> <operator>+</operator>
        <literal type="string">"              'type': 'string',\n"</literal> <operator>+</operator>
        <literal type="string">"              'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"              'indexed':false\n"</literal> <operator>+</operator>
         <literal type="string">"              },\n"</literal> <operator>+</operator>
        <literal type="string">" \"add-field\" : {\n"</literal> <operator>+</operator>
        <literal type="string">"              \"name\":\"b\",\n"</literal> <operator>+</operator>
        <literal type="string">"              \"type\": \"string\",\n"</literal> <operator>+</operator>
        <literal type="string">"              \"stored\":true,\n"</literal> <operator>+</operator>
        <literal type="string">"              \"indexed\":false\n"</literal> <operator>+</operator>
        <literal type="string">" 'add-field' : {\n"</literal> <operator>+</operator>
        <literal type="string">"              'name':'b',\n"</literal> <operator>+</operator>
        <literal type="string">"              'type': 'string',\n"</literal> <operator>+</operator>
        <literal type="string">"              'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"              'indexed':false\n"</literal> <operator>+</operator>
         <literal type="string">"              }\n"</literal> <operator>+</operator>
         <literal type="string">"\n"</literal> <operator>+</operator>
         <literal type="string">"}"</literal></expr></block></expr></argument></throws></expr>;
 
    <name><name>List</name><argument_list type="generic">&lt;<argument><name>CommandOperation</name></argument>&gt;</argument_list></name> <name>ops</name> <operator>=</operator> <call><name><name>CommandOperation</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CommandOperation</name></argument>&gt;</argument_list></name></type> <name>ops</name> <init>= <expr><call><name><name>CommandOperation</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>ops</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>CommandOperation</name><operator>.</operator><name>captureErrors</name></name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="string">" {\"add-field\" : [{\n"</literal> <operator>+</operator>
        <literal type="string">"                                 \"name\":\"a1\",\n"</literal> <operator>+</operator>
        <literal type="string">"                                 \"type\": \"string\",\n"</literal> <operator>+</operator>
        <literal type="string">"                                 \"stored\":true,\n"</literal> <operator>+</operator>
        <literal type="string">"                                 \"indexed\":false\n"</literal> <operator>+</operator>
        <literal type="string">"                                 },\n"</literal> <operator>+</operator>
        <literal type="string">"                            {\n"</literal> <operator>+</operator>
        <literal type="string">"                            \"name\":\"a2\",\n"</literal> <operator>+</operator>
        <literal type="string">"                             \"type\": \"string\",\n"</literal> <operator>+</operator>
        <literal type="string">"                             \"stored\":true,\n"</literal> <operator>+</operator>
        <literal type="string">"                             \"indexed\":true\n"</literal> <operator>+</operator>
        <literal type="string">"                             }]\n"</literal> <operator>+</operator>
        <literal type="string">"           }"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ops</name> <operator>=</operator> <call><name><name>CommandOperation</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="string">" {'add-field' : [{\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'a1',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type': 'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':false\n"</literal> <operator>+</operator>
        <literal type="string">"                      },\n"</literal> <operator>+</operator>
        <literal type="string">"                      {\n"</literal> <operator>+</operator>
        <literal type="string">"                       'name':'a2',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'type': 'string',\n"</literal> <operator>+</operator>
        <literal type="string">"                       'stored':true,\n"</literal> <operator>+</operator>
        <literal type="string">"                       'indexed':true\n"</literal> <operator>+</operator>
        <literal type="string">"                      }]\n"</literal> <operator>+</operator>
        <literal type="string">"      }"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ops</name> <operator>=</operator> <call><name><name>CommandOperation</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>ops</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>CommandOperation</name><operator>.</operator><name>captureErrors</name></name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>CommandOperation</name><operator>.</operator><name>captureErrors</name></name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>



 </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function>

</unit>
