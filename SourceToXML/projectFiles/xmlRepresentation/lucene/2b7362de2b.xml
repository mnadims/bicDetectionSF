<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/2b7362de2b.java"><expr_stmt><expr><name>From</name> <literal type="number">2b7362de2b1522453fe2ae8355108181ffb8a457</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <literal type="string">"Chris M. Hostetter"</literal> <operator>&lt;</operator><name>hossman</name>@<name><name>apache</name><operator>.</operator><name>org</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Sun</name></expr><operator>,</operator> <expr><literal type="number">31</literal> <name>Jul</name> <literal type="number">2011</literal> <literal type="number">22</literal><operator>:</operator><literal type="number">08</literal><operator>:</operator><literal type="number">43</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">2606</literal><operator>:</operator> <name>Fixed</name> <name>sort</name> <name>parsing</name> <name>of</name> <name>fields</name> <name>containing</name>
 <name>punctuation</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1152653 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>_TestUtil</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryParsing</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">107</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TestFunctionQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">18</literal> <operator>++</operator><operator>-</operator>
 <literal type="number">5</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">133</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">16</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>_TestUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>_TestUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">245230b371d</literal><operator>..</operator><literal type="number">5a2bd30011d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>_TestUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>_TestUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">281</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">281</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>_TestUtil</name> <block>{
     <expr><literal type="number">0x2A6DF</literal></expr>, <expr><literal type="number">0x2B73F</literal></expr>, <expr><literal type="number">0x2FA1F</literal></expr>, <expr><literal type="number">0xE007F</literal></expr>, <expr><literal type="number">0xE01EF</literal></expr>, <expr><literal type="number">0xFFFFF</literal></expr>, <expr><literal type="number">0x10FFFF</literal></expr>
   }</block></expr>;</expr_stmt>
   
  <comment type="block" format="javadoc">/** Returns random string, all codepoints within the same unicode block. */</comment>
  <comment type="block" format="javadoc">/** Returns random string of length between 0-20 codepoints, all codepoints within the same unicode block. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>randomRealisticUnicodeString</name><parameter_list>(<parameter><decl><type><name>Random</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name>randomRealisticUnicodeString</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
  <comment type="block" format="javadoc">/** Returns random string, all codepoints within the same unicode block. */</comment>
  <comment type="block" format="javadoc">/** Returns random string of length up to maxLength codepoints , all codepoints within the same unicode block. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>randomRealisticUnicodeString</name><parameter_list>(<parameter><decl><type><name>Random</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>randomRealisticUnicodeString</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns random string of length between min and max codepoints, all codepoints within the same unicode block. */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>randomRealisticUnicodeString</name><parameter_list>(<parameter><decl><type><name>Random</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name>minLength</name> <operator>+</operator> <call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>block</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name><name>blockStarts</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">46461d0356d</literal><operator>..</operator><name>a14b4393aa3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">406</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">406</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>Bug</name> <name>Fixes</name>
   <name>in</name> <name>servlet</name> <name>containers</name> <name>such</name> <name>as</name> <name>WebSphere</name> <name>that</name></expr></expr_stmt></block_content></block></for> <do>do<block type="pseudo"><block_content> <decl_stmt><decl><type><name>not</name> <name>use</name> <name>a</name></type> default <name>list</name>
   <argument_list>(<argument><expr><name>Jay</name> <name><name>R</name><operator>.</operator> <name>Jaeger</name></name></expr></argument>, <argument><expr><name>hossman</name></expr></argument>)</argument_list>
 
<modifier>*</modifier> <name>SOLR</name>-2606<range>: <expr><name>Fixed</name> <name>sort</name> <name>parsing</name> <name>of</name> <name>fields</name> <name>containing</name> <name>punctuation</name> <name>that</name> 
  <name>failed</name> <name>due</name> <name>to</name> <name>sort</name> <name>by</name> <name>function</name> <name>changes</name> <name>introduced</name> <name>in</name> <name>SOLR</name><operator>-</operator><literal type="number">1297</literal>
  <operator>(</operator><name>Mitsu</name> <name>Hadeishi</name>, <name>hossman</name><operator>)</operator>

  <name>Other</name> <name>Changes</name>
 <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryParsing</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryParsing</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">44f9adf537c</literal><operator>..</operator><literal type="number">7cafe79dcf3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryParsing</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryParsing</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">247</literal></expr></range></decl>,10 +247,11 @@ public <decl><type ref="prev"/><name>class</name> <name>QueryParsing</name> <block>{<block_content>
 
         <comment type="line">// short circuit test for a really simple field name</comment>
         <decl_stmt><decl><type><name>String</name></type> <name>field</name> <init>= <expr><call><name><name>sp</name><operator>.</operator><name>getId</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParseException</name></type> <name>qParserException</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Exception</name></type> <name>qParserException</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
        <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>sp</name><operator>.</operator><name>ch</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>sp</name><operator>.</operator><name>peekChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <comment type="line">// let's try it as a function instead</comment>
          <expr_stmt><expr><name>field</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>String</name></type> <name>funcStr</name> <init>= <expr><call><name><name>sp</name><operator>.</operator><name>val</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
           <decl_stmt><decl><type><name>QParser</name></type> <name>parser</name> <init>= <expr><call><name><name>QParser</name><operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><name>funcStr</name></expr></argument>, <argument><expr><name><name>FunctionQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">297</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">298</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParsing</name> <block>{
               }</block></expr></expr_stmt>
               <continue>continue;</continue>
             </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><name>ioe</name></expr>;</throw>
          </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <comment type="line">// hang onto this in case the string isn't a full field name either</comment>
             <expr_stmt><expr><name>qParserException</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
           </block_content>}</block></catch>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>be86a7e170e</name><operator>..</operator><name>f1cac7aa4d7</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>SortField</name><operator>.</operator><name>Type</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>RAMDirectory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>AbstractSolrTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>_TestUtil</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name><operator>.</operator><name>SolrQueryRequest</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>SolrTestCaseJ4</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
 
<class><specifier>public</specifier> class <name>TestSort</name> <super_list><extends>extends <super><name>AbstractSolrTestCase</name></super></extends></super_list> <block>{
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getSchemaFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></function>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getSolrConfigFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></function>
<class><specifier>public</specifier> class <name>TestSort</name> <super_list><extends>extends <super><name>SolrTestCaseJ4</name></super></extends></super_list> <block>{
  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>initCore</name><argument_list>(<argument><expr><literal type="string">"solrconfig.xml"</literal></expr></argument>,<argument><expr><literal type="string">"schema-minimal.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 
  <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr><name>random</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>r</name> <init>= <expr><name>random</name></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><name>int</name></type> <name>ndocs</name> <init>= <expr><literal type="number">77</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">92</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSort</name> extends <name>AbstractSolrTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testRandomFieldNameSorts</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SolrQueryRequest</name></type> <name>req</name> <init>= <expr><call><name><name>lrf</name><operator>.</operator><name>makeRequest</name></name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iters</name> <init>= <expr><call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numberOfOddities</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>_TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>reverse</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>names</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>names</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>_TestUtil</name><operator>.</operator><name>randomRealisticUnicodeString</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// reduce the likelyhood that the random str is a valid query or func </comment>
        <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>names</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>replaceFirst</name><argument_list>(<argument><expr><literal type="string">"\\{"</literal></expr></argument>,<argument><expr><literal type="string">"\\{\\{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>names</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>replaceFirst</name><argument_list>(<argument><expr><literal type="string">"\\("</literal></expr></argument>,<argument><expr><literal type="string">"\\(\\("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>names</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>replaceFirst</name><argument_list>(<argument><expr><literal type="string">"(\\\"|\\')"</literal></expr></argument>,<argument><expr><literal type="string">"$1$1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>names</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>replaceFirst</name><argument_list>(<argument><expr><literal type="string">"(\\d)"</literal></expr></argument>,<argument><expr><literal type="string">"$1x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// eliminate pesky problem chars</comment>
        <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>names</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"\\p{Cntrl}|\\p{javaWhitespace}"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>names</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>numberOfOddities</name><operator>++</operator></expr>;</expr_stmt>
          <comment type="line">// screw it, i'm taking my toys and going home</comment>
          <expr_stmt><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="string">"last_ditch_i_give_up"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>reverse</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>r</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>reverse</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"desc,"</literal></expr> </then><else>: <expr><literal type="string">"asc,"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>SortField</name><index>[]</index></name></type> <name>sorts</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>sorts</name> <operator>=</operator> <call><name><name>QueryParsing</name><operator>.</operator><name>parseSort</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Failed to parse sort: "</literal> <operator>+</operator> <name>input</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"parsed sorts had unexpected size"</literal></expr></argument>, 
                   <argument><expr><name><name>names</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>sorts</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>names</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"sorts["</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="string">"] had unexpected reverse: "</literal> <operator>+</operator> <name>input</name></expr></argument>,
                     <argument><expr><name><name>reverse</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sorts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getReverse</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Type</name></type> <name>type</name> <init>= <expr><name><name>sorts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Type</name><operator>.</operator><name>SCORE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>numberOfOddities</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"sorts["</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="string">"] is (unexpectedly) type score : "</literal> <operator>+</operator> <name>input</name></expr></argument>,
                       <argument><expr><literal type="string">"score"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Type</name><operator>.</operator><name>DOC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>numberOfOddities</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"sorts["</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="string">"] is (unexpectedly) type doc : "</literal> <operator>+</operator> <name>input</name></expr></argument>,
                       <argument><expr><literal type="string">"_docid_"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Type</name><operator>.</operator><name>CUSTOM</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Type</name><operator>.</operator><name>REWRITEABLE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>numberOfOddities</name><operator>++</operator></expr>;</expr_stmt>

          <comment type="line">// our orig string better be parsable as a func/query</comment>
          <decl_stmt><decl><type><name>QParser</name></type> <name>qp</name> <init>= 
            <expr><call><name><name>QParser</name><operator>.</operator><name>getParser</name></name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>FunctionQParserPlugin</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <try>try <block>{<block_content> 
            <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>qp</name><operator>.</operator><name>getQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"sorts["</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="string">"] had type "</literal> <operator>+</operator> <name>type</name> <operator>+</operator> 
                          <literal type="string">" but parsed to null func/query: "</literal> <operator>+</operator> <name>input</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"sorts["</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="string">"] had type "</literal> <operator>+</operator> <name>type</name> <operator>+</operator> 
                       <literal type="string">" but errored parsing as func/query: "</literal> <operator>+</operator> <name>input</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"sorts["</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="string">"] had unexpected field: "</literal> <operator>+</operator> <name>input</name></expr></argument>,
                       <argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sorts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getField</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Over 0.2% oddities in test: "</literal> <operator>+</operator>
               <name>numberOfOddities</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>iters</name> <operator>+</operator>
               <literal type="string">" have func/query parsing semenatics gotten broader?"</literal></expr></argument>,
               <argument><expr><name>numberOfOddities</name> <operator>&lt;</operator> <literal type="number">0.002</literal> <operator>*</operator> <name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>



   <function><type><specifier>public</specifier> <name>void</name></type> <name>testSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>RAMDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Field</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>,<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name><operator>.</operator><name>NOT_ANALYZED_NO_NORMS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TestFunctionQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TestFunctionQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2104741ce7a</literal><operator>..</operator><name>f15363c621d</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TestFunctionQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TestFunctionQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">434</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">434</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestFunctionQuery</name> extends <name>SolrTestCaseJ4</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testSortByFunc</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"const_s"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, <argument><expr><literal type="string">"x_i"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><literal type="string">"1_s"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"const_s"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, <argument><expr><literal type="string">"x_i"</literal></expr></argument>, <argument><expr><literal type="string">"300"</literal></expr></argument>, <argument><expr><literal type="string">"1_s"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"const_s"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, <argument><expr><literal type="string">"x_i"</literal></expr></argument>, <argument><expr><literal type="string">"200"</literal></expr></argument>, <argument><expr><literal type="string">"1_s"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>,    <argument><expr><literal type="string">"1"</literal></expr></argument>,   <argument><expr><literal type="string">"const_s"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, 
                 <argument><expr><literal type="string">"x_i"</literal></expr></argument>,   <argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><literal type="string">"1_s"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>,
                 <argument><expr><literal type="string">"x:x_i"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><literal type="string">"1-1_s"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>,    <argument><expr><literal type="string">"2"</literal></expr></argument>,   <argument><expr><literal type="string">"const_s"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, 
                 <argument><expr><literal type="string">"x_i"</literal></expr></argument>,   <argument><expr><literal type="string">"300"</literal></expr></argument>, <argument><expr><literal type="string">"1_s"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>,
                 <argument><expr><literal type="string">"x:x_i"</literal></expr></argument>, <argument><expr><literal type="string">"300"</literal></expr></argument>, <argument><expr><literal type="string">"1-1_s"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>,    <argument><expr><literal type="string">"3"</literal></expr></argument>,   <argument><expr><literal type="string">"const_s"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, 
                 <argument><expr><literal type="string">"x_i"</literal></expr></argument>,   <argument><expr><literal type="string">"200"</literal></expr></argument>, <argument><expr><literal type="string">"1_s"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>,
                 <argument><expr><literal type="string">"x:x_i"</literal></expr></argument>, <argument><expr><literal type="string">"200"</literal></expr></argument>, <argument><expr><literal type="string">"1-1_s"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>String</name> <name>desc</name> <operator>=</operator> <literal type="string">"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]"</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">494</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">500</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestFunctionQuery</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><call><name>assertJQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>,<argument><expr><name>q</name></expr></argument>,  <argument><expr><literal type="string">"fl"</literal></expr></argument>,<argument><expr><literal type="string">"x_i"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"1_s asc"</literal></expr></argument>)</argument_list></call></expr></argument>
              ,<argument><expr><name>asc</name></expr></argument>
     )</argument_list></call></expr>;
    <expr><call><name>assertJQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>,<argument><expr><name>q</name></expr></argument>,  <argument><expr><literal type="string">"fl"</literal></expr></argument>,<argument><expr><literal type="string">"x_i"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"x:x_i desc"</literal></expr></argument>)</argument_list></call></expr></argument>
             ,<argument><expr><name>desc</name></expr></argument>
    )</argument_list></call></expr>;
    <expr><call><name>assertJQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>,<argument><expr><name>q</name></expr></argument>,  <argument><expr><literal type="string">"fl"</literal></expr></argument>,<argument><expr><literal type="string">"x_i"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"1-1_s asc"</literal></expr></argument>)</argument_list></call></expr></argument>
             ,<argument><expr><name>asc</name></expr></argument>
    )</argument_list></call></expr>;
 
     <comment type="line">// really ugly field name that isn't a java Id, and can't be </comment>
     <comment type="line">// parsed as a func, but sorted fine in Solr 1.4</comment>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></block_content></block></decl></decl_stmt></block_content></block></do></block_content></block></function>

</unit>
