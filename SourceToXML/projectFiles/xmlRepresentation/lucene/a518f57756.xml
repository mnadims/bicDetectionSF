<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/a518f57756.java"><expr_stmt><expr><name>From</name> <name>a518f57756f5b254f7b553455e4ea94aab1e9215</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">8</literal> <name>Jan</name> <literal type="number">2011</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">24</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">2831</literal><operator>:</operator> <name>delete</name> <name>TopValueSource</name> <operator>-</operator> <name>will</name> <name>be</name> <name>illegal</name> <name>in</name> <name>the</name>
 <name>future</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1056746 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TopValueSource</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">101</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <literal type="number">1</literal> <name>file</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">101</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>delete</name> <name>mode</name> <literal type="number">100755</literal> <name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TopValueSource</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TopValueSource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TopValueSource</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100755</literal>
<name>index</name> <literal type="number">45bb0c7473a</literal><operator>..</operator><literal type="number">00000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>TopValueSource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">101</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A value source that wraps another and ensures that the top level reader
 * is used.  This is useful for value sources like ord() who's value depend
 * on all those around it.
 */</comment>
<class><specifier>public</specifier> class <name>TopValueSource</name> <super_list><extends>extends <super><name>ValueSource</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ValueSource</name></type> <name>vs</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TopValueSource</name><parameter_list>(<parameter><decl><type><name>ValueSource</name></type> <name>vs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>vs</name></name> <operator>=</operator> <name>vs</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>ValueSource</name></type> <name>getValueSource</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>vs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>description</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"top("</literal> <operator>+</operator> <call><name><name>vs</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">')'</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>DocValues</name></type> <name>getValues</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexReader</name></type> <name>topReader</name> <init>= <expr><name>reader</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>topReader</name> <operator>instanceof</operator> <name>SolrIndexReader</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrIndexReader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>topReader</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name><name>r</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>topReader</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>off</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocValues</name></type> <name>vals</name> <init>= <expr><call><name><name>vs</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>topReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>topReader</name> <operator>==</operator> <name>reader</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>vals</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><operator>new</operator> <class><super><name>DocValues</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>float</name></type> <name>floatVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>int</name></type> <name>intVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>vals</name><operator>.</operator><name>intVal</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>long</name></type> <name>longVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>vals</name><operator>.</operator><name>longVal</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>double</name></type> <name>doubleVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>vals</name><operator>.</operator><name>doubleVal</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>String</name></type> <name>strVal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>vals</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>vals</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><name>doc</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator>  <name><name>TopValueSource</name><operator>.</operator><name>class</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>TopValueSource</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>TopValueSource</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>vs</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>vs</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>vs</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>h</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h</name><operator>&gt;&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"top("</literal><operator>+</operator><call><name><name>vs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="char">')'</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
