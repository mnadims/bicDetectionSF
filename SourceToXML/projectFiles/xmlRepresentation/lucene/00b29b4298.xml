<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/00b29b4298.java"><expr_stmt><expr><name>From</name> <literal type="number">00b29b4298be4e850e5df263371790ef84b3288f</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Yonik</name> <name><name>Seeley</name> <argument_list type="generic">&lt;<argument><name>yonik</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">28</literal> <name>Nov</name> <literal type="number">2012</literal> <literal type="number">21</literal><operator>:</operator><literal type="number">29</literal><operator>:</operator><literal type="number">42</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">4121</literal><operator>:</operator> <name>fix</name> <name>single</name> <name>quoted</name> <name>token</name> <name>issue</name> <name>with</name> <name>solr</name> <name>qparser</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1414929 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>     <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserConstants</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">31</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">553</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">288</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">322</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6aeba3f173a</literal><operator>..</operator><literal type="number">709ad00dd38</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">418</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">418</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> extends <name>SolrQueryParserBase</name> implements <name>QueryParserConst</name></expr></expr_stmt>
     <finally>finally <block>{<block_content> <expr_stmt><expr><call><name>jj_save</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></finally>
   }
 
  private <function><type><name>boolean</name></type> <name>jj_3R_3</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>jj_scan_token</name><argument_list>(<argument><expr><name>STAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>jj_scan_token</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>boolean</name></type> <name>jj_3R_2</name><parameter_list>()</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><call><name>jj_scan_token</name><argument_list>(<argument><expr><name>TERM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>jj_scan_token</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">440</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">434</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> extends <name>SolrQueryParserBase</name> implements <name>QueryParserConst</name></expr></expr_stmt>
     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>jj_3R_3</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>jj_scan_token</name><argument_list>(<argument><expr><name>STAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>jj_scan_token</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/** Generated Token Manager. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <name>QueryParserTokenManager</name></type> <name>token_source</name></decl>;</decl_stmt>
   <comment type="block" format="javadoc">/** Current token. */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">458</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">458</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> extends <name>SolrQueryParserBase</name> implements <name>QueryParserConst</name>
       <call><name>jj_la1_init_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }
    private <function><type><specifier>static</specifier> <name>void</name></type> <name>jj_la1_init_0</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>jj_la1_0</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">0x600</literal></expr>,<expr><literal type="number">0x600</literal></expr>,<expr><literal type="number">0x3800</literal></expr>,<expr><literal type="number">0x3800</literal></expr>,<expr><literal type="number">0x7f54fe00</literal></expr>,<expr><literal type="number">0x440000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x7f54c000</literal></expr>,<expr><literal type="number">0x47444000</literal></expr>,<expr><literal type="number">0x800000</literal></expr>,<expr><literal type="number">0x800000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x18000000</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x80000000</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x800000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x5f544000</literal></expr>,}</block></expr>;</expr_stmt>
      <expr_stmt><expr><name>jj_la1_0</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">0x600</literal></expr>,<expr><literal type="number">0x600</literal></expr>,<expr><literal type="number">0x3800</literal></expr>,<expr><literal type="number">0x3800</literal></expr>,<expr><literal type="number">0x3fb4fe00</literal></expr>,<expr><literal type="number">0x240000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x3fb4c000</literal></expr>,<expr><literal type="number">0x23a44000</literal></expr>,<expr><literal type="number">0x400000</literal></expr>,<expr><literal type="number">0x400000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0xc000000</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x40000000</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x80000000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x400000</literal></expr>,<expr><literal type="number">0x80000</literal></expr>,<expr><literal type="number">0x2fb44000</literal></expr>,}</block></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>jj_la1_init_1</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>jj_la1_1</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0xc</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0xc</literal></expr>,<expr><literal type="number">0x3</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,}</block></expr>;</expr_stmt>
      <expr_stmt><expr><name>jj_la1_1</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x6</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x6</literal></expr>,<expr><literal type="number">0x1</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0x0</literal></expr>,}</block></expr>;</expr_stmt>
    </block_content>}</block></function>
   <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name><name>JJCalls</name><index>[]</index></name></type> <name>jj_2_rtns</name> <init>= <expr><operator>new</operator> <name><name>JJCalls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>jj_rescan</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">615</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">615</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> extends <name>SolrQueryParserBase</name> implements <name>QueryParserConst</name>
   <comment type="block" format="javadoc">/** Generate ParseException. */</comment>
   <specifier>public</specifier> <name>ParseException</name> <call><name>generateParseException</name><argument_list>()</argument_list></call> <block>{
     <expr><call><name><name>jj_expentries</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>boolean</name><index>[]</index></name> <name>la1tokens</name> <operator>=</operator> <operator>new</operator> <name><name>boolean</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr>;
    <expr><name><name>boolean</name><index>[]</index></name> <name>la1tokens</name> <operator>=</operator> <operator>new</operator> <name><name>boolean</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></expr>;
     <if_stmt><if>if <condition>(<expr><name>jj_kind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name><name>la1tokens</name><index>[<expr><name>jj_kind</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name>jj_kind</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">632</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">632</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryParser</name> extends <name>SolrQueryParserBase</name> implements <name>QueryParserConst</name></expr></expr_stmt></block_content></block></if></if_stmt>
         }</block></expr></expr_stmt>
       }
     }
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">35</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name><name>la1tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>jj_expentry</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>jj_expentry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>
<name>index</name> <name>a1989f19825</name><operator>..</operator><literal type="number">041e114ec90</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParser</name><operator>.</operator><name>jj</name></name>
@@ <operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <call><name>PARSER_END</name><argument_list>(<argument><expr><name>QueryParser</name></expr></argument>)</argument_list></call>
  <operator>|</operator> <operator>&lt;</operator><name>STAR</name><operator>:</operator>      <literal type="string">"*"</literal> <operator>&gt;</operator>
  <operator>|</operator> <operator>&lt;</operator><name>CARAT</name><operator>:</operator>     <literal type="string">"^"</literal> <operator>&gt;</operator> <operator>:</operator> <name>Boost</name>
  <operator>|</operator> <operator>&lt;</operator><name>QUOTED</name><operator>:</operator>     <literal type="string">"\""</literal> <operator>(</operator><operator>&lt;</operator><name>_QUOTED_CHAR</name><operator>&gt;</operator><operator>)</operator><operator>*</operator> <literal type="string">"\""</literal><operator>&gt;</operator>
 <operator>|</operator> <operator>&lt;</operator><name>SQUOTED</name><operator>:</operator>     <literal type="string">"'"</literal> <operator>(</operator><operator>&lt;</operator><name>_SQUOTED_CHAR</name><operator>&gt;</operator><operator>)</operator><operator>*</operator> <literal type="string">"'"</literal><operator>&gt;</operator>
  <operator>|</operator> <operator>&lt;</operator><name>TERM</name><operator>:</operator>      <call><argument_list type="generic">&lt;<argument><name>_TERM_START_CHAR</name></argument>&gt;</argument_list> <argument_list>(<argument><expr><operator>&lt;</operator><name>_TERM_CHAR</name><operator>&gt;</operator></expr></argument>)</argument_list></call><operator>*</operator>  <operator>&gt;</operator>
  <operator>|</operator> <operator>&lt;</operator><name>FUZZY_SLOP</name><operator>:</operator>     <ternary><condition><expr><literal type="string">"~"</literal> <operator>(</operator> <ternary><condition><expr><operator>(</operator><operator>&lt;</operator><name>_NUM_CHAR</name><operator>&gt;</operator><operator>)</operator><operator>+</operator> <operator>(</operator> <literal type="string">"."</literal> <operator>(</operator><operator>&lt;</operator><name>_NUM_CHAR</name><operator>&gt;</operator><operator>)</operator><operator>+</operator> <operator>)</operator></expr>?</condition><then> <expr/></then></ternary><operator>)</operator></expr>?</condition><then> <expr><operator>&gt;</operator>
  <operator>|</operator> <operator>&lt;</operator><name>PREFIXTERM</name></expr></then><else>:  <expr><operator>(</operator><literal type="string">"*"</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <call><argument_list type="generic">&lt;<argument><name>_TERM_START_CHAR</name></argument>&gt;</argument_list> <argument_list>(<argument><expr><operator>&lt;</operator><name>_TERM_CHAR</name><operator>&gt;</operator></expr></argument>)</argument_list></call><operator>*</operator> <literal type="string">"*"</literal> <operator>)</operator> <operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">97</literal></expr></else></ternary></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <call><name>PARSER_END</name><argument_list>(<argument><expr><name>QueryParser</name></expr></argument>)</argument_list></call>
  <operator>|</operator> <operator>&lt;</operator><name>REGEXPTERM</name><operator>:</operator> <literal type="string">"/"</literal> <operator>(</operator><operator>~</operator><index>[ <expr><literal type="string">"/"</literal></expr> ]</index> <operator>|</operator> <literal type="string">"\\/"</literal> <operator>)</operator><operator>*</operator> <literal type="string">"/"</literal> <operator>&gt;</operator>
  <operator>|</operator> <operator>&lt;</operator><name>RANGEIN_START</name><operator>:</operator> <literal type="string">"["</literal> <operator>&gt;</operator> <operator>:</operator> <name>Range</name>
  <operator>|</operator> <operator>&lt;</operator><name>RANGEEX_START</name><operator>:</operator> <literal type="string">"{"</literal> <operator>&gt;</operator> <operator>:</operator> <name>Range</name>
 <operator>|</operator> <operator>&lt;</operator><name>LPARAMS</name><operator>:</operator>     <operator>(</operator><literal type="string">"{!"</literal> <operator>(</operator> <ternary><condition><expr><operator>(</operator><operator>&lt;</operator><name>_WHITESPACE</name><operator>&gt;</operator><operator>)</operator><operator>*</operator> <operator>(</operator><operator>~</operator><index>[<expr><literal type="string">"="</literal></expr><operator>,</operator><literal type="string">"}"</literal>]</index><operator>)</operator><operator>+</operator> <operator>(</operator> <ternary><condition><expr><literal type="string">"="</literal> <operator>(</operator><operator>&lt;</operator><name>QUOTED</name><operator>&gt;</operator> <operator>|</operator> <operator>&lt;</operator><name>SQUOTED</name><operator>&gt;</operator> <operator>|</operator> <operator>(</operator><operator>~</operator><index>[<expr><literal type="string">" "</literal></expr><operator>,</operator><literal type="string">"}"</literal>]</index><operator>)</operator><operator>+</operator> <operator>)</operator></expr>?</condition><then> <expr/></then></ternary><operator>)</operator></expr>?</condition><then> <expr/></then></ternary><operator>)</operator><operator>*</operator> <literal type="string">"}"</literal><operator>)</operator><operator>+</operator>  <operator>(</operator><operator>~</operator><index>[<expr><literal type="string">")"</literal></expr><operator>,</operator><literal type="string">" "</literal><operator>,</operator><literal type="string">"\t"</literal><operator>,</operator><literal type="string">"\n"</literal><operator>,</operator><literal type="string">"{"</literal><operator>,</operator><literal type="string">"^"</literal>]</index><operator>)</operator><operator>*</operator>  <operator>&gt;</operator>
<comment type="line">// TODO: consider using token states instead of inlining SQUOTED</comment>
<comment type="line">//  | &lt;SQUOTED:     "'" (&lt;_SQUOTED_CHAR&gt;)* "'"&gt;</comment>
<comment type="line">//  | &lt;LPARAMS:     ("{!" ( (&lt;_WHITESPACE&gt;)* (~["=","}"])+ ( "=" (&lt;QUOTED&gt; | &lt;SQUOTED&gt; | (~[" ","}"])+ )? )? )* "}")+  (~[")"," ","\t","\n","{","^"])*  &gt;</comment>
  <operator>|</operator> <operator>&lt;</operator><name>LPARAMS</name><operator>:</operator>     <operator>(</operator><literal type="string">"{!"</literal> <operator>(</operator> <ternary><condition><expr><operator>(</operator><operator>&lt;</operator><name>_WHITESPACE</name><operator>&gt;</operator><operator>)</operator><operator>*</operator> <operator>(</operator><operator>~</operator><index>[<expr><literal type="string">"="</literal></expr><operator>,</operator><literal type="string">"}"</literal>]</index><operator>)</operator><operator>+</operator> <operator>(</operator> <ternary><condition><expr><literal type="string">"="</literal> <operator>(</operator><operator>&lt;</operator><name>QUOTED</name><operator>&gt;</operator> <operator>|</operator> <operator>(</operator><literal type="string">"'"</literal> <operator>(</operator><operator>&lt;</operator><name>_SQUOTED_CHAR</name><operator>&gt;</operator><operator>)</operator><operator>*</operator> <literal type="string">"'"</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>~</operator><index>[<expr><literal type="string">" "</literal></expr><operator>,</operator><literal type="string">"}"</literal>]</index><operator>)</operator><operator>+</operator> <operator>)</operator></expr>?</condition><then> <expr/></then></ternary><operator>)</operator></expr>?</condition><then> <expr/></then></ternary><operator>)</operator><operator>*</operator> <literal type="string">"}"</literal><operator>)</operator><operator>+</operator>  <operator>(</operator><operator>~</operator><index>[<expr><literal type="string">")"</literal></expr><operator>,</operator><literal type="string">" "</literal><operator>,</operator><literal type="string">"\t"</literal><operator>,</operator><literal type="string">"\n"</literal><operator>,</operator><literal type="string">"{"</literal><operator>,</operator><literal type="string">"^"</literal>]</index><operator>)</operator><operator>*</operator>  <operator>&gt;</operator></expr></expr_stmt>
 </block_content>}</block></if></if_stmt>
 
 <expr_stmt><expr><operator>&lt;</operator><name>Boost</name><operator>&gt;</operator> <name>TOKEN</name> <operator>:</operator> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserConstants</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserConstants</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2bb3d75a52f</literal><operator>..</operator><name>ecc4e213e38</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserConstants</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserConstants</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">49</literal></expr>,<expr><literal type="number">35</literal> <operator>+</operator><literal type="number">49</literal></expr>,<expr><literal type="number">33</literal> @@ <specifier>public</specifier> interface <name>QueryParserConstants</name> <block>{
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
   <expr><name>int</name> <name>QUOTED</name> <operator>=</operator> <literal type="number">20</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>SQUOTED</name> <operator>=</operator> <literal type="number">21</literal></expr>;
  <expr><name>int</name> <name>TERM</name> <operator>=</operator> <literal type="number">21</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>TERM</name> <operator>=</operator> <literal type="number">22</literal></expr>;
  <expr><name>int</name> <name>FUZZY_SLOP</name> <operator>=</operator> <literal type="number">22</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>FUZZY_SLOP</name> <operator>=</operator> <literal type="number">23</literal></expr>;
  <expr><name>int</name> <name>PREFIXTERM</name> <operator>=</operator> <literal type="number">23</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>PREFIXTERM</name> <operator>=</operator> <literal type="number">24</literal></expr>;
  <expr><name>int</name> <name>WILDTERM</name> <operator>=</operator> <literal type="number">24</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>WILDTERM</name> <operator>=</operator> <literal type="number">25</literal></expr>;
  <expr><name>int</name> <name>REGEXPTERM</name> <operator>=</operator> <literal type="number">25</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>REGEXPTERM</name> <operator>=</operator> <literal type="number">26</literal></expr>;
  <expr><name>int</name> <name>RANGEIN_START</name> <operator>=</operator> <literal type="number">26</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGEIN_START</name> <operator>=</operator> <literal type="number">27</literal></expr>;
  <expr><name>int</name> <name>RANGEEX_START</name> <operator>=</operator> <literal type="number">27</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGEEX_START</name> <operator>=</operator> <literal type="number">28</literal></expr>;
  <expr><name>int</name> <name>LPARAMS</name> <operator>=</operator> <literal type="number">28</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>LPARAMS</name> <operator>=</operator> <literal type="number">29</literal></expr>;
  <expr><name>int</name> <name>NUMBER</name> <operator>=</operator> <literal type="number">29</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>NUMBER</name> <operator>=</operator> <literal type="number">30</literal></expr>;
  <expr><name>int</name> <name>RANGE_TO</name> <operator>=</operator> <literal type="number">30</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGE_TO</name> <operator>=</operator> <literal type="number">31</literal></expr>;
  <expr><name>int</name> <name>RANGEIN_END</name> <operator>=</operator> <literal type="number">31</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGEIN_END</name> <operator>=</operator> <literal type="number">32</literal></expr>;
  <expr><name>int</name> <name>RANGEEX_END</name> <operator>=</operator> <literal type="number">32</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGEEX_END</name> <operator>=</operator> <literal type="number">33</literal></expr>;
  <expr><name>int</name> <name>RANGE_QUOTED</name> <operator>=</operator> <literal type="number">33</literal></expr>;
   <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGE_QUOTED</name> <operator>=</operator> <literal type="number">34</literal></expr>;
  <comment type="block" format="javadoc">/** RegularExpression Id. */</comment>
  <expr><name>int</name> <name>RANGE_GOOP</name> <operator>=</operator> <literal type="number">35</literal></expr>;
  <expr><name>int</name> <name>RANGE_GOOP</name> <operator>=</operator> <literal type="number">34</literal></expr>;
 
   <comment type="block" format="javadoc">/** Lexical state. */</comment>
   <expr><name>int</name> <name>Boost</name> <operator>=</operator> <literal type="number">0</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">109</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">107</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> interface <name>QueryParserConstants</name> <block>{
     <expr><literal type="string">"\"*\""</literal></expr>,
     <expr><literal type="string">"\"^\""</literal></expr>,
     <expr><literal type="string">"&lt;QUOTED&gt;"</literal></expr>,
    <expr><literal type="string">"&lt;SQUOTED&gt;"</literal></expr>,
     <expr><literal type="string">"&lt;TERM&gt;"</literal></expr>,
     <expr><literal type="string">"&lt;FUZZY_SLOP&gt;"</literal></expr>,
     <expr><literal type="string">"&lt;PREFIXTERM&gt;"</literal></expr>,
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0f6c1529a03</literal><operator>..</operator><name>c55dd0e445c</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>parser</name><operator>/</operator><name><name>QueryParserTokenManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">49</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">49</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveStringLiteralDfa0_2</name><argument_list>()</argument_list></call></expr>
       <case>case <expr><literal type="number">41</literal></expr>:</case>
          <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return></block></expr>
       <case>case <expr><literal type="number">42</literal></expr>:</case>
         <return>return <expr><call><name>jjStartNfaWithStates_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">66</literal></expr></argument>)</argument_list></call></expr>;</return></block></expr>
         <return>return <expr><call><name>jjStartNfaWithStates_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
       <case>case <expr><literal type="number">43</literal></expr>:</case>
          <return>return <expr><call><name>jjStartNfaWithStates_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</return>
       <case>case <expr><literal type="number">45</literal></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveStringLiteralDfa0_2</name><argument_list>()</argument_list></call></expr></expr_stmt>
       <case>case <expr><literal type="number">58</literal></expr>:</case>
          <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</return>
       <case>case <expr><literal type="number">91</literal></expr>:</case>
         <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</return>
         <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</return>
       <case>case <expr><literal type="number">94</literal></expr>:</case>
          <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</return>
       <case>case <expr><literal type="number">123</literal></expr>:</case>
         <return>return <expr><call><name>jjStartNfaWithStates_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</return>
         <return>return <expr><call><name>jjStartNfaWithStates_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</return>
       <default>default :</default>
          <return>return <expr><call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>static</specifier> <name>final</name> <name><name>long</name><index>[]</index></name> <name>jjbitVec4</name> <operator>=</operator> <block>{
 <expr><specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call>
 <block>{
    <expr><name>int</name> <name>startsAt</name> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><name>jjnewStateCnt</name> <operator>=</operator> <literal type="number">66</literal></expr>;
   <expr><name>jjnewStateCnt</name> <operator>=</operator> <literal type="number">61</literal></expr>;
    <expr><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;
    <expr><name><name>jjstateSet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>startState</name></expr>;
    <expr><name>int</name> <name>kind</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">104</literal></expr>,<expr><literal type="number">20</literal> <operator>+</operator><literal type="number">104</literal></expr>,<expr><literal type="number">20</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call>
          <block>{
             <switch>switch<condition>(<expr><name><name>jjstateSet</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>)</condition>
             <block>{<block_content>
               <case>case <expr><literal type="number">66</literal></expr>:</case>
               <case>case <expr><literal type="number">32</literal></expr>:</case>
               <case>case <expr><literal type="number">61</literal></expr>:</case>
               <case>case <expr><literal type="number">27</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfbfffcf8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">0</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfbff54f8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt/></block_content></block></if></if_stmt></block_content></block></switch>}</block></expr>
                   <if_stmt><if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">0x100002600L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call>
                      <call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x7bff50f8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr>
                   <if_stmt><if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">42</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
                   <if_stmt><if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">33</literal></expr>)</condition>
                   <block>{<block_content>
                      <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
                         <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   </block_content>}</block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                  <if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">4</literal></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">150</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">135</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">34</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">21</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <break>break;</break>
                <case>case <expr><literal type="number">22</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xffffff7fffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">24</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">25</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">39</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">27</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x3ff000000000000L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">28</literal></expr>:</case>
               <case>case <expr><literal type="number">23</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">46</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">29</literal></expr>:</case>
               <case>case <expr><literal type="number">24</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x3ff000000000000L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">30</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
               <case>case <expr><literal type="number">25</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">31</literal></expr>:</case>
               <case>case <expr><literal type="number">26</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfbff54f8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">34</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">29</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">35</literal></expr>:</case>
               <case>case <expr><literal type="number">37</literal></expr>:</case>
               <case>case <expr><literal type="number">30</literal></expr>:</case>
               <case>case <expr><literal type="number">32</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">47</literal></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">36</literal></expr>:</case>
               <case>case <expr><literal type="number">31</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xffff7fffffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">39</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">47</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
               <case>case <expr><literal type="number">34</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">47</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">40</literal></expr>:</case>
               <case>case <expr><literal type="number">35</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">33</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">41</literal></expr>:</case>
               <case>case <expr><literal type="number">36</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x100002600L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">42</literal></expr>:</case>
               <case>case <expr><literal type="number">37</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xdfffffffffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">43</literal></expr>:</case>
               <case>case <expr><literal type="number">38</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">61</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">44</literal></expr>:</case>
               <case>case <expr><literal type="number">39</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">45</literal></expr>:</case>
               <case>case <expr><literal type="number">40</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfffffffbffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">47</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">42</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">48</literal></expr>:</case>
               <case>case <expr><literal type="number">43</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">51</literal></expr>:</case>
               <case>case <expr><literal type="number">46</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfffffdfefffff9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">46</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">52</literal></expr>:</case>
               <case>case <expr><literal type="number">47</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">53</literal></expr>:</case>
               <case>case <expr><literal type="number">48</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xffffff7fffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">55</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">50</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">56</literal></expr>:</case>
               <case>case <expr><literal type="number">51</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">57</literal></expr>:</case>
               <case>case <expr><literal type="number">52</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfffffffeffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">58</literal></expr>:</case>
               <case>case <expr><literal type="number">53</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x7bff50f8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">59</literal></expr>:</case>
               <case>case <expr><literal type="number">54</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x7bfff8f8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">61</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">56</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">62</literal></expr>:</case>
               <case>case <expr><literal type="number">57</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x7bfff8f8ffffd9ffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">64</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">59</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <default>default :</default> <break>break;</break>
             </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">342</literal></expr><operator>,</operator><expr><literal type="number">38</literal> <operator>+</operator><literal type="number">325</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call>
          <block>{
             <switch>switch<condition>(<expr><name><name>jjstateSet</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>)</condition>
             <block>{<block_content>
               <case>case <expr><literal type="number">66</literal></expr>:</case>
               <case>case <expr><literal type="number">61</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt/></block_content></block></if></if_stmt></block_content></block></switch>}</block></expr></expr_stmt>
                   <if_stmt><if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">0</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if>
                   <if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <if_stmt><if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">123</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
                   <if_stmt><if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">126</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">78</literal></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">435</literal></expr><operator>,</operator><expr><literal type="number">139</literal> <operator>+</operator><literal type="number">418</literal></expr><operator>,</operator><expr><literal type="number">128</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                <case>case <expr><literal type="number">19</literal></expr>:</case>
                   <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">22</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xffffffffefffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">23</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">24</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">26</literal></expr>:</case>
               <case>case <expr><literal type="number">21</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>!=</operator> <literal type="number">126</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">31</literal></expr>:</case>
               <case>case <expr><literal type="number">26</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">32</literal></expr>:</case>
               <case>case <expr><literal type="number">27</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">33</literal></expr>:</case>
               <case>case <expr><literal type="number">28</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">34</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">29</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">36</literal></expr>:</case>
               <case>case <expr><literal type="number">31</literal></expr>:</case>
                   <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">38</literal></expr>:</case>
               <case>case <expr><literal type="number">33</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">37</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">42</literal></expr>:</case>
               <case>case <expr><literal type="number">37</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xdfffffffffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">45</literal></expr>:</case>
               <case>case <expr><literal type="number">40</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xffffffffefffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">46</literal></expr>:</case>
               <case>case <expr><literal type="number">41</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">47</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">47</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">42</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">49</literal></expr>:</case>
               <case>case <expr><literal type="number">44</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>!=</operator> <literal type="number">125</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">50</literal></expr>:</case>
               <case>case <expr><literal type="number">45</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">123</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">51</literal></expr>:</case>
               <case>case <expr><literal type="number">46</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xf7ffffffbfffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">53</literal></expr>:</case>
               <case>case <expr><literal type="number">48</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xffffffffefffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">54</literal></expr>:</case>
               <case>case <expr><literal type="number">49</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">55</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">55</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">50</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">57</literal></expr>:</case>
               <case>case <expr><literal type="number">52</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xdfffffffffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">58</literal></expr>:</case>
               <case>case <expr><literal type="number">53</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">59</literal></expr>:</case>
               <case>case <expr><literal type="number">54</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">60</literal></expr>:</case>
               <case>case <expr><literal type="number">55</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">61</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">56</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">62</literal></expr>:</case>
               <case>case <expr><literal type="number">57</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x97ffffff87ffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">63</literal></expr>:</case>
               <case>case <expr><literal type="number">58</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">64</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <case>case <expr><literal type="number">59</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">65</literal></expr>:</case>
               <case>case <expr><literal type="number">60</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <default>default :</default> <break>break;</break>
             }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">584</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">556</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call>
          <block>{
             <switch>switch<condition>(<expr><name><name>jjstateSet</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>)</condition>
             <block>{<block_content>
               <case>case <expr><literal type="number">66</literal></expr>:</case>
               <case>case <expr><literal type="number">32</literal></expr>:</case>
               <case>case <expr><literal type="number">61</literal></expr>:</case>
               <case>case <expr><literal type="number">27</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">0</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_0</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">600</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">572</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></switch>
                   }</block></expr></expr_stmt>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                   <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">620</literal></expr><operator>,</operator><expr><literal type="number">86</literal> <operator>+</operator><literal type="number">592</literal></expr><operator>,</operator><expr><literal type="number">81</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">22</literal></expr>:</case>
               <case>case <expr><literal type="number">24</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <break>break;</break>
               <case>case <expr><literal type="number">31</literal></expr>:</case>
               <case>case <expr><literal type="number">26</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">34</literal></expr>:</case>
               <case>case <expr><literal type="number">29</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">36</literal></expr>:</case>
               <case>case <expr><literal type="number">31</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">41</literal></expr>:</case>
               <case>case <expr><literal type="number">36</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_0</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">42</literal></expr>:</case>
               <case>case <expr><literal type="number">37</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">45</literal></expr>:</case>
               <case>case <expr><literal type="number">47</literal></expr>:</case>
               <case>case <expr><literal type="number">40</literal></expr>:</case>
               <case>case <expr><literal type="number">42</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">51</literal></expr>:</case>
               <case>case <expr><literal type="number">46</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>jjstateSet</name><index>[<expr><name>jjnewStateCnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">46</literal></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">53</literal></expr>:</case>
               <case>case <expr><literal type="number">55</literal></expr>:</case>
               <case>case <expr><literal type="number">48</literal></expr>:</case>
               <case>case <expr><literal type="number">50</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">57</literal></expr>:</case>
               <case>case <expr><literal type="number">52</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">58</literal></expr>:</case>
               <case>case <expr><literal type="number">53</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">59</literal></expr>:</case>
               <case>case <expr><literal type="number">54</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">61</literal></expr>:</case>
               <case>case <expr><literal type="number">56</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">62</literal></expr>:</case>
               <case>case <expr><literal type="number">57</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
               <case>case <expr><literal type="number">64</literal></expr>:</case>
               <case>case <expr><literal type="number">59</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <default>default :</default> <break>break;</break>
             }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">712</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">679</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_2</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call>
          <name>kind</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
       }
       ++<expr_stmt><expr><name>curPos</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>jjnewStateCnt</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>startsAt</name> <operator>=</operator> <literal type="number">66</literal> <operator>-</operator> <operator>(</operator><name>jjnewStateCnt</name> <operator>=</operator> <name>startsAt</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>jjnewStateCnt</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>startsAt</name> <operator>=</operator> <literal type="number">61</literal> <operator>-</operator> <operator>(</operator><name>jjnewStateCnt</name> <operator>=</operator> <name>startsAt</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>curPos</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
       <try>try <block>{<block_content> <expr_stmt><expr><name>curChar</name> <operator>=</operator> <call><name><name>input_stream</name><operator>.</operator><name>readChar</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
       <catch>catch<parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>curPos</name></expr>;</return> </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">743</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">710</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_0</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                <case>case <expr><literal type="number">0</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x3ff000000000000L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if>
                   <if type="elseif">else if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">45</literal></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">753</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">720</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_0</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
                <case>case <expr><literal type="number">1</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x3ff000000000000L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAddTwoStates</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">764</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">731</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_0</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                <case>case <expr><literal type="number">3</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x3ff000000000000L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <default>default :</default> <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">816</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">783</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>private</specifier> <name>final</name> <name>int</name> <call><name>jjStopStringLiteralDfa_1</name><argument_list>(<argument><expr><name>int</name> <name>pos</name></expr></argument>, <argument><expr><name>long</name> <name>active0</name></expr></argument>)</argument_list></call></expr></expr_stmt>
    <switch>switch <condition>(<expr><name>pos</name></expr>)</condition>
    <block>{<block_content>
       <case>case <expr><literal type="number">0</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>active0</name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>active0</name> <operator>&amp;</operator> <literal type="number">0x40000000L</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>jjmatchedKind</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>jjmatchedKind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt>
             <return>return <expr><literal type="number">6</literal></expr>;</return>
          </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">835</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">802</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveStringLiteralDfa0_1</name><argument_list>()</argument_list></call></expr></expr_stmt>
    <switch>switch<condition>(<expr><name>curChar</name></expr>)</condition>
    <block>{<block_content>
       <case>case <expr><literal type="number">84</literal></expr>:</case>
         <return>return <expr><call><name>jjMoveStringLiteralDfa1_1</name><argument_list>(<argument><expr><literal type="number">0x80000000L</literal></expr></argument>)</argument_list></call></expr>;</return>
         <return>return <expr><call><name>jjMoveStringLiteralDfa1_1</name><argument_list>(<argument><expr><literal type="number">0x40000000L</literal></expr></argument>)</argument_list></call></expr>;</return>
       <case>case <expr><literal type="number">93</literal></expr>:</case>
         <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>
         <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</return>
       <case>case <expr><literal type="number">125</literal></expr>:</case>
         <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</return>
         <return>return <expr><call><name>jjStopAtPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>
       <default>default :</default>
          <return>return <expr><call><name>jjMoveNfa_1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">854</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">821</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveStringLiteralDfa1_1</name><argument_list>(<argument><expr><name>long</name> <name>active0</name></expr></argument>)</argument_list></call></expr></expr_stmt>
    <switch>switch<condition>(<expr><name>curChar</name></expr>)</condition>
    <block>{<block_content>
       <case>case <expr><literal type="number">79</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>active0</name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>jjStartNfaWithStates_1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>active0</name> <operator>&amp;</operator> <literal type="number">0x40000000L</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>jjStartNfaWithStates_1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
       <default>default :</default>
          <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">891</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">858</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_1</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                <case>case <expr><literal type="number">0</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfffffffeffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">35</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x100002600L</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">909</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">876</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_1</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfffffffbffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">3</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjCheckNAddStates</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">5</literal></expr>:</case>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">34</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">34</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&gt;</operator> <literal type="number">33</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">6</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xfffffffeffffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">35</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <default>default :</default> <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">941</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">908</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_1</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
                <case>case <expr><literal type="number">6</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xdfffffffdfffffffL</literal> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">35</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                  <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">4</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><name>curChar</name> <operator>==</operator> <literal type="number">92</literal></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">975</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">942</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_1</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
                   </block_content>}</block></switch>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition>
                   <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">35</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <expr_stmt><expr><call><name>jjAddStates</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <case>case <expr><literal type="number">6</literal></expr>:</case>
                   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jjCanMove_1</name><argument_list>(<argument><expr><name>hiByte</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                      <break>break;</break></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">35</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                   <expr_stmt><expr><call><name>jjCheckNAdd</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
                <default>default :</default> <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1009</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">976</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>private</specifier> <name>int</name> <call><name>jjMoveNfa_1</name><argument_list>(<argument><expr><name>int</name> <name>startState</name></expr></argument>, <argument><expr><name>int</name> <name>curPos</name></expr></argument>)</argument_list></call></expr></expr_stmt>
    </block_content>}</block></switch>
 }
 static <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>jjnextStates</name> <init>= <expr><block>{
   <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, 
   <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">48</literal></expr>, 
   <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, 
   <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">44</literal></expr>, 
   <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">51</literal></expr>, 
   <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, 
 }</block></expr></init></decl>;</decl_stmt>
 <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>jjCanMove_0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hiByte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l2</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1054</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1021</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>boolean</name> <call><name>jjCanMove_2</name><argument_list>(<argument><expr><name>int</name> <name>hiByte</name></expr></argument>, <argument><expr><name>int</name> <name>i1</name></expr></argument>, <argument><expr><name>int</name> <name>i2</name></expr></argument>, <argument><expr><name>long</name> <name>l1</name></expr></argument>, <argument><expr><name>lo</name>
 <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>String</name><index>[]</index></name> <name>jjstrLiteralImages</name> <operator>=</operator> <block>{
 <expr><literal type="string">""</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="string">"\53"</literal></expr>, 
 <expr><literal type="string">"\55"</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="string">"\50"</literal></expr>, <expr><literal type="string">"\51"</literal></expr>, <expr><literal type="string">"\72"</literal></expr>, <expr><literal type="string">"\52"</literal></expr>, <expr><literal type="string">"\136"</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, 
<expr><literal type="null">null</literal></expr>, <expr><literal type="string">"\133"</literal></expr>, <expr><literal type="string">"\173"</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="string">"\124\117"</literal></expr>, <expr><literal type="string">"\135"</literal></expr>, <expr><literal type="string">"\175"</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>, }</block></expr></argument>;
<argument><expr><literal type="string">"\133"</literal></expr></argument>, <argument><expr><literal type="string">"\173"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"\124\117"</literal></expr></argument>, <argument><expr><literal type="string">"\135"</literal></expr></argument>, <argument><expr><literal type="string">"\175"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,</argument_list></call></expr></expr_stmt> </block_content>}</block></function><empty_stmt>;</empty_stmt>
 
 <comment type="block" format="javadoc">/** Lexer state names. */</comment>
 <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>lexStateNames</name> <init>= <expr><block>{
@@ <expr><operator>-</operator><literal type="number">1066</literal></expr>,<expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1033</literal></expr>,<expr><literal type="number">17</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>String</name><index>[]</index></name> <name>lexStateNames</name> <operator>=</operator> <block>{
 <comment type="block" format="javadoc">/** Lex State array. */</comment>
 <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>int</name><index>[]</index></name> <name>jjnewLexState</name> <operator>=</operator> <block>{
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, 
   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, 
   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, 
 }</block></expr>;
 <expr><specifier>static</specifier> <name>final</name> <name><name>long</name><index>[]</index></name> <name>jjtoToken</name> <operator>=</operator> <block>{
   <expr><literal type="number">0xffffffe01L</literal></expr>, 
   <expr><literal type="number">0x7fffffe01L</literal></expr>, 
 }</block></expr>;
 <expr><specifier>static</specifier> <name>final</name> <name><name>long</name><index>[]</index></name> <name>jjtoSkip</name> <operator>=</operator> <block>{
    <expr><literal type="number">0x100L</literal></expr>, 
 }</block></expr>;
 <expr><specifier>protected</specifier> <name>CharStream</name> <name>input_stream</name></expr>;
<expr><specifier>private</specifier> <name>final</name> <name><name>int</name><index>[]</index></name> <name>jjrounds</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">66</literal></expr>]</index></name></expr>;
<expr><specifier>private</specifier> <name>final</name> <name><name>int</name><index>[]</index></name> <name>jjstateSet</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">132</literal></expr>]</index></name></expr>;
<expr><specifier>private</specifier> <name>final</name> <name><name>int</name><index>[]</index></name> <name>jjrounds</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">61</literal></expr>]</index></name></expr>;
<expr><specifier>private</specifier> <name>final</name> <name><name>int</name><index>[]</index></name> <name>jjstateSet</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">122</literal></expr>]</index></name></expr>;
 <expr><specifier>protected</specifier> <name>char</name> <name>curChar</name></expr>;
 <comment type="block" format="javadoc">/** Constructor. */</comment>
 <expr><specifier>public</specifier> <call><name>QueryParserTokenManager</name><argument_list>(<argument><expr><name>CharStream</name> <name>stream</name></expr></argument>)</argument_list></call><block>{
@@ <expr><operator>-</operator><literal type="number">1101</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1068</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>ReInitRounds</name><argument_list>()</argument_list></call>
 <block>{
    <expr><name>int</name> <name>i</name></expr>;
    <expr><name>jjround</name> <operator>=</operator> <literal type="number">0x80000001</literal></expr>;
   <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">66</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
   <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">61</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><name><name>jjrounds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
 }</block>
 
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></block></expr></block></expr></init></decl></decl_stmt>

</unit>
